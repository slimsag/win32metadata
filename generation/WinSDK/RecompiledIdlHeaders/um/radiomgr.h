/*** Autogenerated by WIDL 5.0 from ./radiomgr.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __radiomgr_h__
#define __radiomgr_h__

/* Forward declarations */

#ifndef __IMediaRadioManager_FWD_DEFINED__
#define __IMediaRadioManager_FWD_DEFINED__
typedef interface IMediaRadioManager IMediaRadioManager;
#ifdef __cplusplus
interface IMediaRadioManager;
#endif /* __cplusplus */
#endif

#ifndef __IRadioInstanceCollection_FWD_DEFINED__
#define __IRadioInstanceCollection_FWD_DEFINED__
typedef interface IRadioInstanceCollection IRadioInstanceCollection;
#ifdef __cplusplus
interface IRadioInstanceCollection;
#endif /* __cplusplus */
#endif

#ifndef __IRadioInstance_FWD_DEFINED__
#define __IRadioInstance_FWD_DEFINED__
typedef interface IRadioInstance IRadioInstance;
#ifdef __cplusplus
interface IRadioInstance;
#endif /* __cplusplus */
#endif

#ifndef __IMediaRadioManagerNotifySink_FWD_DEFINED__
#define __IMediaRadioManagerNotifySink_FWD_DEFINED__
typedef interface IMediaRadioManagerNotifySink IMediaRadioManagerNotifySink;
#ifdef __cplusplus
interface IMediaRadioManagerNotifySink;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <oaidl.h>
#include <wtypes.h>

#ifdef __cplusplus
extern "C" {
#endif

//
// Copyright (C) Microsoft Corporation. All rights reserved.
//
#include <winapifamily.h>
#if (NTDDI_VERSION >= NTDDI_WIN8)
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
#ifndef __IMediaRadioManager_FWD_DEFINED__
#define __IMediaRadioManager_FWD_DEFINED__
typedef interface IMediaRadioManager IMediaRadioManager;
#ifdef __cplusplus
interface IMediaRadioManager;
#endif /* __cplusplus */
#endif

#ifndef __IRadioInstanceCollection_FWD_DEFINED__
#define __IRadioInstanceCollection_FWD_DEFINED__
typedef interface IRadioInstanceCollection IRadioInstanceCollection;
#ifdef __cplusplus
interface IRadioInstanceCollection;
#endif /* __cplusplus */
#endif

#ifndef __IRadioInstance_FWD_DEFINED__
#define __IRadioInstance_FWD_DEFINED__
typedef interface IRadioInstance IRadioInstance;
#ifdef __cplusplus
interface IRadioInstance;
#endif /* __cplusplus */
#endif

#ifndef __IMediaRadioManagerNotifySink_FWD_DEFINED__
#define __IMediaRadioManagerNotifySink_FWD_DEFINED__
typedef interface IMediaRadioManagerNotifySink IMediaRadioManagerNotifySink;
#ifdef __cplusplus
interface IMediaRadioManagerNotifySink;
#endif /* __cplusplus */
#endif

typedef enum _DEVICE_RADIO_STATE {
    DRS_RADIO_ON = 0,
    DRS_SW_RADIO_OFF = 1,
    DRS_HW_RADIO_OFF = 2,
    DRS_SW_HW_RADIO_OFF = 3,
    DRS_HW_RADIO_ON_UNCONTROLLABLE = 4,
    DRS_RADIO_INVALID = 5,
    DRS_HW_RADIO_OFF_UNCONTROLLABLE = 6,
    DRS_RADIO_MAX = DRS_HW_RADIO_OFF_UNCONTROLLABLE
} DEVICE_RADIO_STATE;
typedef enum _SYSTEM_RADIO_STATE {
    SRS_RADIO_ENABLED = 0,
    SRS_RADIO_DISABLED = 1
} SYSTEM_RADIO_STATE;
/*****************************************************************************
 * IMediaRadioManager interface
 */
#ifndef __IMediaRadioManager_INTERFACE_DEFINED__
#define __IMediaRadioManager_INTERFACE_DEFINED__

DEFINE_GUID(IID_IMediaRadioManager, 0x6cfdcab5, 0xfc47, 0x42a5, 0x92,0x41, 0x07,0x4b,0x58,0x83,0x0e,0x73);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("6cfdcab5-fc47-42a5-9241-074b58830e73")
IMediaRadioManager : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetRadioInstances(
        IRadioInstanceCollection **ppCollection) = 0;

    virtual HRESULT STDMETHODCALLTYPE OnSystemRadioStateChange(
        SYSTEM_RADIO_STATE sysRadioState,
        UINT32 uTimeoutSec) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IMediaRadioManager, 0x6cfdcab5, 0xfc47, 0x42a5, 0x92,0x41, 0x07,0x4b,0x58,0x83,0x0e,0x73)
#endif
#else
typedef struct IMediaRadioManagerVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IMediaRadioManager *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IMediaRadioManager *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IMediaRadioManager *This);

    /*** IMediaRadioManager methods ***/
    HRESULT (STDMETHODCALLTYPE *GetRadioInstances)(
        IMediaRadioManager *This,
        IRadioInstanceCollection **ppCollection);

    HRESULT (STDMETHODCALLTYPE *OnSystemRadioStateChange)(
        IMediaRadioManager *This,
        SYSTEM_RADIO_STATE sysRadioState,
        UINT32 uTimeoutSec);

    END_INTERFACE
} IMediaRadioManagerVtbl;

interface IMediaRadioManager {
    CONST_VTBL IMediaRadioManagerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IMediaRadioManager_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IMediaRadioManager_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IMediaRadioManager_Release(This) (This)->lpVtbl->Release(This)
/*** IMediaRadioManager methods ***/
#define IMediaRadioManager_GetRadioInstances(This,ppCollection) (This)->lpVtbl->GetRadioInstances(This,ppCollection)
#define IMediaRadioManager_OnSystemRadioStateChange(This,sysRadioState,uTimeoutSec) (This)->lpVtbl->OnSystemRadioStateChange(This,sysRadioState,uTimeoutSec)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IMediaRadioManager_QueryInterface(IMediaRadioManager* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IMediaRadioManager_AddRef(IMediaRadioManager* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IMediaRadioManager_Release(IMediaRadioManager* This) {
    return This->lpVtbl->Release(This);
}
/*** IMediaRadioManager methods ***/
static FORCEINLINE HRESULT IMediaRadioManager_GetRadioInstances(IMediaRadioManager* This,IRadioInstanceCollection **ppCollection) {
    return This->lpVtbl->GetRadioInstances(This,ppCollection);
}
static FORCEINLINE HRESULT IMediaRadioManager_OnSystemRadioStateChange(IMediaRadioManager* This,SYSTEM_RADIO_STATE sysRadioState,UINT32 uTimeoutSec) {
    return This->lpVtbl->OnSystemRadioStateChange(This,sysRadioState,uTimeoutSec);
}
#endif
#endif

#endif


#endif  /* __IMediaRadioManager_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IRadioInstanceCollection interface
 */
#ifndef __IRadioInstanceCollection_INTERFACE_DEFINED__
#define __IRadioInstanceCollection_INTERFACE_DEFINED__

DEFINE_GUID(IID_IRadioInstanceCollection, 0xe5791fae, 0x5665, 0x4e0c, 0x95,0xbe, 0x5f,0xde,0x31,0x64,0x41,0x85);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("e5791fae-5665-4e0c-95be-5fde31644185")
IRadioInstanceCollection : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetCount(
        UINT32 *pcInstance) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetAt(
        UINT32 uIndex,
        IRadioInstance **ppRadioInstance) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IRadioInstanceCollection, 0xe5791fae, 0x5665, 0x4e0c, 0x95,0xbe, 0x5f,0xde,0x31,0x64,0x41,0x85)
#endif
#else
typedef struct IRadioInstanceCollectionVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IRadioInstanceCollection *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IRadioInstanceCollection *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IRadioInstanceCollection *This);

    /*** IRadioInstanceCollection methods ***/
    HRESULT (STDMETHODCALLTYPE *GetCount)(
        IRadioInstanceCollection *This,
        UINT32 *pcInstance);

    HRESULT (STDMETHODCALLTYPE *GetAt)(
        IRadioInstanceCollection *This,
        UINT32 uIndex,
        IRadioInstance **ppRadioInstance);

    END_INTERFACE
} IRadioInstanceCollectionVtbl;

interface IRadioInstanceCollection {
    CONST_VTBL IRadioInstanceCollectionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IRadioInstanceCollection_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IRadioInstanceCollection_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IRadioInstanceCollection_Release(This) (This)->lpVtbl->Release(This)
/*** IRadioInstanceCollection methods ***/
#define IRadioInstanceCollection_GetCount(This,pcInstance) (This)->lpVtbl->GetCount(This,pcInstance)
#define IRadioInstanceCollection_GetAt(This,uIndex,ppRadioInstance) (This)->lpVtbl->GetAt(This,uIndex,ppRadioInstance)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IRadioInstanceCollection_QueryInterface(IRadioInstanceCollection* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IRadioInstanceCollection_AddRef(IRadioInstanceCollection* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IRadioInstanceCollection_Release(IRadioInstanceCollection* This) {
    return This->lpVtbl->Release(This);
}
/*** IRadioInstanceCollection methods ***/
static FORCEINLINE HRESULT IRadioInstanceCollection_GetCount(IRadioInstanceCollection* This,UINT32 *pcInstance) {
    return This->lpVtbl->GetCount(This,pcInstance);
}
static FORCEINLINE HRESULT IRadioInstanceCollection_GetAt(IRadioInstanceCollection* This,UINT32 uIndex,IRadioInstance **ppRadioInstance) {
    return This->lpVtbl->GetAt(This,uIndex,ppRadioInstance);
}
#endif
#endif

#endif


#endif  /* __IRadioInstanceCollection_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IRadioInstance interface
 */
#ifndef __IRadioInstance_INTERFACE_DEFINED__
#define __IRadioInstance_INTERFACE_DEFINED__

DEFINE_GUID(IID_IRadioInstance, 0x70aa1c9e, 0xf2b4, 0x4c61, 0x86,0xd3, 0x6b,0x9f,0xb7,0x5f,0xd1,0xa2);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("70aa1c9e-f2b4-4c61-86d3-6b9fb75fd1a2")
IRadioInstance : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetRadioManagerSignature(
        GUID *pguidSignature) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetInstanceSignature(
        BSTR *pbstrId) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFriendlyName(
        LCID lcid,
        BSTR *pbstrName) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetRadioState(
        DEVICE_RADIO_STATE *pRadioState) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetRadioState(
        DEVICE_RADIO_STATE radioState,
        UINT32 uTimeoutSec) = 0;

    virtual BOOL STDMETHODCALLTYPE IsMultiComm(
        ) = 0;

    virtual BOOL STDMETHODCALLTYPE IsAssociatingDevice(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IRadioInstance, 0x70aa1c9e, 0xf2b4, 0x4c61, 0x86,0xd3, 0x6b,0x9f,0xb7,0x5f,0xd1,0xa2)
#endif
#else
typedef struct IRadioInstanceVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IRadioInstance *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IRadioInstance *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IRadioInstance *This);

    /*** IRadioInstance methods ***/
    HRESULT (STDMETHODCALLTYPE *GetRadioManagerSignature)(
        IRadioInstance *This,
        GUID *pguidSignature);

    HRESULT (STDMETHODCALLTYPE *GetInstanceSignature)(
        IRadioInstance *This,
        BSTR *pbstrId);

    HRESULT (STDMETHODCALLTYPE *GetFriendlyName)(
        IRadioInstance *This,
        LCID lcid,
        BSTR *pbstrName);

    HRESULT (STDMETHODCALLTYPE *GetRadioState)(
        IRadioInstance *This,
        DEVICE_RADIO_STATE *pRadioState);

    HRESULT (STDMETHODCALLTYPE *SetRadioState)(
        IRadioInstance *This,
        DEVICE_RADIO_STATE radioState,
        UINT32 uTimeoutSec);

    BOOL (STDMETHODCALLTYPE *IsMultiComm)(
        IRadioInstance *This);

    BOOL (STDMETHODCALLTYPE *IsAssociatingDevice)(
        IRadioInstance *This);

    END_INTERFACE
} IRadioInstanceVtbl;

interface IRadioInstance {
    CONST_VTBL IRadioInstanceVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IRadioInstance_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IRadioInstance_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IRadioInstance_Release(This) (This)->lpVtbl->Release(This)
/*** IRadioInstance methods ***/
#define IRadioInstance_GetRadioManagerSignature(This,pguidSignature) (This)->lpVtbl->GetRadioManagerSignature(This,pguidSignature)
#define IRadioInstance_GetInstanceSignature(This,pbstrId) (This)->lpVtbl->GetInstanceSignature(This,pbstrId)
#define IRadioInstance_GetFriendlyName(This,lcid,pbstrName) (This)->lpVtbl->GetFriendlyName(This,lcid,pbstrName)
#define IRadioInstance_GetRadioState(This,pRadioState) (This)->lpVtbl->GetRadioState(This,pRadioState)
#define IRadioInstance_SetRadioState(This,radioState,uTimeoutSec) (This)->lpVtbl->SetRadioState(This,radioState,uTimeoutSec)
#define IRadioInstance_IsMultiComm(This) (This)->lpVtbl->IsMultiComm(This)
#define IRadioInstance_IsAssociatingDevice(This) (This)->lpVtbl->IsAssociatingDevice(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IRadioInstance_QueryInterface(IRadioInstance* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IRadioInstance_AddRef(IRadioInstance* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IRadioInstance_Release(IRadioInstance* This) {
    return This->lpVtbl->Release(This);
}
/*** IRadioInstance methods ***/
static FORCEINLINE HRESULT IRadioInstance_GetRadioManagerSignature(IRadioInstance* This,GUID *pguidSignature) {
    return This->lpVtbl->GetRadioManagerSignature(This,pguidSignature);
}
static FORCEINLINE HRESULT IRadioInstance_GetInstanceSignature(IRadioInstance* This,BSTR *pbstrId) {
    return This->lpVtbl->GetInstanceSignature(This,pbstrId);
}
static FORCEINLINE HRESULT IRadioInstance_GetFriendlyName(IRadioInstance* This,LCID lcid,BSTR *pbstrName) {
    return This->lpVtbl->GetFriendlyName(This,lcid,pbstrName);
}
static FORCEINLINE HRESULT IRadioInstance_GetRadioState(IRadioInstance* This,DEVICE_RADIO_STATE *pRadioState) {
    return This->lpVtbl->GetRadioState(This,pRadioState);
}
static FORCEINLINE HRESULT IRadioInstance_SetRadioState(IRadioInstance* This,DEVICE_RADIO_STATE radioState,UINT32 uTimeoutSec) {
    return This->lpVtbl->SetRadioState(This,radioState,uTimeoutSec);
}
static FORCEINLINE BOOL IRadioInstance_IsMultiComm(IRadioInstance* This) {
    return This->lpVtbl->IsMultiComm(This);
}
static FORCEINLINE BOOL IRadioInstance_IsAssociatingDevice(IRadioInstance* This) {
    return This->lpVtbl->IsAssociatingDevice(This);
}
#endif
#endif

#endif


#endif  /* __IRadioInstance_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IMediaRadioManagerNotifySink interface
 */
#ifndef __IMediaRadioManagerNotifySink_INTERFACE_DEFINED__
#define __IMediaRadioManagerNotifySink_INTERFACE_DEFINED__

DEFINE_GUID(IID_IMediaRadioManagerNotifySink, 0x89d81f5f, 0xc147, 0x49ed, 0xa1,0x1c, 0x77,0xb2,0x0c,0x31,0xe7,0xc9);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("89d81f5f-c147-49ed-a11c-77b20c31e7c9")
IMediaRadioManagerNotifySink : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE OnInstanceAdd(
        IRadioInstance *pRadioInstance) = 0;

    virtual HRESULT STDMETHODCALLTYPE OnInstanceRemove(
        BSTR bstrRadioInstanceId) = 0;

    virtual HRESULT STDMETHODCALLTYPE OnInstanceRadioChange(
        BSTR bstrRadioInstanceId,
        DEVICE_RADIO_STATE radioState) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IMediaRadioManagerNotifySink, 0x89d81f5f, 0xc147, 0x49ed, 0xa1,0x1c, 0x77,0xb2,0x0c,0x31,0xe7,0xc9)
#endif
#else
typedef struct IMediaRadioManagerNotifySinkVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IMediaRadioManagerNotifySink *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IMediaRadioManagerNotifySink *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IMediaRadioManagerNotifySink *This);

    /*** IMediaRadioManagerNotifySink methods ***/
    HRESULT (STDMETHODCALLTYPE *OnInstanceAdd)(
        IMediaRadioManagerNotifySink *This,
        IRadioInstance *pRadioInstance);

    HRESULT (STDMETHODCALLTYPE *OnInstanceRemove)(
        IMediaRadioManagerNotifySink *This,
        BSTR bstrRadioInstanceId);

    HRESULT (STDMETHODCALLTYPE *OnInstanceRadioChange)(
        IMediaRadioManagerNotifySink *This,
        BSTR bstrRadioInstanceId,
        DEVICE_RADIO_STATE radioState);

    END_INTERFACE
} IMediaRadioManagerNotifySinkVtbl;

interface IMediaRadioManagerNotifySink {
    CONST_VTBL IMediaRadioManagerNotifySinkVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IMediaRadioManagerNotifySink_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IMediaRadioManagerNotifySink_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IMediaRadioManagerNotifySink_Release(This) (This)->lpVtbl->Release(This)
/*** IMediaRadioManagerNotifySink methods ***/
#define IMediaRadioManagerNotifySink_OnInstanceAdd(This,pRadioInstance) (This)->lpVtbl->OnInstanceAdd(This,pRadioInstance)
#define IMediaRadioManagerNotifySink_OnInstanceRemove(This,bstrRadioInstanceId) (This)->lpVtbl->OnInstanceRemove(This,bstrRadioInstanceId)
#define IMediaRadioManagerNotifySink_OnInstanceRadioChange(This,bstrRadioInstanceId,radioState) (This)->lpVtbl->OnInstanceRadioChange(This,bstrRadioInstanceId,radioState)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IMediaRadioManagerNotifySink_QueryInterface(IMediaRadioManagerNotifySink* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IMediaRadioManagerNotifySink_AddRef(IMediaRadioManagerNotifySink* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IMediaRadioManagerNotifySink_Release(IMediaRadioManagerNotifySink* This) {
    return This->lpVtbl->Release(This);
}
/*** IMediaRadioManagerNotifySink methods ***/
static FORCEINLINE HRESULT IMediaRadioManagerNotifySink_OnInstanceAdd(IMediaRadioManagerNotifySink* This,IRadioInstance *pRadioInstance) {
    return This->lpVtbl->OnInstanceAdd(This,pRadioInstance);
}
static FORCEINLINE HRESULT IMediaRadioManagerNotifySink_OnInstanceRemove(IMediaRadioManagerNotifySink* This,BSTR bstrRadioInstanceId) {
    return This->lpVtbl->OnInstanceRemove(This,bstrRadioInstanceId);
}
static FORCEINLINE HRESULT IMediaRadioManagerNotifySink_OnInstanceRadioChange(IMediaRadioManagerNotifySink* This,BSTR bstrRadioInstanceId,DEVICE_RADIO_STATE radioState) {
    return This->lpVtbl->OnInstanceRadioChange(This,bstrRadioInstanceId,radioState);
}
#endif
#endif

#endif


#endif  /* __IMediaRadioManagerNotifySink_INTERFACE_DEFINED__ */

#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) */
#endif // (NTDDI >= NTDDI_WIN8)
/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __radiomgr_h__ */
