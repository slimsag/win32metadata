/*** Autogenerated by WIDL 5.0 from ./fsrmpipeline.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __fsrmpipeline_h__
#define __fsrmpipeline_h__

/* Forward declarations */

#ifndef __IFsrmPropertyDefinition_FWD_DEFINED__
#define __IFsrmPropertyDefinition_FWD_DEFINED__
typedef interface IFsrmPropertyDefinition IFsrmPropertyDefinition;
#ifdef __cplusplus
interface IFsrmPropertyDefinition;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmPropertyDefinition2_FWD_DEFINED__
#define __IFsrmPropertyDefinition2_FWD_DEFINED__
typedef interface IFsrmPropertyDefinition2 IFsrmPropertyDefinition2;
#ifdef __cplusplus
interface IFsrmPropertyDefinition2;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmPropertyDefinitionValue_FWD_DEFINED__
#define __IFsrmPropertyDefinitionValue_FWD_DEFINED__
typedef interface IFsrmPropertyDefinitionValue IFsrmPropertyDefinitionValue;
#ifdef __cplusplus
interface IFsrmPropertyDefinitionValue;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmProperty_FWD_DEFINED__
#define __IFsrmProperty_FWD_DEFINED__
typedef interface IFsrmProperty IFsrmProperty;
#ifdef __cplusplus
interface IFsrmProperty;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmRule_FWD_DEFINED__
#define __IFsrmRule_FWD_DEFINED__
typedef interface IFsrmRule IFsrmRule;
#ifdef __cplusplus
interface IFsrmRule;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmClassificationRule_FWD_DEFINED__
#define __IFsrmClassificationRule_FWD_DEFINED__
typedef interface IFsrmClassificationRule IFsrmClassificationRule;
#ifdef __cplusplus
interface IFsrmClassificationRule;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmPipelineModuleDefinition_FWD_DEFINED__
#define __IFsrmPipelineModuleDefinition_FWD_DEFINED__
typedef interface IFsrmPipelineModuleDefinition IFsrmPipelineModuleDefinition;
#ifdef __cplusplus
interface IFsrmPipelineModuleDefinition;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmClassifierModuleDefinition_FWD_DEFINED__
#define __IFsrmClassifierModuleDefinition_FWD_DEFINED__
typedef interface IFsrmClassifierModuleDefinition IFsrmClassifierModuleDefinition;
#ifdef __cplusplus
interface IFsrmClassifierModuleDefinition;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmStorageModuleDefinition_FWD_DEFINED__
#define __IFsrmStorageModuleDefinition_FWD_DEFINED__
typedef interface IFsrmStorageModuleDefinition IFsrmStorageModuleDefinition;
#ifdef __cplusplus
interface IFsrmStorageModuleDefinition;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmClassificationManager_FWD_DEFINED__
#define __IFsrmClassificationManager_FWD_DEFINED__
typedef interface IFsrmClassificationManager IFsrmClassificationManager;
#ifdef __cplusplus
interface IFsrmClassificationManager;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmClassificationManager2_FWD_DEFINED__
#define __IFsrmClassificationManager2_FWD_DEFINED__
typedef interface IFsrmClassificationManager2 IFsrmClassificationManager2;
#ifdef __cplusplus
interface IFsrmClassificationManager2;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmPropertyBag_FWD_DEFINED__
#define __IFsrmPropertyBag_FWD_DEFINED__
typedef interface IFsrmPropertyBag IFsrmPropertyBag;
#ifdef __cplusplus
interface IFsrmPropertyBag;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmPropertyBag2_FWD_DEFINED__
#define __IFsrmPropertyBag2_FWD_DEFINED__
typedef interface IFsrmPropertyBag2 IFsrmPropertyBag2;
#ifdef __cplusplus
interface IFsrmPropertyBag2;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmPipelineModuleImplementation_FWD_DEFINED__
#define __IFsrmPipelineModuleImplementation_FWD_DEFINED__
typedef interface IFsrmPipelineModuleImplementation IFsrmPipelineModuleImplementation;
#ifdef __cplusplus
interface IFsrmPipelineModuleImplementation;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmClassifierModuleImplementation_FWD_DEFINED__
#define __IFsrmClassifierModuleImplementation_FWD_DEFINED__
typedef interface IFsrmClassifierModuleImplementation IFsrmClassifierModuleImplementation;
#ifdef __cplusplus
interface IFsrmClassifierModuleImplementation;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmStorageModuleImplementation_FWD_DEFINED__
#define __IFsrmStorageModuleImplementation_FWD_DEFINED__
typedef interface IFsrmStorageModuleImplementation IFsrmStorageModuleImplementation;
#ifdef __cplusplus
interface IFsrmStorageModuleImplementation;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmPipelineModuleConnector_FWD_DEFINED__
#define __IFsrmPipelineModuleConnector_FWD_DEFINED__
typedef interface IFsrmPipelineModuleConnector IFsrmPipelineModuleConnector;
#ifdef __cplusplus
interface IFsrmPipelineModuleConnector;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <oaidl.h>
#include <fsrm.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <winapifamily.h>
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
#ifndef __IFsrmPropertyDefinition_FWD_DEFINED__
#define __IFsrmPropertyDefinition_FWD_DEFINED__
typedef interface IFsrmPropertyDefinition IFsrmPropertyDefinition;
#ifdef __cplusplus
interface IFsrmPropertyDefinition;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmPropertyDefinition2_FWD_DEFINED__
#define __IFsrmPropertyDefinition2_FWD_DEFINED__
typedef interface IFsrmPropertyDefinition2 IFsrmPropertyDefinition2;
#ifdef __cplusplus
interface IFsrmPropertyDefinition2;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmPropertyDefinitionValue_FWD_DEFINED__
#define __IFsrmPropertyDefinitionValue_FWD_DEFINED__
typedef interface IFsrmPropertyDefinitionValue IFsrmPropertyDefinitionValue;
#ifdef __cplusplus
interface IFsrmPropertyDefinitionValue;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmProperty_FWD_DEFINED__
#define __IFsrmProperty_FWD_DEFINED__
typedef interface IFsrmProperty IFsrmProperty;
#ifdef __cplusplus
interface IFsrmProperty;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmRule_FWD_DEFINED__
#define __IFsrmRule_FWD_DEFINED__
typedef interface IFsrmRule IFsrmRule;
#ifdef __cplusplus
interface IFsrmRule;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmClassificationRule_FWD_DEFINED__
#define __IFsrmClassificationRule_FWD_DEFINED__
typedef interface IFsrmClassificationRule IFsrmClassificationRule;
#ifdef __cplusplus
interface IFsrmClassificationRule;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmPipelineModuleDefinition_FWD_DEFINED__
#define __IFsrmPipelineModuleDefinition_FWD_DEFINED__
typedef interface IFsrmPipelineModuleDefinition IFsrmPipelineModuleDefinition;
#ifdef __cplusplus
interface IFsrmPipelineModuleDefinition;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmClassifierModuleDefinition_FWD_DEFINED__
#define __IFsrmClassifierModuleDefinition_FWD_DEFINED__
typedef interface IFsrmClassifierModuleDefinition IFsrmClassifierModuleDefinition;
#ifdef __cplusplus
interface IFsrmClassifierModuleDefinition;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmStorageModuleDefinition_FWD_DEFINED__
#define __IFsrmStorageModuleDefinition_FWD_DEFINED__
typedef interface IFsrmStorageModuleDefinition IFsrmStorageModuleDefinition;
#ifdef __cplusplus
interface IFsrmStorageModuleDefinition;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmClassificationManager_FWD_DEFINED__
#define __IFsrmClassificationManager_FWD_DEFINED__
typedef interface IFsrmClassificationManager IFsrmClassificationManager;
#ifdef __cplusplus
interface IFsrmClassificationManager;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmClassificationManager2_FWD_DEFINED__
#define __IFsrmClassificationManager2_FWD_DEFINED__
typedef interface IFsrmClassificationManager2 IFsrmClassificationManager2;
#ifdef __cplusplus
interface IFsrmClassificationManager2;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmPropertyBag_FWD_DEFINED__
#define __IFsrmPropertyBag_FWD_DEFINED__
typedef interface IFsrmPropertyBag IFsrmPropertyBag;
#ifdef __cplusplus
interface IFsrmPropertyBag;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmPipelineModuleImplementation_FWD_DEFINED__
#define __IFsrmPipelineModuleImplementation_FWD_DEFINED__
typedef interface IFsrmPipelineModuleImplementation IFsrmPipelineModuleImplementation;
#ifdef __cplusplus
interface IFsrmPipelineModuleImplementation;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmClassifierModuleImplementation_FWD_DEFINED__
#define __IFsrmClassifierModuleImplementation_FWD_DEFINED__
typedef interface IFsrmClassifierModuleImplementation IFsrmClassifierModuleImplementation;
#ifdef __cplusplus
interface IFsrmClassifierModuleImplementation;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmStorageModuleImplementation_FWD_DEFINED__
#define __IFsrmStorageModuleImplementation_FWD_DEFINED__
typedef interface IFsrmStorageModuleImplementation IFsrmStorageModuleImplementation;
#ifdef __cplusplus
interface IFsrmStorageModuleImplementation;
#endif /* __cplusplus */
#endif

#ifndef __IFsrmPipelineModuleConnector_FWD_DEFINED__
#define __IFsrmPipelineModuleConnector_FWD_DEFINED__
typedef interface IFsrmPipelineModuleConnector IFsrmPipelineModuleConnector;
#ifdef __cplusplus
interface IFsrmPipelineModuleConnector;
#endif /* __cplusplus */
#endif

#define FSRM_DISPID_PROPERTY_DEFINITION (FSRM_DISPID_FEATURE_CLASSIFICATION | 0x100000)

#define FSRM_DISPID_PROPERTY_DEFINITION2 (FSRM_DISPID_PROPERTY_DEFINITION | 0x10000)

#define FSRM_DISPID_PROPERTY (FSRM_DISPID_FEATURE_CLASSIFICATION | 0x200000)

#define FSRM_DISPID_RULE (FSRM_DISPID_FEATURE_CLASSIFICATION | 0x300000)

#define FSRM_DISPID_CLASSIFICATION_RULE (FSRM_DISPID_RULE | 0x10000)

#define FSRM_DISPID_EXPIRATION_RULE (FSRM_DISPID_RULE | 0x20000)

#define FSRM_DISPID_PIPELINE_MODULE_DEFINITION (FSRM_DISPID_FEATURE_CLASSIFICATION | 0x400000)

#define FSRM_DISPID_CLASSIFIER_MODULE_DEFINITION (FSRM_DISPID_PIPELINE_MODULE_DEFINITION | 0x10000)

#define FSRM_DISPID_STORAGE_MODULE_DEFINITION (FSRM_DISPID_PIPELINE_MODULE_DEFINITION | 0x20000)

#define FSRM_DISPID_CLASSIFICATION_MANAGER (FSRM_DISPID_FEATURE_CLASSIFICATION | 0x500000)

#define FSRM_DISPID_CLASSIFICATION_MANAGER2 (FSRM_DISPID_CLASSIFICATION_MANAGER | 0x10000)

#define FSRM_DISPID_CLASSIFICATION_EVENTS (FSRM_DISPID_FEATURE_CLASSIFICATION | 0x600000)

#define FSRM_DISPID_PROPERTY_DEFINITION_VALUE (FSRM_DISPID_FEATURE_CLASSIFICATION | 0x700000)

#define FSRM_DISPID_PROPERTY_BAG (FSRM_DISPID_FEATURE_PIPELINE | 0x100000)

#define FSRM_DISPID_PROPERTY_BAG2 (FSRM_DISPID_PROPERTY_BAG | 0x10000)

#define FSRM_DISPID_PIPELINE_MODULE_IMPLEMENTATION (FSRM_DISPID_FEATURE_PIPELINE | 0x200000)

#define FSRM_DISPID_CLASSIFIER_MODULE_IMPLEMENTATION (FSRM_DISPID_PIPELINE_MODULE_IMPLEMENTATION | 0x10000)

#define FSRM_DISPID_STORAGE_MODULE_IMPLEMENTATION (FSRM_DISPID_PIPELINE_MODULE_IMPLEMENTATION | 0x20000)

#define FSRM_DISPID_PIPELINE_MODULE_CONNECTOR (FSRM_DISPID_FEATURE_PIPELINE | 0x300000)

#define FsrmMaxNumberPropertyDefinitions (100)

/*****************************************************************************
 * IFsrmPropertyDefinition interface
 */
#ifndef __IFsrmPropertyDefinition_INTERFACE_DEFINED__
#define __IFsrmPropertyDefinition_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFsrmPropertyDefinition, 0xede0150f, 0xe9a3, 0x419c, 0x87,0x7c, 0x01,0xfe,0x5d,0x24,0xc5,0xd3);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ede0150f-e9a3-419c-877c-01fe5d24c5d3")
IFsrmPropertyDefinition : public IFsrmObject
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *name) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR name) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Type(
        FsrmPropertyDefinitionType *type) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Type(
        FsrmPropertyDefinitionType type) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PossibleValues(
        SAFEARRAY **possibleValues) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_PossibleValues(
        SAFEARRAY *possibleValues) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ValueDescriptions(
        SAFEARRAY **valueDescriptions) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ValueDescriptions(
        SAFEARRAY *valueDescriptions) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Parameters(
        SAFEARRAY **parameters) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Parameters(
        SAFEARRAY *parameters) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFsrmPropertyDefinition, 0xede0150f, 0xe9a3, 0x419c, 0x87,0x7c, 0x01,0xfe,0x5d,0x24,0xc5,0xd3)
#endif
#else
typedef struct IFsrmPropertyDefinitionVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFsrmPropertyDefinition *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFsrmPropertyDefinition *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFsrmPropertyDefinition *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFsrmPropertyDefinition *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFsrmPropertyDefinition *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFsrmPropertyDefinition *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFsrmPropertyDefinition *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFsrmObject methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Id)(
        IFsrmPropertyDefinition *This,
        FSRM_OBJECT_ID *id);

    HRESULT (STDMETHODCALLTYPE *get_Description)(
        IFsrmPropertyDefinition *This,
        BSTR *description);

    HRESULT (STDMETHODCALLTYPE *put_Description)(
        IFsrmPropertyDefinition *This,
        BSTR description);

    HRESULT (STDMETHODCALLTYPE *Delete)(
        IFsrmPropertyDefinition *This);

    HRESULT (STDMETHODCALLTYPE *Commit)(
        IFsrmPropertyDefinition *This);

    /*** IFsrmPropertyDefinition methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IFsrmPropertyDefinition *This,
        BSTR *name);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IFsrmPropertyDefinition *This,
        BSTR name);

    HRESULT (STDMETHODCALLTYPE *get_Type)(
        IFsrmPropertyDefinition *This,
        FsrmPropertyDefinitionType *type);

    HRESULT (STDMETHODCALLTYPE *put_Type)(
        IFsrmPropertyDefinition *This,
        FsrmPropertyDefinitionType type);

    HRESULT (STDMETHODCALLTYPE *get_PossibleValues)(
        IFsrmPropertyDefinition *This,
        SAFEARRAY **possibleValues);

    HRESULT (STDMETHODCALLTYPE *put_PossibleValues)(
        IFsrmPropertyDefinition *This,
        SAFEARRAY *possibleValues);

    HRESULT (STDMETHODCALLTYPE *get_ValueDescriptions)(
        IFsrmPropertyDefinition *This,
        SAFEARRAY **valueDescriptions);

    HRESULT (STDMETHODCALLTYPE *put_ValueDescriptions)(
        IFsrmPropertyDefinition *This,
        SAFEARRAY *valueDescriptions);

    HRESULT (STDMETHODCALLTYPE *get_Parameters)(
        IFsrmPropertyDefinition *This,
        SAFEARRAY **parameters);

    HRESULT (STDMETHODCALLTYPE *put_Parameters)(
        IFsrmPropertyDefinition *This,
        SAFEARRAY *parameters);

    END_INTERFACE
} IFsrmPropertyDefinitionVtbl;

interface IFsrmPropertyDefinition {
    CONST_VTBL IFsrmPropertyDefinitionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFsrmPropertyDefinition_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFsrmPropertyDefinition_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFsrmPropertyDefinition_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFsrmPropertyDefinition_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFsrmPropertyDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFsrmPropertyDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFsrmPropertyDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFsrmObject methods ***/
#define IFsrmPropertyDefinition_get_Id(This,id) (This)->lpVtbl->get_Id(This,id)
#define IFsrmPropertyDefinition_get_Description(This,description) (This)->lpVtbl->get_Description(This,description)
#define IFsrmPropertyDefinition_put_Description(This,description) (This)->lpVtbl->put_Description(This,description)
#define IFsrmPropertyDefinition_Delete(This) (This)->lpVtbl->Delete(This)
#define IFsrmPropertyDefinition_Commit(This) (This)->lpVtbl->Commit(This)
/*** IFsrmPropertyDefinition methods ***/
#define IFsrmPropertyDefinition_get_Name(This,name) (This)->lpVtbl->get_Name(This,name)
#define IFsrmPropertyDefinition_put_Name(This,name) (This)->lpVtbl->put_Name(This,name)
#define IFsrmPropertyDefinition_get_Type(This,type) (This)->lpVtbl->get_Type(This,type)
#define IFsrmPropertyDefinition_put_Type(This,type) (This)->lpVtbl->put_Type(This,type)
#define IFsrmPropertyDefinition_get_PossibleValues(This,possibleValues) (This)->lpVtbl->get_PossibleValues(This,possibleValues)
#define IFsrmPropertyDefinition_put_PossibleValues(This,possibleValues) (This)->lpVtbl->put_PossibleValues(This,possibleValues)
#define IFsrmPropertyDefinition_get_ValueDescriptions(This,valueDescriptions) (This)->lpVtbl->get_ValueDescriptions(This,valueDescriptions)
#define IFsrmPropertyDefinition_put_ValueDescriptions(This,valueDescriptions) (This)->lpVtbl->put_ValueDescriptions(This,valueDescriptions)
#define IFsrmPropertyDefinition_get_Parameters(This,parameters) (This)->lpVtbl->get_Parameters(This,parameters)
#define IFsrmPropertyDefinition_put_Parameters(This,parameters) (This)->lpVtbl->put_Parameters(This,parameters)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IFsrmPropertyDefinition_QueryInterface(IFsrmPropertyDefinition* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IFsrmPropertyDefinition_AddRef(IFsrmPropertyDefinition* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IFsrmPropertyDefinition_Release(IFsrmPropertyDefinition* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IFsrmPropertyDefinition_GetTypeInfoCount(IFsrmPropertyDefinition* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition_GetTypeInfo(IFsrmPropertyDefinition* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition_GetIDsOfNames(IFsrmPropertyDefinition* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition_Invoke(IFsrmPropertyDefinition* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFsrmObject methods ***/
static FORCEINLINE HRESULT IFsrmPropertyDefinition_get_Id(IFsrmPropertyDefinition* This,FSRM_OBJECT_ID *id) {
    return This->lpVtbl->get_Id(This,id);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition_get_Description(IFsrmPropertyDefinition* This,BSTR *description) {
    return This->lpVtbl->get_Description(This,description);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition_put_Description(IFsrmPropertyDefinition* This,BSTR description) {
    return This->lpVtbl->put_Description(This,description);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition_Delete(IFsrmPropertyDefinition* This) {
    return This->lpVtbl->Delete(This);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition_Commit(IFsrmPropertyDefinition* This) {
    return This->lpVtbl->Commit(This);
}
/*** IFsrmPropertyDefinition methods ***/
static FORCEINLINE HRESULT IFsrmPropertyDefinition_get_Name(IFsrmPropertyDefinition* This,BSTR *name) {
    return This->lpVtbl->get_Name(This,name);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition_put_Name(IFsrmPropertyDefinition* This,BSTR name) {
    return This->lpVtbl->put_Name(This,name);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition_get_Type(IFsrmPropertyDefinition* This,FsrmPropertyDefinitionType *type) {
    return This->lpVtbl->get_Type(This,type);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition_put_Type(IFsrmPropertyDefinition* This,FsrmPropertyDefinitionType type) {
    return This->lpVtbl->put_Type(This,type);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition_get_PossibleValues(IFsrmPropertyDefinition* This,SAFEARRAY **possibleValues) {
    return This->lpVtbl->get_PossibleValues(This,possibleValues);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition_put_PossibleValues(IFsrmPropertyDefinition* This,SAFEARRAY *possibleValues) {
    return This->lpVtbl->put_PossibleValues(This,possibleValues);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition_get_ValueDescriptions(IFsrmPropertyDefinition* This,SAFEARRAY **valueDescriptions) {
    return This->lpVtbl->get_ValueDescriptions(This,valueDescriptions);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition_put_ValueDescriptions(IFsrmPropertyDefinition* This,SAFEARRAY *valueDescriptions) {
    return This->lpVtbl->put_ValueDescriptions(This,valueDescriptions);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition_get_Parameters(IFsrmPropertyDefinition* This,SAFEARRAY **parameters) {
    return This->lpVtbl->get_Parameters(This,parameters);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition_put_Parameters(IFsrmPropertyDefinition* This,SAFEARRAY *parameters) {
    return This->lpVtbl->put_Parameters(This,parameters);
}
#endif
#endif

#endif


#endif  /* __IFsrmPropertyDefinition_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFsrmPropertyDefinition2 interface
 */
#ifndef __IFsrmPropertyDefinition2_INTERFACE_DEFINED__
#define __IFsrmPropertyDefinition2_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFsrmPropertyDefinition2, 0x47782152, 0xd16c, 0x4229, 0xb4,0xe1, 0x0d,0xdf,0xe3,0x08,0xb9,0xf6);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("47782152-d16c-4229-b4e1-0ddfe308b9f6")
IFsrmPropertyDefinition2 : public IFsrmPropertyDefinition
{
    virtual HRESULT STDMETHODCALLTYPE get_PropertyDefinitionFlags(
        LONG *propertyDefinitionFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DisplayName(
        BSTR *name) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_DisplayName(
        BSTR name) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_AppliesTo(
        LONG *appliesTo) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ValueDefinitions(
        IFsrmCollection **valueDefinitions) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFsrmPropertyDefinition2, 0x47782152, 0xd16c, 0x4229, 0xb4,0xe1, 0x0d,0xdf,0xe3,0x08,0xb9,0xf6)
#endif
#else
typedef struct IFsrmPropertyDefinition2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFsrmPropertyDefinition2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFsrmPropertyDefinition2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFsrmPropertyDefinition2 *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFsrmPropertyDefinition2 *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFsrmPropertyDefinition2 *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFsrmPropertyDefinition2 *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFsrmPropertyDefinition2 *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFsrmObject methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Id)(
        IFsrmPropertyDefinition2 *This,
        FSRM_OBJECT_ID *id);

    HRESULT (STDMETHODCALLTYPE *get_Description)(
        IFsrmPropertyDefinition2 *This,
        BSTR *description);

    HRESULT (STDMETHODCALLTYPE *put_Description)(
        IFsrmPropertyDefinition2 *This,
        BSTR description);

    HRESULT (STDMETHODCALLTYPE *Delete)(
        IFsrmPropertyDefinition2 *This);

    HRESULT (STDMETHODCALLTYPE *Commit)(
        IFsrmPropertyDefinition2 *This);

    /*** IFsrmPropertyDefinition methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IFsrmPropertyDefinition2 *This,
        BSTR *name);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IFsrmPropertyDefinition2 *This,
        BSTR name);

    HRESULT (STDMETHODCALLTYPE *get_Type)(
        IFsrmPropertyDefinition2 *This,
        FsrmPropertyDefinitionType *type);

    HRESULT (STDMETHODCALLTYPE *put_Type)(
        IFsrmPropertyDefinition2 *This,
        FsrmPropertyDefinitionType type);

    HRESULT (STDMETHODCALLTYPE *get_PossibleValues)(
        IFsrmPropertyDefinition2 *This,
        SAFEARRAY **possibleValues);

    HRESULT (STDMETHODCALLTYPE *put_PossibleValues)(
        IFsrmPropertyDefinition2 *This,
        SAFEARRAY *possibleValues);

    HRESULT (STDMETHODCALLTYPE *get_ValueDescriptions)(
        IFsrmPropertyDefinition2 *This,
        SAFEARRAY **valueDescriptions);

    HRESULT (STDMETHODCALLTYPE *put_ValueDescriptions)(
        IFsrmPropertyDefinition2 *This,
        SAFEARRAY *valueDescriptions);

    HRESULT (STDMETHODCALLTYPE *get_Parameters)(
        IFsrmPropertyDefinition2 *This,
        SAFEARRAY **parameters);

    HRESULT (STDMETHODCALLTYPE *put_Parameters)(
        IFsrmPropertyDefinition2 *This,
        SAFEARRAY *parameters);

    /*** IFsrmPropertyDefinition2 methods ***/
    HRESULT (STDMETHODCALLTYPE *get_PropertyDefinitionFlags)(
        IFsrmPropertyDefinition2 *This,
        LONG *propertyDefinitionFlags);

    HRESULT (STDMETHODCALLTYPE *get_DisplayName)(
        IFsrmPropertyDefinition2 *This,
        BSTR *name);

    HRESULT (STDMETHODCALLTYPE *put_DisplayName)(
        IFsrmPropertyDefinition2 *This,
        BSTR name);

    HRESULT (STDMETHODCALLTYPE *get_AppliesTo)(
        IFsrmPropertyDefinition2 *This,
        LONG *appliesTo);

    HRESULT (STDMETHODCALLTYPE *get_ValueDefinitions)(
        IFsrmPropertyDefinition2 *This,
        IFsrmCollection **valueDefinitions);

    END_INTERFACE
} IFsrmPropertyDefinition2Vtbl;

interface IFsrmPropertyDefinition2 {
    CONST_VTBL IFsrmPropertyDefinition2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFsrmPropertyDefinition2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFsrmPropertyDefinition2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFsrmPropertyDefinition2_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFsrmPropertyDefinition2_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFsrmPropertyDefinition2_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFsrmPropertyDefinition2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFsrmPropertyDefinition2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFsrmObject methods ***/
#define IFsrmPropertyDefinition2_get_Id(This,id) (This)->lpVtbl->get_Id(This,id)
#define IFsrmPropertyDefinition2_get_Description(This,description) (This)->lpVtbl->get_Description(This,description)
#define IFsrmPropertyDefinition2_put_Description(This,description) (This)->lpVtbl->put_Description(This,description)
#define IFsrmPropertyDefinition2_Delete(This) (This)->lpVtbl->Delete(This)
#define IFsrmPropertyDefinition2_Commit(This) (This)->lpVtbl->Commit(This)
/*** IFsrmPropertyDefinition methods ***/
#define IFsrmPropertyDefinition2_get_Name(This,name) (This)->lpVtbl->get_Name(This,name)
#define IFsrmPropertyDefinition2_put_Name(This,name) (This)->lpVtbl->put_Name(This,name)
#define IFsrmPropertyDefinition2_get_Type(This,type) (This)->lpVtbl->get_Type(This,type)
#define IFsrmPropertyDefinition2_put_Type(This,type) (This)->lpVtbl->put_Type(This,type)
#define IFsrmPropertyDefinition2_get_PossibleValues(This,possibleValues) (This)->lpVtbl->get_PossibleValues(This,possibleValues)
#define IFsrmPropertyDefinition2_put_PossibleValues(This,possibleValues) (This)->lpVtbl->put_PossibleValues(This,possibleValues)
#define IFsrmPropertyDefinition2_get_ValueDescriptions(This,valueDescriptions) (This)->lpVtbl->get_ValueDescriptions(This,valueDescriptions)
#define IFsrmPropertyDefinition2_put_ValueDescriptions(This,valueDescriptions) (This)->lpVtbl->put_ValueDescriptions(This,valueDescriptions)
#define IFsrmPropertyDefinition2_get_Parameters(This,parameters) (This)->lpVtbl->get_Parameters(This,parameters)
#define IFsrmPropertyDefinition2_put_Parameters(This,parameters) (This)->lpVtbl->put_Parameters(This,parameters)
/*** IFsrmPropertyDefinition2 methods ***/
#define IFsrmPropertyDefinition2_get_PropertyDefinitionFlags(This,propertyDefinitionFlags) (This)->lpVtbl->get_PropertyDefinitionFlags(This,propertyDefinitionFlags)
#define IFsrmPropertyDefinition2_get_DisplayName(This,name) (This)->lpVtbl->get_DisplayName(This,name)
#define IFsrmPropertyDefinition2_put_DisplayName(This,name) (This)->lpVtbl->put_DisplayName(This,name)
#define IFsrmPropertyDefinition2_get_AppliesTo(This,appliesTo) (This)->lpVtbl->get_AppliesTo(This,appliesTo)
#define IFsrmPropertyDefinition2_get_ValueDefinitions(This,valueDefinitions) (This)->lpVtbl->get_ValueDefinitions(This,valueDefinitions)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_QueryInterface(IFsrmPropertyDefinition2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IFsrmPropertyDefinition2_AddRef(IFsrmPropertyDefinition2* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IFsrmPropertyDefinition2_Release(IFsrmPropertyDefinition2* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_GetTypeInfoCount(IFsrmPropertyDefinition2* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_GetTypeInfo(IFsrmPropertyDefinition2* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_GetIDsOfNames(IFsrmPropertyDefinition2* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_Invoke(IFsrmPropertyDefinition2* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFsrmObject methods ***/
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_get_Id(IFsrmPropertyDefinition2* This,FSRM_OBJECT_ID *id) {
    return This->lpVtbl->get_Id(This,id);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_get_Description(IFsrmPropertyDefinition2* This,BSTR *description) {
    return This->lpVtbl->get_Description(This,description);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_put_Description(IFsrmPropertyDefinition2* This,BSTR description) {
    return This->lpVtbl->put_Description(This,description);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_Delete(IFsrmPropertyDefinition2* This) {
    return This->lpVtbl->Delete(This);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_Commit(IFsrmPropertyDefinition2* This) {
    return This->lpVtbl->Commit(This);
}
/*** IFsrmPropertyDefinition methods ***/
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_get_Name(IFsrmPropertyDefinition2* This,BSTR *name) {
    return This->lpVtbl->get_Name(This,name);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_put_Name(IFsrmPropertyDefinition2* This,BSTR name) {
    return This->lpVtbl->put_Name(This,name);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_get_Type(IFsrmPropertyDefinition2* This,FsrmPropertyDefinitionType *type) {
    return This->lpVtbl->get_Type(This,type);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_put_Type(IFsrmPropertyDefinition2* This,FsrmPropertyDefinitionType type) {
    return This->lpVtbl->put_Type(This,type);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_get_PossibleValues(IFsrmPropertyDefinition2* This,SAFEARRAY **possibleValues) {
    return This->lpVtbl->get_PossibleValues(This,possibleValues);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_put_PossibleValues(IFsrmPropertyDefinition2* This,SAFEARRAY *possibleValues) {
    return This->lpVtbl->put_PossibleValues(This,possibleValues);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_get_ValueDescriptions(IFsrmPropertyDefinition2* This,SAFEARRAY **valueDescriptions) {
    return This->lpVtbl->get_ValueDescriptions(This,valueDescriptions);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_put_ValueDescriptions(IFsrmPropertyDefinition2* This,SAFEARRAY *valueDescriptions) {
    return This->lpVtbl->put_ValueDescriptions(This,valueDescriptions);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_get_Parameters(IFsrmPropertyDefinition2* This,SAFEARRAY **parameters) {
    return This->lpVtbl->get_Parameters(This,parameters);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_put_Parameters(IFsrmPropertyDefinition2* This,SAFEARRAY *parameters) {
    return This->lpVtbl->put_Parameters(This,parameters);
}
/*** IFsrmPropertyDefinition2 methods ***/
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_get_PropertyDefinitionFlags(IFsrmPropertyDefinition2* This,LONG *propertyDefinitionFlags) {
    return This->lpVtbl->get_PropertyDefinitionFlags(This,propertyDefinitionFlags);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_get_DisplayName(IFsrmPropertyDefinition2* This,BSTR *name) {
    return This->lpVtbl->get_DisplayName(This,name);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_put_DisplayName(IFsrmPropertyDefinition2* This,BSTR name) {
    return This->lpVtbl->put_DisplayName(This,name);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_get_AppliesTo(IFsrmPropertyDefinition2* This,LONG *appliesTo) {
    return This->lpVtbl->get_AppliesTo(This,appliesTo);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinition2_get_ValueDefinitions(IFsrmPropertyDefinition2* This,IFsrmCollection **valueDefinitions) {
    return This->lpVtbl->get_ValueDefinitions(This,valueDefinitions);
}
#endif
#endif

#endif


#endif  /* __IFsrmPropertyDefinition2_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFsrmPropertyDefinitionValue interface
 */
#ifndef __IFsrmPropertyDefinitionValue_INTERFACE_DEFINED__
#define __IFsrmPropertyDefinitionValue_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFsrmPropertyDefinitionValue, 0xe946d148, 0xbd67, 0x4178, 0x8e,0x22, 0x1c,0x44,0x92,0x5e,0xd7,0x10);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("e946d148-bd67-4178-8e22-1c44925ed710")
IFsrmPropertyDefinitionValue : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *name) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_DisplayName(
        BSTR *displayName) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Description(
        BSTR *description) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UniqueID(
        BSTR *uniqueID) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFsrmPropertyDefinitionValue, 0xe946d148, 0xbd67, 0x4178, 0x8e,0x22, 0x1c,0x44,0x92,0x5e,0xd7,0x10)
#endif
#else
typedef struct IFsrmPropertyDefinitionValueVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFsrmPropertyDefinitionValue *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFsrmPropertyDefinitionValue *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFsrmPropertyDefinitionValue *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFsrmPropertyDefinitionValue *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFsrmPropertyDefinitionValue *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFsrmPropertyDefinitionValue *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFsrmPropertyDefinitionValue *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFsrmPropertyDefinitionValue methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IFsrmPropertyDefinitionValue *This,
        BSTR *name);

    HRESULT (STDMETHODCALLTYPE *get_DisplayName)(
        IFsrmPropertyDefinitionValue *This,
        BSTR *displayName);

    HRESULT (STDMETHODCALLTYPE *get_Description)(
        IFsrmPropertyDefinitionValue *This,
        BSTR *description);

    HRESULT (STDMETHODCALLTYPE *get_UniqueID)(
        IFsrmPropertyDefinitionValue *This,
        BSTR *uniqueID);

    END_INTERFACE
} IFsrmPropertyDefinitionValueVtbl;

interface IFsrmPropertyDefinitionValue {
    CONST_VTBL IFsrmPropertyDefinitionValueVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFsrmPropertyDefinitionValue_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFsrmPropertyDefinitionValue_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFsrmPropertyDefinitionValue_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFsrmPropertyDefinitionValue_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFsrmPropertyDefinitionValue_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFsrmPropertyDefinitionValue_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFsrmPropertyDefinitionValue_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFsrmPropertyDefinitionValue methods ***/
#define IFsrmPropertyDefinitionValue_get_Name(This,name) (This)->lpVtbl->get_Name(This,name)
#define IFsrmPropertyDefinitionValue_get_DisplayName(This,displayName) (This)->lpVtbl->get_DisplayName(This,displayName)
#define IFsrmPropertyDefinitionValue_get_Description(This,description) (This)->lpVtbl->get_Description(This,description)
#define IFsrmPropertyDefinitionValue_get_UniqueID(This,uniqueID) (This)->lpVtbl->get_UniqueID(This,uniqueID)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IFsrmPropertyDefinitionValue_QueryInterface(IFsrmPropertyDefinitionValue* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IFsrmPropertyDefinitionValue_AddRef(IFsrmPropertyDefinitionValue* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IFsrmPropertyDefinitionValue_Release(IFsrmPropertyDefinitionValue* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IFsrmPropertyDefinitionValue_GetTypeInfoCount(IFsrmPropertyDefinitionValue* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinitionValue_GetTypeInfo(IFsrmPropertyDefinitionValue* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinitionValue_GetIDsOfNames(IFsrmPropertyDefinitionValue* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinitionValue_Invoke(IFsrmPropertyDefinitionValue* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFsrmPropertyDefinitionValue methods ***/
static FORCEINLINE HRESULT IFsrmPropertyDefinitionValue_get_Name(IFsrmPropertyDefinitionValue* This,BSTR *name) {
    return This->lpVtbl->get_Name(This,name);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinitionValue_get_DisplayName(IFsrmPropertyDefinitionValue* This,BSTR *displayName) {
    return This->lpVtbl->get_DisplayName(This,displayName);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinitionValue_get_Description(IFsrmPropertyDefinitionValue* This,BSTR *description) {
    return This->lpVtbl->get_Description(This,description);
}
static FORCEINLINE HRESULT IFsrmPropertyDefinitionValue_get_UniqueID(IFsrmPropertyDefinitionValue* This,BSTR *uniqueID) {
    return This->lpVtbl->get_UniqueID(This,uniqueID);
}
#endif
#endif

#endif


#endif  /* __IFsrmPropertyDefinitionValue_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFsrmProperty interface
 */
#ifndef __IFsrmProperty_INTERFACE_DEFINED__
#define __IFsrmProperty_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFsrmProperty, 0x4a73fee4, 0x4102, 0x4fcc, 0x9f,0xfb, 0x38,0x61,0x4f,0x9e,0xe7,0x68);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("4a73fee4-4102-4fcc-9ffb-38614f9ee768")
IFsrmProperty : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *name) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Value(
        BSTR *value) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Sources(
        SAFEARRAY **sources) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PropertyFlags(
        LONG *flags) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFsrmProperty, 0x4a73fee4, 0x4102, 0x4fcc, 0x9f,0xfb, 0x38,0x61,0x4f,0x9e,0xe7,0x68)
#endif
#else
typedef struct IFsrmPropertyVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFsrmProperty *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFsrmProperty *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFsrmProperty *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFsrmProperty *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFsrmProperty *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFsrmProperty *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFsrmProperty *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFsrmProperty methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IFsrmProperty *This,
        BSTR *name);

    HRESULT (STDMETHODCALLTYPE *get_Value)(
        IFsrmProperty *This,
        BSTR *value);

    HRESULT (STDMETHODCALLTYPE *get_Sources)(
        IFsrmProperty *This,
        SAFEARRAY **sources);

    HRESULT (STDMETHODCALLTYPE *get_PropertyFlags)(
        IFsrmProperty *This,
        LONG *flags);

    END_INTERFACE
} IFsrmPropertyVtbl;

interface IFsrmProperty {
    CONST_VTBL IFsrmPropertyVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFsrmProperty_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFsrmProperty_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFsrmProperty_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFsrmProperty_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFsrmProperty_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFsrmProperty_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFsrmProperty_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFsrmProperty methods ***/
#define IFsrmProperty_get_Name(This,name) (This)->lpVtbl->get_Name(This,name)
#define IFsrmProperty_get_Value(This,value) (This)->lpVtbl->get_Value(This,value)
#define IFsrmProperty_get_Sources(This,sources) (This)->lpVtbl->get_Sources(This,sources)
#define IFsrmProperty_get_PropertyFlags(This,flags) (This)->lpVtbl->get_PropertyFlags(This,flags)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IFsrmProperty_QueryInterface(IFsrmProperty* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IFsrmProperty_AddRef(IFsrmProperty* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IFsrmProperty_Release(IFsrmProperty* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IFsrmProperty_GetTypeInfoCount(IFsrmProperty* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IFsrmProperty_GetTypeInfo(IFsrmProperty* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IFsrmProperty_GetIDsOfNames(IFsrmProperty* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IFsrmProperty_Invoke(IFsrmProperty* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFsrmProperty methods ***/
static FORCEINLINE HRESULT IFsrmProperty_get_Name(IFsrmProperty* This,BSTR *name) {
    return This->lpVtbl->get_Name(This,name);
}
static FORCEINLINE HRESULT IFsrmProperty_get_Value(IFsrmProperty* This,BSTR *value) {
    return This->lpVtbl->get_Value(This,value);
}
static FORCEINLINE HRESULT IFsrmProperty_get_Sources(IFsrmProperty* This,SAFEARRAY **sources) {
    return This->lpVtbl->get_Sources(This,sources);
}
static FORCEINLINE HRESULT IFsrmProperty_get_PropertyFlags(IFsrmProperty* This,LONG *flags) {
    return This->lpVtbl->get_PropertyFlags(This,flags);
}
#endif
#endif

#endif


#endif  /* __IFsrmProperty_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFsrmRule interface
 */
#ifndef __IFsrmRule_INTERFACE_DEFINED__
#define __IFsrmRule_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFsrmRule, 0xcb0df960, 0x16f5, 0x4495, 0x90,0x79, 0x3f,0x93,0x60,0xd8,0x31,0xdf);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("cb0df960-16f5-4495-9079-3f9360d831df")
IFsrmRule : public IFsrmObject
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *name) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR name) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RuleType(
        FsrmRuleType *ruleType) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ModuleDefinitionName(
        BSTR *moduleDefinitionName) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ModuleDefinitionName(
        BSTR moduleDefinitionName) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_NamespaceRoots(
        SAFEARRAY **namespaceRoots) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_NamespaceRoots(
        SAFEARRAY *namespaceRoots) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RuleFlags(
        LONG *ruleFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_RuleFlags(
        LONG ruleFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Parameters(
        SAFEARRAY **parameters) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Parameters(
        SAFEARRAY *parameters) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_LastModified(
        VARIANT *lastModified) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFsrmRule, 0xcb0df960, 0x16f5, 0x4495, 0x90,0x79, 0x3f,0x93,0x60,0xd8,0x31,0xdf)
#endif
#else
typedef struct IFsrmRuleVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFsrmRule *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFsrmRule *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFsrmRule *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFsrmRule *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFsrmRule *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFsrmRule *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFsrmRule *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFsrmObject methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Id)(
        IFsrmRule *This,
        FSRM_OBJECT_ID *id);

    HRESULT (STDMETHODCALLTYPE *get_Description)(
        IFsrmRule *This,
        BSTR *description);

    HRESULT (STDMETHODCALLTYPE *put_Description)(
        IFsrmRule *This,
        BSTR description);

    HRESULT (STDMETHODCALLTYPE *Delete)(
        IFsrmRule *This);

    HRESULT (STDMETHODCALLTYPE *Commit)(
        IFsrmRule *This);

    /*** IFsrmRule methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IFsrmRule *This,
        BSTR *name);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IFsrmRule *This,
        BSTR name);

    HRESULT (STDMETHODCALLTYPE *get_RuleType)(
        IFsrmRule *This,
        FsrmRuleType *ruleType);

    HRESULT (STDMETHODCALLTYPE *get_ModuleDefinitionName)(
        IFsrmRule *This,
        BSTR *moduleDefinitionName);

    HRESULT (STDMETHODCALLTYPE *put_ModuleDefinitionName)(
        IFsrmRule *This,
        BSTR moduleDefinitionName);

    HRESULT (STDMETHODCALLTYPE *get_NamespaceRoots)(
        IFsrmRule *This,
        SAFEARRAY **namespaceRoots);

    HRESULT (STDMETHODCALLTYPE *put_NamespaceRoots)(
        IFsrmRule *This,
        SAFEARRAY *namespaceRoots);

    HRESULT (STDMETHODCALLTYPE *get_RuleFlags)(
        IFsrmRule *This,
        LONG *ruleFlags);

    HRESULT (STDMETHODCALLTYPE *put_RuleFlags)(
        IFsrmRule *This,
        LONG ruleFlags);

    HRESULT (STDMETHODCALLTYPE *get_Parameters)(
        IFsrmRule *This,
        SAFEARRAY **parameters);

    HRESULT (STDMETHODCALLTYPE *put_Parameters)(
        IFsrmRule *This,
        SAFEARRAY *parameters);

    HRESULT (STDMETHODCALLTYPE *get_LastModified)(
        IFsrmRule *This,
        VARIANT *lastModified);

    END_INTERFACE
} IFsrmRuleVtbl;

interface IFsrmRule {
    CONST_VTBL IFsrmRuleVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFsrmRule_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFsrmRule_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFsrmRule_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFsrmRule_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFsrmRule_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFsrmRule_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFsrmRule_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFsrmObject methods ***/
#define IFsrmRule_get_Id(This,id) (This)->lpVtbl->get_Id(This,id)
#define IFsrmRule_get_Description(This,description) (This)->lpVtbl->get_Description(This,description)
#define IFsrmRule_put_Description(This,description) (This)->lpVtbl->put_Description(This,description)
#define IFsrmRule_Delete(This) (This)->lpVtbl->Delete(This)
#define IFsrmRule_Commit(This) (This)->lpVtbl->Commit(This)
/*** IFsrmRule methods ***/
#define IFsrmRule_get_Name(This,name) (This)->lpVtbl->get_Name(This,name)
#define IFsrmRule_put_Name(This,name) (This)->lpVtbl->put_Name(This,name)
#define IFsrmRule_get_RuleType(This,ruleType) (This)->lpVtbl->get_RuleType(This,ruleType)
#define IFsrmRule_get_ModuleDefinitionName(This,moduleDefinitionName) (This)->lpVtbl->get_ModuleDefinitionName(This,moduleDefinitionName)
#define IFsrmRule_put_ModuleDefinitionName(This,moduleDefinitionName) (This)->lpVtbl->put_ModuleDefinitionName(This,moduleDefinitionName)
#define IFsrmRule_get_NamespaceRoots(This,namespaceRoots) (This)->lpVtbl->get_NamespaceRoots(This,namespaceRoots)
#define IFsrmRule_put_NamespaceRoots(This,namespaceRoots) (This)->lpVtbl->put_NamespaceRoots(This,namespaceRoots)
#define IFsrmRule_get_RuleFlags(This,ruleFlags) (This)->lpVtbl->get_RuleFlags(This,ruleFlags)
#define IFsrmRule_put_RuleFlags(This,ruleFlags) (This)->lpVtbl->put_RuleFlags(This,ruleFlags)
#define IFsrmRule_get_Parameters(This,parameters) (This)->lpVtbl->get_Parameters(This,parameters)
#define IFsrmRule_put_Parameters(This,parameters) (This)->lpVtbl->put_Parameters(This,parameters)
#define IFsrmRule_get_LastModified(This,lastModified) (This)->lpVtbl->get_LastModified(This,lastModified)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IFsrmRule_QueryInterface(IFsrmRule* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IFsrmRule_AddRef(IFsrmRule* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IFsrmRule_Release(IFsrmRule* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IFsrmRule_GetTypeInfoCount(IFsrmRule* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IFsrmRule_GetTypeInfo(IFsrmRule* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IFsrmRule_GetIDsOfNames(IFsrmRule* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IFsrmRule_Invoke(IFsrmRule* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFsrmObject methods ***/
static FORCEINLINE HRESULT IFsrmRule_get_Id(IFsrmRule* This,FSRM_OBJECT_ID *id) {
    return This->lpVtbl->get_Id(This,id);
}
static FORCEINLINE HRESULT IFsrmRule_get_Description(IFsrmRule* This,BSTR *description) {
    return This->lpVtbl->get_Description(This,description);
}
static FORCEINLINE HRESULT IFsrmRule_put_Description(IFsrmRule* This,BSTR description) {
    return This->lpVtbl->put_Description(This,description);
}
static FORCEINLINE HRESULT IFsrmRule_Delete(IFsrmRule* This) {
    return This->lpVtbl->Delete(This);
}
static FORCEINLINE HRESULT IFsrmRule_Commit(IFsrmRule* This) {
    return This->lpVtbl->Commit(This);
}
/*** IFsrmRule methods ***/
static FORCEINLINE HRESULT IFsrmRule_get_Name(IFsrmRule* This,BSTR *name) {
    return This->lpVtbl->get_Name(This,name);
}
static FORCEINLINE HRESULT IFsrmRule_put_Name(IFsrmRule* This,BSTR name) {
    return This->lpVtbl->put_Name(This,name);
}
static FORCEINLINE HRESULT IFsrmRule_get_RuleType(IFsrmRule* This,FsrmRuleType *ruleType) {
    return This->lpVtbl->get_RuleType(This,ruleType);
}
static FORCEINLINE HRESULT IFsrmRule_get_ModuleDefinitionName(IFsrmRule* This,BSTR *moduleDefinitionName) {
    return This->lpVtbl->get_ModuleDefinitionName(This,moduleDefinitionName);
}
static FORCEINLINE HRESULT IFsrmRule_put_ModuleDefinitionName(IFsrmRule* This,BSTR moduleDefinitionName) {
    return This->lpVtbl->put_ModuleDefinitionName(This,moduleDefinitionName);
}
static FORCEINLINE HRESULT IFsrmRule_get_NamespaceRoots(IFsrmRule* This,SAFEARRAY **namespaceRoots) {
    return This->lpVtbl->get_NamespaceRoots(This,namespaceRoots);
}
static FORCEINLINE HRESULT IFsrmRule_put_NamespaceRoots(IFsrmRule* This,SAFEARRAY *namespaceRoots) {
    return This->lpVtbl->put_NamespaceRoots(This,namespaceRoots);
}
static FORCEINLINE HRESULT IFsrmRule_get_RuleFlags(IFsrmRule* This,LONG *ruleFlags) {
    return This->lpVtbl->get_RuleFlags(This,ruleFlags);
}
static FORCEINLINE HRESULT IFsrmRule_put_RuleFlags(IFsrmRule* This,LONG ruleFlags) {
    return This->lpVtbl->put_RuleFlags(This,ruleFlags);
}
static FORCEINLINE HRESULT IFsrmRule_get_Parameters(IFsrmRule* This,SAFEARRAY **parameters) {
    return This->lpVtbl->get_Parameters(This,parameters);
}
static FORCEINLINE HRESULT IFsrmRule_put_Parameters(IFsrmRule* This,SAFEARRAY *parameters) {
    return This->lpVtbl->put_Parameters(This,parameters);
}
static FORCEINLINE HRESULT IFsrmRule_get_LastModified(IFsrmRule* This,VARIANT *lastModified) {
    return This->lpVtbl->get_LastModified(This,lastModified);
}
#endif
#endif

#endif


#endif  /* __IFsrmRule_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFsrmClassificationRule interface
 */
#ifndef __IFsrmClassificationRule_INTERFACE_DEFINED__
#define __IFsrmClassificationRule_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFsrmClassificationRule, 0xafc052c2, 0x5315, 0x45ab, 0x84,0x1b, 0xc6,0xdb,0x0e,0x12,0x01,0x48);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("afc052c2-5315-45ab-841b-c6db0e120148")
IFsrmClassificationRule : public IFsrmRule
{
    virtual HRESULT STDMETHODCALLTYPE get_ExecutionOption(
        FsrmExecutionOption *executionOption) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ExecutionOption(
        FsrmExecutionOption executionOption) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PropertyAffected(
        BSTR *property) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_PropertyAffected(
        BSTR property) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Value(
        BSTR *value) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Value(
        BSTR value) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFsrmClassificationRule, 0xafc052c2, 0x5315, 0x45ab, 0x84,0x1b, 0xc6,0xdb,0x0e,0x12,0x01,0x48)
#endif
#else
typedef struct IFsrmClassificationRuleVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFsrmClassificationRule *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFsrmClassificationRule *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFsrmClassificationRule *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFsrmClassificationRule *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFsrmClassificationRule *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFsrmClassificationRule *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFsrmClassificationRule *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFsrmObject methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Id)(
        IFsrmClassificationRule *This,
        FSRM_OBJECT_ID *id);

    HRESULT (STDMETHODCALLTYPE *get_Description)(
        IFsrmClassificationRule *This,
        BSTR *description);

    HRESULT (STDMETHODCALLTYPE *put_Description)(
        IFsrmClassificationRule *This,
        BSTR description);

    HRESULT (STDMETHODCALLTYPE *Delete)(
        IFsrmClassificationRule *This);

    HRESULT (STDMETHODCALLTYPE *Commit)(
        IFsrmClassificationRule *This);

    /*** IFsrmRule methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IFsrmClassificationRule *This,
        BSTR *name);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IFsrmClassificationRule *This,
        BSTR name);

    HRESULT (STDMETHODCALLTYPE *get_RuleType)(
        IFsrmClassificationRule *This,
        FsrmRuleType *ruleType);

    HRESULT (STDMETHODCALLTYPE *get_ModuleDefinitionName)(
        IFsrmClassificationRule *This,
        BSTR *moduleDefinitionName);

    HRESULT (STDMETHODCALLTYPE *put_ModuleDefinitionName)(
        IFsrmClassificationRule *This,
        BSTR moduleDefinitionName);

    HRESULT (STDMETHODCALLTYPE *get_NamespaceRoots)(
        IFsrmClassificationRule *This,
        SAFEARRAY **namespaceRoots);

    HRESULT (STDMETHODCALLTYPE *put_NamespaceRoots)(
        IFsrmClassificationRule *This,
        SAFEARRAY *namespaceRoots);

    HRESULT (STDMETHODCALLTYPE *get_RuleFlags)(
        IFsrmClassificationRule *This,
        LONG *ruleFlags);

    HRESULT (STDMETHODCALLTYPE *put_RuleFlags)(
        IFsrmClassificationRule *This,
        LONG ruleFlags);

    HRESULT (STDMETHODCALLTYPE *get_Parameters)(
        IFsrmClassificationRule *This,
        SAFEARRAY **parameters);

    HRESULT (STDMETHODCALLTYPE *put_Parameters)(
        IFsrmClassificationRule *This,
        SAFEARRAY *parameters);

    HRESULT (STDMETHODCALLTYPE *get_LastModified)(
        IFsrmClassificationRule *This,
        VARIANT *lastModified);

    /*** IFsrmClassificationRule methods ***/
    HRESULT (STDMETHODCALLTYPE *get_ExecutionOption)(
        IFsrmClassificationRule *This,
        FsrmExecutionOption *executionOption);

    HRESULT (STDMETHODCALLTYPE *put_ExecutionOption)(
        IFsrmClassificationRule *This,
        FsrmExecutionOption executionOption);

    HRESULT (STDMETHODCALLTYPE *get_PropertyAffected)(
        IFsrmClassificationRule *This,
        BSTR *property);

    HRESULT (STDMETHODCALLTYPE *put_PropertyAffected)(
        IFsrmClassificationRule *This,
        BSTR property);

    HRESULT (STDMETHODCALLTYPE *get_Value)(
        IFsrmClassificationRule *This,
        BSTR *value);

    HRESULT (STDMETHODCALLTYPE *put_Value)(
        IFsrmClassificationRule *This,
        BSTR value);

    END_INTERFACE
} IFsrmClassificationRuleVtbl;

interface IFsrmClassificationRule {
    CONST_VTBL IFsrmClassificationRuleVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFsrmClassificationRule_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFsrmClassificationRule_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFsrmClassificationRule_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFsrmClassificationRule_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFsrmClassificationRule_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFsrmClassificationRule_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFsrmClassificationRule_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFsrmObject methods ***/
#define IFsrmClassificationRule_get_Id(This,id) (This)->lpVtbl->get_Id(This,id)
#define IFsrmClassificationRule_get_Description(This,description) (This)->lpVtbl->get_Description(This,description)
#define IFsrmClassificationRule_put_Description(This,description) (This)->lpVtbl->put_Description(This,description)
#define IFsrmClassificationRule_Delete(This) (This)->lpVtbl->Delete(This)
#define IFsrmClassificationRule_Commit(This) (This)->lpVtbl->Commit(This)
/*** IFsrmRule methods ***/
#define IFsrmClassificationRule_get_Name(This,name) (This)->lpVtbl->get_Name(This,name)
#define IFsrmClassificationRule_put_Name(This,name) (This)->lpVtbl->put_Name(This,name)
#define IFsrmClassificationRule_get_RuleType(This,ruleType) (This)->lpVtbl->get_RuleType(This,ruleType)
#define IFsrmClassificationRule_get_ModuleDefinitionName(This,moduleDefinitionName) (This)->lpVtbl->get_ModuleDefinitionName(This,moduleDefinitionName)
#define IFsrmClassificationRule_put_ModuleDefinitionName(This,moduleDefinitionName) (This)->lpVtbl->put_ModuleDefinitionName(This,moduleDefinitionName)
#define IFsrmClassificationRule_get_NamespaceRoots(This,namespaceRoots) (This)->lpVtbl->get_NamespaceRoots(This,namespaceRoots)
#define IFsrmClassificationRule_put_NamespaceRoots(This,namespaceRoots) (This)->lpVtbl->put_NamespaceRoots(This,namespaceRoots)
#define IFsrmClassificationRule_get_RuleFlags(This,ruleFlags) (This)->lpVtbl->get_RuleFlags(This,ruleFlags)
#define IFsrmClassificationRule_put_RuleFlags(This,ruleFlags) (This)->lpVtbl->put_RuleFlags(This,ruleFlags)
#define IFsrmClassificationRule_get_Parameters(This,parameters) (This)->lpVtbl->get_Parameters(This,parameters)
#define IFsrmClassificationRule_put_Parameters(This,parameters) (This)->lpVtbl->put_Parameters(This,parameters)
#define IFsrmClassificationRule_get_LastModified(This,lastModified) (This)->lpVtbl->get_LastModified(This,lastModified)
/*** IFsrmClassificationRule methods ***/
#define IFsrmClassificationRule_get_ExecutionOption(This,executionOption) (This)->lpVtbl->get_ExecutionOption(This,executionOption)
#define IFsrmClassificationRule_put_ExecutionOption(This,executionOption) (This)->lpVtbl->put_ExecutionOption(This,executionOption)
#define IFsrmClassificationRule_get_PropertyAffected(This,property) (This)->lpVtbl->get_PropertyAffected(This,property)
#define IFsrmClassificationRule_put_PropertyAffected(This,property) (This)->lpVtbl->put_PropertyAffected(This,property)
#define IFsrmClassificationRule_get_Value(This,value) (This)->lpVtbl->get_Value(This,value)
#define IFsrmClassificationRule_put_Value(This,value) (This)->lpVtbl->put_Value(This,value)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IFsrmClassificationRule_QueryInterface(IFsrmClassificationRule* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IFsrmClassificationRule_AddRef(IFsrmClassificationRule* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IFsrmClassificationRule_Release(IFsrmClassificationRule* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IFsrmClassificationRule_GetTypeInfoCount(IFsrmClassificationRule* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_GetTypeInfo(IFsrmClassificationRule* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_GetIDsOfNames(IFsrmClassificationRule* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_Invoke(IFsrmClassificationRule* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFsrmObject methods ***/
static FORCEINLINE HRESULT IFsrmClassificationRule_get_Id(IFsrmClassificationRule* This,FSRM_OBJECT_ID *id) {
    return This->lpVtbl->get_Id(This,id);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_get_Description(IFsrmClassificationRule* This,BSTR *description) {
    return This->lpVtbl->get_Description(This,description);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_put_Description(IFsrmClassificationRule* This,BSTR description) {
    return This->lpVtbl->put_Description(This,description);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_Delete(IFsrmClassificationRule* This) {
    return This->lpVtbl->Delete(This);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_Commit(IFsrmClassificationRule* This) {
    return This->lpVtbl->Commit(This);
}
/*** IFsrmRule methods ***/
static FORCEINLINE HRESULT IFsrmClassificationRule_get_Name(IFsrmClassificationRule* This,BSTR *name) {
    return This->lpVtbl->get_Name(This,name);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_put_Name(IFsrmClassificationRule* This,BSTR name) {
    return This->lpVtbl->put_Name(This,name);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_get_RuleType(IFsrmClassificationRule* This,FsrmRuleType *ruleType) {
    return This->lpVtbl->get_RuleType(This,ruleType);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_get_ModuleDefinitionName(IFsrmClassificationRule* This,BSTR *moduleDefinitionName) {
    return This->lpVtbl->get_ModuleDefinitionName(This,moduleDefinitionName);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_put_ModuleDefinitionName(IFsrmClassificationRule* This,BSTR moduleDefinitionName) {
    return This->lpVtbl->put_ModuleDefinitionName(This,moduleDefinitionName);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_get_NamespaceRoots(IFsrmClassificationRule* This,SAFEARRAY **namespaceRoots) {
    return This->lpVtbl->get_NamespaceRoots(This,namespaceRoots);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_put_NamespaceRoots(IFsrmClassificationRule* This,SAFEARRAY *namespaceRoots) {
    return This->lpVtbl->put_NamespaceRoots(This,namespaceRoots);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_get_RuleFlags(IFsrmClassificationRule* This,LONG *ruleFlags) {
    return This->lpVtbl->get_RuleFlags(This,ruleFlags);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_put_RuleFlags(IFsrmClassificationRule* This,LONG ruleFlags) {
    return This->lpVtbl->put_RuleFlags(This,ruleFlags);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_get_Parameters(IFsrmClassificationRule* This,SAFEARRAY **parameters) {
    return This->lpVtbl->get_Parameters(This,parameters);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_put_Parameters(IFsrmClassificationRule* This,SAFEARRAY *parameters) {
    return This->lpVtbl->put_Parameters(This,parameters);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_get_LastModified(IFsrmClassificationRule* This,VARIANT *lastModified) {
    return This->lpVtbl->get_LastModified(This,lastModified);
}
/*** IFsrmClassificationRule methods ***/
static FORCEINLINE HRESULT IFsrmClassificationRule_get_ExecutionOption(IFsrmClassificationRule* This,FsrmExecutionOption *executionOption) {
    return This->lpVtbl->get_ExecutionOption(This,executionOption);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_put_ExecutionOption(IFsrmClassificationRule* This,FsrmExecutionOption executionOption) {
    return This->lpVtbl->put_ExecutionOption(This,executionOption);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_get_PropertyAffected(IFsrmClassificationRule* This,BSTR *property) {
    return This->lpVtbl->get_PropertyAffected(This,property);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_put_PropertyAffected(IFsrmClassificationRule* This,BSTR property) {
    return This->lpVtbl->put_PropertyAffected(This,property);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_get_Value(IFsrmClassificationRule* This,BSTR *value) {
    return This->lpVtbl->get_Value(This,value);
}
static FORCEINLINE HRESULT IFsrmClassificationRule_put_Value(IFsrmClassificationRule* This,BSTR value) {
    return This->lpVtbl->put_Value(This,value);
}
#endif
#endif

#endif


#endif  /* __IFsrmClassificationRule_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFsrmPipelineModuleDefinition interface
 */
#ifndef __IFsrmPipelineModuleDefinition_INTERFACE_DEFINED__
#define __IFsrmPipelineModuleDefinition_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFsrmPipelineModuleDefinition, 0x515c1277, 0x2c81, 0x440e, 0x8f,0xcf, 0x36,0x79,0x21,0xed,0x4f,0x59);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("515c1277-2c81-440e-8fcf-367921ed4f59")
IFsrmPipelineModuleDefinition : public IFsrmObject
{
    virtual HRESULT STDMETHODCALLTYPE get_ModuleClsid(
        BSTR *moduleClsid) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ModuleClsid(
        BSTR moduleClsid) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *name) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Name(
        BSTR name) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Company(
        BSTR *company) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Company(
        BSTR company) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Version(
        BSTR *version) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Version(
        BSTR version) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ModuleType(
        FsrmPipelineModuleType *moduleType) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Enabled(
        VARIANT_BOOL *enabled) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Enabled(
        VARIANT_BOOL enabled) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_NeedsFileContent(
        VARIANT_BOOL *needsFileContent) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_NeedsFileContent(
        VARIANT_BOOL needsFileContent) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Account(
        FsrmAccountType *retrievalAccount) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Account(
        FsrmAccountType retrievalAccount) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SupportedExtensions(
        SAFEARRAY **supportedExtensions) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_SupportedExtensions(
        SAFEARRAY *supportedExtensions) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Parameters(
        SAFEARRAY **parameters) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Parameters(
        SAFEARRAY *parameters) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFsrmPipelineModuleDefinition, 0x515c1277, 0x2c81, 0x440e, 0x8f,0xcf, 0x36,0x79,0x21,0xed,0x4f,0x59)
#endif
#else
typedef struct IFsrmPipelineModuleDefinitionVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFsrmPipelineModuleDefinition *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFsrmPipelineModuleDefinition *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFsrmPipelineModuleDefinition *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFsrmPipelineModuleDefinition *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFsrmPipelineModuleDefinition *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFsrmPipelineModuleDefinition *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFsrmPipelineModuleDefinition *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFsrmObject methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Id)(
        IFsrmPipelineModuleDefinition *This,
        FSRM_OBJECT_ID *id);

    HRESULT (STDMETHODCALLTYPE *get_Description)(
        IFsrmPipelineModuleDefinition *This,
        BSTR *description);

    HRESULT (STDMETHODCALLTYPE *put_Description)(
        IFsrmPipelineModuleDefinition *This,
        BSTR description);

    HRESULT (STDMETHODCALLTYPE *Delete)(
        IFsrmPipelineModuleDefinition *This);

    HRESULT (STDMETHODCALLTYPE *Commit)(
        IFsrmPipelineModuleDefinition *This);

    /*** IFsrmPipelineModuleDefinition methods ***/
    HRESULT (STDMETHODCALLTYPE *get_ModuleClsid)(
        IFsrmPipelineModuleDefinition *This,
        BSTR *moduleClsid);

    HRESULT (STDMETHODCALLTYPE *put_ModuleClsid)(
        IFsrmPipelineModuleDefinition *This,
        BSTR moduleClsid);

    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IFsrmPipelineModuleDefinition *This,
        BSTR *name);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IFsrmPipelineModuleDefinition *This,
        BSTR name);

    HRESULT (STDMETHODCALLTYPE *get_Company)(
        IFsrmPipelineModuleDefinition *This,
        BSTR *company);

    HRESULT (STDMETHODCALLTYPE *put_Company)(
        IFsrmPipelineModuleDefinition *This,
        BSTR company);

    HRESULT (STDMETHODCALLTYPE *get_Version)(
        IFsrmPipelineModuleDefinition *This,
        BSTR *version);

    HRESULT (STDMETHODCALLTYPE *put_Version)(
        IFsrmPipelineModuleDefinition *This,
        BSTR version);

    HRESULT (STDMETHODCALLTYPE *get_ModuleType)(
        IFsrmPipelineModuleDefinition *This,
        FsrmPipelineModuleType *moduleType);

    HRESULT (STDMETHODCALLTYPE *get_Enabled)(
        IFsrmPipelineModuleDefinition *This,
        VARIANT_BOOL *enabled);

    HRESULT (STDMETHODCALLTYPE *put_Enabled)(
        IFsrmPipelineModuleDefinition *This,
        VARIANT_BOOL enabled);

    HRESULT (STDMETHODCALLTYPE *get_NeedsFileContent)(
        IFsrmPipelineModuleDefinition *This,
        VARIANT_BOOL *needsFileContent);

    HRESULT (STDMETHODCALLTYPE *put_NeedsFileContent)(
        IFsrmPipelineModuleDefinition *This,
        VARIANT_BOOL needsFileContent);

    HRESULT (STDMETHODCALLTYPE *get_Account)(
        IFsrmPipelineModuleDefinition *This,
        FsrmAccountType *retrievalAccount);

    HRESULT (STDMETHODCALLTYPE *put_Account)(
        IFsrmPipelineModuleDefinition *This,
        FsrmAccountType retrievalAccount);

    HRESULT (STDMETHODCALLTYPE *get_SupportedExtensions)(
        IFsrmPipelineModuleDefinition *This,
        SAFEARRAY **supportedExtensions);

    HRESULT (STDMETHODCALLTYPE *put_SupportedExtensions)(
        IFsrmPipelineModuleDefinition *This,
        SAFEARRAY *supportedExtensions);

    HRESULT (STDMETHODCALLTYPE *get_Parameters)(
        IFsrmPipelineModuleDefinition *This,
        SAFEARRAY **parameters);

    HRESULT (STDMETHODCALLTYPE *put_Parameters)(
        IFsrmPipelineModuleDefinition *This,
        SAFEARRAY *parameters);

    END_INTERFACE
} IFsrmPipelineModuleDefinitionVtbl;

interface IFsrmPipelineModuleDefinition {
    CONST_VTBL IFsrmPipelineModuleDefinitionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFsrmPipelineModuleDefinition_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFsrmPipelineModuleDefinition_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFsrmPipelineModuleDefinition_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFsrmPipelineModuleDefinition_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFsrmPipelineModuleDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFsrmPipelineModuleDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFsrmPipelineModuleDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFsrmObject methods ***/
#define IFsrmPipelineModuleDefinition_get_Id(This,id) (This)->lpVtbl->get_Id(This,id)
#define IFsrmPipelineModuleDefinition_get_Description(This,description) (This)->lpVtbl->get_Description(This,description)
#define IFsrmPipelineModuleDefinition_put_Description(This,description) (This)->lpVtbl->put_Description(This,description)
#define IFsrmPipelineModuleDefinition_Delete(This) (This)->lpVtbl->Delete(This)
#define IFsrmPipelineModuleDefinition_Commit(This) (This)->lpVtbl->Commit(This)
/*** IFsrmPipelineModuleDefinition methods ***/
#define IFsrmPipelineModuleDefinition_get_ModuleClsid(This,moduleClsid) (This)->lpVtbl->get_ModuleClsid(This,moduleClsid)
#define IFsrmPipelineModuleDefinition_put_ModuleClsid(This,moduleClsid) (This)->lpVtbl->put_ModuleClsid(This,moduleClsid)
#define IFsrmPipelineModuleDefinition_get_Name(This,name) (This)->lpVtbl->get_Name(This,name)
#define IFsrmPipelineModuleDefinition_put_Name(This,name) (This)->lpVtbl->put_Name(This,name)
#define IFsrmPipelineModuleDefinition_get_Company(This,company) (This)->lpVtbl->get_Company(This,company)
#define IFsrmPipelineModuleDefinition_put_Company(This,company) (This)->lpVtbl->put_Company(This,company)
#define IFsrmPipelineModuleDefinition_get_Version(This,version) (This)->lpVtbl->get_Version(This,version)
#define IFsrmPipelineModuleDefinition_put_Version(This,version) (This)->lpVtbl->put_Version(This,version)
#define IFsrmPipelineModuleDefinition_get_ModuleType(This,moduleType) (This)->lpVtbl->get_ModuleType(This,moduleType)
#define IFsrmPipelineModuleDefinition_get_Enabled(This,enabled) (This)->lpVtbl->get_Enabled(This,enabled)
#define IFsrmPipelineModuleDefinition_put_Enabled(This,enabled) (This)->lpVtbl->put_Enabled(This,enabled)
#define IFsrmPipelineModuleDefinition_get_NeedsFileContent(This,needsFileContent) (This)->lpVtbl->get_NeedsFileContent(This,needsFileContent)
#define IFsrmPipelineModuleDefinition_put_NeedsFileContent(This,needsFileContent) (This)->lpVtbl->put_NeedsFileContent(This,needsFileContent)
#define IFsrmPipelineModuleDefinition_get_Account(This,retrievalAccount) (This)->lpVtbl->get_Account(This,retrievalAccount)
#define IFsrmPipelineModuleDefinition_put_Account(This,retrievalAccount) (This)->lpVtbl->put_Account(This,retrievalAccount)
#define IFsrmPipelineModuleDefinition_get_SupportedExtensions(This,supportedExtensions) (This)->lpVtbl->get_SupportedExtensions(This,supportedExtensions)
#define IFsrmPipelineModuleDefinition_put_SupportedExtensions(This,supportedExtensions) (This)->lpVtbl->put_SupportedExtensions(This,supportedExtensions)
#define IFsrmPipelineModuleDefinition_get_Parameters(This,parameters) (This)->lpVtbl->get_Parameters(This,parameters)
#define IFsrmPipelineModuleDefinition_put_Parameters(This,parameters) (This)->lpVtbl->put_Parameters(This,parameters)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_QueryInterface(IFsrmPipelineModuleDefinition* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IFsrmPipelineModuleDefinition_AddRef(IFsrmPipelineModuleDefinition* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IFsrmPipelineModuleDefinition_Release(IFsrmPipelineModuleDefinition* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_GetTypeInfoCount(IFsrmPipelineModuleDefinition* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_GetTypeInfo(IFsrmPipelineModuleDefinition* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_GetIDsOfNames(IFsrmPipelineModuleDefinition* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_Invoke(IFsrmPipelineModuleDefinition* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFsrmObject methods ***/
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_get_Id(IFsrmPipelineModuleDefinition* This,FSRM_OBJECT_ID *id) {
    return This->lpVtbl->get_Id(This,id);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_get_Description(IFsrmPipelineModuleDefinition* This,BSTR *description) {
    return This->lpVtbl->get_Description(This,description);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_put_Description(IFsrmPipelineModuleDefinition* This,BSTR description) {
    return This->lpVtbl->put_Description(This,description);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_Delete(IFsrmPipelineModuleDefinition* This) {
    return This->lpVtbl->Delete(This);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_Commit(IFsrmPipelineModuleDefinition* This) {
    return This->lpVtbl->Commit(This);
}
/*** IFsrmPipelineModuleDefinition methods ***/
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_get_ModuleClsid(IFsrmPipelineModuleDefinition* This,BSTR *moduleClsid) {
    return This->lpVtbl->get_ModuleClsid(This,moduleClsid);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_put_ModuleClsid(IFsrmPipelineModuleDefinition* This,BSTR moduleClsid) {
    return This->lpVtbl->put_ModuleClsid(This,moduleClsid);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_get_Name(IFsrmPipelineModuleDefinition* This,BSTR *name) {
    return This->lpVtbl->get_Name(This,name);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_put_Name(IFsrmPipelineModuleDefinition* This,BSTR name) {
    return This->lpVtbl->put_Name(This,name);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_get_Company(IFsrmPipelineModuleDefinition* This,BSTR *company) {
    return This->lpVtbl->get_Company(This,company);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_put_Company(IFsrmPipelineModuleDefinition* This,BSTR company) {
    return This->lpVtbl->put_Company(This,company);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_get_Version(IFsrmPipelineModuleDefinition* This,BSTR *version) {
    return This->lpVtbl->get_Version(This,version);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_put_Version(IFsrmPipelineModuleDefinition* This,BSTR version) {
    return This->lpVtbl->put_Version(This,version);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_get_ModuleType(IFsrmPipelineModuleDefinition* This,FsrmPipelineModuleType *moduleType) {
    return This->lpVtbl->get_ModuleType(This,moduleType);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_get_Enabled(IFsrmPipelineModuleDefinition* This,VARIANT_BOOL *enabled) {
    return This->lpVtbl->get_Enabled(This,enabled);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_put_Enabled(IFsrmPipelineModuleDefinition* This,VARIANT_BOOL enabled) {
    return This->lpVtbl->put_Enabled(This,enabled);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_get_NeedsFileContent(IFsrmPipelineModuleDefinition* This,VARIANT_BOOL *needsFileContent) {
    return This->lpVtbl->get_NeedsFileContent(This,needsFileContent);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_put_NeedsFileContent(IFsrmPipelineModuleDefinition* This,VARIANT_BOOL needsFileContent) {
    return This->lpVtbl->put_NeedsFileContent(This,needsFileContent);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_get_Account(IFsrmPipelineModuleDefinition* This,FsrmAccountType *retrievalAccount) {
    return This->lpVtbl->get_Account(This,retrievalAccount);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_put_Account(IFsrmPipelineModuleDefinition* This,FsrmAccountType retrievalAccount) {
    return This->lpVtbl->put_Account(This,retrievalAccount);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_get_SupportedExtensions(IFsrmPipelineModuleDefinition* This,SAFEARRAY **supportedExtensions) {
    return This->lpVtbl->get_SupportedExtensions(This,supportedExtensions);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_put_SupportedExtensions(IFsrmPipelineModuleDefinition* This,SAFEARRAY *supportedExtensions) {
    return This->lpVtbl->put_SupportedExtensions(This,supportedExtensions);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_get_Parameters(IFsrmPipelineModuleDefinition* This,SAFEARRAY **parameters) {
    return This->lpVtbl->get_Parameters(This,parameters);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleDefinition_put_Parameters(IFsrmPipelineModuleDefinition* This,SAFEARRAY *parameters) {
    return This->lpVtbl->put_Parameters(This,parameters);
}
#endif
#endif

#endif


#endif  /* __IFsrmPipelineModuleDefinition_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFsrmClassifierModuleDefinition interface
 */
#ifndef __IFsrmClassifierModuleDefinition_INTERFACE_DEFINED__
#define __IFsrmClassifierModuleDefinition_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFsrmClassifierModuleDefinition, 0xbb36ea26, 0x6318, 0x4b8c, 0x85,0x92, 0xf7,0x2d,0xd6,0x02,0xe7,0xa5);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("bb36ea26-6318-4b8c-8592-f72dd602e7a5")
IFsrmClassifierModuleDefinition : public IFsrmPipelineModuleDefinition
{
    virtual HRESULT STDMETHODCALLTYPE get_PropertiesAffected(
        SAFEARRAY **propertiesAffected) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_PropertiesAffected(
        SAFEARRAY *propertiesAffected) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PropertiesUsed(
        SAFEARRAY **propertiesUsed) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_PropertiesUsed(
        SAFEARRAY *propertiesUsed) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_NeedsExplicitValue(
        VARIANT_BOOL *needsExplicitValue) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_NeedsExplicitValue(
        VARIANT_BOOL needsExplicitValue) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFsrmClassifierModuleDefinition, 0xbb36ea26, 0x6318, 0x4b8c, 0x85,0x92, 0xf7,0x2d,0xd6,0x02,0xe7,0xa5)
#endif
#else
typedef struct IFsrmClassifierModuleDefinitionVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFsrmClassifierModuleDefinition *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFsrmClassifierModuleDefinition *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFsrmClassifierModuleDefinition *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFsrmClassifierModuleDefinition *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFsrmClassifierModuleDefinition *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFsrmClassifierModuleDefinition *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFsrmClassifierModuleDefinition *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFsrmObject methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Id)(
        IFsrmClassifierModuleDefinition *This,
        FSRM_OBJECT_ID *id);

    HRESULT (STDMETHODCALLTYPE *get_Description)(
        IFsrmClassifierModuleDefinition *This,
        BSTR *description);

    HRESULT (STDMETHODCALLTYPE *put_Description)(
        IFsrmClassifierModuleDefinition *This,
        BSTR description);

    HRESULT (STDMETHODCALLTYPE *Delete)(
        IFsrmClassifierModuleDefinition *This);

    HRESULT (STDMETHODCALLTYPE *Commit)(
        IFsrmClassifierModuleDefinition *This);

    /*** IFsrmPipelineModuleDefinition methods ***/
    HRESULT (STDMETHODCALLTYPE *get_ModuleClsid)(
        IFsrmClassifierModuleDefinition *This,
        BSTR *moduleClsid);

    HRESULT (STDMETHODCALLTYPE *put_ModuleClsid)(
        IFsrmClassifierModuleDefinition *This,
        BSTR moduleClsid);

    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IFsrmClassifierModuleDefinition *This,
        BSTR *name);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IFsrmClassifierModuleDefinition *This,
        BSTR name);

    HRESULT (STDMETHODCALLTYPE *get_Company)(
        IFsrmClassifierModuleDefinition *This,
        BSTR *company);

    HRESULT (STDMETHODCALLTYPE *put_Company)(
        IFsrmClassifierModuleDefinition *This,
        BSTR company);

    HRESULT (STDMETHODCALLTYPE *get_Version)(
        IFsrmClassifierModuleDefinition *This,
        BSTR *version);

    HRESULT (STDMETHODCALLTYPE *put_Version)(
        IFsrmClassifierModuleDefinition *This,
        BSTR version);

    HRESULT (STDMETHODCALLTYPE *get_ModuleType)(
        IFsrmClassifierModuleDefinition *This,
        FsrmPipelineModuleType *moduleType);

    HRESULT (STDMETHODCALLTYPE *get_Enabled)(
        IFsrmClassifierModuleDefinition *This,
        VARIANT_BOOL *enabled);

    HRESULT (STDMETHODCALLTYPE *put_Enabled)(
        IFsrmClassifierModuleDefinition *This,
        VARIANT_BOOL enabled);

    HRESULT (STDMETHODCALLTYPE *get_NeedsFileContent)(
        IFsrmClassifierModuleDefinition *This,
        VARIANT_BOOL *needsFileContent);

    HRESULT (STDMETHODCALLTYPE *put_NeedsFileContent)(
        IFsrmClassifierModuleDefinition *This,
        VARIANT_BOOL needsFileContent);

    HRESULT (STDMETHODCALLTYPE *get_Account)(
        IFsrmClassifierModuleDefinition *This,
        FsrmAccountType *retrievalAccount);

    HRESULT (STDMETHODCALLTYPE *put_Account)(
        IFsrmClassifierModuleDefinition *This,
        FsrmAccountType retrievalAccount);

    HRESULT (STDMETHODCALLTYPE *get_SupportedExtensions)(
        IFsrmClassifierModuleDefinition *This,
        SAFEARRAY **supportedExtensions);

    HRESULT (STDMETHODCALLTYPE *put_SupportedExtensions)(
        IFsrmClassifierModuleDefinition *This,
        SAFEARRAY *supportedExtensions);

    HRESULT (STDMETHODCALLTYPE *get_Parameters)(
        IFsrmClassifierModuleDefinition *This,
        SAFEARRAY **parameters);

    HRESULT (STDMETHODCALLTYPE *put_Parameters)(
        IFsrmClassifierModuleDefinition *This,
        SAFEARRAY *parameters);

    /*** IFsrmClassifierModuleDefinition methods ***/
    HRESULT (STDMETHODCALLTYPE *get_PropertiesAffected)(
        IFsrmClassifierModuleDefinition *This,
        SAFEARRAY **propertiesAffected);

    HRESULT (STDMETHODCALLTYPE *put_PropertiesAffected)(
        IFsrmClassifierModuleDefinition *This,
        SAFEARRAY *propertiesAffected);

    HRESULT (STDMETHODCALLTYPE *get_PropertiesUsed)(
        IFsrmClassifierModuleDefinition *This,
        SAFEARRAY **propertiesUsed);

    HRESULT (STDMETHODCALLTYPE *put_PropertiesUsed)(
        IFsrmClassifierModuleDefinition *This,
        SAFEARRAY *propertiesUsed);

    HRESULT (STDMETHODCALLTYPE *get_NeedsExplicitValue)(
        IFsrmClassifierModuleDefinition *This,
        VARIANT_BOOL *needsExplicitValue);

    HRESULT (STDMETHODCALLTYPE *put_NeedsExplicitValue)(
        IFsrmClassifierModuleDefinition *This,
        VARIANT_BOOL needsExplicitValue);

    END_INTERFACE
} IFsrmClassifierModuleDefinitionVtbl;

interface IFsrmClassifierModuleDefinition {
    CONST_VTBL IFsrmClassifierModuleDefinitionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFsrmClassifierModuleDefinition_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFsrmClassifierModuleDefinition_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFsrmClassifierModuleDefinition_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFsrmClassifierModuleDefinition_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFsrmClassifierModuleDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFsrmClassifierModuleDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFsrmClassifierModuleDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFsrmObject methods ***/
#define IFsrmClassifierModuleDefinition_get_Id(This,id) (This)->lpVtbl->get_Id(This,id)
#define IFsrmClassifierModuleDefinition_get_Description(This,description) (This)->lpVtbl->get_Description(This,description)
#define IFsrmClassifierModuleDefinition_put_Description(This,description) (This)->lpVtbl->put_Description(This,description)
#define IFsrmClassifierModuleDefinition_Delete(This) (This)->lpVtbl->Delete(This)
#define IFsrmClassifierModuleDefinition_Commit(This) (This)->lpVtbl->Commit(This)
/*** IFsrmPipelineModuleDefinition methods ***/
#define IFsrmClassifierModuleDefinition_get_ModuleClsid(This,moduleClsid) (This)->lpVtbl->get_ModuleClsid(This,moduleClsid)
#define IFsrmClassifierModuleDefinition_put_ModuleClsid(This,moduleClsid) (This)->lpVtbl->put_ModuleClsid(This,moduleClsid)
#define IFsrmClassifierModuleDefinition_get_Name(This,name) (This)->lpVtbl->get_Name(This,name)
#define IFsrmClassifierModuleDefinition_put_Name(This,name) (This)->lpVtbl->put_Name(This,name)
#define IFsrmClassifierModuleDefinition_get_Company(This,company) (This)->lpVtbl->get_Company(This,company)
#define IFsrmClassifierModuleDefinition_put_Company(This,company) (This)->lpVtbl->put_Company(This,company)
#define IFsrmClassifierModuleDefinition_get_Version(This,version) (This)->lpVtbl->get_Version(This,version)
#define IFsrmClassifierModuleDefinition_put_Version(This,version) (This)->lpVtbl->put_Version(This,version)
#define IFsrmClassifierModuleDefinition_get_ModuleType(This,moduleType) (This)->lpVtbl->get_ModuleType(This,moduleType)
#define IFsrmClassifierModuleDefinition_get_Enabled(This,enabled) (This)->lpVtbl->get_Enabled(This,enabled)
#define IFsrmClassifierModuleDefinition_put_Enabled(This,enabled) (This)->lpVtbl->put_Enabled(This,enabled)
#define IFsrmClassifierModuleDefinition_get_NeedsFileContent(This,needsFileContent) (This)->lpVtbl->get_NeedsFileContent(This,needsFileContent)
#define IFsrmClassifierModuleDefinition_put_NeedsFileContent(This,needsFileContent) (This)->lpVtbl->put_NeedsFileContent(This,needsFileContent)
#define IFsrmClassifierModuleDefinition_get_Account(This,retrievalAccount) (This)->lpVtbl->get_Account(This,retrievalAccount)
#define IFsrmClassifierModuleDefinition_put_Account(This,retrievalAccount) (This)->lpVtbl->put_Account(This,retrievalAccount)
#define IFsrmClassifierModuleDefinition_get_SupportedExtensions(This,supportedExtensions) (This)->lpVtbl->get_SupportedExtensions(This,supportedExtensions)
#define IFsrmClassifierModuleDefinition_put_SupportedExtensions(This,supportedExtensions) (This)->lpVtbl->put_SupportedExtensions(This,supportedExtensions)
#define IFsrmClassifierModuleDefinition_get_Parameters(This,parameters) (This)->lpVtbl->get_Parameters(This,parameters)
#define IFsrmClassifierModuleDefinition_put_Parameters(This,parameters) (This)->lpVtbl->put_Parameters(This,parameters)
/*** IFsrmClassifierModuleDefinition methods ***/
#define IFsrmClassifierModuleDefinition_get_PropertiesAffected(This,propertiesAffected) (This)->lpVtbl->get_PropertiesAffected(This,propertiesAffected)
#define IFsrmClassifierModuleDefinition_put_PropertiesAffected(This,propertiesAffected) (This)->lpVtbl->put_PropertiesAffected(This,propertiesAffected)
#define IFsrmClassifierModuleDefinition_get_PropertiesUsed(This,propertiesUsed) (This)->lpVtbl->get_PropertiesUsed(This,propertiesUsed)
#define IFsrmClassifierModuleDefinition_put_PropertiesUsed(This,propertiesUsed) (This)->lpVtbl->put_PropertiesUsed(This,propertiesUsed)
#define IFsrmClassifierModuleDefinition_get_NeedsExplicitValue(This,needsExplicitValue) (This)->lpVtbl->get_NeedsExplicitValue(This,needsExplicitValue)
#define IFsrmClassifierModuleDefinition_put_NeedsExplicitValue(This,needsExplicitValue) (This)->lpVtbl->put_NeedsExplicitValue(This,needsExplicitValue)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_QueryInterface(IFsrmClassifierModuleDefinition* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IFsrmClassifierModuleDefinition_AddRef(IFsrmClassifierModuleDefinition* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IFsrmClassifierModuleDefinition_Release(IFsrmClassifierModuleDefinition* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_GetTypeInfoCount(IFsrmClassifierModuleDefinition* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_GetTypeInfo(IFsrmClassifierModuleDefinition* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_GetIDsOfNames(IFsrmClassifierModuleDefinition* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_Invoke(IFsrmClassifierModuleDefinition* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFsrmObject methods ***/
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_get_Id(IFsrmClassifierModuleDefinition* This,FSRM_OBJECT_ID *id) {
    return This->lpVtbl->get_Id(This,id);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_get_Description(IFsrmClassifierModuleDefinition* This,BSTR *description) {
    return This->lpVtbl->get_Description(This,description);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_put_Description(IFsrmClassifierModuleDefinition* This,BSTR description) {
    return This->lpVtbl->put_Description(This,description);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_Delete(IFsrmClassifierModuleDefinition* This) {
    return This->lpVtbl->Delete(This);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_Commit(IFsrmClassifierModuleDefinition* This) {
    return This->lpVtbl->Commit(This);
}
/*** IFsrmPipelineModuleDefinition methods ***/
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_get_ModuleClsid(IFsrmClassifierModuleDefinition* This,BSTR *moduleClsid) {
    return This->lpVtbl->get_ModuleClsid(This,moduleClsid);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_put_ModuleClsid(IFsrmClassifierModuleDefinition* This,BSTR moduleClsid) {
    return This->lpVtbl->put_ModuleClsid(This,moduleClsid);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_get_Name(IFsrmClassifierModuleDefinition* This,BSTR *name) {
    return This->lpVtbl->get_Name(This,name);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_put_Name(IFsrmClassifierModuleDefinition* This,BSTR name) {
    return This->lpVtbl->put_Name(This,name);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_get_Company(IFsrmClassifierModuleDefinition* This,BSTR *company) {
    return This->lpVtbl->get_Company(This,company);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_put_Company(IFsrmClassifierModuleDefinition* This,BSTR company) {
    return This->lpVtbl->put_Company(This,company);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_get_Version(IFsrmClassifierModuleDefinition* This,BSTR *version) {
    return This->lpVtbl->get_Version(This,version);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_put_Version(IFsrmClassifierModuleDefinition* This,BSTR version) {
    return This->lpVtbl->put_Version(This,version);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_get_ModuleType(IFsrmClassifierModuleDefinition* This,FsrmPipelineModuleType *moduleType) {
    return This->lpVtbl->get_ModuleType(This,moduleType);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_get_Enabled(IFsrmClassifierModuleDefinition* This,VARIANT_BOOL *enabled) {
    return This->lpVtbl->get_Enabled(This,enabled);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_put_Enabled(IFsrmClassifierModuleDefinition* This,VARIANT_BOOL enabled) {
    return This->lpVtbl->put_Enabled(This,enabled);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_get_NeedsFileContent(IFsrmClassifierModuleDefinition* This,VARIANT_BOOL *needsFileContent) {
    return This->lpVtbl->get_NeedsFileContent(This,needsFileContent);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_put_NeedsFileContent(IFsrmClassifierModuleDefinition* This,VARIANT_BOOL needsFileContent) {
    return This->lpVtbl->put_NeedsFileContent(This,needsFileContent);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_get_Account(IFsrmClassifierModuleDefinition* This,FsrmAccountType *retrievalAccount) {
    return This->lpVtbl->get_Account(This,retrievalAccount);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_put_Account(IFsrmClassifierModuleDefinition* This,FsrmAccountType retrievalAccount) {
    return This->lpVtbl->put_Account(This,retrievalAccount);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_get_SupportedExtensions(IFsrmClassifierModuleDefinition* This,SAFEARRAY **supportedExtensions) {
    return This->lpVtbl->get_SupportedExtensions(This,supportedExtensions);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_put_SupportedExtensions(IFsrmClassifierModuleDefinition* This,SAFEARRAY *supportedExtensions) {
    return This->lpVtbl->put_SupportedExtensions(This,supportedExtensions);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_get_Parameters(IFsrmClassifierModuleDefinition* This,SAFEARRAY **parameters) {
    return This->lpVtbl->get_Parameters(This,parameters);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_put_Parameters(IFsrmClassifierModuleDefinition* This,SAFEARRAY *parameters) {
    return This->lpVtbl->put_Parameters(This,parameters);
}
/*** IFsrmClassifierModuleDefinition methods ***/
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_get_PropertiesAffected(IFsrmClassifierModuleDefinition* This,SAFEARRAY **propertiesAffected) {
    return This->lpVtbl->get_PropertiesAffected(This,propertiesAffected);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_put_PropertiesAffected(IFsrmClassifierModuleDefinition* This,SAFEARRAY *propertiesAffected) {
    return This->lpVtbl->put_PropertiesAffected(This,propertiesAffected);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_get_PropertiesUsed(IFsrmClassifierModuleDefinition* This,SAFEARRAY **propertiesUsed) {
    return This->lpVtbl->get_PropertiesUsed(This,propertiesUsed);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_put_PropertiesUsed(IFsrmClassifierModuleDefinition* This,SAFEARRAY *propertiesUsed) {
    return This->lpVtbl->put_PropertiesUsed(This,propertiesUsed);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_get_NeedsExplicitValue(IFsrmClassifierModuleDefinition* This,VARIANT_BOOL *needsExplicitValue) {
    return This->lpVtbl->get_NeedsExplicitValue(This,needsExplicitValue);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleDefinition_put_NeedsExplicitValue(IFsrmClassifierModuleDefinition* This,VARIANT_BOOL needsExplicitValue) {
    return This->lpVtbl->put_NeedsExplicitValue(This,needsExplicitValue);
}
#endif
#endif

#endif


#endif  /* __IFsrmClassifierModuleDefinition_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFsrmStorageModuleDefinition interface
 */
#ifndef __IFsrmStorageModuleDefinition_INTERFACE_DEFINED__
#define __IFsrmStorageModuleDefinition_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFsrmStorageModuleDefinition, 0x15a81350, 0x497d, 0x4aba, 0x80,0xe9, 0xd4,0xdb,0xcc,0x55,0x21,0xfe);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("15a81350-497d-4aba-80e9-d4dbcc5521fe")
IFsrmStorageModuleDefinition : public IFsrmPipelineModuleDefinition
{
    virtual HRESULT STDMETHODCALLTYPE get_Capabilities(
        FsrmStorageModuleCaps *capabilities) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Capabilities(
        FsrmStorageModuleCaps capabilities) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_StorageType(
        FsrmStorageModuleType *storageType) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_StorageType(
        FsrmStorageModuleType storageType) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_UpdatesFileContent(
        VARIANT_BOOL *updatesFileContent) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_UpdatesFileContent(
        VARIANT_BOOL updatesFileContent) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFsrmStorageModuleDefinition, 0x15a81350, 0x497d, 0x4aba, 0x80,0xe9, 0xd4,0xdb,0xcc,0x55,0x21,0xfe)
#endif
#else
typedef struct IFsrmStorageModuleDefinitionVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFsrmStorageModuleDefinition *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFsrmStorageModuleDefinition *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFsrmStorageModuleDefinition *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFsrmStorageModuleDefinition *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFsrmStorageModuleDefinition *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFsrmStorageModuleDefinition *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFsrmStorageModuleDefinition *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFsrmObject methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Id)(
        IFsrmStorageModuleDefinition *This,
        FSRM_OBJECT_ID *id);

    HRESULT (STDMETHODCALLTYPE *get_Description)(
        IFsrmStorageModuleDefinition *This,
        BSTR *description);

    HRESULT (STDMETHODCALLTYPE *put_Description)(
        IFsrmStorageModuleDefinition *This,
        BSTR description);

    HRESULT (STDMETHODCALLTYPE *Delete)(
        IFsrmStorageModuleDefinition *This);

    HRESULT (STDMETHODCALLTYPE *Commit)(
        IFsrmStorageModuleDefinition *This);

    /*** IFsrmPipelineModuleDefinition methods ***/
    HRESULT (STDMETHODCALLTYPE *get_ModuleClsid)(
        IFsrmStorageModuleDefinition *This,
        BSTR *moduleClsid);

    HRESULT (STDMETHODCALLTYPE *put_ModuleClsid)(
        IFsrmStorageModuleDefinition *This,
        BSTR moduleClsid);

    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IFsrmStorageModuleDefinition *This,
        BSTR *name);

    HRESULT (STDMETHODCALLTYPE *put_Name)(
        IFsrmStorageModuleDefinition *This,
        BSTR name);

    HRESULT (STDMETHODCALLTYPE *get_Company)(
        IFsrmStorageModuleDefinition *This,
        BSTR *company);

    HRESULT (STDMETHODCALLTYPE *put_Company)(
        IFsrmStorageModuleDefinition *This,
        BSTR company);

    HRESULT (STDMETHODCALLTYPE *get_Version)(
        IFsrmStorageModuleDefinition *This,
        BSTR *version);

    HRESULT (STDMETHODCALLTYPE *put_Version)(
        IFsrmStorageModuleDefinition *This,
        BSTR version);

    HRESULT (STDMETHODCALLTYPE *get_ModuleType)(
        IFsrmStorageModuleDefinition *This,
        FsrmPipelineModuleType *moduleType);

    HRESULT (STDMETHODCALLTYPE *get_Enabled)(
        IFsrmStorageModuleDefinition *This,
        VARIANT_BOOL *enabled);

    HRESULT (STDMETHODCALLTYPE *put_Enabled)(
        IFsrmStorageModuleDefinition *This,
        VARIANT_BOOL enabled);

    HRESULT (STDMETHODCALLTYPE *get_NeedsFileContent)(
        IFsrmStorageModuleDefinition *This,
        VARIANT_BOOL *needsFileContent);

    HRESULT (STDMETHODCALLTYPE *put_NeedsFileContent)(
        IFsrmStorageModuleDefinition *This,
        VARIANT_BOOL needsFileContent);

    HRESULT (STDMETHODCALLTYPE *get_Account)(
        IFsrmStorageModuleDefinition *This,
        FsrmAccountType *retrievalAccount);

    HRESULT (STDMETHODCALLTYPE *put_Account)(
        IFsrmStorageModuleDefinition *This,
        FsrmAccountType retrievalAccount);

    HRESULT (STDMETHODCALLTYPE *get_SupportedExtensions)(
        IFsrmStorageModuleDefinition *This,
        SAFEARRAY **supportedExtensions);

    HRESULT (STDMETHODCALLTYPE *put_SupportedExtensions)(
        IFsrmStorageModuleDefinition *This,
        SAFEARRAY *supportedExtensions);

    HRESULT (STDMETHODCALLTYPE *get_Parameters)(
        IFsrmStorageModuleDefinition *This,
        SAFEARRAY **parameters);

    HRESULT (STDMETHODCALLTYPE *put_Parameters)(
        IFsrmStorageModuleDefinition *This,
        SAFEARRAY *parameters);

    /*** IFsrmStorageModuleDefinition methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Capabilities)(
        IFsrmStorageModuleDefinition *This,
        FsrmStorageModuleCaps *capabilities);

    HRESULT (STDMETHODCALLTYPE *put_Capabilities)(
        IFsrmStorageModuleDefinition *This,
        FsrmStorageModuleCaps capabilities);

    HRESULT (STDMETHODCALLTYPE *get_StorageType)(
        IFsrmStorageModuleDefinition *This,
        FsrmStorageModuleType *storageType);

    HRESULT (STDMETHODCALLTYPE *put_StorageType)(
        IFsrmStorageModuleDefinition *This,
        FsrmStorageModuleType storageType);

    HRESULT (STDMETHODCALLTYPE *get_UpdatesFileContent)(
        IFsrmStorageModuleDefinition *This,
        VARIANT_BOOL *updatesFileContent);

    HRESULT (STDMETHODCALLTYPE *put_UpdatesFileContent)(
        IFsrmStorageModuleDefinition *This,
        VARIANT_BOOL updatesFileContent);

    END_INTERFACE
} IFsrmStorageModuleDefinitionVtbl;

interface IFsrmStorageModuleDefinition {
    CONST_VTBL IFsrmStorageModuleDefinitionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFsrmStorageModuleDefinition_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFsrmStorageModuleDefinition_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFsrmStorageModuleDefinition_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFsrmStorageModuleDefinition_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFsrmStorageModuleDefinition_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFsrmStorageModuleDefinition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFsrmStorageModuleDefinition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFsrmObject methods ***/
#define IFsrmStorageModuleDefinition_get_Id(This,id) (This)->lpVtbl->get_Id(This,id)
#define IFsrmStorageModuleDefinition_get_Description(This,description) (This)->lpVtbl->get_Description(This,description)
#define IFsrmStorageModuleDefinition_put_Description(This,description) (This)->lpVtbl->put_Description(This,description)
#define IFsrmStorageModuleDefinition_Delete(This) (This)->lpVtbl->Delete(This)
#define IFsrmStorageModuleDefinition_Commit(This) (This)->lpVtbl->Commit(This)
/*** IFsrmPipelineModuleDefinition methods ***/
#define IFsrmStorageModuleDefinition_get_ModuleClsid(This,moduleClsid) (This)->lpVtbl->get_ModuleClsid(This,moduleClsid)
#define IFsrmStorageModuleDefinition_put_ModuleClsid(This,moduleClsid) (This)->lpVtbl->put_ModuleClsid(This,moduleClsid)
#define IFsrmStorageModuleDefinition_get_Name(This,name) (This)->lpVtbl->get_Name(This,name)
#define IFsrmStorageModuleDefinition_put_Name(This,name) (This)->lpVtbl->put_Name(This,name)
#define IFsrmStorageModuleDefinition_get_Company(This,company) (This)->lpVtbl->get_Company(This,company)
#define IFsrmStorageModuleDefinition_put_Company(This,company) (This)->lpVtbl->put_Company(This,company)
#define IFsrmStorageModuleDefinition_get_Version(This,version) (This)->lpVtbl->get_Version(This,version)
#define IFsrmStorageModuleDefinition_put_Version(This,version) (This)->lpVtbl->put_Version(This,version)
#define IFsrmStorageModuleDefinition_get_ModuleType(This,moduleType) (This)->lpVtbl->get_ModuleType(This,moduleType)
#define IFsrmStorageModuleDefinition_get_Enabled(This,enabled) (This)->lpVtbl->get_Enabled(This,enabled)
#define IFsrmStorageModuleDefinition_put_Enabled(This,enabled) (This)->lpVtbl->put_Enabled(This,enabled)
#define IFsrmStorageModuleDefinition_get_NeedsFileContent(This,needsFileContent) (This)->lpVtbl->get_NeedsFileContent(This,needsFileContent)
#define IFsrmStorageModuleDefinition_put_NeedsFileContent(This,needsFileContent) (This)->lpVtbl->put_NeedsFileContent(This,needsFileContent)
#define IFsrmStorageModuleDefinition_get_Account(This,retrievalAccount) (This)->lpVtbl->get_Account(This,retrievalAccount)
#define IFsrmStorageModuleDefinition_put_Account(This,retrievalAccount) (This)->lpVtbl->put_Account(This,retrievalAccount)
#define IFsrmStorageModuleDefinition_get_SupportedExtensions(This,supportedExtensions) (This)->lpVtbl->get_SupportedExtensions(This,supportedExtensions)
#define IFsrmStorageModuleDefinition_put_SupportedExtensions(This,supportedExtensions) (This)->lpVtbl->put_SupportedExtensions(This,supportedExtensions)
#define IFsrmStorageModuleDefinition_get_Parameters(This,parameters) (This)->lpVtbl->get_Parameters(This,parameters)
#define IFsrmStorageModuleDefinition_put_Parameters(This,parameters) (This)->lpVtbl->put_Parameters(This,parameters)
/*** IFsrmStorageModuleDefinition methods ***/
#define IFsrmStorageModuleDefinition_get_Capabilities(This,capabilities) (This)->lpVtbl->get_Capabilities(This,capabilities)
#define IFsrmStorageModuleDefinition_put_Capabilities(This,capabilities) (This)->lpVtbl->put_Capabilities(This,capabilities)
#define IFsrmStorageModuleDefinition_get_StorageType(This,storageType) (This)->lpVtbl->get_StorageType(This,storageType)
#define IFsrmStorageModuleDefinition_put_StorageType(This,storageType) (This)->lpVtbl->put_StorageType(This,storageType)
#define IFsrmStorageModuleDefinition_get_UpdatesFileContent(This,updatesFileContent) (This)->lpVtbl->get_UpdatesFileContent(This,updatesFileContent)
#define IFsrmStorageModuleDefinition_put_UpdatesFileContent(This,updatesFileContent) (This)->lpVtbl->put_UpdatesFileContent(This,updatesFileContent)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_QueryInterface(IFsrmStorageModuleDefinition* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IFsrmStorageModuleDefinition_AddRef(IFsrmStorageModuleDefinition* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IFsrmStorageModuleDefinition_Release(IFsrmStorageModuleDefinition* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_GetTypeInfoCount(IFsrmStorageModuleDefinition* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_GetTypeInfo(IFsrmStorageModuleDefinition* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_GetIDsOfNames(IFsrmStorageModuleDefinition* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_Invoke(IFsrmStorageModuleDefinition* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFsrmObject methods ***/
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_get_Id(IFsrmStorageModuleDefinition* This,FSRM_OBJECT_ID *id) {
    return This->lpVtbl->get_Id(This,id);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_get_Description(IFsrmStorageModuleDefinition* This,BSTR *description) {
    return This->lpVtbl->get_Description(This,description);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_put_Description(IFsrmStorageModuleDefinition* This,BSTR description) {
    return This->lpVtbl->put_Description(This,description);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_Delete(IFsrmStorageModuleDefinition* This) {
    return This->lpVtbl->Delete(This);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_Commit(IFsrmStorageModuleDefinition* This) {
    return This->lpVtbl->Commit(This);
}
/*** IFsrmPipelineModuleDefinition methods ***/
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_get_ModuleClsid(IFsrmStorageModuleDefinition* This,BSTR *moduleClsid) {
    return This->lpVtbl->get_ModuleClsid(This,moduleClsid);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_put_ModuleClsid(IFsrmStorageModuleDefinition* This,BSTR moduleClsid) {
    return This->lpVtbl->put_ModuleClsid(This,moduleClsid);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_get_Name(IFsrmStorageModuleDefinition* This,BSTR *name) {
    return This->lpVtbl->get_Name(This,name);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_put_Name(IFsrmStorageModuleDefinition* This,BSTR name) {
    return This->lpVtbl->put_Name(This,name);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_get_Company(IFsrmStorageModuleDefinition* This,BSTR *company) {
    return This->lpVtbl->get_Company(This,company);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_put_Company(IFsrmStorageModuleDefinition* This,BSTR company) {
    return This->lpVtbl->put_Company(This,company);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_get_Version(IFsrmStorageModuleDefinition* This,BSTR *version) {
    return This->lpVtbl->get_Version(This,version);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_put_Version(IFsrmStorageModuleDefinition* This,BSTR version) {
    return This->lpVtbl->put_Version(This,version);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_get_ModuleType(IFsrmStorageModuleDefinition* This,FsrmPipelineModuleType *moduleType) {
    return This->lpVtbl->get_ModuleType(This,moduleType);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_get_Enabled(IFsrmStorageModuleDefinition* This,VARIANT_BOOL *enabled) {
    return This->lpVtbl->get_Enabled(This,enabled);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_put_Enabled(IFsrmStorageModuleDefinition* This,VARIANT_BOOL enabled) {
    return This->lpVtbl->put_Enabled(This,enabled);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_get_NeedsFileContent(IFsrmStorageModuleDefinition* This,VARIANT_BOOL *needsFileContent) {
    return This->lpVtbl->get_NeedsFileContent(This,needsFileContent);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_put_NeedsFileContent(IFsrmStorageModuleDefinition* This,VARIANT_BOOL needsFileContent) {
    return This->lpVtbl->put_NeedsFileContent(This,needsFileContent);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_get_Account(IFsrmStorageModuleDefinition* This,FsrmAccountType *retrievalAccount) {
    return This->lpVtbl->get_Account(This,retrievalAccount);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_put_Account(IFsrmStorageModuleDefinition* This,FsrmAccountType retrievalAccount) {
    return This->lpVtbl->put_Account(This,retrievalAccount);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_get_SupportedExtensions(IFsrmStorageModuleDefinition* This,SAFEARRAY **supportedExtensions) {
    return This->lpVtbl->get_SupportedExtensions(This,supportedExtensions);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_put_SupportedExtensions(IFsrmStorageModuleDefinition* This,SAFEARRAY *supportedExtensions) {
    return This->lpVtbl->put_SupportedExtensions(This,supportedExtensions);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_get_Parameters(IFsrmStorageModuleDefinition* This,SAFEARRAY **parameters) {
    return This->lpVtbl->get_Parameters(This,parameters);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_put_Parameters(IFsrmStorageModuleDefinition* This,SAFEARRAY *parameters) {
    return This->lpVtbl->put_Parameters(This,parameters);
}
/*** IFsrmStorageModuleDefinition methods ***/
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_get_Capabilities(IFsrmStorageModuleDefinition* This,FsrmStorageModuleCaps *capabilities) {
    return This->lpVtbl->get_Capabilities(This,capabilities);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_put_Capabilities(IFsrmStorageModuleDefinition* This,FsrmStorageModuleCaps capabilities) {
    return This->lpVtbl->put_Capabilities(This,capabilities);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_get_StorageType(IFsrmStorageModuleDefinition* This,FsrmStorageModuleType *storageType) {
    return This->lpVtbl->get_StorageType(This,storageType);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_put_StorageType(IFsrmStorageModuleDefinition* This,FsrmStorageModuleType storageType) {
    return This->lpVtbl->put_StorageType(This,storageType);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_get_UpdatesFileContent(IFsrmStorageModuleDefinition* This,VARIANT_BOOL *updatesFileContent) {
    return This->lpVtbl->get_UpdatesFileContent(This,updatesFileContent);
}
static FORCEINLINE HRESULT IFsrmStorageModuleDefinition_put_UpdatesFileContent(IFsrmStorageModuleDefinition* This,VARIANT_BOOL updatesFileContent) {
    return This->lpVtbl->put_UpdatesFileContent(This,updatesFileContent);
}
#endif
#endif

#endif


#endif  /* __IFsrmStorageModuleDefinition_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFsrmClassificationManager interface
 */
#ifndef __IFsrmClassificationManager_INTERFACE_DEFINED__
#define __IFsrmClassificationManager_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFsrmClassificationManager, 0xd2dc89da, 0xee91, 0x48a0, 0x85,0xd8, 0xcc,0x72,0xa5,0x6f,0x7d,0x04);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d2dc89da-ee91-48a0-85d8-cc72a56f7d04")
IFsrmClassificationManager : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_ClassificationReportFormats(
        SAFEARRAY **formats) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ClassificationReportFormats(
        SAFEARRAY *formats) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Logging(
        LONG *logging) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_Logging(
        LONG logging) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ClassificationReportMailTo(
        BSTR *mailTo) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ClassificationReportMailTo(
        BSTR mailTo) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ClassificationReportEnabled(
        VARIANT_BOOL *reportEnabled) = 0;

    virtual HRESULT STDMETHODCALLTYPE put_ClassificationReportEnabled(
        VARIANT_BOOL reportEnabled) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ClassificationLastReportPathWithoutExtension(
        BSTR *lastReportPath) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ClassificationLastError(
        BSTR *lastError) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ClassificationRunningStatus(
        FsrmReportRunningStatus *runningStatus) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumPropertyDefinitions(
        FsrmEnumOptions options,
        IFsrmCollection **propertyDefinitions) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreatePropertyDefinition(
        IFsrmPropertyDefinition **propertyDefinition) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetPropertyDefinition(
        BSTR propertyName,
        IFsrmPropertyDefinition **propertyDefinition) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumRules(
        FsrmRuleType ruleType,
        FsrmEnumOptions options,
        IFsrmCollection **Rules) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateRule(
        FsrmRuleType ruleType,
        IFsrmRule **Rule) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetRule(
        BSTR ruleName,
        FsrmRuleType ruleType,
        IFsrmRule **Rule) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumModuleDefinitions(
        FsrmPipelineModuleType moduleType,
        FsrmEnumOptions options,
        IFsrmCollection **moduleDefinitions) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateModuleDefinition(
        FsrmPipelineModuleType moduleType,
        IFsrmPipelineModuleDefinition **moduleDefinition) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetModuleDefinition(
        BSTR moduleName,
        FsrmPipelineModuleType moduleType,
        IFsrmPipelineModuleDefinition **moduleDefinition) = 0;

    virtual HRESULT STDMETHODCALLTYPE RunClassification(
        FsrmReportGenerationContext context,
        BSTR reserved) = 0;

    virtual HRESULT STDMETHODCALLTYPE WaitForClassificationCompletion(
        LONG waitSeconds,
        VARIANT_BOOL *completed) = 0;

    virtual HRESULT STDMETHODCALLTYPE CancelClassification(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumFileProperties(
        BSTR filePath,
        FsrmGetFilePropertyOptions options,
        IFsrmCollection **fileProperties) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFileProperty(
        BSTR filePath,
        BSTR propertyName,
        FsrmGetFilePropertyOptions options,
        IFsrmProperty **property) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetFileProperty(
        BSTR filePath,
        BSTR propertyName,
        BSTR propertyValue) = 0;

    virtual HRESULT STDMETHODCALLTYPE ClearFileProperty(
        BSTR filePath,
        BSTR property) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFsrmClassificationManager, 0xd2dc89da, 0xee91, 0x48a0, 0x85,0xd8, 0xcc,0x72,0xa5,0x6f,0x7d,0x04)
#endif
#else
typedef struct IFsrmClassificationManagerVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFsrmClassificationManager *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFsrmClassificationManager *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFsrmClassificationManager *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFsrmClassificationManager *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFsrmClassificationManager *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFsrmClassificationManager *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFsrmClassificationManager *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFsrmClassificationManager methods ***/
    HRESULT (STDMETHODCALLTYPE *get_ClassificationReportFormats)(
        IFsrmClassificationManager *This,
        SAFEARRAY **formats);

    HRESULT (STDMETHODCALLTYPE *put_ClassificationReportFormats)(
        IFsrmClassificationManager *This,
        SAFEARRAY *formats);

    HRESULT (STDMETHODCALLTYPE *get_Logging)(
        IFsrmClassificationManager *This,
        LONG *logging);

    HRESULT (STDMETHODCALLTYPE *put_Logging)(
        IFsrmClassificationManager *This,
        LONG logging);

    HRESULT (STDMETHODCALLTYPE *get_ClassificationReportMailTo)(
        IFsrmClassificationManager *This,
        BSTR *mailTo);

    HRESULT (STDMETHODCALLTYPE *put_ClassificationReportMailTo)(
        IFsrmClassificationManager *This,
        BSTR mailTo);

    HRESULT (STDMETHODCALLTYPE *get_ClassificationReportEnabled)(
        IFsrmClassificationManager *This,
        VARIANT_BOOL *reportEnabled);

    HRESULT (STDMETHODCALLTYPE *put_ClassificationReportEnabled)(
        IFsrmClassificationManager *This,
        VARIANT_BOOL reportEnabled);

    HRESULT (STDMETHODCALLTYPE *get_ClassificationLastReportPathWithoutExtension)(
        IFsrmClassificationManager *This,
        BSTR *lastReportPath);

    HRESULT (STDMETHODCALLTYPE *get_ClassificationLastError)(
        IFsrmClassificationManager *This,
        BSTR *lastError);

    HRESULT (STDMETHODCALLTYPE *get_ClassificationRunningStatus)(
        IFsrmClassificationManager *This,
        FsrmReportRunningStatus *runningStatus);

    HRESULT (STDMETHODCALLTYPE *EnumPropertyDefinitions)(
        IFsrmClassificationManager *This,
        FsrmEnumOptions options,
        IFsrmCollection **propertyDefinitions);

    HRESULT (STDMETHODCALLTYPE *CreatePropertyDefinition)(
        IFsrmClassificationManager *This,
        IFsrmPropertyDefinition **propertyDefinition);

    HRESULT (STDMETHODCALLTYPE *GetPropertyDefinition)(
        IFsrmClassificationManager *This,
        BSTR propertyName,
        IFsrmPropertyDefinition **propertyDefinition);

    HRESULT (STDMETHODCALLTYPE *EnumRules)(
        IFsrmClassificationManager *This,
        FsrmRuleType ruleType,
        FsrmEnumOptions options,
        IFsrmCollection **Rules);

    HRESULT (STDMETHODCALLTYPE *CreateRule)(
        IFsrmClassificationManager *This,
        FsrmRuleType ruleType,
        IFsrmRule **Rule);

    HRESULT (STDMETHODCALLTYPE *GetRule)(
        IFsrmClassificationManager *This,
        BSTR ruleName,
        FsrmRuleType ruleType,
        IFsrmRule **Rule);

    HRESULT (STDMETHODCALLTYPE *EnumModuleDefinitions)(
        IFsrmClassificationManager *This,
        FsrmPipelineModuleType moduleType,
        FsrmEnumOptions options,
        IFsrmCollection **moduleDefinitions);

    HRESULT (STDMETHODCALLTYPE *CreateModuleDefinition)(
        IFsrmClassificationManager *This,
        FsrmPipelineModuleType moduleType,
        IFsrmPipelineModuleDefinition **moduleDefinition);

    HRESULT (STDMETHODCALLTYPE *GetModuleDefinition)(
        IFsrmClassificationManager *This,
        BSTR moduleName,
        FsrmPipelineModuleType moduleType,
        IFsrmPipelineModuleDefinition **moduleDefinition);

    HRESULT (STDMETHODCALLTYPE *RunClassification)(
        IFsrmClassificationManager *This,
        FsrmReportGenerationContext context,
        BSTR reserved);

    HRESULT (STDMETHODCALLTYPE *WaitForClassificationCompletion)(
        IFsrmClassificationManager *This,
        LONG waitSeconds,
        VARIANT_BOOL *completed);

    HRESULT (STDMETHODCALLTYPE *CancelClassification)(
        IFsrmClassificationManager *This);

    HRESULT (STDMETHODCALLTYPE *EnumFileProperties)(
        IFsrmClassificationManager *This,
        BSTR filePath,
        FsrmGetFilePropertyOptions options,
        IFsrmCollection **fileProperties);

    HRESULT (STDMETHODCALLTYPE *GetFileProperty)(
        IFsrmClassificationManager *This,
        BSTR filePath,
        BSTR propertyName,
        FsrmGetFilePropertyOptions options,
        IFsrmProperty **property);

    HRESULT (STDMETHODCALLTYPE *SetFileProperty)(
        IFsrmClassificationManager *This,
        BSTR filePath,
        BSTR propertyName,
        BSTR propertyValue);

    HRESULT (STDMETHODCALLTYPE *ClearFileProperty)(
        IFsrmClassificationManager *This,
        BSTR filePath,
        BSTR property);

    END_INTERFACE
} IFsrmClassificationManagerVtbl;

interface IFsrmClassificationManager {
    CONST_VTBL IFsrmClassificationManagerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFsrmClassificationManager_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFsrmClassificationManager_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFsrmClassificationManager_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFsrmClassificationManager_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFsrmClassificationManager_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFsrmClassificationManager_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFsrmClassificationManager_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFsrmClassificationManager methods ***/
#define IFsrmClassificationManager_get_ClassificationReportFormats(This,formats) (This)->lpVtbl->get_ClassificationReportFormats(This,formats)
#define IFsrmClassificationManager_put_ClassificationReportFormats(This,formats) (This)->lpVtbl->put_ClassificationReportFormats(This,formats)
#define IFsrmClassificationManager_get_Logging(This,logging) (This)->lpVtbl->get_Logging(This,logging)
#define IFsrmClassificationManager_put_Logging(This,logging) (This)->lpVtbl->put_Logging(This,logging)
#define IFsrmClassificationManager_get_ClassificationReportMailTo(This,mailTo) (This)->lpVtbl->get_ClassificationReportMailTo(This,mailTo)
#define IFsrmClassificationManager_put_ClassificationReportMailTo(This,mailTo) (This)->lpVtbl->put_ClassificationReportMailTo(This,mailTo)
#define IFsrmClassificationManager_get_ClassificationReportEnabled(This,reportEnabled) (This)->lpVtbl->get_ClassificationReportEnabled(This,reportEnabled)
#define IFsrmClassificationManager_put_ClassificationReportEnabled(This,reportEnabled) (This)->lpVtbl->put_ClassificationReportEnabled(This,reportEnabled)
#define IFsrmClassificationManager_get_ClassificationLastReportPathWithoutExtension(This,lastReportPath) (This)->lpVtbl->get_ClassificationLastReportPathWithoutExtension(This,lastReportPath)
#define IFsrmClassificationManager_get_ClassificationLastError(This,lastError) (This)->lpVtbl->get_ClassificationLastError(This,lastError)
#define IFsrmClassificationManager_get_ClassificationRunningStatus(This,runningStatus) (This)->lpVtbl->get_ClassificationRunningStatus(This,runningStatus)
#define IFsrmClassificationManager_EnumPropertyDefinitions(This,options,propertyDefinitions) (This)->lpVtbl->EnumPropertyDefinitions(This,options,propertyDefinitions)
#define IFsrmClassificationManager_CreatePropertyDefinition(This,propertyDefinition) (This)->lpVtbl->CreatePropertyDefinition(This,propertyDefinition)
#define IFsrmClassificationManager_GetPropertyDefinition(This,propertyName,propertyDefinition) (This)->lpVtbl->GetPropertyDefinition(This,propertyName,propertyDefinition)
#define IFsrmClassificationManager_EnumRules(This,ruleType,options,Rules) (This)->lpVtbl->EnumRules(This,ruleType,options,Rules)
#define IFsrmClassificationManager_CreateRule(This,ruleType,Rule) (This)->lpVtbl->CreateRule(This,ruleType,Rule)
#define IFsrmClassificationManager_GetRule(This,ruleName,ruleType,Rule) (This)->lpVtbl->GetRule(This,ruleName,ruleType,Rule)
#define IFsrmClassificationManager_EnumModuleDefinitions(This,moduleType,options,moduleDefinitions) (This)->lpVtbl->EnumModuleDefinitions(This,moduleType,options,moduleDefinitions)
#define IFsrmClassificationManager_CreateModuleDefinition(This,moduleType,moduleDefinition) (This)->lpVtbl->CreateModuleDefinition(This,moduleType,moduleDefinition)
#define IFsrmClassificationManager_GetModuleDefinition(This,moduleName,moduleType,moduleDefinition) (This)->lpVtbl->GetModuleDefinition(This,moduleName,moduleType,moduleDefinition)
#define IFsrmClassificationManager_RunClassification(This,context,reserved) (This)->lpVtbl->RunClassification(This,context,reserved)
#define IFsrmClassificationManager_WaitForClassificationCompletion(This,waitSeconds,completed) (This)->lpVtbl->WaitForClassificationCompletion(This,waitSeconds,completed)
#define IFsrmClassificationManager_CancelClassification(This) (This)->lpVtbl->CancelClassification(This)
#define IFsrmClassificationManager_EnumFileProperties(This,filePath,options,fileProperties) (This)->lpVtbl->EnumFileProperties(This,filePath,options,fileProperties)
#define IFsrmClassificationManager_GetFileProperty(This,filePath,propertyName,options,property) (This)->lpVtbl->GetFileProperty(This,filePath,propertyName,options,property)
#define IFsrmClassificationManager_SetFileProperty(This,filePath,propertyName,propertyValue) (This)->lpVtbl->SetFileProperty(This,filePath,propertyName,propertyValue)
#define IFsrmClassificationManager_ClearFileProperty(This,filePath,property) (This)->lpVtbl->ClearFileProperty(This,filePath,property)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IFsrmClassificationManager_QueryInterface(IFsrmClassificationManager* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IFsrmClassificationManager_AddRef(IFsrmClassificationManager* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IFsrmClassificationManager_Release(IFsrmClassificationManager* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IFsrmClassificationManager_GetTypeInfoCount(IFsrmClassificationManager* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_GetTypeInfo(IFsrmClassificationManager* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_GetIDsOfNames(IFsrmClassificationManager* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_Invoke(IFsrmClassificationManager* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFsrmClassificationManager methods ***/
static FORCEINLINE HRESULT IFsrmClassificationManager_get_ClassificationReportFormats(IFsrmClassificationManager* This,SAFEARRAY **formats) {
    return This->lpVtbl->get_ClassificationReportFormats(This,formats);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_put_ClassificationReportFormats(IFsrmClassificationManager* This,SAFEARRAY *formats) {
    return This->lpVtbl->put_ClassificationReportFormats(This,formats);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_get_Logging(IFsrmClassificationManager* This,LONG *logging) {
    return This->lpVtbl->get_Logging(This,logging);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_put_Logging(IFsrmClassificationManager* This,LONG logging) {
    return This->lpVtbl->put_Logging(This,logging);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_get_ClassificationReportMailTo(IFsrmClassificationManager* This,BSTR *mailTo) {
    return This->lpVtbl->get_ClassificationReportMailTo(This,mailTo);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_put_ClassificationReportMailTo(IFsrmClassificationManager* This,BSTR mailTo) {
    return This->lpVtbl->put_ClassificationReportMailTo(This,mailTo);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_get_ClassificationReportEnabled(IFsrmClassificationManager* This,VARIANT_BOOL *reportEnabled) {
    return This->lpVtbl->get_ClassificationReportEnabled(This,reportEnabled);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_put_ClassificationReportEnabled(IFsrmClassificationManager* This,VARIANT_BOOL reportEnabled) {
    return This->lpVtbl->put_ClassificationReportEnabled(This,reportEnabled);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_get_ClassificationLastReportPathWithoutExtension(IFsrmClassificationManager* This,BSTR *lastReportPath) {
    return This->lpVtbl->get_ClassificationLastReportPathWithoutExtension(This,lastReportPath);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_get_ClassificationLastError(IFsrmClassificationManager* This,BSTR *lastError) {
    return This->lpVtbl->get_ClassificationLastError(This,lastError);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_get_ClassificationRunningStatus(IFsrmClassificationManager* This,FsrmReportRunningStatus *runningStatus) {
    return This->lpVtbl->get_ClassificationRunningStatus(This,runningStatus);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_EnumPropertyDefinitions(IFsrmClassificationManager* This,FsrmEnumOptions options,IFsrmCollection **propertyDefinitions) {
    return This->lpVtbl->EnumPropertyDefinitions(This,options,propertyDefinitions);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_CreatePropertyDefinition(IFsrmClassificationManager* This,IFsrmPropertyDefinition **propertyDefinition) {
    return This->lpVtbl->CreatePropertyDefinition(This,propertyDefinition);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_GetPropertyDefinition(IFsrmClassificationManager* This,BSTR propertyName,IFsrmPropertyDefinition **propertyDefinition) {
    return This->lpVtbl->GetPropertyDefinition(This,propertyName,propertyDefinition);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_EnumRules(IFsrmClassificationManager* This,FsrmRuleType ruleType,FsrmEnumOptions options,IFsrmCollection **Rules) {
    return This->lpVtbl->EnumRules(This,ruleType,options,Rules);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_CreateRule(IFsrmClassificationManager* This,FsrmRuleType ruleType,IFsrmRule **Rule) {
    return This->lpVtbl->CreateRule(This,ruleType,Rule);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_GetRule(IFsrmClassificationManager* This,BSTR ruleName,FsrmRuleType ruleType,IFsrmRule **Rule) {
    return This->lpVtbl->GetRule(This,ruleName,ruleType,Rule);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_EnumModuleDefinitions(IFsrmClassificationManager* This,FsrmPipelineModuleType moduleType,FsrmEnumOptions options,IFsrmCollection **moduleDefinitions) {
    return This->lpVtbl->EnumModuleDefinitions(This,moduleType,options,moduleDefinitions);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_CreateModuleDefinition(IFsrmClassificationManager* This,FsrmPipelineModuleType moduleType,IFsrmPipelineModuleDefinition **moduleDefinition) {
    return This->lpVtbl->CreateModuleDefinition(This,moduleType,moduleDefinition);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_GetModuleDefinition(IFsrmClassificationManager* This,BSTR moduleName,FsrmPipelineModuleType moduleType,IFsrmPipelineModuleDefinition **moduleDefinition) {
    return This->lpVtbl->GetModuleDefinition(This,moduleName,moduleType,moduleDefinition);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_RunClassification(IFsrmClassificationManager* This,FsrmReportGenerationContext context,BSTR reserved) {
    return This->lpVtbl->RunClassification(This,context,reserved);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_WaitForClassificationCompletion(IFsrmClassificationManager* This,LONG waitSeconds,VARIANT_BOOL *completed) {
    return This->lpVtbl->WaitForClassificationCompletion(This,waitSeconds,completed);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_CancelClassification(IFsrmClassificationManager* This) {
    return This->lpVtbl->CancelClassification(This);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_EnumFileProperties(IFsrmClassificationManager* This,BSTR filePath,FsrmGetFilePropertyOptions options,IFsrmCollection **fileProperties) {
    return This->lpVtbl->EnumFileProperties(This,filePath,options,fileProperties);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_GetFileProperty(IFsrmClassificationManager* This,BSTR filePath,BSTR propertyName,FsrmGetFilePropertyOptions options,IFsrmProperty **property) {
    return This->lpVtbl->GetFileProperty(This,filePath,propertyName,options,property);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_SetFileProperty(IFsrmClassificationManager* This,BSTR filePath,BSTR propertyName,BSTR propertyValue) {
    return This->lpVtbl->SetFileProperty(This,filePath,propertyName,propertyValue);
}
static FORCEINLINE HRESULT IFsrmClassificationManager_ClearFileProperty(IFsrmClassificationManager* This,BSTR filePath,BSTR property) {
    return This->lpVtbl->ClearFileProperty(This,filePath,property);
}
#endif
#endif

#endif


#endif  /* __IFsrmClassificationManager_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFsrmClassificationManager2 interface
 */
#ifndef __IFsrmClassificationManager2_INTERFACE_DEFINED__
#define __IFsrmClassificationManager2_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFsrmClassificationManager2, 0x0004c1c9, 0x127e, 0x4765, 0xba,0x07, 0x6a,0x31,0x47,0xbc,0xa1,0x12);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("0004c1c9-127e-4765-ba07-6a3147bca112")
IFsrmClassificationManager2 : public IFsrmClassificationManager
{
    virtual HRESULT STDMETHODCALLTYPE ClassifyFiles(
        SAFEARRAY *filePaths,
        SAFEARRAY *propertyNames,
        SAFEARRAY *propertyValues,
        FsrmGetFilePropertyOptions options = FsrmGetFilePropertyOptions_None) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFsrmClassificationManager2, 0x0004c1c9, 0x127e, 0x4765, 0xba,0x07, 0x6a,0x31,0x47,0xbc,0xa1,0x12)
#endif
#else
typedef struct IFsrmClassificationManager2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFsrmClassificationManager2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFsrmClassificationManager2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFsrmClassificationManager2 *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFsrmClassificationManager2 *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFsrmClassificationManager2 *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFsrmClassificationManager2 *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFsrmClassificationManager2 *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFsrmClassificationManager methods ***/
    HRESULT (STDMETHODCALLTYPE *get_ClassificationReportFormats)(
        IFsrmClassificationManager2 *This,
        SAFEARRAY **formats);

    HRESULT (STDMETHODCALLTYPE *put_ClassificationReportFormats)(
        IFsrmClassificationManager2 *This,
        SAFEARRAY *formats);

    HRESULT (STDMETHODCALLTYPE *get_Logging)(
        IFsrmClassificationManager2 *This,
        LONG *logging);

    HRESULT (STDMETHODCALLTYPE *put_Logging)(
        IFsrmClassificationManager2 *This,
        LONG logging);

    HRESULT (STDMETHODCALLTYPE *get_ClassificationReportMailTo)(
        IFsrmClassificationManager2 *This,
        BSTR *mailTo);

    HRESULT (STDMETHODCALLTYPE *put_ClassificationReportMailTo)(
        IFsrmClassificationManager2 *This,
        BSTR mailTo);

    HRESULT (STDMETHODCALLTYPE *get_ClassificationReportEnabled)(
        IFsrmClassificationManager2 *This,
        VARIANT_BOOL *reportEnabled);

    HRESULT (STDMETHODCALLTYPE *put_ClassificationReportEnabled)(
        IFsrmClassificationManager2 *This,
        VARIANT_BOOL reportEnabled);

    HRESULT (STDMETHODCALLTYPE *get_ClassificationLastReportPathWithoutExtension)(
        IFsrmClassificationManager2 *This,
        BSTR *lastReportPath);

    HRESULT (STDMETHODCALLTYPE *get_ClassificationLastError)(
        IFsrmClassificationManager2 *This,
        BSTR *lastError);

    HRESULT (STDMETHODCALLTYPE *get_ClassificationRunningStatus)(
        IFsrmClassificationManager2 *This,
        FsrmReportRunningStatus *runningStatus);

    HRESULT (STDMETHODCALLTYPE *EnumPropertyDefinitions)(
        IFsrmClassificationManager2 *This,
        FsrmEnumOptions options,
        IFsrmCollection **propertyDefinitions);

    HRESULT (STDMETHODCALLTYPE *CreatePropertyDefinition)(
        IFsrmClassificationManager2 *This,
        IFsrmPropertyDefinition **propertyDefinition);

    HRESULT (STDMETHODCALLTYPE *GetPropertyDefinition)(
        IFsrmClassificationManager2 *This,
        BSTR propertyName,
        IFsrmPropertyDefinition **propertyDefinition);

    HRESULT (STDMETHODCALLTYPE *EnumRules)(
        IFsrmClassificationManager2 *This,
        FsrmRuleType ruleType,
        FsrmEnumOptions options,
        IFsrmCollection **Rules);

    HRESULT (STDMETHODCALLTYPE *CreateRule)(
        IFsrmClassificationManager2 *This,
        FsrmRuleType ruleType,
        IFsrmRule **Rule);

    HRESULT (STDMETHODCALLTYPE *GetRule)(
        IFsrmClassificationManager2 *This,
        BSTR ruleName,
        FsrmRuleType ruleType,
        IFsrmRule **Rule);

    HRESULT (STDMETHODCALLTYPE *EnumModuleDefinitions)(
        IFsrmClassificationManager2 *This,
        FsrmPipelineModuleType moduleType,
        FsrmEnumOptions options,
        IFsrmCollection **moduleDefinitions);

    HRESULT (STDMETHODCALLTYPE *CreateModuleDefinition)(
        IFsrmClassificationManager2 *This,
        FsrmPipelineModuleType moduleType,
        IFsrmPipelineModuleDefinition **moduleDefinition);

    HRESULT (STDMETHODCALLTYPE *GetModuleDefinition)(
        IFsrmClassificationManager2 *This,
        BSTR moduleName,
        FsrmPipelineModuleType moduleType,
        IFsrmPipelineModuleDefinition **moduleDefinition);

    HRESULT (STDMETHODCALLTYPE *RunClassification)(
        IFsrmClassificationManager2 *This,
        FsrmReportGenerationContext context,
        BSTR reserved);

    HRESULT (STDMETHODCALLTYPE *WaitForClassificationCompletion)(
        IFsrmClassificationManager2 *This,
        LONG waitSeconds,
        VARIANT_BOOL *completed);

    HRESULT (STDMETHODCALLTYPE *CancelClassification)(
        IFsrmClassificationManager2 *This);

    HRESULT (STDMETHODCALLTYPE *EnumFileProperties)(
        IFsrmClassificationManager2 *This,
        BSTR filePath,
        FsrmGetFilePropertyOptions options,
        IFsrmCollection **fileProperties);

    HRESULT (STDMETHODCALLTYPE *GetFileProperty)(
        IFsrmClassificationManager2 *This,
        BSTR filePath,
        BSTR propertyName,
        FsrmGetFilePropertyOptions options,
        IFsrmProperty **property);

    HRESULT (STDMETHODCALLTYPE *SetFileProperty)(
        IFsrmClassificationManager2 *This,
        BSTR filePath,
        BSTR propertyName,
        BSTR propertyValue);

    HRESULT (STDMETHODCALLTYPE *ClearFileProperty)(
        IFsrmClassificationManager2 *This,
        BSTR filePath,
        BSTR property);

    /*** IFsrmClassificationManager2 methods ***/
    HRESULT (STDMETHODCALLTYPE *ClassifyFiles)(
        IFsrmClassificationManager2 *This,
        SAFEARRAY *filePaths,
        SAFEARRAY *propertyNames,
        SAFEARRAY *propertyValues,
        FsrmGetFilePropertyOptions options);

    END_INTERFACE
} IFsrmClassificationManager2Vtbl;

interface IFsrmClassificationManager2 {
    CONST_VTBL IFsrmClassificationManager2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFsrmClassificationManager2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFsrmClassificationManager2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFsrmClassificationManager2_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFsrmClassificationManager2_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFsrmClassificationManager2_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFsrmClassificationManager2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFsrmClassificationManager2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFsrmClassificationManager methods ***/
#define IFsrmClassificationManager2_get_ClassificationReportFormats(This,formats) (This)->lpVtbl->get_ClassificationReportFormats(This,formats)
#define IFsrmClassificationManager2_put_ClassificationReportFormats(This,formats) (This)->lpVtbl->put_ClassificationReportFormats(This,formats)
#define IFsrmClassificationManager2_get_Logging(This,logging) (This)->lpVtbl->get_Logging(This,logging)
#define IFsrmClassificationManager2_put_Logging(This,logging) (This)->lpVtbl->put_Logging(This,logging)
#define IFsrmClassificationManager2_get_ClassificationReportMailTo(This,mailTo) (This)->lpVtbl->get_ClassificationReportMailTo(This,mailTo)
#define IFsrmClassificationManager2_put_ClassificationReportMailTo(This,mailTo) (This)->lpVtbl->put_ClassificationReportMailTo(This,mailTo)
#define IFsrmClassificationManager2_get_ClassificationReportEnabled(This,reportEnabled) (This)->lpVtbl->get_ClassificationReportEnabled(This,reportEnabled)
#define IFsrmClassificationManager2_put_ClassificationReportEnabled(This,reportEnabled) (This)->lpVtbl->put_ClassificationReportEnabled(This,reportEnabled)
#define IFsrmClassificationManager2_get_ClassificationLastReportPathWithoutExtension(This,lastReportPath) (This)->lpVtbl->get_ClassificationLastReportPathWithoutExtension(This,lastReportPath)
#define IFsrmClassificationManager2_get_ClassificationLastError(This,lastError) (This)->lpVtbl->get_ClassificationLastError(This,lastError)
#define IFsrmClassificationManager2_get_ClassificationRunningStatus(This,runningStatus) (This)->lpVtbl->get_ClassificationRunningStatus(This,runningStatus)
#define IFsrmClassificationManager2_EnumPropertyDefinitions(This,options,propertyDefinitions) (This)->lpVtbl->EnumPropertyDefinitions(This,options,propertyDefinitions)
#define IFsrmClassificationManager2_CreatePropertyDefinition(This,propertyDefinition) (This)->lpVtbl->CreatePropertyDefinition(This,propertyDefinition)
#define IFsrmClassificationManager2_GetPropertyDefinition(This,propertyName,propertyDefinition) (This)->lpVtbl->GetPropertyDefinition(This,propertyName,propertyDefinition)
#define IFsrmClassificationManager2_EnumRules(This,ruleType,options,Rules) (This)->lpVtbl->EnumRules(This,ruleType,options,Rules)
#define IFsrmClassificationManager2_CreateRule(This,ruleType,Rule) (This)->lpVtbl->CreateRule(This,ruleType,Rule)
#define IFsrmClassificationManager2_GetRule(This,ruleName,ruleType,Rule) (This)->lpVtbl->GetRule(This,ruleName,ruleType,Rule)
#define IFsrmClassificationManager2_EnumModuleDefinitions(This,moduleType,options,moduleDefinitions) (This)->lpVtbl->EnumModuleDefinitions(This,moduleType,options,moduleDefinitions)
#define IFsrmClassificationManager2_CreateModuleDefinition(This,moduleType,moduleDefinition) (This)->lpVtbl->CreateModuleDefinition(This,moduleType,moduleDefinition)
#define IFsrmClassificationManager2_GetModuleDefinition(This,moduleName,moduleType,moduleDefinition) (This)->lpVtbl->GetModuleDefinition(This,moduleName,moduleType,moduleDefinition)
#define IFsrmClassificationManager2_RunClassification(This,context,reserved) (This)->lpVtbl->RunClassification(This,context,reserved)
#define IFsrmClassificationManager2_WaitForClassificationCompletion(This,waitSeconds,completed) (This)->lpVtbl->WaitForClassificationCompletion(This,waitSeconds,completed)
#define IFsrmClassificationManager2_CancelClassification(This) (This)->lpVtbl->CancelClassification(This)
#define IFsrmClassificationManager2_EnumFileProperties(This,filePath,options,fileProperties) (This)->lpVtbl->EnumFileProperties(This,filePath,options,fileProperties)
#define IFsrmClassificationManager2_GetFileProperty(This,filePath,propertyName,options,property) (This)->lpVtbl->GetFileProperty(This,filePath,propertyName,options,property)
#define IFsrmClassificationManager2_SetFileProperty(This,filePath,propertyName,propertyValue) (This)->lpVtbl->SetFileProperty(This,filePath,propertyName,propertyValue)
#define IFsrmClassificationManager2_ClearFileProperty(This,filePath,property) (This)->lpVtbl->ClearFileProperty(This,filePath,property)
/*** IFsrmClassificationManager2 methods ***/
#define IFsrmClassificationManager2_ClassifyFiles(This,filePaths,propertyNames,propertyValues,options) (This)->lpVtbl->ClassifyFiles(This,filePaths,propertyNames,propertyValues,options)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IFsrmClassificationManager2_QueryInterface(IFsrmClassificationManager2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IFsrmClassificationManager2_AddRef(IFsrmClassificationManager2* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IFsrmClassificationManager2_Release(IFsrmClassificationManager2* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IFsrmClassificationManager2_GetTypeInfoCount(IFsrmClassificationManager2* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_GetTypeInfo(IFsrmClassificationManager2* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_GetIDsOfNames(IFsrmClassificationManager2* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_Invoke(IFsrmClassificationManager2* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFsrmClassificationManager methods ***/
static FORCEINLINE HRESULT IFsrmClassificationManager2_get_ClassificationReportFormats(IFsrmClassificationManager2* This,SAFEARRAY **formats) {
    return This->lpVtbl->get_ClassificationReportFormats(This,formats);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_put_ClassificationReportFormats(IFsrmClassificationManager2* This,SAFEARRAY *formats) {
    return This->lpVtbl->put_ClassificationReportFormats(This,formats);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_get_Logging(IFsrmClassificationManager2* This,LONG *logging) {
    return This->lpVtbl->get_Logging(This,logging);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_put_Logging(IFsrmClassificationManager2* This,LONG logging) {
    return This->lpVtbl->put_Logging(This,logging);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_get_ClassificationReportMailTo(IFsrmClassificationManager2* This,BSTR *mailTo) {
    return This->lpVtbl->get_ClassificationReportMailTo(This,mailTo);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_put_ClassificationReportMailTo(IFsrmClassificationManager2* This,BSTR mailTo) {
    return This->lpVtbl->put_ClassificationReportMailTo(This,mailTo);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_get_ClassificationReportEnabled(IFsrmClassificationManager2* This,VARIANT_BOOL *reportEnabled) {
    return This->lpVtbl->get_ClassificationReportEnabled(This,reportEnabled);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_put_ClassificationReportEnabled(IFsrmClassificationManager2* This,VARIANT_BOOL reportEnabled) {
    return This->lpVtbl->put_ClassificationReportEnabled(This,reportEnabled);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_get_ClassificationLastReportPathWithoutExtension(IFsrmClassificationManager2* This,BSTR *lastReportPath) {
    return This->lpVtbl->get_ClassificationLastReportPathWithoutExtension(This,lastReportPath);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_get_ClassificationLastError(IFsrmClassificationManager2* This,BSTR *lastError) {
    return This->lpVtbl->get_ClassificationLastError(This,lastError);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_get_ClassificationRunningStatus(IFsrmClassificationManager2* This,FsrmReportRunningStatus *runningStatus) {
    return This->lpVtbl->get_ClassificationRunningStatus(This,runningStatus);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_EnumPropertyDefinitions(IFsrmClassificationManager2* This,FsrmEnumOptions options,IFsrmCollection **propertyDefinitions) {
    return This->lpVtbl->EnumPropertyDefinitions(This,options,propertyDefinitions);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_CreatePropertyDefinition(IFsrmClassificationManager2* This,IFsrmPropertyDefinition **propertyDefinition) {
    return This->lpVtbl->CreatePropertyDefinition(This,propertyDefinition);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_GetPropertyDefinition(IFsrmClassificationManager2* This,BSTR propertyName,IFsrmPropertyDefinition **propertyDefinition) {
    return This->lpVtbl->GetPropertyDefinition(This,propertyName,propertyDefinition);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_EnumRules(IFsrmClassificationManager2* This,FsrmRuleType ruleType,FsrmEnumOptions options,IFsrmCollection **Rules) {
    return This->lpVtbl->EnumRules(This,ruleType,options,Rules);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_CreateRule(IFsrmClassificationManager2* This,FsrmRuleType ruleType,IFsrmRule **Rule) {
    return This->lpVtbl->CreateRule(This,ruleType,Rule);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_GetRule(IFsrmClassificationManager2* This,BSTR ruleName,FsrmRuleType ruleType,IFsrmRule **Rule) {
    return This->lpVtbl->GetRule(This,ruleName,ruleType,Rule);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_EnumModuleDefinitions(IFsrmClassificationManager2* This,FsrmPipelineModuleType moduleType,FsrmEnumOptions options,IFsrmCollection **moduleDefinitions) {
    return This->lpVtbl->EnumModuleDefinitions(This,moduleType,options,moduleDefinitions);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_CreateModuleDefinition(IFsrmClassificationManager2* This,FsrmPipelineModuleType moduleType,IFsrmPipelineModuleDefinition **moduleDefinition) {
    return This->lpVtbl->CreateModuleDefinition(This,moduleType,moduleDefinition);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_GetModuleDefinition(IFsrmClassificationManager2* This,BSTR moduleName,FsrmPipelineModuleType moduleType,IFsrmPipelineModuleDefinition **moduleDefinition) {
    return This->lpVtbl->GetModuleDefinition(This,moduleName,moduleType,moduleDefinition);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_RunClassification(IFsrmClassificationManager2* This,FsrmReportGenerationContext context,BSTR reserved) {
    return This->lpVtbl->RunClassification(This,context,reserved);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_WaitForClassificationCompletion(IFsrmClassificationManager2* This,LONG waitSeconds,VARIANT_BOOL *completed) {
    return This->lpVtbl->WaitForClassificationCompletion(This,waitSeconds,completed);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_CancelClassification(IFsrmClassificationManager2* This) {
    return This->lpVtbl->CancelClassification(This);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_EnumFileProperties(IFsrmClassificationManager2* This,BSTR filePath,FsrmGetFilePropertyOptions options,IFsrmCollection **fileProperties) {
    return This->lpVtbl->EnumFileProperties(This,filePath,options,fileProperties);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_GetFileProperty(IFsrmClassificationManager2* This,BSTR filePath,BSTR propertyName,FsrmGetFilePropertyOptions options,IFsrmProperty **property) {
    return This->lpVtbl->GetFileProperty(This,filePath,propertyName,options,property);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_SetFileProperty(IFsrmClassificationManager2* This,BSTR filePath,BSTR propertyName,BSTR propertyValue) {
    return This->lpVtbl->SetFileProperty(This,filePath,propertyName,propertyValue);
}
static FORCEINLINE HRESULT IFsrmClassificationManager2_ClearFileProperty(IFsrmClassificationManager2* This,BSTR filePath,BSTR property) {
    return This->lpVtbl->ClearFileProperty(This,filePath,property);
}
/*** IFsrmClassificationManager2 methods ***/
static FORCEINLINE HRESULT IFsrmClassificationManager2_ClassifyFiles(IFsrmClassificationManager2* This,SAFEARRAY *filePaths,SAFEARRAY *propertyNames,SAFEARRAY *propertyValues,FsrmGetFilePropertyOptions options) {
    return This->lpVtbl->ClassifyFiles(This,filePaths,propertyNames,propertyValues,options);
}
#endif
#endif

#endif


#endif  /* __IFsrmClassificationManager2_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFsrmPropertyBag interface
 */
#ifndef __IFsrmPropertyBag_INTERFACE_DEFINED__
#define __IFsrmPropertyBag_INTERFACE_DEFINED__

#define MessageSizeLimit (4096)

DEFINE_GUID(IID_IFsrmPropertyBag, 0x774589d1, 0xd300, 0x4f7a, 0x9a,0x24, 0xf7,0xb7,0x66,0x80,0x02,0x50);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("774589d1-d300-4f7a-9a24-f7b766800250")
IFsrmPropertyBag : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_Name(
        BSTR *name) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RelativePath(
        BSTR *path) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_VolumeName(
        BSTR *volumeName) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_RelativeNamespaceRoot(
        BSTR *relativeNamespaceRoot) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_VolumeIndex(
        ULONG *volumeId) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FileId(
        VARIANT *fileId) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ParentDirectoryId(
        VARIANT *parentDirectoryId) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Size(
        VARIANT *size) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_SizeAllocated(
        VARIANT *sizeAllocated) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_CreationTime(
        VARIANT *creationTime) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_LastAccessTime(
        VARIANT *lastAccessTime) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_LastModificationTime(
        VARIANT *lastModificationTime) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Attributes(
        ULONG *attributes) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_OwnerSid(
        BSTR *ownerSid) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_FilePropertyNames(
        SAFEARRAY **filePropertyNames) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Messages(
        SAFEARRAY **messages) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_PropertyBagFlags(
        ULONG *flags) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFileProperty(
        BSTR name,
        IFsrmProperty **fileProperty) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetFileProperty(
        BSTR name,
        BSTR value) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddMessage(
        BSTR message) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFileStreamInterface(
        FsrmFileStreamingMode accessMode,
        FsrmFileStreamingInterfaceType interfaceType,
        VARIANT *pStreamInterface) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFsrmPropertyBag, 0x774589d1, 0xd300, 0x4f7a, 0x9a,0x24, 0xf7,0xb7,0x66,0x80,0x02,0x50)
#endif
#else
typedef struct IFsrmPropertyBagVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFsrmPropertyBag *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFsrmPropertyBag *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFsrmPropertyBag *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFsrmPropertyBag *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFsrmPropertyBag *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFsrmPropertyBag *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFsrmPropertyBag *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFsrmPropertyBag methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IFsrmPropertyBag *This,
        BSTR *name);

    HRESULT (STDMETHODCALLTYPE *get_RelativePath)(
        IFsrmPropertyBag *This,
        BSTR *path);

    HRESULT (STDMETHODCALLTYPE *get_VolumeName)(
        IFsrmPropertyBag *This,
        BSTR *volumeName);

    HRESULT (STDMETHODCALLTYPE *get_RelativeNamespaceRoot)(
        IFsrmPropertyBag *This,
        BSTR *relativeNamespaceRoot);

    HRESULT (STDMETHODCALLTYPE *get_VolumeIndex)(
        IFsrmPropertyBag *This,
        ULONG *volumeId);

    HRESULT (STDMETHODCALLTYPE *get_FileId)(
        IFsrmPropertyBag *This,
        VARIANT *fileId);

    HRESULT (STDMETHODCALLTYPE *get_ParentDirectoryId)(
        IFsrmPropertyBag *This,
        VARIANT *parentDirectoryId);

    HRESULT (STDMETHODCALLTYPE *get_Size)(
        IFsrmPropertyBag *This,
        VARIANT *size);

    HRESULT (STDMETHODCALLTYPE *get_SizeAllocated)(
        IFsrmPropertyBag *This,
        VARIANT *sizeAllocated);

    HRESULT (STDMETHODCALLTYPE *get_CreationTime)(
        IFsrmPropertyBag *This,
        VARIANT *creationTime);

    HRESULT (STDMETHODCALLTYPE *get_LastAccessTime)(
        IFsrmPropertyBag *This,
        VARIANT *lastAccessTime);

    HRESULT (STDMETHODCALLTYPE *get_LastModificationTime)(
        IFsrmPropertyBag *This,
        VARIANT *lastModificationTime);

    HRESULT (STDMETHODCALLTYPE *get_Attributes)(
        IFsrmPropertyBag *This,
        ULONG *attributes);

    HRESULT (STDMETHODCALLTYPE *get_OwnerSid)(
        IFsrmPropertyBag *This,
        BSTR *ownerSid);

    HRESULT (STDMETHODCALLTYPE *get_FilePropertyNames)(
        IFsrmPropertyBag *This,
        SAFEARRAY **filePropertyNames);

    HRESULT (STDMETHODCALLTYPE *get_Messages)(
        IFsrmPropertyBag *This,
        SAFEARRAY **messages);

    HRESULT (STDMETHODCALLTYPE *get_PropertyBagFlags)(
        IFsrmPropertyBag *This,
        ULONG *flags);

    HRESULT (STDMETHODCALLTYPE *GetFileProperty)(
        IFsrmPropertyBag *This,
        BSTR name,
        IFsrmProperty **fileProperty);

    HRESULT (STDMETHODCALLTYPE *SetFileProperty)(
        IFsrmPropertyBag *This,
        BSTR name,
        BSTR value);

    HRESULT (STDMETHODCALLTYPE *AddMessage)(
        IFsrmPropertyBag *This,
        BSTR message);

    HRESULT (STDMETHODCALLTYPE *GetFileStreamInterface)(
        IFsrmPropertyBag *This,
        FsrmFileStreamingMode accessMode,
        FsrmFileStreamingInterfaceType interfaceType,
        VARIANT *pStreamInterface);

    END_INTERFACE
} IFsrmPropertyBagVtbl;

interface IFsrmPropertyBag {
    CONST_VTBL IFsrmPropertyBagVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFsrmPropertyBag_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFsrmPropertyBag_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFsrmPropertyBag_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFsrmPropertyBag_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFsrmPropertyBag_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFsrmPropertyBag_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFsrmPropertyBag_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFsrmPropertyBag methods ***/
#define IFsrmPropertyBag_get_Name(This,name) (This)->lpVtbl->get_Name(This,name)
#define IFsrmPropertyBag_get_RelativePath(This,path) (This)->lpVtbl->get_RelativePath(This,path)
#define IFsrmPropertyBag_get_VolumeName(This,volumeName) (This)->lpVtbl->get_VolumeName(This,volumeName)
#define IFsrmPropertyBag_get_RelativeNamespaceRoot(This,relativeNamespaceRoot) (This)->lpVtbl->get_RelativeNamespaceRoot(This,relativeNamespaceRoot)
#define IFsrmPropertyBag_get_VolumeIndex(This,volumeId) (This)->lpVtbl->get_VolumeIndex(This,volumeId)
#define IFsrmPropertyBag_get_FileId(This,fileId) (This)->lpVtbl->get_FileId(This,fileId)
#define IFsrmPropertyBag_get_ParentDirectoryId(This,parentDirectoryId) (This)->lpVtbl->get_ParentDirectoryId(This,parentDirectoryId)
#define IFsrmPropertyBag_get_Size(This,size) (This)->lpVtbl->get_Size(This,size)
#define IFsrmPropertyBag_get_SizeAllocated(This,sizeAllocated) (This)->lpVtbl->get_SizeAllocated(This,sizeAllocated)
#define IFsrmPropertyBag_get_CreationTime(This,creationTime) (This)->lpVtbl->get_CreationTime(This,creationTime)
#define IFsrmPropertyBag_get_LastAccessTime(This,lastAccessTime) (This)->lpVtbl->get_LastAccessTime(This,lastAccessTime)
#define IFsrmPropertyBag_get_LastModificationTime(This,lastModificationTime) (This)->lpVtbl->get_LastModificationTime(This,lastModificationTime)
#define IFsrmPropertyBag_get_Attributes(This,attributes) (This)->lpVtbl->get_Attributes(This,attributes)
#define IFsrmPropertyBag_get_OwnerSid(This,ownerSid) (This)->lpVtbl->get_OwnerSid(This,ownerSid)
#define IFsrmPropertyBag_get_FilePropertyNames(This,filePropertyNames) (This)->lpVtbl->get_FilePropertyNames(This,filePropertyNames)
#define IFsrmPropertyBag_get_Messages(This,messages) (This)->lpVtbl->get_Messages(This,messages)
#define IFsrmPropertyBag_get_PropertyBagFlags(This,flags) (This)->lpVtbl->get_PropertyBagFlags(This,flags)
#define IFsrmPropertyBag_GetFileProperty(This,name,fileProperty) (This)->lpVtbl->GetFileProperty(This,name,fileProperty)
#define IFsrmPropertyBag_SetFileProperty(This,name,value) (This)->lpVtbl->SetFileProperty(This,name,value)
#define IFsrmPropertyBag_AddMessage(This,message) (This)->lpVtbl->AddMessage(This,message)
#define IFsrmPropertyBag_GetFileStreamInterface(This,accessMode,interfaceType,pStreamInterface) (This)->lpVtbl->GetFileStreamInterface(This,accessMode,interfaceType,pStreamInterface)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IFsrmPropertyBag_QueryInterface(IFsrmPropertyBag* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IFsrmPropertyBag_AddRef(IFsrmPropertyBag* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IFsrmPropertyBag_Release(IFsrmPropertyBag* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IFsrmPropertyBag_GetTypeInfoCount(IFsrmPropertyBag* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_GetTypeInfo(IFsrmPropertyBag* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_GetIDsOfNames(IFsrmPropertyBag* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_Invoke(IFsrmPropertyBag* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFsrmPropertyBag methods ***/
static FORCEINLINE HRESULT IFsrmPropertyBag_get_Name(IFsrmPropertyBag* This,BSTR *name) {
    return This->lpVtbl->get_Name(This,name);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_get_RelativePath(IFsrmPropertyBag* This,BSTR *path) {
    return This->lpVtbl->get_RelativePath(This,path);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_get_VolumeName(IFsrmPropertyBag* This,BSTR *volumeName) {
    return This->lpVtbl->get_VolumeName(This,volumeName);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_get_RelativeNamespaceRoot(IFsrmPropertyBag* This,BSTR *relativeNamespaceRoot) {
    return This->lpVtbl->get_RelativeNamespaceRoot(This,relativeNamespaceRoot);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_get_VolumeIndex(IFsrmPropertyBag* This,ULONG *volumeId) {
    return This->lpVtbl->get_VolumeIndex(This,volumeId);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_get_FileId(IFsrmPropertyBag* This,VARIANT *fileId) {
    return This->lpVtbl->get_FileId(This,fileId);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_get_ParentDirectoryId(IFsrmPropertyBag* This,VARIANT *parentDirectoryId) {
    return This->lpVtbl->get_ParentDirectoryId(This,parentDirectoryId);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_get_Size(IFsrmPropertyBag* This,VARIANT *size) {
    return This->lpVtbl->get_Size(This,size);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_get_SizeAllocated(IFsrmPropertyBag* This,VARIANT *sizeAllocated) {
    return This->lpVtbl->get_SizeAllocated(This,sizeAllocated);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_get_CreationTime(IFsrmPropertyBag* This,VARIANT *creationTime) {
    return This->lpVtbl->get_CreationTime(This,creationTime);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_get_LastAccessTime(IFsrmPropertyBag* This,VARIANT *lastAccessTime) {
    return This->lpVtbl->get_LastAccessTime(This,lastAccessTime);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_get_LastModificationTime(IFsrmPropertyBag* This,VARIANT *lastModificationTime) {
    return This->lpVtbl->get_LastModificationTime(This,lastModificationTime);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_get_Attributes(IFsrmPropertyBag* This,ULONG *attributes) {
    return This->lpVtbl->get_Attributes(This,attributes);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_get_OwnerSid(IFsrmPropertyBag* This,BSTR *ownerSid) {
    return This->lpVtbl->get_OwnerSid(This,ownerSid);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_get_FilePropertyNames(IFsrmPropertyBag* This,SAFEARRAY **filePropertyNames) {
    return This->lpVtbl->get_FilePropertyNames(This,filePropertyNames);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_get_Messages(IFsrmPropertyBag* This,SAFEARRAY **messages) {
    return This->lpVtbl->get_Messages(This,messages);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_get_PropertyBagFlags(IFsrmPropertyBag* This,ULONG *flags) {
    return This->lpVtbl->get_PropertyBagFlags(This,flags);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_GetFileProperty(IFsrmPropertyBag* This,BSTR name,IFsrmProperty **fileProperty) {
    return This->lpVtbl->GetFileProperty(This,name,fileProperty);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_SetFileProperty(IFsrmPropertyBag* This,BSTR name,BSTR value) {
    return This->lpVtbl->SetFileProperty(This,name,value);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_AddMessage(IFsrmPropertyBag* This,BSTR message) {
    return This->lpVtbl->AddMessage(This,message);
}
static FORCEINLINE HRESULT IFsrmPropertyBag_GetFileStreamInterface(IFsrmPropertyBag* This,FsrmFileStreamingMode accessMode,FsrmFileStreamingInterfaceType interfaceType,VARIANT *pStreamInterface) {
    return This->lpVtbl->GetFileStreamInterface(This,accessMode,interfaceType,pStreamInterface);
}
#endif
#endif

#endif


#endif  /* __IFsrmPropertyBag_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFsrmPropertyBag2 interface
 */
#ifndef __IFsrmPropertyBag2_INTERFACE_DEFINED__
#define __IFsrmPropertyBag2_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFsrmPropertyBag2, 0x0e46bdbd, 0x2402, 0x4fed, 0x9c,0x30, 0x92,0x66,0xe6,0xeb,0x2c,0xc9);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("0e46bdbd-2402-4fed-9c30-9266e6eb2cc9")
IFsrmPropertyBag2 : public IFsrmPropertyBag
{
    virtual HRESULT STDMETHODCALLTYPE GetFieldValue(
        FsrmPropertyBagField field,
        VARIANT *value) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetUntrustedInFileProperties(
        IFsrmCollection **props) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFsrmPropertyBag2, 0x0e46bdbd, 0x2402, 0x4fed, 0x9c,0x30, 0x92,0x66,0xe6,0xeb,0x2c,0xc9)
#endif
#else
typedef struct IFsrmPropertyBag2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFsrmPropertyBag2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFsrmPropertyBag2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFsrmPropertyBag2 *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFsrmPropertyBag2 *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFsrmPropertyBag2 *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFsrmPropertyBag2 *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFsrmPropertyBag2 *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFsrmPropertyBag methods ***/
    HRESULT (STDMETHODCALLTYPE *get_Name)(
        IFsrmPropertyBag2 *This,
        BSTR *name);

    HRESULT (STDMETHODCALLTYPE *get_RelativePath)(
        IFsrmPropertyBag2 *This,
        BSTR *path);

    HRESULT (STDMETHODCALLTYPE *get_VolumeName)(
        IFsrmPropertyBag2 *This,
        BSTR *volumeName);

    HRESULT (STDMETHODCALLTYPE *get_RelativeNamespaceRoot)(
        IFsrmPropertyBag2 *This,
        BSTR *relativeNamespaceRoot);

    HRESULT (STDMETHODCALLTYPE *get_VolumeIndex)(
        IFsrmPropertyBag2 *This,
        ULONG *volumeId);

    HRESULT (STDMETHODCALLTYPE *get_FileId)(
        IFsrmPropertyBag2 *This,
        VARIANT *fileId);

    HRESULT (STDMETHODCALLTYPE *get_ParentDirectoryId)(
        IFsrmPropertyBag2 *This,
        VARIANT *parentDirectoryId);

    HRESULT (STDMETHODCALLTYPE *get_Size)(
        IFsrmPropertyBag2 *This,
        VARIANT *size);

    HRESULT (STDMETHODCALLTYPE *get_SizeAllocated)(
        IFsrmPropertyBag2 *This,
        VARIANT *sizeAllocated);

    HRESULT (STDMETHODCALLTYPE *get_CreationTime)(
        IFsrmPropertyBag2 *This,
        VARIANT *creationTime);

    HRESULT (STDMETHODCALLTYPE *get_LastAccessTime)(
        IFsrmPropertyBag2 *This,
        VARIANT *lastAccessTime);

    HRESULT (STDMETHODCALLTYPE *get_LastModificationTime)(
        IFsrmPropertyBag2 *This,
        VARIANT *lastModificationTime);

    HRESULT (STDMETHODCALLTYPE *get_Attributes)(
        IFsrmPropertyBag2 *This,
        ULONG *attributes);

    HRESULT (STDMETHODCALLTYPE *get_OwnerSid)(
        IFsrmPropertyBag2 *This,
        BSTR *ownerSid);

    HRESULT (STDMETHODCALLTYPE *get_FilePropertyNames)(
        IFsrmPropertyBag2 *This,
        SAFEARRAY **filePropertyNames);

    HRESULT (STDMETHODCALLTYPE *get_Messages)(
        IFsrmPropertyBag2 *This,
        SAFEARRAY **messages);

    HRESULT (STDMETHODCALLTYPE *get_PropertyBagFlags)(
        IFsrmPropertyBag2 *This,
        ULONG *flags);

    HRESULT (STDMETHODCALLTYPE *GetFileProperty)(
        IFsrmPropertyBag2 *This,
        BSTR name,
        IFsrmProperty **fileProperty);

    HRESULT (STDMETHODCALLTYPE *SetFileProperty)(
        IFsrmPropertyBag2 *This,
        BSTR name,
        BSTR value);

    HRESULT (STDMETHODCALLTYPE *AddMessage)(
        IFsrmPropertyBag2 *This,
        BSTR message);

    HRESULT (STDMETHODCALLTYPE *GetFileStreamInterface)(
        IFsrmPropertyBag2 *This,
        FsrmFileStreamingMode accessMode,
        FsrmFileStreamingInterfaceType interfaceType,
        VARIANT *pStreamInterface);

    /*** IFsrmPropertyBag2 methods ***/
    HRESULT (STDMETHODCALLTYPE *GetFieldValue)(
        IFsrmPropertyBag2 *This,
        FsrmPropertyBagField field,
        VARIANT *value);

    HRESULT (STDMETHODCALLTYPE *GetUntrustedInFileProperties)(
        IFsrmPropertyBag2 *This,
        IFsrmCollection **props);

    END_INTERFACE
} IFsrmPropertyBag2Vtbl;

interface IFsrmPropertyBag2 {
    CONST_VTBL IFsrmPropertyBag2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFsrmPropertyBag2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFsrmPropertyBag2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFsrmPropertyBag2_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFsrmPropertyBag2_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFsrmPropertyBag2_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFsrmPropertyBag2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFsrmPropertyBag2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFsrmPropertyBag methods ***/
#define IFsrmPropertyBag2_get_Name(This,name) (This)->lpVtbl->get_Name(This,name)
#define IFsrmPropertyBag2_get_RelativePath(This,path) (This)->lpVtbl->get_RelativePath(This,path)
#define IFsrmPropertyBag2_get_VolumeName(This,volumeName) (This)->lpVtbl->get_VolumeName(This,volumeName)
#define IFsrmPropertyBag2_get_RelativeNamespaceRoot(This,relativeNamespaceRoot) (This)->lpVtbl->get_RelativeNamespaceRoot(This,relativeNamespaceRoot)
#define IFsrmPropertyBag2_get_VolumeIndex(This,volumeId) (This)->lpVtbl->get_VolumeIndex(This,volumeId)
#define IFsrmPropertyBag2_get_FileId(This,fileId) (This)->lpVtbl->get_FileId(This,fileId)
#define IFsrmPropertyBag2_get_ParentDirectoryId(This,parentDirectoryId) (This)->lpVtbl->get_ParentDirectoryId(This,parentDirectoryId)
#define IFsrmPropertyBag2_get_Size(This,size) (This)->lpVtbl->get_Size(This,size)
#define IFsrmPropertyBag2_get_SizeAllocated(This,sizeAllocated) (This)->lpVtbl->get_SizeAllocated(This,sizeAllocated)
#define IFsrmPropertyBag2_get_CreationTime(This,creationTime) (This)->lpVtbl->get_CreationTime(This,creationTime)
#define IFsrmPropertyBag2_get_LastAccessTime(This,lastAccessTime) (This)->lpVtbl->get_LastAccessTime(This,lastAccessTime)
#define IFsrmPropertyBag2_get_LastModificationTime(This,lastModificationTime) (This)->lpVtbl->get_LastModificationTime(This,lastModificationTime)
#define IFsrmPropertyBag2_get_Attributes(This,attributes) (This)->lpVtbl->get_Attributes(This,attributes)
#define IFsrmPropertyBag2_get_OwnerSid(This,ownerSid) (This)->lpVtbl->get_OwnerSid(This,ownerSid)
#define IFsrmPropertyBag2_get_FilePropertyNames(This,filePropertyNames) (This)->lpVtbl->get_FilePropertyNames(This,filePropertyNames)
#define IFsrmPropertyBag2_get_Messages(This,messages) (This)->lpVtbl->get_Messages(This,messages)
#define IFsrmPropertyBag2_get_PropertyBagFlags(This,flags) (This)->lpVtbl->get_PropertyBagFlags(This,flags)
#define IFsrmPropertyBag2_GetFileProperty(This,name,fileProperty) (This)->lpVtbl->GetFileProperty(This,name,fileProperty)
#define IFsrmPropertyBag2_SetFileProperty(This,name,value) (This)->lpVtbl->SetFileProperty(This,name,value)
#define IFsrmPropertyBag2_AddMessage(This,message) (This)->lpVtbl->AddMessage(This,message)
#define IFsrmPropertyBag2_GetFileStreamInterface(This,accessMode,interfaceType,pStreamInterface) (This)->lpVtbl->GetFileStreamInterface(This,accessMode,interfaceType,pStreamInterface)
/*** IFsrmPropertyBag2 methods ***/
#define IFsrmPropertyBag2_GetFieldValue(This,field,value) (This)->lpVtbl->GetFieldValue(This,field,value)
#define IFsrmPropertyBag2_GetUntrustedInFileProperties(This,props) (This)->lpVtbl->GetUntrustedInFileProperties(This,props)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IFsrmPropertyBag2_QueryInterface(IFsrmPropertyBag2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IFsrmPropertyBag2_AddRef(IFsrmPropertyBag2* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IFsrmPropertyBag2_Release(IFsrmPropertyBag2* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IFsrmPropertyBag2_GetTypeInfoCount(IFsrmPropertyBag2* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_GetTypeInfo(IFsrmPropertyBag2* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_GetIDsOfNames(IFsrmPropertyBag2* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_Invoke(IFsrmPropertyBag2* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFsrmPropertyBag methods ***/
static FORCEINLINE HRESULT IFsrmPropertyBag2_get_Name(IFsrmPropertyBag2* This,BSTR *name) {
    return This->lpVtbl->get_Name(This,name);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_get_RelativePath(IFsrmPropertyBag2* This,BSTR *path) {
    return This->lpVtbl->get_RelativePath(This,path);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_get_VolumeName(IFsrmPropertyBag2* This,BSTR *volumeName) {
    return This->lpVtbl->get_VolumeName(This,volumeName);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_get_RelativeNamespaceRoot(IFsrmPropertyBag2* This,BSTR *relativeNamespaceRoot) {
    return This->lpVtbl->get_RelativeNamespaceRoot(This,relativeNamespaceRoot);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_get_VolumeIndex(IFsrmPropertyBag2* This,ULONG *volumeId) {
    return This->lpVtbl->get_VolumeIndex(This,volumeId);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_get_FileId(IFsrmPropertyBag2* This,VARIANT *fileId) {
    return This->lpVtbl->get_FileId(This,fileId);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_get_ParentDirectoryId(IFsrmPropertyBag2* This,VARIANT *parentDirectoryId) {
    return This->lpVtbl->get_ParentDirectoryId(This,parentDirectoryId);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_get_Size(IFsrmPropertyBag2* This,VARIANT *size) {
    return This->lpVtbl->get_Size(This,size);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_get_SizeAllocated(IFsrmPropertyBag2* This,VARIANT *sizeAllocated) {
    return This->lpVtbl->get_SizeAllocated(This,sizeAllocated);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_get_CreationTime(IFsrmPropertyBag2* This,VARIANT *creationTime) {
    return This->lpVtbl->get_CreationTime(This,creationTime);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_get_LastAccessTime(IFsrmPropertyBag2* This,VARIANT *lastAccessTime) {
    return This->lpVtbl->get_LastAccessTime(This,lastAccessTime);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_get_LastModificationTime(IFsrmPropertyBag2* This,VARIANT *lastModificationTime) {
    return This->lpVtbl->get_LastModificationTime(This,lastModificationTime);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_get_Attributes(IFsrmPropertyBag2* This,ULONG *attributes) {
    return This->lpVtbl->get_Attributes(This,attributes);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_get_OwnerSid(IFsrmPropertyBag2* This,BSTR *ownerSid) {
    return This->lpVtbl->get_OwnerSid(This,ownerSid);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_get_FilePropertyNames(IFsrmPropertyBag2* This,SAFEARRAY **filePropertyNames) {
    return This->lpVtbl->get_FilePropertyNames(This,filePropertyNames);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_get_Messages(IFsrmPropertyBag2* This,SAFEARRAY **messages) {
    return This->lpVtbl->get_Messages(This,messages);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_get_PropertyBagFlags(IFsrmPropertyBag2* This,ULONG *flags) {
    return This->lpVtbl->get_PropertyBagFlags(This,flags);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_GetFileProperty(IFsrmPropertyBag2* This,BSTR name,IFsrmProperty **fileProperty) {
    return This->lpVtbl->GetFileProperty(This,name,fileProperty);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_SetFileProperty(IFsrmPropertyBag2* This,BSTR name,BSTR value) {
    return This->lpVtbl->SetFileProperty(This,name,value);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_AddMessage(IFsrmPropertyBag2* This,BSTR message) {
    return This->lpVtbl->AddMessage(This,message);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_GetFileStreamInterface(IFsrmPropertyBag2* This,FsrmFileStreamingMode accessMode,FsrmFileStreamingInterfaceType interfaceType,VARIANT *pStreamInterface) {
    return This->lpVtbl->GetFileStreamInterface(This,accessMode,interfaceType,pStreamInterface);
}
/*** IFsrmPropertyBag2 methods ***/
static FORCEINLINE HRESULT IFsrmPropertyBag2_GetFieldValue(IFsrmPropertyBag2* This,FsrmPropertyBagField field,VARIANT *value) {
    return This->lpVtbl->GetFieldValue(This,field,value);
}
static FORCEINLINE HRESULT IFsrmPropertyBag2_GetUntrustedInFileProperties(IFsrmPropertyBag2* This,IFsrmCollection **props) {
    return This->lpVtbl->GetUntrustedInFileProperties(This,props);
}
#endif
#endif

#endif


#endif  /* __IFsrmPropertyBag2_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFsrmPipelineModuleImplementation interface
 */
#ifndef __IFsrmPipelineModuleImplementation_INTERFACE_DEFINED__
#define __IFsrmPipelineModuleImplementation_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFsrmPipelineModuleImplementation, 0xb7907906, 0x2b02, 0x4cb5, 0x84,0xa9, 0xfd,0xf5,0x46,0x13,0xd6,0xcd);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("b7907906-2b02-4cb5-84a9-fdf54613d6cd")
IFsrmPipelineModuleImplementation : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE OnLoad(
        IFsrmPipelineModuleDefinition *moduleDefinition,
        IFsrmPipelineModuleConnector **moduleConnector) = 0;

    virtual HRESULT STDMETHODCALLTYPE OnUnload(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFsrmPipelineModuleImplementation, 0xb7907906, 0x2b02, 0x4cb5, 0x84,0xa9, 0xfd,0xf5,0x46,0x13,0xd6,0xcd)
#endif
#else
typedef struct IFsrmPipelineModuleImplementationVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFsrmPipelineModuleImplementation *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFsrmPipelineModuleImplementation *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFsrmPipelineModuleImplementation *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFsrmPipelineModuleImplementation *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFsrmPipelineModuleImplementation *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFsrmPipelineModuleImplementation *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFsrmPipelineModuleImplementation *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFsrmPipelineModuleImplementation methods ***/
    HRESULT (STDMETHODCALLTYPE *OnLoad)(
        IFsrmPipelineModuleImplementation *This,
        IFsrmPipelineModuleDefinition *moduleDefinition,
        IFsrmPipelineModuleConnector **moduleConnector);

    HRESULT (STDMETHODCALLTYPE *OnUnload)(
        IFsrmPipelineModuleImplementation *This);

    END_INTERFACE
} IFsrmPipelineModuleImplementationVtbl;

interface IFsrmPipelineModuleImplementation {
    CONST_VTBL IFsrmPipelineModuleImplementationVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFsrmPipelineModuleImplementation_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFsrmPipelineModuleImplementation_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFsrmPipelineModuleImplementation_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFsrmPipelineModuleImplementation_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFsrmPipelineModuleImplementation_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFsrmPipelineModuleImplementation_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFsrmPipelineModuleImplementation_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFsrmPipelineModuleImplementation methods ***/
#define IFsrmPipelineModuleImplementation_OnLoad(This,moduleDefinition,moduleConnector) (This)->lpVtbl->OnLoad(This,moduleDefinition,moduleConnector)
#define IFsrmPipelineModuleImplementation_OnUnload(This) (This)->lpVtbl->OnUnload(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IFsrmPipelineModuleImplementation_QueryInterface(IFsrmPipelineModuleImplementation* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IFsrmPipelineModuleImplementation_AddRef(IFsrmPipelineModuleImplementation* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IFsrmPipelineModuleImplementation_Release(IFsrmPipelineModuleImplementation* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IFsrmPipelineModuleImplementation_GetTypeInfoCount(IFsrmPipelineModuleImplementation* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleImplementation_GetTypeInfo(IFsrmPipelineModuleImplementation* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleImplementation_GetIDsOfNames(IFsrmPipelineModuleImplementation* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleImplementation_Invoke(IFsrmPipelineModuleImplementation* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFsrmPipelineModuleImplementation methods ***/
static FORCEINLINE HRESULT IFsrmPipelineModuleImplementation_OnLoad(IFsrmPipelineModuleImplementation* This,IFsrmPipelineModuleDefinition *moduleDefinition,IFsrmPipelineModuleConnector **moduleConnector) {
    return This->lpVtbl->OnLoad(This,moduleDefinition,moduleConnector);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleImplementation_OnUnload(IFsrmPipelineModuleImplementation* This) {
    return This->lpVtbl->OnUnload(This);
}
#endif
#endif

#endif


#endif  /* __IFsrmPipelineModuleImplementation_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFsrmClassifierModuleImplementation interface
 */
#ifndef __IFsrmClassifierModuleImplementation_INTERFACE_DEFINED__
#define __IFsrmClassifierModuleImplementation_INTERFACE_DEFINED__

#define FsrmNeverModified  ((ULONGLONG) 0x0000000000000000ui64)
#define FsrmAlwaysModified ((ULONGLONG) 0xFFFFFFFFFFFFFFFFui64)
DEFINE_GUID(IID_IFsrmClassifierModuleImplementation, 0x4c968fc6, 0x6edb, 0x4051, 0x9c,0x18, 0x73,0xb7,0x29,0x1a,0xe1,0x06);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("4c968fc6-6edb-4051-9c18-73b7291ae106")
IFsrmClassifierModuleImplementation : public IFsrmPipelineModuleImplementation
{
    virtual HRESULT STDMETHODCALLTYPE get_LastModified(
        VARIANT *lastModified) = 0;

    virtual HRESULT STDMETHODCALLTYPE UseRulesAndDefinitions(
        IFsrmCollection *rules,
        IFsrmCollection *propertyDefinitions) = 0;

    virtual HRESULT STDMETHODCALLTYPE OnBeginFile(
        IFsrmPropertyBag *propertyBag,
        SAFEARRAY *arrayRuleIds) = 0;

    virtual HRESULT STDMETHODCALLTYPE DoesPropertyValueApply(
        BSTR property,
        BSTR value,
        VARIANT_BOOL *applyValue,
        FSRM_OBJECT_ID idRule,
        FSRM_OBJECT_ID idPropDef) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetPropertyValueToApply(
        BSTR property,
        BSTR *value,
        FSRM_OBJECT_ID idRule,
        FSRM_OBJECT_ID idPropDef) = 0;

    virtual HRESULT STDMETHODCALLTYPE OnEndFile(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFsrmClassifierModuleImplementation, 0x4c968fc6, 0x6edb, 0x4051, 0x9c,0x18, 0x73,0xb7,0x29,0x1a,0xe1,0x06)
#endif
#else
typedef struct IFsrmClassifierModuleImplementationVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFsrmClassifierModuleImplementation *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFsrmClassifierModuleImplementation *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFsrmClassifierModuleImplementation *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFsrmClassifierModuleImplementation *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFsrmClassifierModuleImplementation *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFsrmClassifierModuleImplementation *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFsrmClassifierModuleImplementation *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFsrmPipelineModuleImplementation methods ***/
    HRESULT (STDMETHODCALLTYPE *OnLoad)(
        IFsrmClassifierModuleImplementation *This,
        IFsrmPipelineModuleDefinition *moduleDefinition,
        IFsrmPipelineModuleConnector **moduleConnector);

    HRESULT (STDMETHODCALLTYPE *OnUnload)(
        IFsrmClassifierModuleImplementation *This);

    /*** IFsrmClassifierModuleImplementation methods ***/
    HRESULT (STDMETHODCALLTYPE *get_LastModified)(
        IFsrmClassifierModuleImplementation *This,
        VARIANT *lastModified);

    HRESULT (STDMETHODCALLTYPE *UseRulesAndDefinitions)(
        IFsrmClassifierModuleImplementation *This,
        IFsrmCollection *rules,
        IFsrmCollection *propertyDefinitions);

    HRESULT (STDMETHODCALLTYPE *OnBeginFile)(
        IFsrmClassifierModuleImplementation *This,
        IFsrmPropertyBag *propertyBag,
        SAFEARRAY *arrayRuleIds);

    HRESULT (STDMETHODCALLTYPE *DoesPropertyValueApply)(
        IFsrmClassifierModuleImplementation *This,
        BSTR property,
        BSTR value,
        VARIANT_BOOL *applyValue,
        FSRM_OBJECT_ID idRule,
        FSRM_OBJECT_ID idPropDef);

    HRESULT (STDMETHODCALLTYPE *GetPropertyValueToApply)(
        IFsrmClassifierModuleImplementation *This,
        BSTR property,
        BSTR *value,
        FSRM_OBJECT_ID idRule,
        FSRM_OBJECT_ID idPropDef);

    HRESULT (STDMETHODCALLTYPE *OnEndFile)(
        IFsrmClassifierModuleImplementation *This);

    END_INTERFACE
} IFsrmClassifierModuleImplementationVtbl;

interface IFsrmClassifierModuleImplementation {
    CONST_VTBL IFsrmClassifierModuleImplementationVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFsrmClassifierModuleImplementation_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFsrmClassifierModuleImplementation_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFsrmClassifierModuleImplementation_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFsrmClassifierModuleImplementation_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFsrmClassifierModuleImplementation_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFsrmClassifierModuleImplementation_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFsrmClassifierModuleImplementation_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFsrmPipelineModuleImplementation methods ***/
#define IFsrmClassifierModuleImplementation_OnLoad(This,moduleDefinition,moduleConnector) (This)->lpVtbl->OnLoad(This,moduleDefinition,moduleConnector)
#define IFsrmClassifierModuleImplementation_OnUnload(This) (This)->lpVtbl->OnUnload(This)
/*** IFsrmClassifierModuleImplementation methods ***/
#define IFsrmClassifierModuleImplementation_get_LastModified(This,lastModified) (This)->lpVtbl->get_LastModified(This,lastModified)
#define IFsrmClassifierModuleImplementation_UseRulesAndDefinitions(This,rules,propertyDefinitions) (This)->lpVtbl->UseRulesAndDefinitions(This,rules,propertyDefinitions)
#define IFsrmClassifierModuleImplementation_OnBeginFile(This,propertyBag,arrayRuleIds) (This)->lpVtbl->OnBeginFile(This,propertyBag,arrayRuleIds)
#define IFsrmClassifierModuleImplementation_DoesPropertyValueApply(This,property,value,applyValue,idRule,idPropDef) (This)->lpVtbl->DoesPropertyValueApply(This,property,value,applyValue,idRule,idPropDef)
#define IFsrmClassifierModuleImplementation_GetPropertyValueToApply(This,property,value,idRule,idPropDef) (This)->lpVtbl->GetPropertyValueToApply(This,property,value,idRule,idPropDef)
#define IFsrmClassifierModuleImplementation_OnEndFile(This) (This)->lpVtbl->OnEndFile(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IFsrmClassifierModuleImplementation_QueryInterface(IFsrmClassifierModuleImplementation* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IFsrmClassifierModuleImplementation_AddRef(IFsrmClassifierModuleImplementation* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IFsrmClassifierModuleImplementation_Release(IFsrmClassifierModuleImplementation* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IFsrmClassifierModuleImplementation_GetTypeInfoCount(IFsrmClassifierModuleImplementation* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleImplementation_GetTypeInfo(IFsrmClassifierModuleImplementation* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleImplementation_GetIDsOfNames(IFsrmClassifierModuleImplementation* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleImplementation_Invoke(IFsrmClassifierModuleImplementation* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFsrmPipelineModuleImplementation methods ***/
static FORCEINLINE HRESULT IFsrmClassifierModuleImplementation_OnLoad(IFsrmClassifierModuleImplementation* This,IFsrmPipelineModuleDefinition *moduleDefinition,IFsrmPipelineModuleConnector **moduleConnector) {
    return This->lpVtbl->OnLoad(This,moduleDefinition,moduleConnector);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleImplementation_OnUnload(IFsrmClassifierModuleImplementation* This) {
    return This->lpVtbl->OnUnload(This);
}
/*** IFsrmClassifierModuleImplementation methods ***/
static FORCEINLINE HRESULT IFsrmClassifierModuleImplementation_get_LastModified(IFsrmClassifierModuleImplementation* This,VARIANT *lastModified) {
    return This->lpVtbl->get_LastModified(This,lastModified);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleImplementation_UseRulesAndDefinitions(IFsrmClassifierModuleImplementation* This,IFsrmCollection *rules,IFsrmCollection *propertyDefinitions) {
    return This->lpVtbl->UseRulesAndDefinitions(This,rules,propertyDefinitions);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleImplementation_OnBeginFile(IFsrmClassifierModuleImplementation* This,IFsrmPropertyBag *propertyBag,SAFEARRAY *arrayRuleIds) {
    return This->lpVtbl->OnBeginFile(This,propertyBag,arrayRuleIds);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleImplementation_DoesPropertyValueApply(IFsrmClassifierModuleImplementation* This,BSTR property,BSTR value,VARIANT_BOOL *applyValue,FSRM_OBJECT_ID idRule,FSRM_OBJECT_ID idPropDef) {
    return This->lpVtbl->DoesPropertyValueApply(This,property,value,applyValue,idRule,idPropDef);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleImplementation_GetPropertyValueToApply(IFsrmClassifierModuleImplementation* This,BSTR property,BSTR *value,FSRM_OBJECT_ID idRule,FSRM_OBJECT_ID idPropDef) {
    return This->lpVtbl->GetPropertyValueToApply(This,property,value,idRule,idPropDef);
}
static FORCEINLINE HRESULT IFsrmClassifierModuleImplementation_OnEndFile(IFsrmClassifierModuleImplementation* This) {
    return This->lpVtbl->OnEndFile(This);
}
#endif
#endif

#endif


#endif  /* __IFsrmClassifierModuleImplementation_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFsrmStorageModuleImplementation interface
 */
#ifndef __IFsrmStorageModuleImplementation_INTERFACE_DEFINED__
#define __IFsrmStorageModuleImplementation_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFsrmStorageModuleImplementation, 0x0af4a0da, 0x895a, 0x4e50, 0x87,0x12, 0xa9,0x67,0x24,0xbc,0xec,0x64);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("0af4a0da-895a-4e50-8712-a96724bcec64")
IFsrmStorageModuleImplementation : public IFsrmPipelineModuleImplementation
{
    virtual HRESULT STDMETHODCALLTYPE UseDefinitions(
        IFsrmCollection *propertyDefinitions) = 0;

    virtual HRESULT STDMETHODCALLTYPE LoadProperties(
        IFsrmPropertyBag *propertyBag) = 0;

    virtual HRESULT STDMETHODCALLTYPE SaveProperties(
        IFsrmPropertyBag *propertyBag) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFsrmStorageModuleImplementation, 0x0af4a0da, 0x895a, 0x4e50, 0x87,0x12, 0xa9,0x67,0x24,0xbc,0xec,0x64)
#endif
#else
typedef struct IFsrmStorageModuleImplementationVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFsrmStorageModuleImplementation *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFsrmStorageModuleImplementation *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFsrmStorageModuleImplementation *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFsrmStorageModuleImplementation *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFsrmStorageModuleImplementation *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFsrmStorageModuleImplementation *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFsrmStorageModuleImplementation *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFsrmPipelineModuleImplementation methods ***/
    HRESULT (STDMETHODCALLTYPE *OnLoad)(
        IFsrmStorageModuleImplementation *This,
        IFsrmPipelineModuleDefinition *moduleDefinition,
        IFsrmPipelineModuleConnector **moduleConnector);

    HRESULT (STDMETHODCALLTYPE *OnUnload)(
        IFsrmStorageModuleImplementation *This);

    /*** IFsrmStorageModuleImplementation methods ***/
    HRESULT (STDMETHODCALLTYPE *UseDefinitions)(
        IFsrmStorageModuleImplementation *This,
        IFsrmCollection *propertyDefinitions);

    HRESULT (STDMETHODCALLTYPE *LoadProperties)(
        IFsrmStorageModuleImplementation *This,
        IFsrmPropertyBag *propertyBag);

    HRESULT (STDMETHODCALLTYPE *SaveProperties)(
        IFsrmStorageModuleImplementation *This,
        IFsrmPropertyBag *propertyBag);

    END_INTERFACE
} IFsrmStorageModuleImplementationVtbl;

interface IFsrmStorageModuleImplementation {
    CONST_VTBL IFsrmStorageModuleImplementationVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFsrmStorageModuleImplementation_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFsrmStorageModuleImplementation_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFsrmStorageModuleImplementation_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFsrmStorageModuleImplementation_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFsrmStorageModuleImplementation_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFsrmStorageModuleImplementation_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFsrmStorageModuleImplementation_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFsrmPipelineModuleImplementation methods ***/
#define IFsrmStorageModuleImplementation_OnLoad(This,moduleDefinition,moduleConnector) (This)->lpVtbl->OnLoad(This,moduleDefinition,moduleConnector)
#define IFsrmStorageModuleImplementation_OnUnload(This) (This)->lpVtbl->OnUnload(This)
/*** IFsrmStorageModuleImplementation methods ***/
#define IFsrmStorageModuleImplementation_UseDefinitions(This,propertyDefinitions) (This)->lpVtbl->UseDefinitions(This,propertyDefinitions)
#define IFsrmStorageModuleImplementation_LoadProperties(This,propertyBag) (This)->lpVtbl->LoadProperties(This,propertyBag)
#define IFsrmStorageModuleImplementation_SaveProperties(This,propertyBag) (This)->lpVtbl->SaveProperties(This,propertyBag)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IFsrmStorageModuleImplementation_QueryInterface(IFsrmStorageModuleImplementation* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IFsrmStorageModuleImplementation_AddRef(IFsrmStorageModuleImplementation* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IFsrmStorageModuleImplementation_Release(IFsrmStorageModuleImplementation* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IFsrmStorageModuleImplementation_GetTypeInfoCount(IFsrmStorageModuleImplementation* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IFsrmStorageModuleImplementation_GetTypeInfo(IFsrmStorageModuleImplementation* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IFsrmStorageModuleImplementation_GetIDsOfNames(IFsrmStorageModuleImplementation* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IFsrmStorageModuleImplementation_Invoke(IFsrmStorageModuleImplementation* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFsrmPipelineModuleImplementation methods ***/
static FORCEINLINE HRESULT IFsrmStorageModuleImplementation_OnLoad(IFsrmStorageModuleImplementation* This,IFsrmPipelineModuleDefinition *moduleDefinition,IFsrmPipelineModuleConnector **moduleConnector) {
    return This->lpVtbl->OnLoad(This,moduleDefinition,moduleConnector);
}
static FORCEINLINE HRESULT IFsrmStorageModuleImplementation_OnUnload(IFsrmStorageModuleImplementation* This) {
    return This->lpVtbl->OnUnload(This);
}
/*** IFsrmStorageModuleImplementation methods ***/
static FORCEINLINE HRESULT IFsrmStorageModuleImplementation_UseDefinitions(IFsrmStorageModuleImplementation* This,IFsrmCollection *propertyDefinitions) {
    return This->lpVtbl->UseDefinitions(This,propertyDefinitions);
}
static FORCEINLINE HRESULT IFsrmStorageModuleImplementation_LoadProperties(IFsrmStorageModuleImplementation* This,IFsrmPropertyBag *propertyBag) {
    return This->lpVtbl->LoadProperties(This,propertyBag);
}
static FORCEINLINE HRESULT IFsrmStorageModuleImplementation_SaveProperties(IFsrmStorageModuleImplementation* This,IFsrmPropertyBag *propertyBag) {
    return This->lpVtbl->SaveProperties(This,propertyBag);
}
#endif
#endif

#endif


#endif  /* __IFsrmStorageModuleImplementation_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IFsrmPipelineModuleConnector interface
 */
#ifndef __IFsrmPipelineModuleConnector_INTERFACE_DEFINED__
#define __IFsrmPipelineModuleConnector_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFsrmPipelineModuleConnector, 0xc16014f3, 0x9aa1, 0x46b3, 0xb0,0xa7, 0xab,0x14,0x6e,0xb2,0x05,0xf2);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c16014f3-9aa1-46b3-b0a7-ab146eb205f2")
IFsrmPipelineModuleConnector : public IDispatch
{
    virtual HRESULT STDMETHODCALLTYPE get_ModuleImplementation(
        IFsrmPipelineModuleImplementation **pipelineModuleImplementation) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_ModuleName(
        BSTR *userName) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HostingUserAccount(
        BSTR *userAccount) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_HostingProcessPid(
        LONG *pid) = 0;

    virtual HRESULT STDMETHODCALLTYPE Bind(
        IFsrmPipelineModuleDefinition *moduleDefinition,
        IFsrmPipelineModuleImplementation *moduleImplementation) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFsrmPipelineModuleConnector, 0xc16014f3, 0x9aa1, 0x46b3, 0xb0,0xa7, 0xab,0x14,0x6e,0xb2,0x05,0xf2)
#endif
#else
typedef struct IFsrmPipelineModuleConnectorVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFsrmPipelineModuleConnector *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFsrmPipelineModuleConnector *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFsrmPipelineModuleConnector *This);

    /*** IDispatch methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount)(
        IFsrmPipelineModuleConnector *This,
        UINT *pctinfo);

    HRESULT (STDMETHODCALLTYPE *GetTypeInfo)(
        IFsrmPipelineModuleConnector *This,
        UINT iTInfo,
        LCID lcid,
        ITypeInfo **ppTInfo);

    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames)(
        IFsrmPipelineModuleConnector *This,
        REFIID riid,
        LPOLESTR *rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID *rgDispId);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        IFsrmPipelineModuleConnector *This,
        DISPID dispIdMember,
        REFIID riid,
        LCID lcid,
        WORD wFlags,
        DISPPARAMS *pDispParams,
        VARIANT *pVarResult,
        EXCEPINFO *pExcepInfo,
        UINT *puArgErr);

    /*** IFsrmPipelineModuleConnector methods ***/
    HRESULT (STDMETHODCALLTYPE *get_ModuleImplementation)(
        IFsrmPipelineModuleConnector *This,
        IFsrmPipelineModuleImplementation **pipelineModuleImplementation);

    HRESULT (STDMETHODCALLTYPE *get_ModuleName)(
        IFsrmPipelineModuleConnector *This,
        BSTR *userName);

    HRESULT (STDMETHODCALLTYPE *get_HostingUserAccount)(
        IFsrmPipelineModuleConnector *This,
        BSTR *userAccount);

    HRESULT (STDMETHODCALLTYPE *get_HostingProcessPid)(
        IFsrmPipelineModuleConnector *This,
        LONG *pid);

    HRESULT (STDMETHODCALLTYPE *Bind)(
        IFsrmPipelineModuleConnector *This,
        IFsrmPipelineModuleDefinition *moduleDefinition,
        IFsrmPipelineModuleImplementation *moduleImplementation);

    END_INTERFACE
} IFsrmPipelineModuleConnectorVtbl;

interface IFsrmPipelineModuleConnector {
    CONST_VTBL IFsrmPipelineModuleConnectorVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFsrmPipelineModuleConnector_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFsrmPipelineModuleConnector_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFsrmPipelineModuleConnector_Release(This) (This)->lpVtbl->Release(This)
/*** IDispatch methods ***/
#define IFsrmPipelineModuleConnector_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IFsrmPipelineModuleConnector_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IFsrmPipelineModuleConnector_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IFsrmPipelineModuleConnector_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
/*** IFsrmPipelineModuleConnector methods ***/
#define IFsrmPipelineModuleConnector_get_ModuleImplementation(This,pipelineModuleImplementation) (This)->lpVtbl->get_ModuleImplementation(This,pipelineModuleImplementation)
#define IFsrmPipelineModuleConnector_get_ModuleName(This,userName) (This)->lpVtbl->get_ModuleName(This,userName)
#define IFsrmPipelineModuleConnector_get_HostingUserAccount(This,userAccount) (This)->lpVtbl->get_HostingUserAccount(This,userAccount)
#define IFsrmPipelineModuleConnector_get_HostingProcessPid(This,pid) (This)->lpVtbl->get_HostingProcessPid(This,pid)
#define IFsrmPipelineModuleConnector_Bind(This,moduleDefinition,moduleImplementation) (This)->lpVtbl->Bind(This,moduleDefinition,moduleImplementation)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IFsrmPipelineModuleConnector_QueryInterface(IFsrmPipelineModuleConnector* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IFsrmPipelineModuleConnector_AddRef(IFsrmPipelineModuleConnector* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IFsrmPipelineModuleConnector_Release(IFsrmPipelineModuleConnector* This) {
    return This->lpVtbl->Release(This);
}
/*** IDispatch methods ***/
static FORCEINLINE HRESULT IFsrmPipelineModuleConnector_GetTypeInfoCount(IFsrmPipelineModuleConnector* This,UINT *pctinfo) {
    return This->lpVtbl->GetTypeInfoCount(This,pctinfo);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleConnector_GetTypeInfo(IFsrmPipelineModuleConnector* This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo) {
    return This->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleConnector_GetIDsOfNames(IFsrmPipelineModuleConnector* This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId) {
    return This->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleConnector_Invoke(IFsrmPipelineModuleConnector* This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr) {
    return This->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr);
}
/*** IFsrmPipelineModuleConnector methods ***/
static FORCEINLINE HRESULT IFsrmPipelineModuleConnector_get_ModuleImplementation(IFsrmPipelineModuleConnector* This,IFsrmPipelineModuleImplementation **pipelineModuleImplementation) {
    return This->lpVtbl->get_ModuleImplementation(This,pipelineModuleImplementation);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleConnector_get_ModuleName(IFsrmPipelineModuleConnector* This,BSTR *userName) {
    return This->lpVtbl->get_ModuleName(This,userName);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleConnector_get_HostingUserAccount(IFsrmPipelineModuleConnector* This,BSTR *userAccount) {
    return This->lpVtbl->get_HostingUserAccount(This,userAccount);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleConnector_get_HostingProcessPid(IFsrmPipelineModuleConnector* This,LONG *pid) {
    return This->lpVtbl->get_HostingProcessPid(This,pid);
}
static FORCEINLINE HRESULT IFsrmPipelineModuleConnector_Bind(IFsrmPipelineModuleConnector* This,IFsrmPipelineModuleDefinition *moduleDefinition,IFsrmPipelineModuleImplementation *moduleImplementation) {
    return This->lpVtbl->Bind(This,moduleDefinition,moduleImplementation);
}
#endif
#endif

#endif


#endif  /* __IFsrmPipelineModuleConnector_INTERFACE_DEFINED__ */

#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) */
/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);
ULONG           __RPC_USER VARIANT_UserSize     (ULONG *, ULONG, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserMarshal  (ULONG *, unsigned char *, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserUnmarshal(ULONG *, unsigned char *, VARIANT *);
void            __RPC_USER VARIANT_UserFree     (ULONG *, VARIANT *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __fsrmpipeline_h__ */
