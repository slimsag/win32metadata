/*** Autogenerated by WIDL 7.0-rc1 from ./dxgidebug.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __dxgidebug_h__
#define __dxgidebug_h__

/* Forward declarations */

#ifndef __IDXGIInfoQueue_FWD_DEFINED__
#define __IDXGIInfoQueue_FWD_DEFINED__
typedef interface IDXGIInfoQueue IDXGIInfoQueue;
#ifdef __cplusplus
interface IDXGIInfoQueue;
#endif /* __cplusplus */
#endif

#ifndef __IDXGIDebug_FWD_DEFINED__
#define __IDXGIDebug_FWD_DEFINED__
typedef interface IDXGIDebug IDXGIDebug;
#ifdef __cplusplus
interface IDXGIDebug;
#endif /* __cplusplus */
#endif

#ifndef __IDXGIDebug1_FWD_DEFINED__
#define __IDXGIDebug1_FWD_DEFINED__
typedef interface IDXGIDebug1 IDXGIDebug1;
#ifdef __cplusplus
interface IDXGIDebug1;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <oaidl.h>
#include <ocidl.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <winapifamily.h>
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_GAMES)
#define DXGI_DEBUG_BINARY_VERSION (1)

typedef enum DXGI_DEBUG_RLO_FLAGS {
    DXGI_DEBUG_RLO_SUMMARY = 0x1,
    DXGI_DEBUG_RLO_DETAIL = 0x2,
    DXGI_DEBUG_RLO_IGNORE_INTERNAL = 0x4,
    DXGI_DEBUG_RLO_ALL = 0x7
} DXGI_DEBUG_RLO_FLAGS;
typedef GUID DXGI_DEBUG_ID;
DEFINE_GUID(DXGI_DEBUG_ALL, 0xe48ae283, 0xda80, 0x490b, 0x87, 0xe6, 0x43, 0xe9, 0xa9, 0xcf, 0xda, 0x8);
DEFINE_GUID(DXGI_DEBUG_DX, 0x35cdd7fc, 0x13b2, 0x421d, 0xa5, 0xd7, 0x7e, 0x44, 0x51, 0x28, 0x7d, 0x64);
DEFINE_GUID(DXGI_DEBUG_DXGI, 0x25cddaa4, 0xb1c6, 0x47e1, 0xac, 0x3e, 0x98, 0x87, 0x5b, 0x5a, 0x2e, 0x2a);
DEFINE_GUID(DXGI_DEBUG_APP, 0x6cd6e01, 0x4219, 0x4ebd, 0x87, 0x9, 0x27, 0xed, 0x23, 0x36, 0xc, 0x62);
typedef enum DXGI_INFO_QUEUE_MESSAGE_CATEGORY {
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_UNKNOWN = 0,
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_MISCELLANEOUS = 1,
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_INITIALIZATION = 2,
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_CLEANUP = 3,
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_COMPILATION = 4,
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_STATE_CREATION = 5,
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_STATE_SETTING = 6,
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_STATE_GETTING = 7,
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 8,
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_EXECUTION = 9,
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY_SHADER = 10
} DXGI_INFO_QUEUE_MESSAGE_CATEGORY;
typedef enum DXGI_INFO_QUEUE_MESSAGE_SEVERITY {
    DXGI_INFO_QUEUE_MESSAGE_SEVERITY_CORRUPTION = 0,
    DXGI_INFO_QUEUE_MESSAGE_SEVERITY_ERROR = 1,
    DXGI_INFO_QUEUE_MESSAGE_SEVERITY_WARNING = 2,
    DXGI_INFO_QUEUE_MESSAGE_SEVERITY_INFO = 3,
    DXGI_INFO_QUEUE_MESSAGE_SEVERITY_MESSAGE = 4
} DXGI_INFO_QUEUE_MESSAGE_SEVERITY;
typedef int DXGI_INFO_QUEUE_MESSAGE_ID;
#define DXGI_INFO_QUEUE_MESSAGE_ID_STRING_FROM_APPLICATION 0
typedef struct DXGI_INFO_QUEUE_MESSAGE {
    DXGI_DEBUG_ID Producer;
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category;
    DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity;
    DXGI_INFO_QUEUE_MESSAGE_ID ID;
    const char *pDescription;
    SIZE_T DescriptionByteLength;
} DXGI_INFO_QUEUE_MESSAGE;
typedef struct DXGI_INFO_QUEUE_FILTER_DESC {
    UINT NumCategories;
    DXGI_INFO_QUEUE_MESSAGE_CATEGORY *pCategoryList;
    UINT NumSeverities;
    DXGI_INFO_QUEUE_MESSAGE_SEVERITY *pSeverityList;
    UINT NumIDs;
    DXGI_INFO_QUEUE_MESSAGE_ID *pIDList;
} DXGI_INFO_QUEUE_FILTER_DESC;
typedef struct DXGI_INFO_QUEUE_FILTER {
    DXGI_INFO_QUEUE_FILTER_DESC AllowList;
    DXGI_INFO_QUEUE_FILTER_DESC DenyList;
} DXGI_INFO_QUEUE_FILTER;
#define DXGI_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT 1024
HRESULT WINAPI DXGIGetDebugInterface(REFIID riid, void **ppDebug);
/*****************************************************************************
 * IDXGIInfoQueue interface
 */
#ifndef __IDXGIInfoQueue_INTERFACE_DEFINED__
#define __IDXGIInfoQueue_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIInfoQueue, 0xd67441c7, 0x672a, 0x476f, 0x9e,0x82, 0xcd,0x55,0xb4,0x49,0x49,0xce);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d67441c7-672a-476f-9e82-cd55b44949ce")
IDXGIInfoQueue : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE SetMessageCountLimit(
        DXGI_DEBUG_ID Producer,
        UINT64 MessageCountLimit) = 0;

    virtual void STDMETHODCALLTYPE ClearStoredMessages(
        DXGI_DEBUG_ID Producer) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetMessage(
        DXGI_DEBUG_ID Producer,
        UINT64 MessageIndex,
        DXGI_INFO_QUEUE_MESSAGE *pMessage,
        SIZE_T *pMessageByteLength) = 0;

    virtual UINT64 STDMETHODCALLTYPE GetNumStoredMessagesAllowedByRetrievalFilters(
        DXGI_DEBUG_ID Producer) = 0;

    virtual UINT64 STDMETHODCALLTYPE GetNumStoredMessages(
        DXGI_DEBUG_ID Producer) = 0;

    virtual UINT64 STDMETHODCALLTYPE GetNumMessagesDiscardedByMessageCountLimit(
        DXGI_DEBUG_ID Producer) = 0;

    virtual UINT64 STDMETHODCALLTYPE GetMessageCountLimit(
        DXGI_DEBUG_ID Producer) = 0;

    virtual UINT64 STDMETHODCALLTYPE GetNumMessagesAllowedByStorageFilter(
        DXGI_DEBUG_ID Producer) = 0;

    virtual UINT64 STDMETHODCALLTYPE GetNumMessagesDeniedByStorageFilter(
        DXGI_DEBUG_ID Producer) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddStorageFilterEntries(
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_FILTER *pFilter) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetStorageFilter(
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_FILTER *pFilter,
        SIZE_T *pFilterByteLength) = 0;

    virtual void STDMETHODCALLTYPE ClearStorageFilter(
        DXGI_DEBUG_ID Producer) = 0;

    virtual HRESULT STDMETHODCALLTYPE PushEmptyStorageFilter(
        DXGI_DEBUG_ID Producer) = 0;

    virtual HRESULT STDMETHODCALLTYPE PushDenyAllStorageFilter(
        DXGI_DEBUG_ID Producer) = 0;

    virtual HRESULT STDMETHODCALLTYPE PushCopyOfStorageFilter(
        DXGI_DEBUG_ID Producer) = 0;

    virtual HRESULT STDMETHODCALLTYPE PushStorageFilter(
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_FILTER *pFilter) = 0;

    virtual void STDMETHODCALLTYPE PopStorageFilter(
        DXGI_DEBUG_ID Producer) = 0;

    virtual UINT STDMETHODCALLTYPE GetStorageFilterStackSize(
        DXGI_DEBUG_ID Producer) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddRetrievalFilterEntries(
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_FILTER *pFilter) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetRetrievalFilter(
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_FILTER *pFilter,
        SIZE_T *pFilterByteLength) = 0;

    virtual void STDMETHODCALLTYPE ClearRetrievalFilter(
        DXGI_DEBUG_ID Producer) = 0;

    virtual HRESULT STDMETHODCALLTYPE PushEmptyRetrievalFilter(
        DXGI_DEBUG_ID Producer) = 0;

    virtual HRESULT STDMETHODCALLTYPE PushDenyAllRetrievalFilter(
        DXGI_DEBUG_ID Producer) = 0;

    virtual HRESULT STDMETHODCALLTYPE PushCopyOfRetrievalFilter(
        DXGI_DEBUG_ID Producer) = 0;

    virtual HRESULT STDMETHODCALLTYPE PushRetrievalFilter(
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_FILTER *pFilter) = 0;

    virtual void STDMETHODCALLTYPE PopRetrievalFilter(
        DXGI_DEBUG_ID Producer) = 0;

    virtual UINT STDMETHODCALLTYPE GetRetrievalFilterStackSize(
        DXGI_DEBUG_ID Producer) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddMessage(
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category,
        DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity,
        DXGI_INFO_QUEUE_MESSAGE_ID ID,
        LPCSTR pDescription) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddApplicationMessage(
        DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity,
        LPCSTR pDescription) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetBreakOnCategory(
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category,
        BOOL bEnable) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetBreakOnSeverity(
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity,
        BOOL bEnable) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetBreakOnID(
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_MESSAGE_ID ID,
        BOOL bEnable) = 0;

    virtual BOOL STDMETHODCALLTYPE GetBreakOnCategory(
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category) = 0;

    virtual BOOL STDMETHODCALLTYPE GetBreakOnSeverity(
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity) = 0;

    virtual BOOL STDMETHODCALLTYPE GetBreakOnID(
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_MESSAGE_ID ID) = 0;

    virtual void STDMETHODCALLTYPE SetMuteDebugOutput(
        DXGI_DEBUG_ID Producer,
        BOOL bMute) = 0;

    virtual BOOL STDMETHODCALLTYPE GetMuteDebugOutput(
        DXGI_DEBUG_ID Producer) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIInfoQueue, 0xd67441c7, 0x672a, 0x476f, 0x9e,0x82, 0xcd,0x55,0xb4,0x49,0x49,0xce)
#endif
#else
typedef struct IDXGIInfoQueueVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIInfoQueue *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIInfoQueue *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIInfoQueue *This);

    /*** IDXGIInfoQueue methods ***/
    HRESULT (STDMETHODCALLTYPE *SetMessageCountLimit)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer,
        UINT64 MessageCountLimit);

    void (STDMETHODCALLTYPE *ClearStoredMessages)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer);

    HRESULT (STDMETHODCALLTYPE *GetMessage)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer,
        UINT64 MessageIndex,
        DXGI_INFO_QUEUE_MESSAGE *pMessage,
        SIZE_T *pMessageByteLength);

    UINT64 (STDMETHODCALLTYPE *GetNumStoredMessagesAllowedByRetrievalFilters)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer);

    UINT64 (STDMETHODCALLTYPE *GetNumStoredMessages)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer);

    UINT64 (STDMETHODCALLTYPE *GetNumMessagesDiscardedByMessageCountLimit)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer);

    UINT64 (STDMETHODCALLTYPE *GetMessageCountLimit)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer);

    UINT64 (STDMETHODCALLTYPE *GetNumMessagesAllowedByStorageFilter)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer);

    UINT64 (STDMETHODCALLTYPE *GetNumMessagesDeniedByStorageFilter)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer);

    HRESULT (STDMETHODCALLTYPE *AddStorageFilterEntries)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_FILTER *pFilter);

    HRESULT (STDMETHODCALLTYPE *GetStorageFilter)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_FILTER *pFilter,
        SIZE_T *pFilterByteLength);

    void (STDMETHODCALLTYPE *ClearStorageFilter)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer);

    HRESULT (STDMETHODCALLTYPE *PushEmptyStorageFilter)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer);

    HRESULT (STDMETHODCALLTYPE *PushDenyAllStorageFilter)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer);

    HRESULT (STDMETHODCALLTYPE *PushCopyOfStorageFilter)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer);

    HRESULT (STDMETHODCALLTYPE *PushStorageFilter)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_FILTER *pFilter);

    void (STDMETHODCALLTYPE *PopStorageFilter)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer);

    UINT (STDMETHODCALLTYPE *GetStorageFilterStackSize)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer);

    HRESULT (STDMETHODCALLTYPE *AddRetrievalFilterEntries)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_FILTER *pFilter);

    HRESULT (STDMETHODCALLTYPE *GetRetrievalFilter)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_FILTER *pFilter,
        SIZE_T *pFilterByteLength);

    void (STDMETHODCALLTYPE *ClearRetrievalFilter)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer);

    HRESULT (STDMETHODCALLTYPE *PushEmptyRetrievalFilter)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer);

    HRESULT (STDMETHODCALLTYPE *PushDenyAllRetrievalFilter)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer);

    HRESULT (STDMETHODCALLTYPE *PushCopyOfRetrievalFilter)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer);

    HRESULT (STDMETHODCALLTYPE *PushRetrievalFilter)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_FILTER *pFilter);

    void (STDMETHODCALLTYPE *PopRetrievalFilter)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer);

    UINT (STDMETHODCALLTYPE *GetRetrievalFilterStackSize)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer);

    HRESULT (STDMETHODCALLTYPE *AddMessage)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category,
        DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity,
        DXGI_INFO_QUEUE_MESSAGE_ID ID,
        LPCSTR pDescription);

    HRESULT (STDMETHODCALLTYPE *AddApplicationMessage)(
        IDXGIInfoQueue *This,
        DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity,
        LPCSTR pDescription);

    HRESULT (STDMETHODCALLTYPE *SetBreakOnCategory)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category,
        BOOL bEnable);

    HRESULT (STDMETHODCALLTYPE *SetBreakOnSeverity)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity,
        BOOL bEnable);

    HRESULT (STDMETHODCALLTYPE *SetBreakOnID)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_MESSAGE_ID ID,
        BOOL bEnable);

    BOOL (STDMETHODCALLTYPE *GetBreakOnCategory)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category);

    BOOL (STDMETHODCALLTYPE *GetBreakOnSeverity)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity);

    BOOL (STDMETHODCALLTYPE *GetBreakOnID)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer,
        DXGI_INFO_QUEUE_MESSAGE_ID ID);

    void (STDMETHODCALLTYPE *SetMuteDebugOutput)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer,
        BOOL bMute);

    BOOL (STDMETHODCALLTYPE *GetMuteDebugOutput)(
        IDXGIInfoQueue *This,
        DXGI_DEBUG_ID Producer);

    END_INTERFACE
} IDXGIInfoQueueVtbl;

interface IDXGIInfoQueue {
    CONST_VTBL IDXGIInfoQueueVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIInfoQueue_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIInfoQueue_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIInfoQueue_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIInfoQueue methods ***/
#define IDXGIInfoQueue_SetMessageCountLimit(This,Producer,MessageCountLimit) (This)->lpVtbl->SetMessageCountLimit(This,Producer,MessageCountLimit)
#define IDXGIInfoQueue_ClearStoredMessages(This,Producer) (This)->lpVtbl->ClearStoredMessages(This,Producer)
#define IDXGIInfoQueue_GetMessage(This,Producer,MessageIndex,pMessage,pMessageByteLength) (This)->lpVtbl->GetMessage(This,Producer,MessageIndex,pMessage,pMessageByteLength)
#define IDXGIInfoQueue_GetNumStoredMessagesAllowedByRetrievalFilters(This,Producer) (This)->lpVtbl->GetNumStoredMessagesAllowedByRetrievalFilters(This,Producer)
#define IDXGIInfoQueue_GetNumStoredMessages(This,Producer) (This)->lpVtbl->GetNumStoredMessages(This,Producer)
#define IDXGIInfoQueue_GetNumMessagesDiscardedByMessageCountLimit(This,Producer) (This)->lpVtbl->GetNumMessagesDiscardedByMessageCountLimit(This,Producer)
#define IDXGIInfoQueue_GetMessageCountLimit(This,Producer) (This)->lpVtbl->GetMessageCountLimit(This,Producer)
#define IDXGIInfoQueue_GetNumMessagesAllowedByStorageFilter(This,Producer) (This)->lpVtbl->GetNumMessagesAllowedByStorageFilter(This,Producer)
#define IDXGIInfoQueue_GetNumMessagesDeniedByStorageFilter(This,Producer) (This)->lpVtbl->GetNumMessagesDeniedByStorageFilter(This,Producer)
#define IDXGIInfoQueue_AddStorageFilterEntries(This,Producer,pFilter) (This)->lpVtbl->AddStorageFilterEntries(This,Producer,pFilter)
#define IDXGIInfoQueue_GetStorageFilter(This,Producer,pFilter,pFilterByteLength) (This)->lpVtbl->GetStorageFilter(This,Producer,pFilter,pFilterByteLength)
#define IDXGIInfoQueue_ClearStorageFilter(This,Producer) (This)->lpVtbl->ClearStorageFilter(This,Producer)
#define IDXGIInfoQueue_PushEmptyStorageFilter(This,Producer) (This)->lpVtbl->PushEmptyStorageFilter(This,Producer)
#define IDXGIInfoQueue_PushDenyAllStorageFilter(This,Producer) (This)->lpVtbl->PushDenyAllStorageFilter(This,Producer)
#define IDXGIInfoQueue_PushCopyOfStorageFilter(This,Producer) (This)->lpVtbl->PushCopyOfStorageFilter(This,Producer)
#define IDXGIInfoQueue_PushStorageFilter(This,Producer,pFilter) (This)->lpVtbl->PushStorageFilter(This,Producer,pFilter)
#define IDXGIInfoQueue_PopStorageFilter(This,Producer) (This)->lpVtbl->PopStorageFilter(This,Producer)
#define IDXGIInfoQueue_GetStorageFilterStackSize(This,Producer) (This)->lpVtbl->GetStorageFilterStackSize(This,Producer)
#define IDXGIInfoQueue_AddRetrievalFilterEntries(This,Producer,pFilter) (This)->lpVtbl->AddRetrievalFilterEntries(This,Producer,pFilter)
#define IDXGIInfoQueue_GetRetrievalFilter(This,Producer,pFilter,pFilterByteLength) (This)->lpVtbl->GetRetrievalFilter(This,Producer,pFilter,pFilterByteLength)
#define IDXGIInfoQueue_ClearRetrievalFilter(This,Producer) (This)->lpVtbl->ClearRetrievalFilter(This,Producer)
#define IDXGIInfoQueue_PushEmptyRetrievalFilter(This,Producer) (This)->lpVtbl->PushEmptyRetrievalFilter(This,Producer)
#define IDXGIInfoQueue_PushDenyAllRetrievalFilter(This,Producer) (This)->lpVtbl->PushDenyAllRetrievalFilter(This,Producer)
#define IDXGIInfoQueue_PushCopyOfRetrievalFilter(This,Producer) (This)->lpVtbl->PushCopyOfRetrievalFilter(This,Producer)
#define IDXGIInfoQueue_PushRetrievalFilter(This,Producer,pFilter) (This)->lpVtbl->PushRetrievalFilter(This,Producer,pFilter)
#define IDXGIInfoQueue_PopRetrievalFilter(This,Producer) (This)->lpVtbl->PopRetrievalFilter(This,Producer)
#define IDXGIInfoQueue_GetRetrievalFilterStackSize(This,Producer) (This)->lpVtbl->GetRetrievalFilterStackSize(This,Producer)
#define IDXGIInfoQueue_AddMessage(This,Producer,Category,Severity,ID,pDescription) (This)->lpVtbl->AddMessage(This,Producer,Category,Severity,ID,pDescription)
#define IDXGIInfoQueue_AddApplicationMessage(This,Severity,pDescription) (This)->lpVtbl->AddApplicationMessage(This,Severity,pDescription)
#define IDXGIInfoQueue_SetBreakOnCategory(This,Producer,Category,bEnable) (This)->lpVtbl->SetBreakOnCategory(This,Producer,Category,bEnable)
#define IDXGIInfoQueue_SetBreakOnSeverity(This,Producer,Severity,bEnable) (This)->lpVtbl->SetBreakOnSeverity(This,Producer,Severity,bEnable)
#define IDXGIInfoQueue_SetBreakOnID(This,Producer,ID,bEnable) (This)->lpVtbl->SetBreakOnID(This,Producer,ID,bEnable)
#define IDXGIInfoQueue_GetBreakOnCategory(This,Producer,Category) (This)->lpVtbl->GetBreakOnCategory(This,Producer,Category)
#define IDXGIInfoQueue_GetBreakOnSeverity(This,Producer,Severity) (This)->lpVtbl->GetBreakOnSeverity(This,Producer,Severity)
#define IDXGIInfoQueue_GetBreakOnID(This,Producer,ID) (This)->lpVtbl->GetBreakOnID(This,Producer,ID)
#define IDXGIInfoQueue_SetMuteDebugOutput(This,Producer,bMute) (This)->lpVtbl->SetMuteDebugOutput(This,Producer,bMute)
#define IDXGIInfoQueue_GetMuteDebugOutput(This,Producer) (This)->lpVtbl->GetMuteDebugOutput(This,Producer)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIInfoQueue_QueryInterface(IDXGIInfoQueue* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIInfoQueue_AddRef(IDXGIInfoQueue* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIInfoQueue_Release(IDXGIInfoQueue* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIInfoQueue methods ***/
static FORCEINLINE HRESULT IDXGIInfoQueue_SetMessageCountLimit(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer,UINT64 MessageCountLimit) {
    return This->lpVtbl->SetMessageCountLimit(This,Producer,MessageCountLimit);
}
static FORCEINLINE void IDXGIInfoQueue_ClearStoredMessages(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer) {
    This->lpVtbl->ClearStoredMessages(This,Producer);
}
static FORCEINLINE HRESULT IDXGIInfoQueue_GetMessage(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer,UINT64 MessageIndex,DXGI_INFO_QUEUE_MESSAGE *pMessage,SIZE_T *pMessageByteLength) {
    return This->lpVtbl->GetMessage(This,Producer,MessageIndex,pMessage,pMessageByteLength);
}
static FORCEINLINE UINT64 IDXGIInfoQueue_GetNumStoredMessagesAllowedByRetrievalFilters(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer) {
    return This->lpVtbl->GetNumStoredMessagesAllowedByRetrievalFilters(This,Producer);
}
static FORCEINLINE UINT64 IDXGIInfoQueue_GetNumStoredMessages(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer) {
    return This->lpVtbl->GetNumStoredMessages(This,Producer);
}
static FORCEINLINE UINT64 IDXGIInfoQueue_GetNumMessagesDiscardedByMessageCountLimit(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer) {
    return This->lpVtbl->GetNumMessagesDiscardedByMessageCountLimit(This,Producer);
}
static FORCEINLINE UINT64 IDXGIInfoQueue_GetMessageCountLimit(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer) {
    return This->lpVtbl->GetMessageCountLimit(This,Producer);
}
static FORCEINLINE UINT64 IDXGIInfoQueue_GetNumMessagesAllowedByStorageFilter(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer) {
    return This->lpVtbl->GetNumMessagesAllowedByStorageFilter(This,Producer);
}
static FORCEINLINE UINT64 IDXGIInfoQueue_GetNumMessagesDeniedByStorageFilter(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer) {
    return This->lpVtbl->GetNumMessagesDeniedByStorageFilter(This,Producer);
}
static FORCEINLINE HRESULT IDXGIInfoQueue_AddStorageFilterEntries(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer,DXGI_INFO_QUEUE_FILTER *pFilter) {
    return This->lpVtbl->AddStorageFilterEntries(This,Producer,pFilter);
}
static FORCEINLINE HRESULT IDXGIInfoQueue_GetStorageFilter(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer,DXGI_INFO_QUEUE_FILTER *pFilter,SIZE_T *pFilterByteLength) {
    return This->lpVtbl->GetStorageFilter(This,Producer,pFilter,pFilterByteLength);
}
static FORCEINLINE void IDXGIInfoQueue_ClearStorageFilter(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer) {
    This->lpVtbl->ClearStorageFilter(This,Producer);
}
static FORCEINLINE HRESULT IDXGIInfoQueue_PushEmptyStorageFilter(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer) {
    return This->lpVtbl->PushEmptyStorageFilter(This,Producer);
}
static FORCEINLINE HRESULT IDXGIInfoQueue_PushDenyAllStorageFilter(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer) {
    return This->lpVtbl->PushDenyAllStorageFilter(This,Producer);
}
static FORCEINLINE HRESULT IDXGIInfoQueue_PushCopyOfStorageFilter(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer) {
    return This->lpVtbl->PushCopyOfStorageFilter(This,Producer);
}
static FORCEINLINE HRESULT IDXGIInfoQueue_PushStorageFilter(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer,DXGI_INFO_QUEUE_FILTER *pFilter) {
    return This->lpVtbl->PushStorageFilter(This,Producer,pFilter);
}
static FORCEINLINE void IDXGIInfoQueue_PopStorageFilter(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer) {
    This->lpVtbl->PopStorageFilter(This,Producer);
}
static FORCEINLINE UINT IDXGIInfoQueue_GetStorageFilterStackSize(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer) {
    return This->lpVtbl->GetStorageFilterStackSize(This,Producer);
}
static FORCEINLINE HRESULT IDXGIInfoQueue_AddRetrievalFilterEntries(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer,DXGI_INFO_QUEUE_FILTER *pFilter) {
    return This->lpVtbl->AddRetrievalFilterEntries(This,Producer,pFilter);
}
static FORCEINLINE HRESULT IDXGIInfoQueue_GetRetrievalFilter(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer,DXGI_INFO_QUEUE_FILTER *pFilter,SIZE_T *pFilterByteLength) {
    return This->lpVtbl->GetRetrievalFilter(This,Producer,pFilter,pFilterByteLength);
}
static FORCEINLINE void IDXGIInfoQueue_ClearRetrievalFilter(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer) {
    This->lpVtbl->ClearRetrievalFilter(This,Producer);
}
static FORCEINLINE HRESULT IDXGIInfoQueue_PushEmptyRetrievalFilter(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer) {
    return This->lpVtbl->PushEmptyRetrievalFilter(This,Producer);
}
static FORCEINLINE HRESULT IDXGIInfoQueue_PushDenyAllRetrievalFilter(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer) {
    return This->lpVtbl->PushDenyAllRetrievalFilter(This,Producer);
}
static FORCEINLINE HRESULT IDXGIInfoQueue_PushCopyOfRetrievalFilter(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer) {
    return This->lpVtbl->PushCopyOfRetrievalFilter(This,Producer);
}
static FORCEINLINE HRESULT IDXGIInfoQueue_PushRetrievalFilter(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer,DXGI_INFO_QUEUE_FILTER *pFilter) {
    return This->lpVtbl->PushRetrievalFilter(This,Producer,pFilter);
}
static FORCEINLINE void IDXGIInfoQueue_PopRetrievalFilter(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer) {
    This->lpVtbl->PopRetrievalFilter(This,Producer);
}
static FORCEINLINE UINT IDXGIInfoQueue_GetRetrievalFilterStackSize(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer) {
    return This->lpVtbl->GetRetrievalFilterStackSize(This,Producer);
}
static FORCEINLINE HRESULT IDXGIInfoQueue_AddMessage(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer,DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category,DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity,DXGI_INFO_QUEUE_MESSAGE_ID ID,LPCSTR pDescription) {
    return This->lpVtbl->AddMessage(This,Producer,Category,Severity,ID,pDescription);
}
static FORCEINLINE HRESULT IDXGIInfoQueue_AddApplicationMessage(IDXGIInfoQueue* This,DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity,LPCSTR pDescription) {
    return This->lpVtbl->AddApplicationMessage(This,Severity,pDescription);
}
static FORCEINLINE HRESULT IDXGIInfoQueue_SetBreakOnCategory(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer,DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category,BOOL bEnable) {
    return This->lpVtbl->SetBreakOnCategory(This,Producer,Category,bEnable);
}
static FORCEINLINE HRESULT IDXGIInfoQueue_SetBreakOnSeverity(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer,DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity,BOOL bEnable) {
    return This->lpVtbl->SetBreakOnSeverity(This,Producer,Severity,bEnable);
}
static FORCEINLINE HRESULT IDXGIInfoQueue_SetBreakOnID(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer,DXGI_INFO_QUEUE_MESSAGE_ID ID,BOOL bEnable) {
    return This->lpVtbl->SetBreakOnID(This,Producer,ID,bEnable);
}
static FORCEINLINE BOOL IDXGIInfoQueue_GetBreakOnCategory(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer,DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category) {
    return This->lpVtbl->GetBreakOnCategory(This,Producer,Category);
}
static FORCEINLINE BOOL IDXGIInfoQueue_GetBreakOnSeverity(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer,DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity) {
    return This->lpVtbl->GetBreakOnSeverity(This,Producer,Severity);
}
static FORCEINLINE BOOL IDXGIInfoQueue_GetBreakOnID(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer,DXGI_INFO_QUEUE_MESSAGE_ID ID) {
    return This->lpVtbl->GetBreakOnID(This,Producer,ID);
}
static FORCEINLINE void IDXGIInfoQueue_SetMuteDebugOutput(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer,BOOL bMute) {
    This->lpVtbl->SetMuteDebugOutput(This,Producer,bMute);
}
static FORCEINLINE BOOL IDXGIInfoQueue_GetMuteDebugOutput(IDXGIInfoQueue* This,DXGI_DEBUG_ID Producer) {
    return This->lpVtbl->GetMuteDebugOutput(This,Producer);
}
#endif
#endif

#endif


#endif  /* __IDXGIInfoQueue_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDXGIDebug interface
 */
#ifndef __IDXGIDebug_INTERFACE_DEFINED__
#define __IDXGIDebug_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIDebug, 0x119e7452, 0xde9e, 0x40fe, 0x88,0x06, 0x88,0xf9,0x0c,0x12,0xb4,0x41);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("119e7452-de9e-40fe-8806-88f90c12b441")
IDXGIDebug : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE ReportLiveObjects(
        GUID apiid,
        DXGI_DEBUG_RLO_FLAGS flags) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIDebug, 0x119e7452, 0xde9e, 0x40fe, 0x88,0x06, 0x88,0xf9,0x0c,0x12,0xb4,0x41)
#endif
#else
typedef struct IDXGIDebugVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIDebug *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIDebug *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIDebug *This);

    /*** IDXGIDebug methods ***/
    HRESULT (STDMETHODCALLTYPE *ReportLiveObjects)(
        IDXGIDebug *This,
        GUID apiid,
        DXGI_DEBUG_RLO_FLAGS flags);

    END_INTERFACE
} IDXGIDebugVtbl;

interface IDXGIDebug {
    CONST_VTBL IDXGIDebugVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIDebug_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIDebug_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIDebug_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIDebug methods ***/
#define IDXGIDebug_ReportLiveObjects(This,apiid,flags) (This)->lpVtbl->ReportLiveObjects(This,apiid,flags)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIDebug_QueryInterface(IDXGIDebug* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIDebug_AddRef(IDXGIDebug* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIDebug_Release(IDXGIDebug* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIDebug methods ***/
static FORCEINLINE HRESULT IDXGIDebug_ReportLiveObjects(IDXGIDebug* This,GUID apiid,DXGI_DEBUG_RLO_FLAGS flags) {
    return This->lpVtbl->ReportLiveObjects(This,apiid,flags);
}
#endif
#endif

#endif


#endif  /* __IDXGIDebug_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDXGIDebug1 interface
 */
#ifndef __IDXGIDebug1_INTERFACE_DEFINED__
#define __IDXGIDebug1_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIDebug1, 0xc5a05f0c, 0x16f2, 0x4adf, 0x9f,0x4d, 0xa8,0xc4,0xd5,0x8a,0xc5,0x50);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c5a05f0c-16f2-4adf-9f4d-a8c4d58ac550")
IDXGIDebug1 : public IDXGIDebug
{
    virtual void STDMETHODCALLTYPE EnableLeakTrackingForThread(
        ) = 0;

    virtual void STDMETHODCALLTYPE DisableLeakTrackingForThread(
        ) = 0;

    virtual BOOL STDMETHODCALLTYPE IsLeakTrackingEnabledForThread(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIDebug1, 0xc5a05f0c, 0x16f2, 0x4adf, 0x9f,0x4d, 0xa8,0xc4,0xd5,0x8a,0xc5,0x50)
#endif
#else
typedef struct IDXGIDebug1Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIDebug1 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIDebug1 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIDebug1 *This);

    /*** IDXGIDebug methods ***/
    HRESULT (STDMETHODCALLTYPE *ReportLiveObjects)(
        IDXGIDebug1 *This,
        GUID apiid,
        DXGI_DEBUG_RLO_FLAGS flags);

    /*** IDXGIDebug1 methods ***/
    void (STDMETHODCALLTYPE *EnableLeakTrackingForThread)(
        IDXGIDebug1 *This);

    void (STDMETHODCALLTYPE *DisableLeakTrackingForThread)(
        IDXGIDebug1 *This);

    BOOL (STDMETHODCALLTYPE *IsLeakTrackingEnabledForThread)(
        IDXGIDebug1 *This);

    END_INTERFACE
} IDXGIDebug1Vtbl;

interface IDXGIDebug1 {
    CONST_VTBL IDXGIDebug1Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIDebug1_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIDebug1_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIDebug1_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIDebug methods ***/
#define IDXGIDebug1_ReportLiveObjects(This,apiid,flags) (This)->lpVtbl->ReportLiveObjects(This,apiid,flags)
/*** IDXGIDebug1 methods ***/
#define IDXGIDebug1_EnableLeakTrackingForThread(This) (This)->lpVtbl->EnableLeakTrackingForThread(This)
#define IDXGIDebug1_DisableLeakTrackingForThread(This) (This)->lpVtbl->DisableLeakTrackingForThread(This)
#define IDXGIDebug1_IsLeakTrackingEnabledForThread(This) (This)->lpVtbl->IsLeakTrackingEnabledForThread(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIDebug1_QueryInterface(IDXGIDebug1* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIDebug1_AddRef(IDXGIDebug1* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIDebug1_Release(IDXGIDebug1* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIDebug methods ***/
static FORCEINLINE HRESULT IDXGIDebug1_ReportLiveObjects(IDXGIDebug1* This,GUID apiid,DXGI_DEBUG_RLO_FLAGS flags) {
    return This->lpVtbl->ReportLiveObjects(This,apiid,flags);
}
/*** IDXGIDebug1 methods ***/
static FORCEINLINE void IDXGIDebug1_EnableLeakTrackingForThread(IDXGIDebug1* This) {
    This->lpVtbl->EnableLeakTrackingForThread(This);
}
static FORCEINLINE void IDXGIDebug1_DisableLeakTrackingForThread(IDXGIDebug1* This) {
    This->lpVtbl->DisableLeakTrackingForThread(This);
}
static FORCEINLINE BOOL IDXGIDebug1_IsLeakTrackingEnabledForThread(IDXGIDebug1* This) {
    return This->lpVtbl->IsLeakTrackingEnabledForThread(This);
}
#endif
#endif

#endif


#endif  /* __IDXGIDebug1_INTERFACE_DEFINED__ */

#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_GAMES) */
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) */
DEFINE_GUID(IID_IDXGIInfoQueue,0xD67441C7,0x672A,0x476f,0x9E,0x82,0xCD,0x55,0xB4,0x49,0x49,0xCE);
DEFINE_GUID(IID_IDXGIDebug,0x119E7452,0xDE9E,0x40fe,0x88,0x06,0x88,0xF9,0x0C,0x12,0xB4,0x41);
DEFINE_GUID(IID_IDXGIDebug1,0xc5a05f0c,0x16f2,0x4adf,0x9f,0x4d,0xa8,0xc4,0xd5,0x8a,0xc5,0x50);
/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __dxgidebug_h__ */
