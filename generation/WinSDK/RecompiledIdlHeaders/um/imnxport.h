/*** Autogenerated by WIDL 7.0-rc1 from ./imnxport.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __imnxport_h__
#define __imnxport_h__

/* Forward declarations */

#ifndef __ITransportCallbackService_FWD_DEFINED__
#define __ITransportCallbackService_FWD_DEFINED__
typedef interface ITransportCallbackService ITransportCallbackService;
#ifdef __cplusplus
interface ITransportCallbackService;
#endif /* __cplusplus */
#endif

#ifndef __ITransportCallback_FWD_DEFINED__
#define __ITransportCallback_FWD_DEFINED__
typedef interface ITransportCallback ITransportCallback;
#ifdef __cplusplus
interface ITransportCallback;
#endif /* __cplusplus */
#endif

#ifndef __IInternetTransport_FWD_DEFINED__
#define __IInternetTransport_FWD_DEFINED__
typedef interface IInternetTransport IInternetTransport;
#ifdef __cplusplus
interface IInternetTransport;
#endif /* __cplusplus */
#endif

#ifndef __ISMTPCallback_FWD_DEFINED__
#define __ISMTPCallback_FWD_DEFINED__
typedef interface ISMTPCallback ISMTPCallback;
#ifdef __cplusplus
interface ISMTPCallback;
#endif /* __cplusplus */
#endif

#ifndef __ISMTPTransport_FWD_DEFINED__
#define __ISMTPTransport_FWD_DEFINED__
typedef interface ISMTPTransport ISMTPTransport;
#ifdef __cplusplus
interface ISMTPTransport;
#endif /* __cplusplus */
#endif

#ifndef __ISMTPTransport2_FWD_DEFINED__
#define __ISMTPTransport2_FWD_DEFINED__
typedef interface ISMTPTransport2 ISMTPTransport2;
#ifdef __cplusplus
interface ISMTPTransport2;
#endif /* __cplusplus */
#endif

#ifndef __IDAVNamespaceArbiter_FWD_DEFINED__
#define __IDAVNamespaceArbiter_FWD_DEFINED__
typedef interface IDAVNamespaceArbiter IDAVNamespaceArbiter;
#ifdef __cplusplus
interface IDAVNamespaceArbiter;
#endif /* __cplusplus */
#endif

#ifndef __IPropPatchRequest_FWD_DEFINED__
#define __IPropPatchRequest_FWD_DEFINED__
typedef interface IPropPatchRequest IPropPatchRequest;
#ifdef __cplusplus
interface IPropPatchRequest;
#endif /* __cplusplus */
#endif

#ifndef __IPropFindRequest_FWD_DEFINED__
#define __IPropFindRequest_FWD_DEFINED__
typedef interface IPropFindRequest IPropFindRequest;
#ifdef __cplusplus
interface IPropFindRequest;
#endif /* __cplusplus */
#endif

#ifndef __IPropFindMultiResponse_FWD_DEFINED__
#define __IPropFindMultiResponse_FWD_DEFINED__
typedef interface IPropFindMultiResponse IPropFindMultiResponse;
#ifdef __cplusplus
interface IPropFindMultiResponse;
#endif /* __cplusplus */
#endif

#ifndef __IPropFindResponse_FWD_DEFINED__
#define __IPropFindResponse_FWD_DEFINED__
typedef interface IPropFindResponse IPropFindResponse;
#ifdef __cplusplus
interface IPropFindResponse;
#endif /* __cplusplus */
#endif

#ifndef __IHTTPMailCallback_FWD_DEFINED__
#define __IHTTPMailCallback_FWD_DEFINED__
typedef interface IHTTPMailCallback IHTTPMailCallback;
#ifdef __cplusplus
interface IHTTPMailCallback;
#endif /* __cplusplus */
#endif

#ifndef __IHTTPMailTransport_FWD_DEFINED__
#define __IHTTPMailTransport_FWD_DEFINED__
typedef interface IHTTPMailTransport IHTTPMailTransport;
#ifdef __cplusplus
interface IHTTPMailTransport;
#endif /* __cplusplus */
#endif

#ifndef __IHTTPMailTransport2_FWD_DEFINED__
#define __IHTTPMailTransport2_FWD_DEFINED__
typedef interface IHTTPMailTransport2 IHTTPMailTransport2;
#ifdef __cplusplus
interface IHTTPMailTransport2;
#endif /* __cplusplus */
#endif

#ifndef __IPOP3Callback_FWD_DEFINED__
#define __IPOP3Callback_FWD_DEFINED__
typedef interface IPOP3Callback IPOP3Callback;
#ifdef __cplusplus
interface IPOP3Callback;
#endif /* __cplusplus */
#endif

#ifndef __IPOP3Transport_FWD_DEFINED__
#define __IPOP3Transport_FWD_DEFINED__
typedef interface IPOP3Transport IPOP3Transport;
#ifdef __cplusplus
interface IPOP3Transport;
#endif /* __cplusplus */
#endif

#ifndef __INNTPCallback_FWD_DEFINED__
#define __INNTPCallback_FWD_DEFINED__
typedef interface INNTPCallback INNTPCallback;
#ifdef __cplusplus
interface INNTPCallback;
#endif /* __cplusplus */
#endif

#ifndef __INNTPTransport_FWD_DEFINED__
#define __INNTPTransport_FWD_DEFINED__
typedef interface INNTPTransport INNTPTransport;
#ifdef __cplusplus
interface INNTPTransport;
#endif /* __cplusplus */
#endif

#ifndef __INNTPTransport2_FWD_DEFINED__
#define __INNTPTransport2_FWD_DEFINED__
typedef interface INNTPTransport2 INNTPTransport2;
#ifdef __cplusplus
interface INNTPTransport2;
#endif /* __cplusplus */
#endif

#ifndef __IRASCallback_FWD_DEFINED__
#define __IRASCallback_FWD_DEFINED__
typedef interface IRASCallback IRASCallback;
#ifdef __cplusplus
interface IRASCallback;
#endif /* __cplusplus */
#endif

#ifndef __IRASTransport_FWD_DEFINED__
#define __IRASTransport_FWD_DEFINED__
typedef interface IRASTransport IRASTransport;
#ifdef __cplusplus
interface IRASTransport;
#endif /* __cplusplus */
#endif

#ifndef __IRangeList_FWD_DEFINED__
#define __IRangeList_FWD_DEFINED__
typedef interface IRangeList IRangeList;
#ifdef __cplusplus
interface IRangeList;
#endif /* __cplusplus */
#endif

#ifndef __IIMAPCallback_FWD_DEFINED__
#define __IIMAPCallback_FWD_DEFINED__
typedef interface IIMAPCallback IIMAPCallback;
#ifdef __cplusplus
interface IIMAPCallback;
#endif /* __cplusplus */
#endif

#ifndef __IIMAPTransport_FWD_DEFINED__
#define __IIMAPTransport_FWD_DEFINED__
typedef interface IIMAPTransport IIMAPTransport;
#ifdef __cplusplus
interface IIMAPTransport;
#endif /* __cplusplus */
#endif

#ifndef __IIMAPTransport2_FWD_DEFINED__
#define __IIMAPTransport2_FWD_DEFINED__
typedef interface IIMAPTransport2 IIMAPTransport2;
#ifdef __cplusplus
interface IIMAPTransport2;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <imnact.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <winapifamily.h>
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
#ifndef __IInternetTransport_FWD_DEFINED__
#define __IInternetTransport_FWD_DEFINED__
typedef interface IInternetTransport IInternetTransport;
#ifdef __cplusplus
interface IInternetTransport;
#endif /* __cplusplus */
#endif

#ifndef __ISMTPTransport_FWD_DEFINED__
#define __ISMTPTransport_FWD_DEFINED__
typedef interface ISMTPTransport ISMTPTransport;
#ifdef __cplusplus
interface ISMTPTransport;
#endif /* __cplusplus */
#endif

#ifndef __IPOP3Transport_FWD_DEFINED__
#define __IPOP3Transport_FWD_DEFINED__
typedef interface IPOP3Transport IPOP3Transport;
#ifdef __cplusplus
interface IPOP3Transport;
#endif /* __cplusplus */
#endif

#ifndef __INNTPTransport_FWD_DEFINED__
#define __INNTPTransport_FWD_DEFINED__
typedef interface INNTPTransport INNTPTransport;
#ifdef __cplusplus
interface INNTPTransport;
#endif /* __cplusplus */
#endif

#ifndef __IRASTransport_FWD_DEFINED__
#define __IRASTransport_FWD_DEFINED__
typedef interface IRASTransport IRASTransport;
#ifdef __cplusplus
interface IRASTransport;
#endif /* __cplusplus */
#endif

#ifndef __IIMAPTransport_FWD_DEFINED__
#define __IIMAPTransport_FWD_DEFINED__
typedef interface IIMAPTransport IIMAPTransport;
#ifdef __cplusplus
interface IIMAPTransport;
#endif /* __cplusplus */
#endif

#ifndef __IHTTPMailTransport_FWD_DEFINED__
#define __IHTTPMailTransport_FWD_DEFINED__
typedef interface IHTTPMailTransport IHTTPMailTransport;
#ifdef __cplusplus
interface IHTTPMailTransport;
#endif /* __cplusplus */
#endif

#ifndef __IPropFindResponse_FWD_DEFINED__
#define __IPropFindResponse_FWD_DEFINED__
typedef interface IPropFindResponse IPropFindResponse;
#ifdef __cplusplus
interface IPropFindResponse;
#endif /* __cplusplus */
#endif

#if 0
typedef HANDLE HDPA;
#endif
//--------------------------------------------------------------------------------
// IMNXPORT.H
//--------------------------------------------------------------------------------
// (C) Copyright 1995-1998 Microsoft Corporation.  All Rights Reserved.
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//--------------------------------------------------------------------------------

#pragma comment(lib,"uuid.lib")
// --------------------------------------------------------------------------------
// Dependencies
// --------------------------------------------------------------------------------
#include <ras.h>
#include <raserror.h>
#include <commctrl.h>

// --------------------------------------------------------------------------------
// GUIDS
// --------------------------------------------------------------------------------
// {CA30CC91-B1B3-11d0-85D0-00C04FD85AB4}
DEFINE_GUID(CLSID_IInternetMessageUrl, 0xca30cc91, 0xb1b3, 0x11d0, 0x85, 0xd0, 0x0, 0xc0, 0x4f, 0xd8, 0x5a, 0xb4);

// {0DF2C7E1-3435-11d0-81D0-00C04FD85AB4}
DEFINE_GUID(IID_ITransportCallback, 0xdf2c7e1, 0x3435, 0x11d0, 0x81, 0xd0, 0x0, 0xc0, 0x4f, 0xd8, 0x5a, 0xb4);

// {1F636C01-364E-11d0-81D3-00C04FD85AB4}
DEFINE_GUID(IID_IInternetTransport, 0x1f636c01, 0x364e, 0x11d0, 0x81, 0xd3, 0x0, 0xc0, 0x4f, 0xd8, 0x5a, 0xb4);

// {1F636C02-364E-11d0-81D3-00C04FD85AB4}
DEFINE_GUID(IID_ISMTPCallback, 0x1f636c02, 0x364e, 0x11d0, 0x81, 0xd3, 0x0, 0xc0, 0x4f, 0xd8, 0x5a, 0xb4);

// {FD853CE6-7F86-11d0-8252-00C04FD85AB4}
DEFINE_GUID(CLSID_ISMTPTransport, 0xfd853ce6, 0x7f86, 0x11d0, 0x82, 0x52, 0x0, 0xc0, 0x4f, 0xd8, 0x5a, 0xb4);
// {0DF2C7E2-3435-11d0-81D0-00C04FD85AB4}
DEFINE_GUID(IID_ISMTPTransport, 0xdf2c7e2, 0x3435, 0x11d0, 0x81, 0xd0, 0x0, 0xc0, 0x4f, 0xd8, 0x5a, 0xb4);
// {0DF2C7EC-3435-11d0-81D0-00C04FD85AB4}
DEFINE_GUID(IID_ISMTPTransport2, 0xdf2c7eC, 0x3435, 0x11d0, 0x81, 0xd0, 0x0, 0xc0, 0x4f, 0xd8, 0x5a, 0xb4);

// {0DF2C7E3-3435-11d0-81D0-00C04FD85AB4}
DEFINE_GUID(IID_IPOP3Callback, 0xdf2c7e3, 0x3435, 0x11d0, 0x81, 0xd0, 0x0, 0xc0, 0x4f, 0xd8, 0x5a, 0xb4);

// {FD853CE7-7F86-11d0-8252-00C04FD85AB4}
DEFINE_GUID(CLSID_IPOP3Transport, 0xfd853ce7, 0x7f86, 0x11d0, 0x82, 0x52, 0x0, 0xc0, 0x4f, 0xd8, 0x5a, 0xb4);
// {0DF2C7E4-3435-11d0-81D0-00C04FD85AB4}
DEFINE_GUID(IID_IPOP3Transport, 0xdf2c7e4, 0x3435, 0x11d0, 0x81, 0xd0, 0x0, 0xc0, 0x4f, 0xd8, 0x5a, 0xb4);

// {0DF2C7E5-3435-11d0-81D0-00C04FD85AB4}
DEFINE_GUID(IID_INNTPCallback, 0xdf2c7e5, 0x3435, 0x11d0, 0x81, 0xd0, 0x0, 0xc0, 0x4f, 0xd8, 0x5a, 0xb4);

// {FD853CE8-7F86-11d0-8252-00C04FD85AB4}
DEFINE_GUID(CLSID_INNTPTransport, 0xfd853ce8, 0x7f86, 0x11d0, 0x82, 0x52, 0x0, 0xc0, 0x4f, 0xd8, 0x5a, 0xb4);
// {0DF2C7E6-3435-11d0-81D0-00C04FD85AB4}
DEFINE_GUID(IID_INNTPTransport, 0xdf2c7e6, 0x3435, 0x11d0, 0x81, 0xd0, 0x0, 0xc0, 0x4f, 0xd8, 0x5a, 0xb4);
// {0DF2C7ED-3435-11d0-81D0-00C04FD85AB4}
DEFINE_GUID(IID_INNTPTransport2, 0xdf2c7eD, 0x3435, 0x11d0, 0x81, 0xd0, 0x0, 0xc0, 0x4f, 0xd8, 0x5a, 0xb4);

// {36D88911-3CD6-11d0-81DF-00C04FD85AB4}
DEFINE_GUID(IID_IRASCallback, 0x36d88911, 0x3cd6, 0x11d0, 0x81, 0xdf, 0x0, 0xc0, 0x4f, 0xd8, 0x5a, 0xb4);

// {FD853CE9-7F86-11d0-8252-00C04FD85AB4}
DEFINE_GUID(CLSID_IRASTransport, 0xfd853ce9, 0x7f86, 0x11d0, 0x82, 0x52, 0x0, 0xc0, 0x4f, 0xd8, 0x5a, 0xb4);
// {8A950001-3CCF-11d0-81DF-00C04FD85AB4}
DEFINE_GUID(IID_IRASTransport, 0x8a950001, 0x3ccf, 0x11d0, 0x81, 0xdf, 0x0, 0xc0, 0x4f, 0xd8, 0x5a, 0xb4);

// {FD853CEA-7F86-11d0-8252-00C04FD85AB4}
DEFINE_GUID(CLSID_IRangeList, 0xfd853cea, 0x7f86, 0x11d0, 0x82, 0x52, 0x0, 0xc0, 0x4f, 0xd8, 0x5a, 0xb4);
// {8C438160-4EF6-11d0-874F-00AA00530EE9}
DEFINE_GUID(IID_IRangeList, 0x8c438160, 0x4ef6, 0x11d0, 0x87, 0x4f, 0x0, 0xaa, 0x0, 0x53, 0xe, 0xe9);

// {E9E9D8A3-4EDD-11d0-874F-00AA00530EE9}
DEFINE_GUID(IID_IIMAPCallback, 0xe9e9d8a3, 0x4edd, 0x11d0, 0x87, 0x4f, 0x0, 0xaa, 0x0, 0x53, 0xe, 0xe9);

// {FD853CEB-7F86-11d0-8252-00C04FD85AB4}
DEFINE_GUID(CLSID_IIMAPTransport, 0xfd853ceb, 0x7f86, 0x11d0, 0x82, 0x52, 0x0, 0xc0, 0x4f, 0xd8, 0x5a, 0xb4);
// {E9E9D8A8-4EDD-11d0-874F-00AA00530EE9}
DEFINE_GUID(IID_IIMAPTransport, 0xe9e9d8a8, 0x4edd, 0x11d0, 0x87, 0x4f, 0x0, 0xaa, 0x0, 0x53, 0xe, 0xe9);

// {DA8283C0-37C5-11d2-ACD9-0080C7B6E3C5}
DEFINE_GUID(IID_IIMAPTransport2, 0xda8283c0, 0x37c5, 0x11d2, 0xac, 0xd9, 0x0, 0x80, 0xc7, 0xb6, 0xe3, 0xc5);

// {07849A11-B520-11d0-85D5-00C04FD85AB4}
DEFINE_GUID(IID_IBindMessageStream, 0x7849a11, 0xb520, 0x11d0, 0x85, 0xd5, 0x0, 0xc0, 0x4f, 0xd8, 0x5a, 0xb4);

// {CA30F3FF-C9AC-11d1-9A3A-00C04FA309D4}
DEFINE_GUID(IID_ITransportCallbackService, 0xca30f3ff, 0xc9ac, 0x11d1, 0x9a, 0x3a, 0x0, 0xc0, 0x4f, 0xa3, 0x9, 0xd4);

// {19F6481C-E5F0-11d1-A86E-0000F8084F96}
DEFINE_GUID(IID_IHTTPMailCallback, 0x19f6481c, 0xe5f0, 0x11d1, 0xa8, 0x6e, 0x0, 0x0, 0xf8, 0x8, 0x4f, 0x96);

// {5A580C11-E5EB-11d1-A86E-0000F8084F96}
DEFINE_GUID(CLSID_IHTTPMailTransport,0x5a580c11, 0xe5eb, 0x11d1, 0xa8, 0x6e, 0x0, 0x0, 0xf8, 0x8, 0x4f, 0x96);
// {B8BDE03C-E548-11d1-A86E-0000F8084F96}
DEFINE_GUID(IID_IHTTPMailTransport, 0xb8bde03c, 0xe548, 0x11d1, 0xa8, 0x6e, 0x0, 0x0, 0xf8, 0x8, 0x4f, 0x96);

// {82758005-D38A-11d3-8E81-00C04F79E13B}
DEFINE_GUID(IID_IHTTPMailTransport2, 0x82758005, 0xd38a, 0x11d3, 0x8e, 0x81, 0x0, 0xc0, 0x4f, 0x79, 0xe1, 0x3b);

// {BB847B8A-054A-11d2-A894-0000F8084F96}
DEFINE_GUID(CLSID_IPropFindRequest, 0xbb847b8a, 0x54a, 0x11d2, 0xa8, 0x94, 0x0, 0x0, 0xf8, 0x8, 0x4f, 0x96);
// {5CFC6308-0544-11d2-A894-0000F8084F96}
DEFINE_GUID(IID_IPropFindRequest, 0x5cfc6308, 0x544, 0x11d2, 0xa8, 0x94, 0x0, 0x0, 0xf8, 0x8, 0x4f, 0x96);

// {0DEE87DE-0547-11d2-A894-0000F8084F96}
DEFINE_GUID(IID_IPropFindMultiResponse, 0xdee87de, 0x547, 0x11d2, 0xa8, 0x94, 0x0, 0x0, 0xf8, 0x8, 0x4f, 0x96);

// {8A523716-0548-11d2-A894-0000F8084F96}
DEFINE_GUID(IID_IPropFindResponse, 0x8a523716, 0x548, 0x11d2, 0xa8, 0x94, 0x0, 0x0, 0xf8, 0x8, 0x4f, 0x96);

// {72A58FF8-227D-11d2-A8B5-0000F8084F96}
DEFINE_GUID(IID_IDAVNamespaceArbiter, 0x72a58ff8, 0x227d, 0x11d2, 0xa8, 0xb5, 0x0, 0x0, 0xf8, 0x8, 0x4f, 0x96);

// {EA678830-235D-11d2-A8B6-0000F8084F96}
DEFINE_GUID(CLSID_IPropPatchRequest, 0xea678830, 0x235d, 0x11d2, 0xa8, 0xb6, 0x0, 0x0, 0xf8, 0x8, 0x4f, 0x96);
// {AB8B8D2A-227F-11d2-A8B5-0000F8084F96}
DEFINE_GUID(IID_IPropPatchRequest, 0xab8b8d2a, 0x227f, 0x11d2, 0xa8, 0xb5, 0x0, 0x0, 0xf8, 0x8, 0x4f, 0x96);

// --------------------------------------------------------------------------------
// Errors
// --------------------------------------------------------------------------------
#ifndef FACILITY_INTERNET
#define FACILITY_INTERNET 12
#endif
#ifndef HR_E
#define HR_E(n) MAKE_SCODE(SEVERITY_ERROR, FACILITY_INTERNET, n)
#endif
#ifndef HR_S
#define HR_S(n) MAKE_SCODE(SEVERITY_SUCCESS, FACILITY_INTERNET, n)
#endif
#ifndef HR_CODE
#define HR_CODE(hr) (INT)(hr & 0xffff)
#endif

// --------------------------------------------------------------------------------
// General Imnxport Return Values
// --------------------------------------------------------------------------------
#define IXP_E_LOAD_SICILY_FAILED             HR_E(0xCC00)
#define IXP_E_INVALID_CERT_CN                HR_E(0xCC01)
#define IXP_E_INVALID_CERT_DATE              HR_E(0xCC02)
#define IXP_E_ALREADY_CONNECTED              HR_E(0xCC03)
#define IXP_E_CONN                           HR_E(0xCC04)
#define IXP_E_NOT_CONNECTED                  HR_E(0xCC05)
#define IXP_E_CONN_SEND                      HR_E(0xCC06)
#define IXP_E_WOULD_BLOCK                    HR_E(0xCC07)
#define IXP_E_INVALID_STATE                  HR_E(0xCC08)
#define IXP_E_CONN_RECV                      HR_E(0xCC09)
#define IXP_E_INCOMPLETE                     HR_E(0xCC0A)
#define IXP_E_BUSY                           HR_E(0xCC0B)
#define IXP_E_NOT_INIT                       HR_E(0xCC0C)
#define IXP_E_CANT_FIND_HOST                 HR_E(0xCC0D)
#define IXP_E_FAILED_TO_CONNECT              HR_E(0xCC0E)
#define IXP_E_CONNECTION_DROPPED             HR_E(0xCC0F)
#define IXP_E_INVALID_ADDRESS                HR_E(0xCC10)
#define IXP_E_INVALID_ADDRESS_LIST           HR_E(0xCC11)
#define IXP_E_SOCKET_READ_ERROR              HR_E(0xCC12)
#define IXP_E_SOCKET_WRITE_ERROR             HR_E(0xCC13)
#define IXP_E_SOCKET_INIT_ERROR              HR_E(0xCC14)
#define IXP_E_SOCKET_CONNECT_ERROR           HR_E(0xCC15)
#define IXP_E_INVALID_ACCOUNT                HR_E(0xCC16)
#define IXP_E_USER_CANCEL                    HR_E(0xCC17)
#define IXP_E_SICILY_LOGON_FAILED            HR_E(0xCC18)
#define IXP_E_TIMEOUT                        HR_E(0xCC19)
#define IXP_E_SECURE_CONNECT_FAILED			HR_E(0xCC1A)

// --------------------------------------------------------------------------------
// WINSOCK Errors
// --------------------------------------------------------------------------------
#define IXP_E_WINSOCK_WSASYSNOTREADY         HR_E(0xCC40)
#define IXP_E_WINSOCK_WSAVERNOTSUPPORTED     HR_E(0xCC41)
#define IXP_E_WINSOCK_WSAEPROCLIM            HR_E(0xCC42)
#define IXP_E_WINSOCK_WSAEFAULT              HR_E(0xCC43)
#define IXP_E_WINSOCK_FAILED_WSASTARTUP      HR_E(0xCC44)
#define IXP_E_WINSOCK_WSAEINPROGRESS         HR_E(0xCC45)

// --------------------------------------------------------------------------------
// SMTP Command Response Values
//--------------------------------------------------------------------------------
#define IXP_E_SMTP_RESPONSE_ERROR            HR_E(0xCC60)
#define IXP_E_SMTP_UNKNOWN_RESPONSE_CODE     HR_E(0xCC61)
#define IXP_E_SMTP_500_SYNTAX_ERROR          HR_E(0xCC62)
#define IXP_E_SMTP_501_PARAM_SYNTAX          HR_E(0xCC63)
#define IXP_E_SMTP_502_COMMAND_NOTIMPL       HR_E(0xCC64)
#define IXP_E_SMTP_503_COMMAND_SEQ           HR_E(0xCC65)
#define IXP_E_SMTP_504_COMMAND_PARAM_NOTIMPL HR_E(0xCC66)
#define IXP_E_SMTP_421_NOT_AVAILABLE         HR_E(0xCC67)
#define IXP_E_SMTP_450_MAILBOX_BUSY          HR_E(0xCC68)
#define IXP_E_SMTP_550_MAILBOX_NOT_FOUND     HR_E(0xCC69)
#define IXP_E_SMTP_451_ERROR_PROCESSING      HR_E(0xCC6A)
#define IXP_E_SMTP_551_USER_NOT_LOCAL        HR_E(0xCC6B)
#define IXP_E_SMTP_452_NO_SYSTEM_STORAGE     HR_E(0xCC6C)
#define IXP_E_SMTP_552_STORAGE_OVERFLOW      HR_E(0xCC6D)
#define IXP_E_SMTP_553_MAILBOX_NAME_SYNTAX   HR_E(0xCC6E)
#define IXP_E_SMTP_554_TRANSACT_FAILED       HR_E(0xCC6F)

#define IXP_S_SMTP_211_SYSTEM_STATUS         HR_S(0xCC70)
#define IXP_S_SMTP_214_HELP_MESSAGE          HR_S(0xCC71)
#define IXP_S_SMTP_220_READY                 HR_S(0xCC72)
#define IXP_S_SMTP_221_CLOSING               HR_S(0xCC73)
#define IXP_S_SMTP_250_MAIL_ACTION_OKAY      HR_S(0xCC74)
#define IXP_S_SMTP_251_FORWARDING_MAIL       HR_S(0xCC75)
#define IXP_S_SMTP_354_START_MAIL_INPUT      HR_S(0xCC76)
#define IXP_S_SMTP_CONTINUE                  HR_S(0xCC77)
#define IXP_S_SMTP_334_AUTH_READY_RESPONSE   HR_S(0xCC78)
#define IXP_S_SMTP_245_AUTH_SUCCESS          HR_S(0xCC79)

#define IXP_E_SMTP_REJECTED_SENDER           HR_E(0xCC78)
#define IXP_E_SMTP_REJECTED_RECIPIENTS       HR_E(0xCC79)
#define IXP_E_SMTP_NO_SENDER                 HR_E(0xCC7A)
#define IXP_E_SMTP_NO_RECIPIENTS             HR_E(0xCC7B)
#define IXP_E_SMTP_530_STARTTLS_REQUIRED      HR_E(0xCC7C)
#define IXP_E_SMTP_NO_STARTTLS_SUPPORT       HR_E(0xCC7D)
#define IXP_S_SMTP_NO_DSN_SUPPORT            HR_E(0xCC7E)
#define IXP_E_SMTP_454_STARTTLS_FAILED       HR_E(0xCC7F)

// --------------------------------------------------------------------------------
// POP3 Command Response Values
// --------------------------------------------------------------------------------
#define IXP_E_POP3_RESPONSE_ERROR            HR_E(0xCC90)
#define IXP_E_POP3_INVALID_USER_NAME         HR_E(0xCC91)
#define IXP_E_POP3_INVALID_PASSWORD          HR_E(0xCC92)
#define IXP_E_POP3_PARSE_FAILURE             HR_E(0xCC93)
#define IXP_E_POP3_NEED_STAT                 HR_E(0xCC94)
#define IXP_E_POP3_NO_MESSAGES               HR_E(0xCC95)
#define IXP_E_POP3_NO_MARKED_MESSAGES        HR_E(0xCC96)
#define IXP_E_POP3_POPID_OUT_OF_RANGE        HR_E(0xCC97)

// --------------------------------------------------------------------------------
// NNTP Command Response Values
// --------------------------------------------------------------------------------
#define IXP_E_NNTP_RESPONSE_ERROR            HR_E(0xCCA0)
#define IXP_E_NNTP_NEWGROUPS_FAILED          HR_E(0xCCA1)
#define IXP_E_NNTP_LIST_FAILED               HR_E(0xCCA2)
#define IXP_E_NNTP_LISTGROUP_FAILED          HR_E(0xCCA3)
#define IXP_E_NNTP_GROUP_FAILED              HR_E(0xCCA4)
#define IXP_E_NNTP_GROUP_NOTFOUND            HR_E(0xCCA5)
#define IXP_E_NNTP_ARTICLE_FAILED            HR_E(0xCCA6)
#define IXP_E_NNTP_HEAD_FAILED               HR_E(0xCCA7)
#define IXP_E_NNTP_BODY_FAILED               HR_E(0xCCA8)
#define IXP_E_NNTP_POST_FAILED               HR_E(0xCCA9)
#define IXP_E_NNTP_NEXT_FAILED               HR_E(0xCCAA)
#define IXP_E_NNTP_DATE_FAILED               HR_E(0xCCAB)
#define IXP_E_NNTP_HEADERS_FAILED            HR_E(0xCCAC)
#define IXP_E_NNTP_XHDR_FAILED               HR_E(0xCCAD)
#define IXP_E_NNTP_INVALID_USERPASS          HR_E(0xCCAE)

// --------------------------------------------------------------------------------
// NNTP Server Response Values
// --------------------------------------------------------------------------------
#define IXP_NNTP_DATE_RESPONSE               111
#define IXP_NNTP_POST_ALLOWED                200
#define IXP_NNTP_POST_NOTALLOWED             201
#define IXP_NNTP_GROUP_SELECTED              211
#define IXP_NNTP_LIST_DATA_FOLLOWS           215
#define IXP_NNTP_ARTICLE_FOLLOWS             220
#define IXP_NNTP_HEAD_FOLLOWS                221
#define IXP_NNTP_BODY_FOLLOWS                222
#define IXP_NNTP_ARTICLE_RETRIEVED           223
#define IXP_NNTP_OVERVIEW_FOLLOWS            224
#define IXP_NNTP_NEWNEWSGROUPS_FOLLOWS       231
#define IXP_NNTP_ARTICLE_POSTED_OK           240
#define IXP_NNTP_AUTHORIZATION_ACCEPTED      250
#define IXP_NNTP_AUTH_OK                     281
#define IXP_NNTP_SEND_ARTICLE_TO_POST        340
#define IXP_NNTP_CONTINUE_AUTHORIZATION      350
#define IXP_NNTP_PASSWORD_REQUIRED           381
#define IXP_NNTP_NO_SUCH_NEWSGROUP           411
#define IXP_NNTP_NO_NEXT_ARTICLE             421
#define IXP_NNTP_NO_PREV_ARTICLE             422
#define IXP_NNTP_NO_SUCH_ARTICLE_NUM         423
#define IXP_NNTP_NO_SUCH_ARTICLE_FOUND       430
#define IXP_NNTP_POSTING_NOT_ALLOWED         441
#define IXP_NNTP_PROTOCOLS_SUPPORTED         485

// --------------------------------------------------------------------------------
// RAS Errors
// --------------------------------------------------------------------------------
#define IXP_S_RAS_NOT_NEEDED                 HR_S(0xCCC0)
#define IXP_S_RAS_USING_CURRENT              HR_S(0xCCC1)
#define IXP_E_RAS_NOT_INSTALLED              HR_E(0xCCC2)
#define IXP_E_RAS_PROCS_NOT_FOUND            HR_E(0xCCC3)
#define IXP_E_RAS_ERROR                      HR_E(0xCCC4)
#define IXP_E_RAS_INVALID_CONNECTOID         HR_E(0xCCC5)
#define IXP_E_RAS_GET_DIAL_PARAMS            HR_E(0xCCC6)

// --------------------------------------------------------------------------------
// IMAP Return Codes
// --------------------------------------------------------------------------------
#define IXP_S_IMAP_UNRECOGNIZED_RESP         HR_S(0xCCD0) // Did not recognize IMAP response CODE
#define IXP_S_IMAP_VERBATIM_MBOX             HR_S(0xCCE1) // Could not xlate mbox to target CP (or it's disabled): copying verbatim

#define IXP_E_IMAP_LOGINFAILURE              HR_E(0xCCD1) // LOGIN cmd failed
#define IXP_E_IMAP_TAGGED_NO_RESPONSE        HR_E(0xCCD2) // Received tagged NO response
#define IXP_E_IMAP_BAD_RESPONSE              HR_E(0xCCD3) // Received tagged BAD response
#define IXP_E_IMAP_SVR_SYNTAXERR             HR_E(0xCCD4) // Syntax error in svr response
#define IXP_E_IMAP_NOTIMAPSERVER             HR_E(0xCCD5) // This is not an IMAP server
#define IXP_E_IMAP_BUFFER_OVERFLOW           HR_E(0xCCD6) // Buffer overflow occurred
#define IXP_E_IMAP_RECVR_ERROR               HR_E(0xCCD7) // An error occurred in the recvr code
#define IXP_E_IMAP_INCOMPLETE_LINE           HR_E(0xCCD8) // Received incomplete line
#define IXP_E_IMAP_CONNECTION_REFUSED        HR_E(0xCCD9) // Received BYE on greeting
#define IXP_E_IMAP_UNRECOGNIZED_RESP         HR_E(0xCCDA) // Did not recognize IMAP response
#define IXP_E_IMAP_CHANGEDUID                HR_E(0xCCDB) // UID changed unexpectedly!
#define IXP_E_IMAP_UIDORDER                  HR_E(0xCCDC) // UIDs not strictly ascending!
#define IXP_E_IMAP_UNSOLICITED_BYE           HR_E(0xCCDD) // Server issued UNSOLICITED BYE
#define IXP_E_IMAP_IMPROPER_SVRSTATE			HR_E(0xCCDE) // eg, Attempt to send FETCH before SELECT finishes
#define IXP_E_IMAP_AUTH_NOT_POSSIBLE			HR_E(0xCCDF) // No common authentication methods btwn client/svr
#define IXP_E_IMAP_OUT_OF_AUTH_METHODS		HR_E(0xCCE0) // We tried >= 1 auth method, no more left to try

// --------------------------------------------------------------------------------
// HTTPMail Return Codes
// --------------------------------------------------------------------------------
// http errors are discontiguous.
#define IXP_E_HTTP_USE_PROXY                 HR_E(0xCC30) // http status 305
#define IXP_E_HTTP_BAD_REQUEST               HR_E(0xCC31) // http status 400
#define IXP_E_HTTP_UNAUTHORIZED              HR_E(0xCC32) // http status 401
#define IXP_E_HTTP_FORBIDDEN                 HR_E(0xCC33) // http status 403
#define IXP_E_HTTP_NOT_FOUND                 HR_E(0xCC34) // http status 404
#define IXP_E_HTTP_METHOD_NOT_ALLOW          HR_E(0xCC35) // http status 405
#define IXP_E_HTTP_NOT_ACCEPTABLE            HR_E(0xCC36) // http status 406
#define IXP_E_HTTP_PROXY_AUTH_REQ            HR_E(0xCC37) // http status 407
#define IXP_E_HTTP_REQUEST_TIMEOUT           HR_E(0xCC38) // http status 408
#define IXP_E_HTTP_CONFLICT                  HR_E(0xCC39) // http status 409
#define IXP_E_HTTP_GONE                      HR_E(0xCC3A) // http status 410
#define IXP_E_HTTP_LENGTH_REQUIRED           HR_E(0xCC3B) // http status 411
#define IXP_E_HTTP_PRECOND_FAILED            HR_E(0xCC3C) // http status 412
#define IXP_E_HTTP_INTERNAL_ERROR            HR_E(0xCC3D) // http status 500
#define IXP_E_HTTP_NOT_IMPLEMENTED           HR_E(0xCC3E) // http status 501
#define IXP_E_HTTP_BAD_GATEWAY               HR_E(0xCC3F) // http status 502
// begin second range
#define IXP_E_HTTP_SERVICE_UNAVAIL           HR_E(0xCCF0) // http status 503
#define IXP_E_HTTP_GATEWAY_TIMEOUT           HR_E(0xCCF1) // http status 504
#define IXP_E_HTTP_VERS_NOT_SUP              HR_E(0xCCF2) // http status 505
#define IXP_E_HTTP_INSUFFICIENT_STORAGE      HR_E(0xCCF3) // http status 425 or 507
#define IXP_E_HTTP_ROOT_PROP_NOT_FOUND       HR_E(0xCCF4) // see IHTTPMailTransport::GetProperty
#define IXP_E_HTTP_NOT_MODIFIED              HR_E(0xCCF5) // http status 304
#define IXP_E_HTTP_PAYMENT_REQUIRED          HR_E(0xCCF6) // http status 402
#define IXP_E_HTTP_DAV_ACCESS_TURNED_OFF     HR_E(0xCCF7) // http status 404 + x-dav-errror 1204

// --------------------------------------------------------------------------------
// String Length Constants
// --------------------------------------------------------------------------------

#define CCHMAX_DOMAIN (256)

#define CCHMAX_PHONE_NUMBER (128)

#define DEFAULT_IMAP_PORT (143)

#define DEFAULT_POP3_PORT (110)

#define DEFAULT_SMTP_PORT (25)

#define DEFAULT_NNTP_PORT (119)

typedef enum tagINETADDRTYPE {
    ADDR_TO = 0,
    ADDR_FROM = 1,
    ADDR_DSN_NEVER = 16,
    ADDR_DSN_SUCCESS = 32,
    ADDR_DSN_FAILURE = 64,
    ADDR_DSN_DELAY = 128
} INETADDRTYPE;
#define ADDR_TOFROM_MASK (0x1)

#define ADDR_DSN_MASK (0xf0)

typedef enum tagDSNRET {
    DSNRET_DEFAULT = 0,
    DSNRET_HDRS = 1,
    DSNRET_FULL = 2
} DSNRET;
typedef struct tagINETADDR {
    INETADDRTYPE addrtype;
    CHAR szEmail[256];
} INETADDR;
typedef struct tagINETADDR *LPINETADDR;
typedef struct tagINETADDRLIST {
    ULONG cAddress;
    LPINETADDR prgAddress;
} INETADDRLIST;
typedef struct tagINETADDRLIST *LPINETADDRLIST;
typedef enum tagRASCONNTYPE {
    RAS_CONNECT_LAN = 0,
    RAS_CONNECT_MANUAL = 1,
    RAS_CONNECT_RAS = 2
} RASCONNTYPE;
typedef enum tagHTTPMAILPROPTYPE {
    HTTPMAIL_PROP_INVALID = 0,
    HTTPMAIL_PROP_ADBAR = 1,
    HTTPMAIL_PROP_CONTACTS = 2,
    HTTPMAIL_PROP_INBOX = 3,
    HTTPMAIL_PROP_OUTBOX = 4,
    HTTPMAIL_PROP_SENDMSG = 5,
    HTTPMAIL_PROP_SENTITEMS = 6,
    HTTPMAIL_PROP_DELETEDITEMS = 7,
    HTTPMAIL_PROP_DRAFTS = 8,
    HTTPMAIL_PROP_MSGFOLDERROOT = 9,
    HTTPMAIL_PROP_SIG = 10,
    HTTPMAIL_PROP_MAXPOLLINGINTERVAL = 11,
    HTTPMAIL_PROP_LAST = 12
} HTTPMAILPROPTYPE;
typedef enum tagHTTPMAILSPECIALFOLDER {
    HTTPMAIL_SF_NONE = 0,
    HTTPMAIL_SF_UNRECOGNIZED = 1,
    HTTPMAIL_SF_INBOX = 2,
    HTTPMAIL_SF_DELETEDITEMS = 3,
    HTTPMAIL_SF_DRAFTS = 4,
    HTTPMAIL_SF_OUTBOX = 5,
    HTTPMAIL_SF_SENTITEMS = 6,
    HTTPMAIL_SF_CONTACTS = 7,
    HTTPMAIL_SF_CALENDAR = 8,
    HTTPMAIL_SF_MSNPROMO = 9,
    HTTPMAIL_SF_BULKMAIL = 10,
    HTTPMAIL_SF_LAST = 11
} HTTPMAILSPECIALFOLDER;
typedef enum tagHTTPMAILCONTACTTYPE {
    HTTPMAIL_CT_CONTACT = 0,
    HTTPMAIL_CT_GROUP = 1,
    HTTPMAIL_CT_LAST = 2
} HTTPMAILCONTACTTYPE;
#define DAVNAMESPACE_UNKNOWN (0xffffffff)

#define DAVNAMESPACE_DAV (0)

#define DAVNAMESPACE_HOTMAIL (1)

#define DAVNAMESPACE_HTTPMAIL (2)

#define DAVNAMESPACE_MAIL (3)

#define DAVNAMESPACE_CONTACTS (4)

#define      ISF_SMTP_USEIPFORHELO           0x00000001 // For HELO or EHLO Command
#define      ISF_ALWAYSPROMPTFORPASSWORD     0x00000002 // For HELO or EHLO Command
#define      ISF_SSLONSAMEPORT               0x00000004 // For SMTP Only - use STARTTLS
#define      ISF_QUERYDSNSUPPORT             0x00000008 // For SMTP Only - issue EHLO on connect and check for DSN
#define      ISF_QUERYAUTHSUPPORT            0x00000010 // For SMTP Only - issue EHLO on connect and check for AUTH
typedef struct INETSERVER {
    CHAR szAccount[256];
    CHAR szUserName[256];
    CHAR szPassword[256];
    CHAR szServerName[256];
    CHAR szConnectoid[256];
    RASCONNTYPE rasconntype;
    DWORD dwPort;
    BOOL fSSL;
    BOOL fTrySicily;
    DWORD dwTimeout;
    DWORD dwFlags;
} INETSERVER;
typedef struct INETSERVER *LPINETSERVER;
typedef enum tagIXPTYPE {
    IXP_NNTP = 0,
    IXP_SMTP = 1,
    IXP_POP3 = 2,
    IXP_IMAP = 3,
    IXP_RAS = 4,
    IXP_HTTPMail = 5,
    IXP_HTTP = 6
} IXPTYPE;
typedef enum tagIXPSTATUS {
    IXP_FINDINGHOST = 0,
    IXP_CONNECTING = 1,
    IXP_SECURING = 2,
    IXP_CONNECTED = 3,
    IXP_AUTHORIZING = 4,
    IXP_AUTHRETRY = 5,
    IXP_AUTHORIZED = 6,
    IXP_DISCONNECTING = 7,
    IXP_DISCONNECTED = 8,
    IXP_SENDING = 9,
    IXP_SENT = 10,
    IXP_RECEIVING = 11,
    IXP_RECEIVED = 12,
    IXP_COMPLETE = 13,
    IXP_LAST = 14
} IXPSTATUS;
#define DEPTH_INFINITY (0xfffffffe)

typedef DWORD MEMBERINFOFLAGS;
#define HTTP_MEMBERINFO_COMMONPROPS (0x0)

#define HTTP_MEMBERINFO_FOLDERPROPS (0x1)

#define HTTP_MEMBERINFO_MESSAGEPROPS (0x2)

#define HTTP_MEMBERINFO_ALLPROPS (HTTP_MEMBERINFO_FOLDERPROPS | HTTP_MEMBERINFO_MESSAGEPROPS)

typedef DWORD IMAP_MSGFLAGS;
#define IMAP_MSG_NOFLAGS (0x0)

#define IMAP_MSG_ANSWERED (0x1)

#define IMAP_MSG_FLAGGED (0x2)

#define IMAP_MSG_DELETED (0x4)

#define IMAP_MSG_SEEN (0x8)

#define IMAP_MSG_DRAFT (0x10)

#define IMAP_MSG_ALLFLAGS (0x1f)

/*****************************************************************************
 * ITransportCallbackService interface
 */
#ifndef __ITransportCallbackService_INTERFACE_DEFINED__
#define __ITransportCallbackService_INTERFACE_DEFINED__

DEFINE_GUID(IID_ITransportCallbackService, 0xca30f3ff, 0xc9ac, 0x11d1, 0x9a,0x3a, 0x00,0xc0,0x4f,0xa3,0x09,0xd4);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ca30f3ff-c9ac-11d1-9a3a-00c04fa309d4")
ITransportCallbackService : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetParentWindow(
        DWORD dwReserved,
        HWND *phwndParent) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetAccount(
        LPDWORD pdwServerType,
        IImnAccount **ppAccount) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ITransportCallbackService, 0xca30f3ff, 0xc9ac, 0x11d1, 0x9a,0x3a, 0x00,0xc0,0x4f,0xa3,0x09,0xd4)
#endif
#else
typedef struct ITransportCallbackServiceVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ITransportCallbackService *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ITransportCallbackService *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ITransportCallbackService *This);

    /*** ITransportCallbackService methods ***/
    HRESULT (STDMETHODCALLTYPE *GetParentWindow)(
        ITransportCallbackService *This,
        DWORD dwReserved,
        HWND *phwndParent);

    HRESULT (STDMETHODCALLTYPE *GetAccount)(
        ITransportCallbackService *This,
        LPDWORD pdwServerType,
        IImnAccount **ppAccount);

    END_INTERFACE
} ITransportCallbackServiceVtbl;

interface ITransportCallbackService {
    CONST_VTBL ITransportCallbackServiceVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ITransportCallbackService_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITransportCallbackService_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITransportCallbackService_Release(This) (This)->lpVtbl->Release(This)
/*** ITransportCallbackService methods ***/
#define ITransportCallbackService_GetParentWindow(This,dwReserved,phwndParent) (This)->lpVtbl->GetParentWindow(This,dwReserved,phwndParent)
#define ITransportCallbackService_GetAccount(This,pdwServerType,ppAccount) (This)->lpVtbl->GetAccount(This,pdwServerType,ppAccount)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT ITransportCallbackService_QueryInterface(ITransportCallbackService* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG ITransportCallbackService_AddRef(ITransportCallbackService* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG ITransportCallbackService_Release(ITransportCallbackService* This) {
    return This->lpVtbl->Release(This);
}
/*** ITransportCallbackService methods ***/
static FORCEINLINE HRESULT ITransportCallbackService_GetParentWindow(ITransportCallbackService* This,DWORD dwReserved,HWND *phwndParent) {
    return This->lpVtbl->GetParentWindow(This,dwReserved,phwndParent);
}
static FORCEINLINE HRESULT ITransportCallbackService_GetAccount(ITransportCallbackService* This,LPDWORD pdwServerType,IImnAccount **ppAccount) {
    return This->lpVtbl->GetAccount(This,pdwServerType,ppAccount);
}
#endif
#endif

#endif


#endif  /* __ITransportCallbackService_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ITransportCallback interface
 */
#ifndef __ITransportCallback_INTERFACE_DEFINED__
#define __ITransportCallback_INTERFACE_DEFINED__

typedef struct tagIXPRESULT {
    HRESULT hrResult;
    LPSTR pszResponse;
    UINT uiServerError;
    HRESULT hrServerError;
    DWORD dwSocketError;
    LPSTR pszProblem;
} IXPRESULT;
typedef struct tagIXPRESULT *LPIXPRESULT;
typedef enum tagCMDTYPE {
    CMD_SEND = 0,
    CMD_RESP = 1
} CMDTYPE;
DEFINE_GUID(IID_ITransportCallback, 0x0df2c7e1, 0x3435, 0x11d0, 0x81,0xd0, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("0df2c7e1-3435-11d0-81d0-00c04fd85ab4")
ITransportCallback : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE OnTimeout(
        DWORD *pdwTimeout,
        IInternetTransport *pTransport) = 0;

    virtual HRESULT STDMETHODCALLTYPE OnLogonPrompt(
        LPINETSERVER pInetServer,
        IInternetTransport *pTransport) = 0;

    virtual INT STDMETHODCALLTYPE OnPrompt(
        HRESULT hrError,
        LPCTSTR pszText,
        LPCTSTR pszCaption,
        UINT uType,
        IInternetTransport *pTransport) = 0;

    virtual HRESULT STDMETHODCALLTYPE OnStatus(
        IXPSTATUS ixpstatus,
        IInternetTransport *pTransport) = 0;

    virtual HRESULT STDMETHODCALLTYPE OnError(
        IXPSTATUS ixpstatus,
        LPIXPRESULT pResult,
        IInternetTransport *pTransport) = 0;

    virtual HRESULT STDMETHODCALLTYPE OnCommand(
        CMDTYPE cmdtype,
        LPSTR pszLine,
        HRESULT hrResponse,
        IInternetTransport *pTransport) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ITransportCallback, 0x0df2c7e1, 0x3435, 0x11d0, 0x81,0xd0, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4)
#endif
#else
typedef struct ITransportCallbackVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ITransportCallback *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ITransportCallback *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ITransportCallback *This);

    /*** ITransportCallback methods ***/
    HRESULT (STDMETHODCALLTYPE *OnTimeout)(
        ITransportCallback *This,
        DWORD *pdwTimeout,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnLogonPrompt)(
        ITransportCallback *This,
        LPINETSERVER pInetServer,
        IInternetTransport *pTransport);

    INT (STDMETHODCALLTYPE *OnPrompt)(
        ITransportCallback *This,
        HRESULT hrError,
        LPCTSTR pszText,
        LPCTSTR pszCaption,
        UINT uType,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnStatus)(
        ITransportCallback *This,
        IXPSTATUS ixpstatus,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnError)(
        ITransportCallback *This,
        IXPSTATUS ixpstatus,
        LPIXPRESULT pResult,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnCommand)(
        ITransportCallback *This,
        CMDTYPE cmdtype,
        LPSTR pszLine,
        HRESULT hrResponse,
        IInternetTransport *pTransport);

    END_INTERFACE
} ITransportCallbackVtbl;

interface ITransportCallback {
    CONST_VTBL ITransportCallbackVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ITransportCallback_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITransportCallback_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITransportCallback_Release(This) (This)->lpVtbl->Release(This)
/*** ITransportCallback methods ***/
#define ITransportCallback_OnTimeout(This,pdwTimeout,pTransport) (This)->lpVtbl->OnTimeout(This,pdwTimeout,pTransport)
#define ITransportCallback_OnLogonPrompt(This,pInetServer,pTransport) (This)->lpVtbl->OnLogonPrompt(This,pInetServer,pTransport)
#define ITransportCallback_OnPrompt(This,hrError,pszText,pszCaption,uType,pTransport) (This)->lpVtbl->OnPrompt(This,hrError,pszText,pszCaption,uType,pTransport)
#define ITransportCallback_OnStatus(This,ixpstatus,pTransport) (This)->lpVtbl->OnStatus(This,ixpstatus,pTransport)
#define ITransportCallback_OnError(This,ixpstatus,pResult,pTransport) (This)->lpVtbl->OnError(This,ixpstatus,pResult,pTransport)
#define ITransportCallback_OnCommand(This,cmdtype,pszLine,hrResponse,pTransport) (This)->lpVtbl->OnCommand(This,cmdtype,pszLine,hrResponse,pTransport)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT ITransportCallback_QueryInterface(ITransportCallback* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG ITransportCallback_AddRef(ITransportCallback* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG ITransportCallback_Release(ITransportCallback* This) {
    return This->lpVtbl->Release(This);
}
/*** ITransportCallback methods ***/
static FORCEINLINE HRESULT ITransportCallback_OnTimeout(ITransportCallback* This,DWORD *pdwTimeout,IInternetTransport *pTransport) {
    return This->lpVtbl->OnTimeout(This,pdwTimeout,pTransport);
}
static FORCEINLINE HRESULT ITransportCallback_OnLogonPrompt(ITransportCallback* This,LPINETSERVER pInetServer,IInternetTransport *pTransport) {
    return This->lpVtbl->OnLogonPrompt(This,pInetServer,pTransport);
}
static FORCEINLINE INT ITransportCallback_OnPrompt(ITransportCallback* This,HRESULT hrError,LPCTSTR pszText,LPCTSTR pszCaption,UINT uType,IInternetTransport *pTransport) {
    return This->lpVtbl->OnPrompt(This,hrError,pszText,pszCaption,uType,pTransport);
}
static FORCEINLINE HRESULT ITransportCallback_OnStatus(ITransportCallback* This,IXPSTATUS ixpstatus,IInternetTransport *pTransport) {
    return This->lpVtbl->OnStatus(This,ixpstatus,pTransport);
}
static FORCEINLINE HRESULT ITransportCallback_OnError(ITransportCallback* This,IXPSTATUS ixpstatus,LPIXPRESULT pResult,IInternetTransport *pTransport) {
    return This->lpVtbl->OnError(This,ixpstatus,pResult,pTransport);
}
static FORCEINLINE HRESULT ITransportCallback_OnCommand(ITransportCallback* This,CMDTYPE cmdtype,LPSTR pszLine,HRESULT hrResponse,IInternetTransport *pTransport) {
    return This->lpVtbl->OnCommand(This,cmdtype,pszLine,hrResponse,pTransport);
}
#endif
#endif

#endif


#endif  /* __ITransportCallback_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IInternetTransport interface
 */
#ifndef __IInternetTransport_INTERFACE_DEFINED__
#define __IInternetTransport_INTERFACE_DEFINED__

#define iitAUTHENTICATE (TRUE)

#define iitDONT_AUTHENTICATE (FALSE)

#define iitENABLE_ONCOMMAND (TRUE)

#define iitDISABLE_ONCOMMAND (FALSE)

typedef enum tagIXPISSTATE {
    IXP_IS_CONNECTED = 0,
    IXP_IS_BUSY = 1,
    IXP_IS_READY = 2,
    IXP_IS_AUTHENTICATED = 3
} IXPISSTATE;
DEFINE_GUID(IID_IInternetTransport, 0x1f636c01, 0x364e, 0x11d0, 0x81,0xd3, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("1f636c01-364e-11d0-81d3-00c04fd85ab4")
IInternetTransport : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetServerInfo(
        LPINETSERVER pInetServer) = 0;

    virtual IXPTYPE STDMETHODCALLTYPE GetIXPType(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE IsState(
        IXPISSTATE isstate) = 0;

    virtual HRESULT STDMETHODCALLTYPE InetServerFromAccount(
        IImnAccount *pAccount,
        LPINETSERVER pInetServer) = 0;

    virtual HRESULT STDMETHODCALLTYPE Connect(
        LPINETSERVER pInetServer,
        boolean fAuthenticate,
        boolean fCommandLogging) = 0;

    virtual HRESULT STDMETHODCALLTYPE HandsOffCallback(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Disconnect(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE DropConnection(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetStatus(
        IXPSTATUS *pCurrentStatus) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IInternetTransport, 0x1f636c01, 0x364e, 0x11d0, 0x81,0xd3, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4)
#endif
#else
typedef struct IInternetTransportVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IInternetTransport *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IInternetTransport *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IInternetTransport *This);

    /*** IInternetTransport methods ***/
    HRESULT (STDMETHODCALLTYPE *GetServerInfo)(
        IInternetTransport *This,
        LPINETSERVER pInetServer);

    IXPTYPE (STDMETHODCALLTYPE *GetIXPType)(
        IInternetTransport *This);

    HRESULT (STDMETHODCALLTYPE *IsState)(
        IInternetTransport *This,
        IXPISSTATE isstate);

    HRESULT (STDMETHODCALLTYPE *InetServerFromAccount)(
        IInternetTransport *This,
        IImnAccount *pAccount,
        LPINETSERVER pInetServer);

    HRESULT (STDMETHODCALLTYPE *Connect)(
        IInternetTransport *This,
        LPINETSERVER pInetServer,
        boolean fAuthenticate,
        boolean fCommandLogging);

    HRESULT (STDMETHODCALLTYPE *HandsOffCallback)(
        IInternetTransport *This);

    HRESULT (STDMETHODCALLTYPE *Disconnect)(
        IInternetTransport *This);

    HRESULT (STDMETHODCALLTYPE *DropConnection)(
        IInternetTransport *This);

    HRESULT (STDMETHODCALLTYPE *GetStatus)(
        IInternetTransport *This,
        IXPSTATUS *pCurrentStatus);

    END_INTERFACE
} IInternetTransportVtbl;

interface IInternetTransport {
    CONST_VTBL IInternetTransportVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IInternetTransport_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IInternetTransport_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IInternetTransport_Release(This) (This)->lpVtbl->Release(This)
/*** IInternetTransport methods ***/
#define IInternetTransport_GetServerInfo(This,pInetServer) (This)->lpVtbl->GetServerInfo(This,pInetServer)
#define IInternetTransport_GetIXPType(This) (This)->lpVtbl->GetIXPType(This)
#define IInternetTransport_IsState(This,isstate) (This)->lpVtbl->IsState(This,isstate)
#define IInternetTransport_InetServerFromAccount(This,pAccount,pInetServer) (This)->lpVtbl->InetServerFromAccount(This,pAccount,pInetServer)
#define IInternetTransport_Connect(This,pInetServer,fAuthenticate,fCommandLogging) (This)->lpVtbl->Connect(This,pInetServer,fAuthenticate,fCommandLogging)
#define IInternetTransport_HandsOffCallback(This) (This)->lpVtbl->HandsOffCallback(This)
#define IInternetTransport_Disconnect(This) (This)->lpVtbl->Disconnect(This)
#define IInternetTransport_DropConnection(This) (This)->lpVtbl->DropConnection(This)
#define IInternetTransport_GetStatus(This,pCurrentStatus) (This)->lpVtbl->GetStatus(This,pCurrentStatus)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IInternetTransport_QueryInterface(IInternetTransport* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IInternetTransport_AddRef(IInternetTransport* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IInternetTransport_Release(IInternetTransport* This) {
    return This->lpVtbl->Release(This);
}
/*** IInternetTransport methods ***/
static FORCEINLINE HRESULT IInternetTransport_GetServerInfo(IInternetTransport* This,LPINETSERVER pInetServer) {
    return This->lpVtbl->GetServerInfo(This,pInetServer);
}
static FORCEINLINE IXPTYPE IInternetTransport_GetIXPType(IInternetTransport* This) {
    return This->lpVtbl->GetIXPType(This);
}
static FORCEINLINE HRESULT IInternetTransport_IsState(IInternetTransport* This,IXPISSTATE isstate) {
    return This->lpVtbl->IsState(This,isstate);
}
static FORCEINLINE HRESULT IInternetTransport_InetServerFromAccount(IInternetTransport* This,IImnAccount *pAccount,LPINETSERVER pInetServer) {
    return This->lpVtbl->InetServerFromAccount(This,pAccount,pInetServer);
}
static FORCEINLINE HRESULT IInternetTransport_Connect(IInternetTransport* This,LPINETSERVER pInetServer,boolean fAuthenticate,boolean fCommandLogging) {
    return This->lpVtbl->Connect(This,pInetServer,fAuthenticate,fCommandLogging);
}
static FORCEINLINE HRESULT IInternetTransport_HandsOffCallback(IInternetTransport* This) {
    return This->lpVtbl->HandsOffCallback(This);
}
static FORCEINLINE HRESULT IInternetTransport_Disconnect(IInternetTransport* This) {
    return This->lpVtbl->Disconnect(This);
}
static FORCEINLINE HRESULT IInternetTransport_DropConnection(IInternetTransport* This) {
    return This->lpVtbl->DropConnection(This);
}
static FORCEINLINE HRESULT IInternetTransport_GetStatus(IInternetTransport* This,IXPSTATUS *pCurrentStatus) {
    return This->lpVtbl->GetStatus(This,pCurrentStatus);
}
#endif
#endif

#endif


#endif  /* __IInternetTransport_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ISMTPCallback interface
 */
#ifndef __ISMTPCallback_INTERFACE_DEFINED__
#define __ISMTPCallback_INTERFACE_DEFINED__

typedef enum tagSMTPCOMMAND {
    SMTP_NONE = 0,
    SMTP_BANNER = 1,
    SMTP_CONNECTED = 2,
    SMTP_SEND_MESSAGE = 3,
    SMTP_AUTH = 4,
    SMTP_EHLO = 5,
    SMTP_HELO = 6,
    SMTP_MAIL = 7,
    SMTP_RCPT = 8,
    SMTP_RSET = 9,
    SMTP_QUIT = 10,
    SMTP_DATA = 11,
    SMTP_DOT = 12,
    SMTP_SEND_STREAM = 13,
    SMTP_CUSTOM = 14
} SMTPCOMMAND;
typedef struct tagSMTPSTREAM {
    DWORD cbIncrement;
    DWORD cbCurrent;
    DWORD cbTotal;
} SMTPSTREAM;
typedef struct tagSMTPSTREAM *LPSMTPSTREAM;
typedef struct tagSMTPRESPONSE {
    SMTPCOMMAND command;
    BOOL fDone;
    IXPRESULT rIxpResult;
    ISMTPTransport *pTransport;
    __C89_NAMELESS union {
        SMTPSTREAM rStreamInfo;
    } __C89_NAMELESSUNIONNAME;
} SMTPRESPONSE;
typedef struct tagSMTPRESPONSE *LPSMTPRESPONSE;
DEFINE_GUID(IID_ISMTPCallback, 0x1f636c02, 0x364e, 0x11d0, 0x81,0xd3, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("1f636c02-364e-11d0-81d3-00c04fd85ab4")
ISMTPCallback : public ITransportCallback
{
    virtual HRESULT STDMETHODCALLTYPE OnResponse(
        LPSMTPRESPONSE pResponse) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ISMTPCallback, 0x1f636c02, 0x364e, 0x11d0, 0x81,0xd3, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4)
#endif
#else
typedef struct ISMTPCallbackVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ISMTPCallback *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ISMTPCallback *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ISMTPCallback *This);

    /*** ITransportCallback methods ***/
    HRESULT (STDMETHODCALLTYPE *OnTimeout)(
        ISMTPCallback *This,
        DWORD *pdwTimeout,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnLogonPrompt)(
        ISMTPCallback *This,
        LPINETSERVER pInetServer,
        IInternetTransport *pTransport);

    INT (STDMETHODCALLTYPE *OnPrompt)(
        ISMTPCallback *This,
        HRESULT hrError,
        LPCTSTR pszText,
        LPCTSTR pszCaption,
        UINT uType,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnStatus)(
        ISMTPCallback *This,
        IXPSTATUS ixpstatus,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnError)(
        ISMTPCallback *This,
        IXPSTATUS ixpstatus,
        LPIXPRESULT pResult,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnCommand)(
        ISMTPCallback *This,
        CMDTYPE cmdtype,
        LPSTR pszLine,
        HRESULT hrResponse,
        IInternetTransport *pTransport);

    /*** ISMTPCallback methods ***/
    HRESULT (STDMETHODCALLTYPE *OnResponse)(
        ISMTPCallback *This,
        LPSMTPRESPONSE pResponse);

    END_INTERFACE
} ISMTPCallbackVtbl;

interface ISMTPCallback {
    CONST_VTBL ISMTPCallbackVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ISMTPCallback_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ISMTPCallback_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ISMTPCallback_Release(This) (This)->lpVtbl->Release(This)
/*** ITransportCallback methods ***/
#define ISMTPCallback_OnTimeout(This,pdwTimeout,pTransport) (This)->lpVtbl->OnTimeout(This,pdwTimeout,pTransport)
#define ISMTPCallback_OnLogonPrompt(This,pInetServer,pTransport) (This)->lpVtbl->OnLogonPrompt(This,pInetServer,pTransport)
#define ISMTPCallback_OnPrompt(This,hrError,pszText,pszCaption,uType,pTransport) (This)->lpVtbl->OnPrompt(This,hrError,pszText,pszCaption,uType,pTransport)
#define ISMTPCallback_OnStatus(This,ixpstatus,pTransport) (This)->lpVtbl->OnStatus(This,ixpstatus,pTransport)
#define ISMTPCallback_OnError(This,ixpstatus,pResult,pTransport) (This)->lpVtbl->OnError(This,ixpstatus,pResult,pTransport)
#define ISMTPCallback_OnCommand(This,cmdtype,pszLine,hrResponse,pTransport) (This)->lpVtbl->OnCommand(This,cmdtype,pszLine,hrResponse,pTransport)
/*** ISMTPCallback methods ***/
#define ISMTPCallback_OnResponse(This,pResponse) (This)->lpVtbl->OnResponse(This,pResponse)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT ISMTPCallback_QueryInterface(ISMTPCallback* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG ISMTPCallback_AddRef(ISMTPCallback* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG ISMTPCallback_Release(ISMTPCallback* This) {
    return This->lpVtbl->Release(This);
}
/*** ITransportCallback methods ***/
static FORCEINLINE HRESULT ISMTPCallback_OnTimeout(ISMTPCallback* This,DWORD *pdwTimeout,IInternetTransport *pTransport) {
    return This->lpVtbl->OnTimeout(This,pdwTimeout,pTransport);
}
static FORCEINLINE HRESULT ISMTPCallback_OnLogonPrompt(ISMTPCallback* This,LPINETSERVER pInetServer,IInternetTransport *pTransport) {
    return This->lpVtbl->OnLogonPrompt(This,pInetServer,pTransport);
}
static FORCEINLINE INT ISMTPCallback_OnPrompt(ISMTPCallback* This,HRESULT hrError,LPCTSTR pszText,LPCTSTR pszCaption,UINT uType,IInternetTransport *pTransport) {
    return This->lpVtbl->OnPrompt(This,hrError,pszText,pszCaption,uType,pTransport);
}
static FORCEINLINE HRESULT ISMTPCallback_OnStatus(ISMTPCallback* This,IXPSTATUS ixpstatus,IInternetTransport *pTransport) {
    return This->lpVtbl->OnStatus(This,ixpstatus,pTransport);
}
static FORCEINLINE HRESULT ISMTPCallback_OnError(ISMTPCallback* This,IXPSTATUS ixpstatus,LPIXPRESULT pResult,IInternetTransport *pTransport) {
    return This->lpVtbl->OnError(This,ixpstatus,pResult,pTransport);
}
static FORCEINLINE HRESULT ISMTPCallback_OnCommand(ISMTPCallback* This,CMDTYPE cmdtype,LPSTR pszLine,HRESULT hrResponse,IInternetTransport *pTransport) {
    return This->lpVtbl->OnCommand(This,cmdtype,pszLine,hrResponse,pTransport);
}
/*** ISMTPCallback methods ***/
static FORCEINLINE HRESULT ISMTPCallback_OnResponse(ISMTPCallback* This,LPSMTPRESPONSE pResponse) {
    return This->lpVtbl->OnResponse(This,pResponse);
}
#endif
#endif

#endif


#endif  /* __ISMTPCallback_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ISMTPTransport interface
 */
#ifndef __ISMTPTransport_INTERFACE_DEFINED__
#define __ISMTPTransport_INTERFACE_DEFINED__

typedef struct tagSMTPMESSAGE {
    ULONG cbSize;
    LPSTREAM pstmMsg;
    INETADDRLIST rAddressList;
} SMTPMESSAGE;
typedef struct tagSMTPMESSAGE *LPSMTPMESSAGE;
DEFINE_GUID(IID_ISMTPTransport, 0x0df2c7e2, 0x3435, 0x11d0, 0x81,0xd0, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("0df2c7e2-3435-11d0-81d0-00c04fd85ab4")
ISMTPTransport : public IInternetTransport
{
    virtual HRESULT STDMETHODCALLTYPE InitNew(
        LPSTR pszLogFilePath,
        ISMTPCallback *pCallback) = 0;

    virtual HRESULT STDMETHODCALLTYPE SendMessage(
        LPSMTPMESSAGE pMessage) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandMAIL(
        LPSTR pszEmailFrom) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandRCPT(
        LPSTR pszEmailTo) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandEHLO(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandHELO(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandAUTH(
        LPSTR pszAuthType) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandQUIT(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandRSET(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandDATA(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandDOT(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE SendDataStream(
        IStream *pStream,
        ULONG cbSize) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ISMTPTransport, 0x0df2c7e2, 0x3435, 0x11d0, 0x81,0xd0, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4)
#endif
#else
typedef struct ISMTPTransportVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ISMTPTransport *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ISMTPTransport *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ISMTPTransport *This);

    /*** IInternetTransport methods ***/
    HRESULT (STDMETHODCALLTYPE *GetServerInfo)(
        ISMTPTransport *This,
        LPINETSERVER pInetServer);

    IXPTYPE (STDMETHODCALLTYPE *GetIXPType)(
        ISMTPTransport *This);

    HRESULT (STDMETHODCALLTYPE *IsState)(
        ISMTPTransport *This,
        IXPISSTATE isstate);

    HRESULT (STDMETHODCALLTYPE *InetServerFromAccount)(
        ISMTPTransport *This,
        IImnAccount *pAccount,
        LPINETSERVER pInetServer);

    HRESULT (STDMETHODCALLTYPE *Connect)(
        ISMTPTransport *This,
        LPINETSERVER pInetServer,
        boolean fAuthenticate,
        boolean fCommandLogging);

    HRESULT (STDMETHODCALLTYPE *HandsOffCallback)(
        ISMTPTransport *This);

    HRESULT (STDMETHODCALLTYPE *Disconnect)(
        ISMTPTransport *This);

    HRESULT (STDMETHODCALLTYPE *DropConnection)(
        ISMTPTransport *This);

    HRESULT (STDMETHODCALLTYPE *GetStatus)(
        ISMTPTransport *This,
        IXPSTATUS *pCurrentStatus);

    /*** ISMTPTransport methods ***/
    HRESULT (STDMETHODCALLTYPE *InitNew)(
        ISMTPTransport *This,
        LPSTR pszLogFilePath,
        ISMTPCallback *pCallback);

    HRESULT (STDMETHODCALLTYPE *SendMessage)(
        ISMTPTransport *This,
        LPSMTPMESSAGE pMessage);

    HRESULT (STDMETHODCALLTYPE *CommandMAIL)(
        ISMTPTransport *This,
        LPSTR pszEmailFrom);

    HRESULT (STDMETHODCALLTYPE *CommandRCPT)(
        ISMTPTransport *This,
        LPSTR pszEmailTo);

    HRESULT (STDMETHODCALLTYPE *CommandEHLO)(
        ISMTPTransport *This);

    HRESULT (STDMETHODCALLTYPE *CommandHELO)(
        ISMTPTransport *This);

    HRESULT (STDMETHODCALLTYPE *CommandAUTH)(
        ISMTPTransport *This,
        LPSTR pszAuthType);

    HRESULT (STDMETHODCALLTYPE *CommandQUIT)(
        ISMTPTransport *This);

    HRESULT (STDMETHODCALLTYPE *CommandRSET)(
        ISMTPTransport *This);

    HRESULT (STDMETHODCALLTYPE *CommandDATA)(
        ISMTPTransport *This);

    HRESULT (STDMETHODCALLTYPE *CommandDOT)(
        ISMTPTransport *This);

    HRESULT (STDMETHODCALLTYPE *SendDataStream)(
        ISMTPTransport *This,
        IStream *pStream,
        ULONG cbSize);

    END_INTERFACE
} ISMTPTransportVtbl;

interface ISMTPTransport {
    CONST_VTBL ISMTPTransportVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ISMTPTransport_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ISMTPTransport_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ISMTPTransport_Release(This) (This)->lpVtbl->Release(This)
/*** IInternetTransport methods ***/
#define ISMTPTransport_GetServerInfo(This,pInetServer) (This)->lpVtbl->GetServerInfo(This,pInetServer)
#define ISMTPTransport_GetIXPType(This) (This)->lpVtbl->GetIXPType(This)
#define ISMTPTransport_IsState(This,isstate) (This)->lpVtbl->IsState(This,isstate)
#define ISMTPTransport_InetServerFromAccount(This,pAccount,pInetServer) (This)->lpVtbl->InetServerFromAccount(This,pAccount,pInetServer)
#define ISMTPTransport_Connect(This,pInetServer,fAuthenticate,fCommandLogging) (This)->lpVtbl->Connect(This,pInetServer,fAuthenticate,fCommandLogging)
#define ISMTPTransport_HandsOffCallback(This) (This)->lpVtbl->HandsOffCallback(This)
#define ISMTPTransport_Disconnect(This) (This)->lpVtbl->Disconnect(This)
#define ISMTPTransport_DropConnection(This) (This)->lpVtbl->DropConnection(This)
#define ISMTPTransport_GetStatus(This,pCurrentStatus) (This)->lpVtbl->GetStatus(This,pCurrentStatus)
/*** ISMTPTransport methods ***/
#define ISMTPTransport_InitNew(This,pszLogFilePath,pCallback) (This)->lpVtbl->InitNew(This,pszLogFilePath,pCallback)
#define ISMTPTransport_SendMessage(This,pMessage) (This)->lpVtbl->SendMessage(This,pMessage)
#define ISMTPTransport_CommandMAIL(This,pszEmailFrom) (This)->lpVtbl->CommandMAIL(This,pszEmailFrom)
#define ISMTPTransport_CommandRCPT(This,pszEmailTo) (This)->lpVtbl->CommandRCPT(This,pszEmailTo)
#define ISMTPTransport_CommandEHLO(This) (This)->lpVtbl->CommandEHLO(This)
#define ISMTPTransport_CommandHELO(This) (This)->lpVtbl->CommandHELO(This)
#define ISMTPTransport_CommandAUTH(This,pszAuthType) (This)->lpVtbl->CommandAUTH(This,pszAuthType)
#define ISMTPTransport_CommandQUIT(This) (This)->lpVtbl->CommandQUIT(This)
#define ISMTPTransport_CommandRSET(This) (This)->lpVtbl->CommandRSET(This)
#define ISMTPTransport_CommandDATA(This) (This)->lpVtbl->CommandDATA(This)
#define ISMTPTransport_CommandDOT(This) (This)->lpVtbl->CommandDOT(This)
#define ISMTPTransport_SendDataStream(This,pStream,cbSize) (This)->lpVtbl->SendDataStream(This,pStream,cbSize)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT ISMTPTransport_QueryInterface(ISMTPTransport* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG ISMTPTransport_AddRef(ISMTPTransport* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG ISMTPTransport_Release(ISMTPTransport* This) {
    return This->lpVtbl->Release(This);
}
/*** IInternetTransport methods ***/
static FORCEINLINE HRESULT ISMTPTransport_GetServerInfo(ISMTPTransport* This,LPINETSERVER pInetServer) {
    return This->lpVtbl->GetServerInfo(This,pInetServer);
}
static FORCEINLINE IXPTYPE ISMTPTransport_GetIXPType(ISMTPTransport* This) {
    return This->lpVtbl->GetIXPType(This);
}
static FORCEINLINE HRESULT ISMTPTransport_IsState(ISMTPTransport* This,IXPISSTATE isstate) {
    return This->lpVtbl->IsState(This,isstate);
}
static FORCEINLINE HRESULT ISMTPTransport_InetServerFromAccount(ISMTPTransport* This,IImnAccount *pAccount,LPINETSERVER pInetServer) {
    return This->lpVtbl->InetServerFromAccount(This,pAccount,pInetServer);
}
static FORCEINLINE HRESULT ISMTPTransport_Connect(ISMTPTransport* This,LPINETSERVER pInetServer,boolean fAuthenticate,boolean fCommandLogging) {
    return This->lpVtbl->Connect(This,pInetServer,fAuthenticate,fCommandLogging);
}
static FORCEINLINE HRESULT ISMTPTransport_HandsOffCallback(ISMTPTransport* This) {
    return This->lpVtbl->HandsOffCallback(This);
}
static FORCEINLINE HRESULT ISMTPTransport_Disconnect(ISMTPTransport* This) {
    return This->lpVtbl->Disconnect(This);
}
static FORCEINLINE HRESULT ISMTPTransport_DropConnection(ISMTPTransport* This) {
    return This->lpVtbl->DropConnection(This);
}
static FORCEINLINE HRESULT ISMTPTransport_GetStatus(ISMTPTransport* This,IXPSTATUS *pCurrentStatus) {
    return This->lpVtbl->GetStatus(This,pCurrentStatus);
}
/*** ISMTPTransport methods ***/
static FORCEINLINE HRESULT ISMTPTransport_InitNew(ISMTPTransport* This,LPSTR pszLogFilePath,ISMTPCallback *pCallback) {
    return This->lpVtbl->InitNew(This,pszLogFilePath,pCallback);
}
static FORCEINLINE HRESULT ISMTPTransport_SendMessage(ISMTPTransport* This,LPSMTPMESSAGE pMessage) {
    return This->lpVtbl->SendMessage(This,pMessage);
}
static FORCEINLINE HRESULT ISMTPTransport_CommandMAIL(ISMTPTransport* This,LPSTR pszEmailFrom) {
    return This->lpVtbl->CommandMAIL(This,pszEmailFrom);
}
static FORCEINLINE HRESULT ISMTPTransport_CommandRCPT(ISMTPTransport* This,LPSTR pszEmailTo) {
    return This->lpVtbl->CommandRCPT(This,pszEmailTo);
}
static FORCEINLINE HRESULT ISMTPTransport_CommandEHLO(ISMTPTransport* This) {
    return This->lpVtbl->CommandEHLO(This);
}
static FORCEINLINE HRESULT ISMTPTransport_CommandHELO(ISMTPTransport* This) {
    return This->lpVtbl->CommandHELO(This);
}
static FORCEINLINE HRESULT ISMTPTransport_CommandAUTH(ISMTPTransport* This,LPSTR pszAuthType) {
    return This->lpVtbl->CommandAUTH(This,pszAuthType);
}
static FORCEINLINE HRESULT ISMTPTransport_CommandQUIT(ISMTPTransport* This) {
    return This->lpVtbl->CommandQUIT(This);
}
static FORCEINLINE HRESULT ISMTPTransport_CommandRSET(ISMTPTransport* This) {
    return This->lpVtbl->CommandRSET(This);
}
static FORCEINLINE HRESULT ISMTPTransport_CommandDATA(ISMTPTransport* This) {
    return This->lpVtbl->CommandDATA(This);
}
static FORCEINLINE HRESULT ISMTPTransport_CommandDOT(ISMTPTransport* This) {
    return This->lpVtbl->CommandDOT(This);
}
static FORCEINLINE HRESULT ISMTPTransport_SendDataStream(ISMTPTransport* This,IStream *pStream,ULONG cbSize) {
    return This->lpVtbl->SendDataStream(This,pStream,cbSize);
}
#endif
#endif

#endif


#endif  /* __ISMTPTransport_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ISMTPTransport2 interface
 */
#ifndef __ISMTPTransport2_INTERFACE_DEFINED__
#define __ISMTPTransport2_INTERFACE_DEFINED__

typedef struct tagSMTPMESSAGE2 {
    SMTPMESSAGE smtpMsg;
    LPSTR pszDSNENVID;
    DSNRET dsnRet;
    DWORD dwReserved;
    DWORD dwReserved2;
} SMTPMESSAGE2;
typedef struct tagSMTPMESSAGE2 *LPSMTPMESSAGE2;
DEFINE_GUID(IID_ISMTPTransport2, 0x0df2c7ec, 0x3435, 0x11d0, 0x81,0xd0, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("0df2c7ec-3435-11d0-81d0-00c04fd85ab4")
ISMTPTransport2 : public ISMTPTransport
{
    virtual HRESULT STDMETHODCALLTYPE SetWindow(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE ResetWindow(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE SendMessage2(
        LPSMTPMESSAGE2 pMessage) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandRCPT2(
        LPSTR pszEmailTo,
        INETADDRTYPE atDSN) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ISMTPTransport2, 0x0df2c7ec, 0x3435, 0x11d0, 0x81,0xd0, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4)
#endif
#else
typedef struct ISMTPTransport2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ISMTPTransport2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ISMTPTransport2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ISMTPTransport2 *This);

    /*** IInternetTransport methods ***/
    HRESULT (STDMETHODCALLTYPE *GetServerInfo)(
        ISMTPTransport2 *This,
        LPINETSERVER pInetServer);

    IXPTYPE (STDMETHODCALLTYPE *GetIXPType)(
        ISMTPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *IsState)(
        ISMTPTransport2 *This,
        IXPISSTATE isstate);

    HRESULT (STDMETHODCALLTYPE *InetServerFromAccount)(
        ISMTPTransport2 *This,
        IImnAccount *pAccount,
        LPINETSERVER pInetServer);

    HRESULT (STDMETHODCALLTYPE *Connect)(
        ISMTPTransport2 *This,
        LPINETSERVER pInetServer,
        boolean fAuthenticate,
        boolean fCommandLogging);

    HRESULT (STDMETHODCALLTYPE *HandsOffCallback)(
        ISMTPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *Disconnect)(
        ISMTPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *DropConnection)(
        ISMTPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *GetStatus)(
        ISMTPTransport2 *This,
        IXPSTATUS *pCurrentStatus);

    /*** ISMTPTransport methods ***/
    HRESULT (STDMETHODCALLTYPE *InitNew)(
        ISMTPTransport2 *This,
        LPSTR pszLogFilePath,
        ISMTPCallback *pCallback);

    HRESULT (STDMETHODCALLTYPE *SendMessage)(
        ISMTPTransport2 *This,
        LPSMTPMESSAGE pMessage);

    HRESULT (STDMETHODCALLTYPE *CommandMAIL)(
        ISMTPTransport2 *This,
        LPSTR pszEmailFrom);

    HRESULT (STDMETHODCALLTYPE *CommandRCPT)(
        ISMTPTransport2 *This,
        LPSTR pszEmailTo);

    HRESULT (STDMETHODCALLTYPE *CommandEHLO)(
        ISMTPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *CommandHELO)(
        ISMTPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *CommandAUTH)(
        ISMTPTransport2 *This,
        LPSTR pszAuthType);

    HRESULT (STDMETHODCALLTYPE *CommandQUIT)(
        ISMTPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *CommandRSET)(
        ISMTPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *CommandDATA)(
        ISMTPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *CommandDOT)(
        ISMTPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *SendDataStream)(
        ISMTPTransport2 *This,
        IStream *pStream,
        ULONG cbSize);

    /*** ISMTPTransport2 methods ***/
    HRESULT (STDMETHODCALLTYPE *SetWindow)(
        ISMTPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *ResetWindow)(
        ISMTPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *SendMessage2)(
        ISMTPTransport2 *This,
        LPSMTPMESSAGE2 pMessage);

    HRESULT (STDMETHODCALLTYPE *CommandRCPT2)(
        ISMTPTransport2 *This,
        LPSTR pszEmailTo,
        INETADDRTYPE atDSN);

    END_INTERFACE
} ISMTPTransport2Vtbl;

interface ISMTPTransport2 {
    CONST_VTBL ISMTPTransport2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ISMTPTransport2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ISMTPTransport2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ISMTPTransport2_Release(This) (This)->lpVtbl->Release(This)
/*** IInternetTransport methods ***/
#define ISMTPTransport2_GetServerInfo(This,pInetServer) (This)->lpVtbl->GetServerInfo(This,pInetServer)
#define ISMTPTransport2_GetIXPType(This) (This)->lpVtbl->GetIXPType(This)
#define ISMTPTransport2_IsState(This,isstate) (This)->lpVtbl->IsState(This,isstate)
#define ISMTPTransport2_InetServerFromAccount(This,pAccount,pInetServer) (This)->lpVtbl->InetServerFromAccount(This,pAccount,pInetServer)
#define ISMTPTransport2_Connect(This,pInetServer,fAuthenticate,fCommandLogging) (This)->lpVtbl->Connect(This,pInetServer,fAuthenticate,fCommandLogging)
#define ISMTPTransport2_HandsOffCallback(This) (This)->lpVtbl->HandsOffCallback(This)
#define ISMTPTransport2_Disconnect(This) (This)->lpVtbl->Disconnect(This)
#define ISMTPTransport2_DropConnection(This) (This)->lpVtbl->DropConnection(This)
#define ISMTPTransport2_GetStatus(This,pCurrentStatus) (This)->lpVtbl->GetStatus(This,pCurrentStatus)
/*** ISMTPTransport methods ***/
#define ISMTPTransport2_InitNew(This,pszLogFilePath,pCallback) (This)->lpVtbl->InitNew(This,pszLogFilePath,pCallback)
#define ISMTPTransport2_SendMessage(This,pMessage) (This)->lpVtbl->SendMessage(This,pMessage)
#define ISMTPTransport2_CommandMAIL(This,pszEmailFrom) (This)->lpVtbl->CommandMAIL(This,pszEmailFrom)
#define ISMTPTransport2_CommandRCPT(This,pszEmailTo) (This)->lpVtbl->CommandRCPT(This,pszEmailTo)
#define ISMTPTransport2_CommandEHLO(This) (This)->lpVtbl->CommandEHLO(This)
#define ISMTPTransport2_CommandHELO(This) (This)->lpVtbl->CommandHELO(This)
#define ISMTPTransport2_CommandAUTH(This,pszAuthType) (This)->lpVtbl->CommandAUTH(This,pszAuthType)
#define ISMTPTransport2_CommandQUIT(This) (This)->lpVtbl->CommandQUIT(This)
#define ISMTPTransport2_CommandRSET(This) (This)->lpVtbl->CommandRSET(This)
#define ISMTPTransport2_CommandDATA(This) (This)->lpVtbl->CommandDATA(This)
#define ISMTPTransport2_CommandDOT(This) (This)->lpVtbl->CommandDOT(This)
#define ISMTPTransport2_SendDataStream(This,pStream,cbSize) (This)->lpVtbl->SendDataStream(This,pStream,cbSize)
/*** ISMTPTransport2 methods ***/
#define ISMTPTransport2_SetWindow(This) (This)->lpVtbl->SetWindow(This)
#define ISMTPTransport2_ResetWindow(This) (This)->lpVtbl->ResetWindow(This)
#define ISMTPTransport2_SendMessage2(This,pMessage) (This)->lpVtbl->SendMessage2(This,pMessage)
#define ISMTPTransport2_CommandRCPT2(This,pszEmailTo,atDSN) (This)->lpVtbl->CommandRCPT2(This,pszEmailTo,atDSN)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT ISMTPTransport2_QueryInterface(ISMTPTransport2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG ISMTPTransport2_AddRef(ISMTPTransport2* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG ISMTPTransport2_Release(ISMTPTransport2* This) {
    return This->lpVtbl->Release(This);
}
/*** IInternetTransport methods ***/
static FORCEINLINE HRESULT ISMTPTransport2_GetServerInfo(ISMTPTransport2* This,LPINETSERVER pInetServer) {
    return This->lpVtbl->GetServerInfo(This,pInetServer);
}
static FORCEINLINE IXPTYPE ISMTPTransport2_GetIXPType(ISMTPTransport2* This) {
    return This->lpVtbl->GetIXPType(This);
}
static FORCEINLINE HRESULT ISMTPTransport2_IsState(ISMTPTransport2* This,IXPISSTATE isstate) {
    return This->lpVtbl->IsState(This,isstate);
}
static FORCEINLINE HRESULT ISMTPTransport2_InetServerFromAccount(ISMTPTransport2* This,IImnAccount *pAccount,LPINETSERVER pInetServer) {
    return This->lpVtbl->InetServerFromAccount(This,pAccount,pInetServer);
}
static FORCEINLINE HRESULT ISMTPTransport2_Connect(ISMTPTransport2* This,LPINETSERVER pInetServer,boolean fAuthenticate,boolean fCommandLogging) {
    return This->lpVtbl->Connect(This,pInetServer,fAuthenticate,fCommandLogging);
}
static FORCEINLINE HRESULT ISMTPTransport2_HandsOffCallback(ISMTPTransport2* This) {
    return This->lpVtbl->HandsOffCallback(This);
}
static FORCEINLINE HRESULT ISMTPTransport2_Disconnect(ISMTPTransport2* This) {
    return This->lpVtbl->Disconnect(This);
}
static FORCEINLINE HRESULT ISMTPTransport2_DropConnection(ISMTPTransport2* This) {
    return This->lpVtbl->DropConnection(This);
}
static FORCEINLINE HRESULT ISMTPTransport2_GetStatus(ISMTPTransport2* This,IXPSTATUS *pCurrentStatus) {
    return This->lpVtbl->GetStatus(This,pCurrentStatus);
}
/*** ISMTPTransport methods ***/
static FORCEINLINE HRESULT ISMTPTransport2_InitNew(ISMTPTransport2* This,LPSTR pszLogFilePath,ISMTPCallback *pCallback) {
    return This->lpVtbl->InitNew(This,pszLogFilePath,pCallback);
}
static FORCEINLINE HRESULT ISMTPTransport2_SendMessage(ISMTPTransport2* This,LPSMTPMESSAGE pMessage) {
    return This->lpVtbl->SendMessage(This,pMessage);
}
static FORCEINLINE HRESULT ISMTPTransport2_CommandMAIL(ISMTPTransport2* This,LPSTR pszEmailFrom) {
    return This->lpVtbl->CommandMAIL(This,pszEmailFrom);
}
static FORCEINLINE HRESULT ISMTPTransport2_CommandRCPT(ISMTPTransport2* This,LPSTR pszEmailTo) {
    return This->lpVtbl->CommandRCPT(This,pszEmailTo);
}
static FORCEINLINE HRESULT ISMTPTransport2_CommandEHLO(ISMTPTransport2* This) {
    return This->lpVtbl->CommandEHLO(This);
}
static FORCEINLINE HRESULT ISMTPTransport2_CommandHELO(ISMTPTransport2* This) {
    return This->lpVtbl->CommandHELO(This);
}
static FORCEINLINE HRESULT ISMTPTransport2_CommandAUTH(ISMTPTransport2* This,LPSTR pszAuthType) {
    return This->lpVtbl->CommandAUTH(This,pszAuthType);
}
static FORCEINLINE HRESULT ISMTPTransport2_CommandQUIT(ISMTPTransport2* This) {
    return This->lpVtbl->CommandQUIT(This);
}
static FORCEINLINE HRESULT ISMTPTransport2_CommandRSET(ISMTPTransport2* This) {
    return This->lpVtbl->CommandRSET(This);
}
static FORCEINLINE HRESULT ISMTPTransport2_CommandDATA(ISMTPTransport2* This) {
    return This->lpVtbl->CommandDATA(This);
}
static FORCEINLINE HRESULT ISMTPTransport2_CommandDOT(ISMTPTransport2* This) {
    return This->lpVtbl->CommandDOT(This);
}
static FORCEINLINE HRESULT ISMTPTransport2_SendDataStream(ISMTPTransport2* This,IStream *pStream,ULONG cbSize) {
    return This->lpVtbl->SendDataStream(This,pStream,cbSize);
}
/*** ISMTPTransport2 methods ***/
static FORCEINLINE HRESULT ISMTPTransport2_SetWindow(ISMTPTransport2* This) {
    return This->lpVtbl->SetWindow(This);
}
static FORCEINLINE HRESULT ISMTPTransport2_ResetWindow(ISMTPTransport2* This) {
    return This->lpVtbl->ResetWindow(This);
}
static FORCEINLINE HRESULT ISMTPTransport2_SendMessage2(ISMTPTransport2* This,LPSMTPMESSAGE2 pMessage) {
    return This->lpVtbl->SendMessage2(This,pMessage);
}
static FORCEINLINE HRESULT ISMTPTransport2_CommandRCPT2(ISMTPTransport2* This,LPSTR pszEmailTo,INETADDRTYPE atDSN) {
    return This->lpVtbl->CommandRCPT2(This,pszEmailTo,atDSN);
}
#endif
#endif

#endif


#endif  /* __ISMTPTransport2_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDAVNamespaceArbiter interface
 */
#ifndef __IDAVNamespaceArbiter_INTERFACE_DEFINED__
#define __IDAVNamespaceArbiter_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDAVNamespaceArbiter, 0x72a58ff8, 0x227d, 0x11d2, 0xa8,0xb5, 0x00,0x00,0xf8,0x08,0x4f,0x96);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("72a58ff8-227d-11d2-a8b5-0000f8084f96")
IDAVNamespaceArbiter : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE AddNamespace(
        LPCSTR pszNamespace,
        DWORD *pdwNamespaceID) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetNamespaceID(
        LPCSTR pszNamespace,
        DWORD *pdwNamespaceID) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetNamespacePrefix(
        DWORD dwNamespaceID,
        LPSTR *ppszNamespacePrefix) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDAVNamespaceArbiter, 0x72a58ff8, 0x227d, 0x11d2, 0xa8,0xb5, 0x00,0x00,0xf8,0x08,0x4f,0x96)
#endif
#else
typedef struct IDAVNamespaceArbiterVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDAVNamespaceArbiter *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDAVNamespaceArbiter *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDAVNamespaceArbiter *This);

    /*** IDAVNamespaceArbiter methods ***/
    HRESULT (STDMETHODCALLTYPE *AddNamespace)(
        IDAVNamespaceArbiter *This,
        LPCSTR pszNamespace,
        DWORD *pdwNamespaceID);

    HRESULT (STDMETHODCALLTYPE *GetNamespaceID)(
        IDAVNamespaceArbiter *This,
        LPCSTR pszNamespace,
        DWORD *pdwNamespaceID);

    HRESULT (STDMETHODCALLTYPE *GetNamespacePrefix)(
        IDAVNamespaceArbiter *This,
        DWORD dwNamespaceID,
        LPSTR *ppszNamespacePrefix);

    END_INTERFACE
} IDAVNamespaceArbiterVtbl;

interface IDAVNamespaceArbiter {
    CONST_VTBL IDAVNamespaceArbiterVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDAVNamespaceArbiter_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDAVNamespaceArbiter_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDAVNamespaceArbiter_Release(This) (This)->lpVtbl->Release(This)
/*** IDAVNamespaceArbiter methods ***/
#define IDAVNamespaceArbiter_AddNamespace(This,pszNamespace,pdwNamespaceID) (This)->lpVtbl->AddNamespace(This,pszNamespace,pdwNamespaceID)
#define IDAVNamespaceArbiter_GetNamespaceID(This,pszNamespace,pdwNamespaceID) (This)->lpVtbl->GetNamespaceID(This,pszNamespace,pdwNamespaceID)
#define IDAVNamespaceArbiter_GetNamespacePrefix(This,dwNamespaceID,ppszNamespacePrefix) (This)->lpVtbl->GetNamespacePrefix(This,dwNamespaceID,ppszNamespacePrefix)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDAVNamespaceArbiter_QueryInterface(IDAVNamespaceArbiter* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDAVNamespaceArbiter_AddRef(IDAVNamespaceArbiter* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDAVNamespaceArbiter_Release(IDAVNamespaceArbiter* This) {
    return This->lpVtbl->Release(This);
}
/*** IDAVNamespaceArbiter methods ***/
static FORCEINLINE HRESULT IDAVNamespaceArbiter_AddNamespace(IDAVNamespaceArbiter* This,LPCSTR pszNamespace,DWORD *pdwNamespaceID) {
    return This->lpVtbl->AddNamespace(This,pszNamespace,pdwNamespaceID);
}
static FORCEINLINE HRESULT IDAVNamespaceArbiter_GetNamespaceID(IDAVNamespaceArbiter* This,LPCSTR pszNamespace,DWORD *pdwNamespaceID) {
    return This->lpVtbl->GetNamespaceID(This,pszNamespace,pdwNamespaceID);
}
static FORCEINLINE HRESULT IDAVNamespaceArbiter_GetNamespacePrefix(IDAVNamespaceArbiter* This,DWORD dwNamespaceID,LPSTR *ppszNamespacePrefix) {
    return This->lpVtbl->GetNamespacePrefix(This,dwNamespaceID,ppszNamespacePrefix);
}
#endif
#endif

#endif


#endif  /* __IDAVNamespaceArbiter_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IPropPatchRequest interface
 */
#ifndef __IPropPatchRequest_INTERFACE_DEFINED__
#define __IPropPatchRequest_INTERFACE_DEFINED__

DEFINE_GUID(IID_IPropPatchRequest, 0xab8b8d2a, 0x227f, 0x11d2, 0xa8,0xb5, 0x00,0x00,0xf8,0x08,0x4f,0x96);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ab8b8d2a-227f-11d2-a8b5-0000f8084f96")
IPropPatchRequest : public IDAVNamespaceArbiter
{
    virtual HRESULT STDMETHODCALLTYPE SetProperty(
        DWORD dwNamespaceID,
        LPCSTR pszPropertyName,
        LPCSTR pszNewValue) = 0;

    virtual HRESULT STDMETHODCALLTYPE RemoveProperty(
        DWORD dwNamespaceID,
        LPCSTR pszPropertyName) = 0;

    virtual HRESULT STDMETHODCALLTYPE GenerateXML(
        LPSTR *pszXML) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IPropPatchRequest, 0xab8b8d2a, 0x227f, 0x11d2, 0xa8,0xb5, 0x00,0x00,0xf8,0x08,0x4f,0x96)
#endif
#else
typedef struct IPropPatchRequestVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IPropPatchRequest *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IPropPatchRequest *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IPropPatchRequest *This);

    /*** IDAVNamespaceArbiter methods ***/
    HRESULT (STDMETHODCALLTYPE *AddNamespace)(
        IPropPatchRequest *This,
        LPCSTR pszNamespace,
        DWORD *pdwNamespaceID);

    HRESULT (STDMETHODCALLTYPE *GetNamespaceID)(
        IPropPatchRequest *This,
        LPCSTR pszNamespace,
        DWORD *pdwNamespaceID);

    HRESULT (STDMETHODCALLTYPE *GetNamespacePrefix)(
        IPropPatchRequest *This,
        DWORD dwNamespaceID,
        LPSTR *ppszNamespacePrefix);

    /*** IPropPatchRequest methods ***/
    HRESULT (STDMETHODCALLTYPE *SetProperty)(
        IPropPatchRequest *This,
        DWORD dwNamespaceID,
        LPCSTR pszPropertyName,
        LPCSTR pszNewValue);

    HRESULT (STDMETHODCALLTYPE *RemoveProperty)(
        IPropPatchRequest *This,
        DWORD dwNamespaceID,
        LPCSTR pszPropertyName);

    HRESULT (STDMETHODCALLTYPE *GenerateXML)(
        IPropPatchRequest *This,
        LPSTR *pszXML);

    END_INTERFACE
} IPropPatchRequestVtbl;

interface IPropPatchRequest {
    CONST_VTBL IPropPatchRequestVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IPropPatchRequest_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IPropPatchRequest_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IPropPatchRequest_Release(This) (This)->lpVtbl->Release(This)
/*** IDAVNamespaceArbiter methods ***/
#define IPropPatchRequest_AddNamespace(This,pszNamespace,pdwNamespaceID) (This)->lpVtbl->AddNamespace(This,pszNamespace,pdwNamespaceID)
#define IPropPatchRequest_GetNamespaceID(This,pszNamespace,pdwNamespaceID) (This)->lpVtbl->GetNamespaceID(This,pszNamespace,pdwNamespaceID)
#define IPropPatchRequest_GetNamespacePrefix(This,dwNamespaceID,ppszNamespacePrefix) (This)->lpVtbl->GetNamespacePrefix(This,dwNamespaceID,ppszNamespacePrefix)
/*** IPropPatchRequest methods ***/
#define IPropPatchRequest_SetProperty(This,dwNamespaceID,pszPropertyName,pszNewValue) (This)->lpVtbl->SetProperty(This,dwNamespaceID,pszPropertyName,pszNewValue)
#define IPropPatchRequest_RemoveProperty(This,dwNamespaceID,pszPropertyName) (This)->lpVtbl->RemoveProperty(This,dwNamespaceID,pszPropertyName)
#define IPropPatchRequest_GenerateXML(This,pszXML) (This)->lpVtbl->GenerateXML(This,pszXML)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IPropPatchRequest_QueryInterface(IPropPatchRequest* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IPropPatchRequest_AddRef(IPropPatchRequest* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IPropPatchRequest_Release(IPropPatchRequest* This) {
    return This->lpVtbl->Release(This);
}
/*** IDAVNamespaceArbiter methods ***/
static FORCEINLINE HRESULT IPropPatchRequest_AddNamespace(IPropPatchRequest* This,LPCSTR pszNamespace,DWORD *pdwNamespaceID) {
    return This->lpVtbl->AddNamespace(This,pszNamespace,pdwNamespaceID);
}
static FORCEINLINE HRESULT IPropPatchRequest_GetNamespaceID(IPropPatchRequest* This,LPCSTR pszNamespace,DWORD *pdwNamespaceID) {
    return This->lpVtbl->GetNamespaceID(This,pszNamespace,pdwNamespaceID);
}
static FORCEINLINE HRESULT IPropPatchRequest_GetNamespacePrefix(IPropPatchRequest* This,DWORD dwNamespaceID,LPSTR *ppszNamespacePrefix) {
    return This->lpVtbl->GetNamespacePrefix(This,dwNamespaceID,ppszNamespacePrefix);
}
/*** IPropPatchRequest methods ***/
static FORCEINLINE HRESULT IPropPatchRequest_SetProperty(IPropPatchRequest* This,DWORD dwNamespaceID,LPCSTR pszPropertyName,LPCSTR pszNewValue) {
    return This->lpVtbl->SetProperty(This,dwNamespaceID,pszPropertyName,pszNewValue);
}
static FORCEINLINE HRESULT IPropPatchRequest_RemoveProperty(IPropPatchRequest* This,DWORD dwNamespaceID,LPCSTR pszPropertyName) {
    return This->lpVtbl->RemoveProperty(This,dwNamespaceID,pszPropertyName);
}
static FORCEINLINE HRESULT IPropPatchRequest_GenerateXML(IPropPatchRequest* This,LPSTR *pszXML) {
    return This->lpVtbl->GenerateXML(This,pszXML);
}
#endif
#endif

#endif


#endif  /* __IPropPatchRequest_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IPropFindRequest interface
 */
#ifndef __IPropFindRequest_INTERFACE_DEFINED__
#define __IPropFindRequest_INTERFACE_DEFINED__

DEFINE_GUID(IID_IPropFindRequest, 0x5cfc6308, 0x0544, 0x11d2, 0xa8,0x94, 0x00,0x00,0xf8,0x08,0x4f,0x96);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("5cfc6308-0544-11d2-a894-0000f8084f96")
IPropFindRequest : public IDAVNamespaceArbiter
{
    virtual HRESULT STDMETHODCALLTYPE AddProperty(
        DWORD dwNamespaceID,
        LPCSTR pszPropertyName) = 0;

    virtual HRESULT STDMETHODCALLTYPE GenerateXML(
        LPSTR *pszXML) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IPropFindRequest, 0x5cfc6308, 0x0544, 0x11d2, 0xa8,0x94, 0x00,0x00,0xf8,0x08,0x4f,0x96)
#endif
#else
typedef struct IPropFindRequestVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IPropFindRequest *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IPropFindRequest *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IPropFindRequest *This);

    /*** IDAVNamespaceArbiter methods ***/
    HRESULT (STDMETHODCALLTYPE *AddNamespace)(
        IPropFindRequest *This,
        LPCSTR pszNamespace,
        DWORD *pdwNamespaceID);

    HRESULT (STDMETHODCALLTYPE *GetNamespaceID)(
        IPropFindRequest *This,
        LPCSTR pszNamespace,
        DWORD *pdwNamespaceID);

    HRESULT (STDMETHODCALLTYPE *GetNamespacePrefix)(
        IPropFindRequest *This,
        DWORD dwNamespaceID,
        LPSTR *ppszNamespacePrefix);

    /*** IPropFindRequest methods ***/
    HRESULT (STDMETHODCALLTYPE *AddProperty)(
        IPropFindRequest *This,
        DWORD dwNamespaceID,
        LPCSTR pszPropertyName);

    HRESULT (STDMETHODCALLTYPE *GenerateXML)(
        IPropFindRequest *This,
        LPSTR *pszXML);

    END_INTERFACE
} IPropFindRequestVtbl;

interface IPropFindRequest {
    CONST_VTBL IPropFindRequestVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IPropFindRequest_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IPropFindRequest_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IPropFindRequest_Release(This) (This)->lpVtbl->Release(This)
/*** IDAVNamespaceArbiter methods ***/
#define IPropFindRequest_AddNamespace(This,pszNamespace,pdwNamespaceID) (This)->lpVtbl->AddNamespace(This,pszNamespace,pdwNamespaceID)
#define IPropFindRequest_GetNamespaceID(This,pszNamespace,pdwNamespaceID) (This)->lpVtbl->GetNamespaceID(This,pszNamespace,pdwNamespaceID)
#define IPropFindRequest_GetNamespacePrefix(This,dwNamespaceID,ppszNamespacePrefix) (This)->lpVtbl->GetNamespacePrefix(This,dwNamespaceID,ppszNamespacePrefix)
/*** IPropFindRequest methods ***/
#define IPropFindRequest_AddProperty(This,dwNamespaceID,pszPropertyName) (This)->lpVtbl->AddProperty(This,dwNamespaceID,pszPropertyName)
#define IPropFindRequest_GenerateXML(This,pszXML) (This)->lpVtbl->GenerateXML(This,pszXML)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IPropFindRequest_QueryInterface(IPropFindRequest* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IPropFindRequest_AddRef(IPropFindRequest* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IPropFindRequest_Release(IPropFindRequest* This) {
    return This->lpVtbl->Release(This);
}
/*** IDAVNamespaceArbiter methods ***/
static FORCEINLINE HRESULT IPropFindRequest_AddNamespace(IPropFindRequest* This,LPCSTR pszNamespace,DWORD *pdwNamespaceID) {
    return This->lpVtbl->AddNamespace(This,pszNamespace,pdwNamespaceID);
}
static FORCEINLINE HRESULT IPropFindRequest_GetNamespaceID(IPropFindRequest* This,LPCSTR pszNamespace,DWORD *pdwNamespaceID) {
    return This->lpVtbl->GetNamespaceID(This,pszNamespace,pdwNamespaceID);
}
static FORCEINLINE HRESULT IPropFindRequest_GetNamespacePrefix(IPropFindRequest* This,DWORD dwNamespaceID,LPSTR *ppszNamespacePrefix) {
    return This->lpVtbl->GetNamespacePrefix(This,dwNamespaceID,ppszNamespacePrefix);
}
/*** IPropFindRequest methods ***/
static FORCEINLINE HRESULT IPropFindRequest_AddProperty(IPropFindRequest* This,DWORD dwNamespaceID,LPCSTR pszPropertyName) {
    return This->lpVtbl->AddProperty(This,dwNamespaceID,pszPropertyName);
}
static FORCEINLINE HRESULT IPropFindRequest_GenerateXML(IPropFindRequest* This,LPSTR *pszXML) {
    return This->lpVtbl->GenerateXML(This,pszXML);
}
#endif
#endif

#endif


#endif  /* __IPropFindRequest_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IPropFindMultiResponse interface
 */
#ifndef __IPropFindMultiResponse_INTERFACE_DEFINED__
#define __IPropFindMultiResponse_INTERFACE_DEFINED__

DEFINE_GUID(IID_IPropFindMultiResponse, 0x0dee87de, 0x0547, 0x11d2, 0xa8,0x94, 0x00,0x00,0xf8,0x08,0x4f,0x96);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("0dee87de-0547-11d2-a894-0000f8084f96")
IPropFindMultiResponse : public IUnknown
{
    virtual BOOL STDMETHODCALLTYPE IsComplete(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetLength(
        ULONG *pulLength) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetResponse(
        ULONG ulIndex,
        IPropFindResponse **ppResponse) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IPropFindMultiResponse, 0x0dee87de, 0x0547, 0x11d2, 0xa8,0x94, 0x00,0x00,0xf8,0x08,0x4f,0x96)
#endif
#else
typedef struct IPropFindMultiResponseVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IPropFindMultiResponse *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IPropFindMultiResponse *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IPropFindMultiResponse *This);

    /*** IPropFindMultiResponse methods ***/
    BOOL (STDMETHODCALLTYPE *IsComplete)(
        IPropFindMultiResponse *This);

    HRESULT (STDMETHODCALLTYPE *GetLength)(
        IPropFindMultiResponse *This,
        ULONG *pulLength);

    HRESULT (STDMETHODCALLTYPE *GetResponse)(
        IPropFindMultiResponse *This,
        ULONG ulIndex,
        IPropFindResponse **ppResponse);

    END_INTERFACE
} IPropFindMultiResponseVtbl;

interface IPropFindMultiResponse {
    CONST_VTBL IPropFindMultiResponseVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IPropFindMultiResponse_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IPropFindMultiResponse_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IPropFindMultiResponse_Release(This) (This)->lpVtbl->Release(This)
/*** IPropFindMultiResponse methods ***/
#define IPropFindMultiResponse_IsComplete(This) (This)->lpVtbl->IsComplete(This)
#define IPropFindMultiResponse_GetLength(This,pulLength) (This)->lpVtbl->GetLength(This,pulLength)
#define IPropFindMultiResponse_GetResponse(This,ulIndex,ppResponse) (This)->lpVtbl->GetResponse(This,ulIndex,ppResponse)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IPropFindMultiResponse_QueryInterface(IPropFindMultiResponse* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IPropFindMultiResponse_AddRef(IPropFindMultiResponse* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IPropFindMultiResponse_Release(IPropFindMultiResponse* This) {
    return This->lpVtbl->Release(This);
}
/*** IPropFindMultiResponse methods ***/
static FORCEINLINE BOOL IPropFindMultiResponse_IsComplete(IPropFindMultiResponse* This) {
    return This->lpVtbl->IsComplete(This);
}
static FORCEINLINE HRESULT IPropFindMultiResponse_GetLength(IPropFindMultiResponse* This,ULONG *pulLength) {
    return This->lpVtbl->GetLength(This,pulLength);
}
static FORCEINLINE HRESULT IPropFindMultiResponse_GetResponse(IPropFindMultiResponse* This,ULONG ulIndex,IPropFindResponse **ppResponse) {
    return This->lpVtbl->GetResponse(This,ulIndex,ppResponse);
}
#endif
#endif

#endif


#endif  /* __IPropFindMultiResponse_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IPropFindResponse interface
 */
#ifndef __IPropFindResponse_INTERFACE_DEFINED__
#define __IPropFindResponse_INTERFACE_DEFINED__

DEFINE_GUID(IID_IPropFindResponse, 0x8a523716, 0x0548, 0x11d2, 0xa8,0x94, 0x00,0x00,0xf8,0x08,0x4f,0x96);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("8a523716-0548-11d2-a894-0000f8084f96")
IPropFindResponse : public IUnknown
{
    virtual BOOL STDMETHODCALLTYPE IsComplete(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetHref(
        LPSTR *ppszHref) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetProperty(
        DWORD dwNamespaceID,
        LPCSTR pszPropertyName,
        LPSTR *ppszPropertyValue) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IPropFindResponse, 0x8a523716, 0x0548, 0x11d2, 0xa8,0x94, 0x00,0x00,0xf8,0x08,0x4f,0x96)
#endif
#else
typedef struct IPropFindResponseVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IPropFindResponse *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IPropFindResponse *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IPropFindResponse *This);

    /*** IPropFindResponse methods ***/
    BOOL (STDMETHODCALLTYPE *IsComplete)(
        IPropFindResponse *This);

    HRESULT (STDMETHODCALLTYPE *GetHref)(
        IPropFindResponse *This,
        LPSTR *ppszHref);

    HRESULT (STDMETHODCALLTYPE *GetProperty)(
        IPropFindResponse *This,
        DWORD dwNamespaceID,
        LPCSTR pszPropertyName,
        LPSTR *ppszPropertyValue);

    END_INTERFACE
} IPropFindResponseVtbl;

interface IPropFindResponse {
    CONST_VTBL IPropFindResponseVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IPropFindResponse_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IPropFindResponse_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IPropFindResponse_Release(This) (This)->lpVtbl->Release(This)
/*** IPropFindResponse methods ***/
#define IPropFindResponse_IsComplete(This) (This)->lpVtbl->IsComplete(This)
#define IPropFindResponse_GetHref(This,ppszHref) (This)->lpVtbl->GetHref(This,ppszHref)
#define IPropFindResponse_GetProperty(This,dwNamespaceID,pszPropertyName,ppszPropertyValue) (This)->lpVtbl->GetProperty(This,dwNamespaceID,pszPropertyName,ppszPropertyValue)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IPropFindResponse_QueryInterface(IPropFindResponse* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IPropFindResponse_AddRef(IPropFindResponse* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IPropFindResponse_Release(IPropFindResponse* This) {
    return This->lpVtbl->Release(This);
}
/*** IPropFindResponse methods ***/
static FORCEINLINE BOOL IPropFindResponse_IsComplete(IPropFindResponse* This) {
    return This->lpVtbl->IsComplete(This);
}
static FORCEINLINE HRESULT IPropFindResponse_GetHref(IPropFindResponse* This,LPSTR *ppszHref) {
    return This->lpVtbl->GetHref(This,ppszHref);
}
static FORCEINLINE HRESULT IPropFindResponse_GetProperty(IPropFindResponse* This,DWORD dwNamespaceID,LPCSTR pszPropertyName,LPSTR *ppszPropertyValue) {
    return This->lpVtbl->GetProperty(This,dwNamespaceID,pszPropertyName,ppszPropertyValue);
}
#endif
#endif

#endif


#endif  /* __IPropFindResponse_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IHTTPMailCallback interface
 */
#ifndef __IHTTPMailCallback_INTERFACE_DEFINED__
#define __IHTTPMailCallback_INTERFACE_DEFINED__

typedef enum tagHTTPMAILCOMMAND {
    HTTPMAIL_NONE = 0,
    HTTPMAIL_GETPROP = 1,
    HTTPMAIL_GET = 2,
    HTTPMAIL_PUT = 3,
    HTTPMAIL_POST = 4,
    HTTPMAIL_DELETE = 5,
    HTTPMAIL_BDELETE = 6,
    HTTPMAIL_PROPFIND = 7,
    HTTPMAIL_PROPPATCH = 8,
    HTTPMAIL_MKCOL = 9,
    HTTPMAIL_COPY = 10,
    HTTPMAIL_BCOPY = 11,
    HTTPMAIL_MOVE = 12,
    HTTPMAIL_BMOVE = 13,
    HTTPMAIL_MEMBERINFO = 14,
    HTTPMAIL_FINDFOLDERS = 15,
    HTTPMAIL_MARKREAD = 16,
    HTTPMAIL_SENDMESSAGE = 17,
    HTTPMAIL_LISTCONTACTS = 18,
    HTTPMAIL_CONTACTINFO = 19,
    HTTPMAIL_POSTCONTACT = 20,
    HTTPMAIL_PATCHCONTACT = 21,
    HTTPMAIL_WAITROOTPROP = 22
} HTTPMAILCOMMAND;
typedef struct tagHTTPMAILGETPROP {
    HTTPMAILPROPTYPE type;
    LPSTR pszProp;
    DWORD dwProp;
} HTTPMAILGETPROP;
typedef struct tagHTTPMAILGETPROP *LPHTTPMAILGETPROP;
typedef struct tagHTTPMAILGET {
    BOOL fTotalKnown;
    DWORD cbIncrement;
    DWORD cbCurrent;
    DWORD cbTotal;
    LPVOID pvBody;
    LPSTR pszContentType;
} HTTPMAILGET;
typedef struct tagHTTPMAILGET *LPHTTPMAILGET;
typedef struct tagHTTPMAILPOST {
    LPSTR pszLocation;
    BOOL fResend;
    DWORD cbIncrement;
    DWORD cbCurrent;
    DWORD cbTotal;
} HTTPMAILPOST;
typedef struct tagHTTPMAILPOST *LPHTTPMAILPOST;
typedef struct tagHTTPMAILPROPFIND {
    IPropFindMultiResponse *pMultiResponse;
} HTTPMAILPROPFIND;
typedef struct tagHTTPMAILPROPFIND *LPHTTPMAILPROPFIND;
typedef struct tagHTTPMAILLOCATION {
    LPSTR pszLocation;
} HTTPMAILLOCATION;
typedef struct tagHTTPMAILLOCATION *LPHTTPMAILLOCATION;
typedef struct tagHTTPMAILBCOPYMOVE {
    LPSTR pszHref;
    LPSTR pszLocation;
    HRESULT hrResult;
} HTTPMAILBCOPYMOVE;
typedef struct tagHTTPMAILBCOPYMOVE *LPHTTPMAILBCOPYMOVE;
typedef struct tagHTTPMAILBCOPYMOVELIST {
    ULONG cBCopyMove;
    LPHTTPMAILBCOPYMOVE prgBCopyMove;
} HTTPMAILBCOPYMOVELIST;
typedef struct tagHTTPMAILBCOPYMOVELIST *LPHTTPMAILBCOPYMOVELIST;
typedef struct tagHTTPMEMBERINFO {
    LPSTR pszHref;
    BOOL fIsFolder;
    LPSTR pszDisplayName;
    BOOL fHasSubs;
    BOOL fNoSubs;
    DWORD dwUnreadCount;
    DWORD dwVisibleCount;
    HTTPMAILSPECIALFOLDER tySpecial;
    BOOL fRead;
    BOOL fHasAttachment;
    LPSTR pszTo;
    LPSTR pszFrom;
    LPSTR pszSubject;
    LPSTR pszDate;
    DWORD dwContentLength;
} HTTPMEMBERINFO;
typedef struct tagHTTPMEMBERINFO *LPHTTPMEMBERINFO;
typedef struct tagHTTPMEMBERINFOLIST {
    ULONG cMemberInfo;
    LPHTTPMEMBERINFO prgMemberInfo;
    LPSTR pszRootTimeStamp;
    LPSTR pszFolderTimeStamp;
} HTTPMEMBERINFOLIST;
typedef struct tagHTTPMEMBERINFOLIST *LPHTTPMEMBERINFOLIST;
typedef struct tagHTTPMEMBERERROR {
    LPSTR pszHref;
    HRESULT hrResult;
} HTTPMEMBERERROR;
typedef struct tagHTTPMEMBERERROR *LPHTTPMEMBERERROR;
typedef struct tagHTTPMEMBERERRORLIST {
    ULONG cMemberError;
    LPHTTPMEMBERERROR prgMemberError;
} HTTPMEMBERERRORLIST;
typedef struct tagHTTPMEMBERERRORLIST *LPHTTPMEMBERERRORLIST;
typedef struct tagHTTPCONTACTID {
    LPSTR pszHref;
    LPSTR pszId;
    HTTPMAILCONTACTTYPE tyContact;
    LPSTR pszModified;
} HTTPCONTACTID;
typedef struct tagHTTPCONTACTID *LPHTTPCONTACTID;
typedef struct tagHTTPCONTACTIDLIST {
    ULONG cContactId;
    LPHTTPCONTACTID prgContactId;
} HTTPCONTACTIDLIST;
typedef struct tagHTTPCONTACTIDLIST *LPHTTPCONTACTIDLIST;
typedef struct tagHTTPCONTACTINFO {
    LPSTR pszHref;
    LPSTR pszId;
    HTTPMAILCONTACTTYPE tyContact;
    LPSTR pszModified;
    LPSTR pszDisplayName;
    LPSTR pszGivenName;
    LPSTR pszSurname;
    LPSTR pszNickname;
    LPSTR pszEmail;
    LPSTR pszHomeStreet;
    LPSTR pszHomeCity;
    LPSTR pszHomeState;
    LPSTR pszHomePostalCode;
    LPSTR pszHomeCountry;
    LPSTR pszCompany;
    LPSTR pszWorkStreet;
    LPSTR pszWorkCity;
    LPSTR pszWorkState;
    LPSTR pszWorkPostalCode;
    LPSTR pszWorkCountry;
    LPSTR pszHomePhone;
    LPSTR pszHomeFax;
    LPSTR pszWorkPhone;
    LPSTR pszWorkFax;
    LPSTR pszMobilePhone;
    LPSTR pszOtherPhone;
    LPSTR pszBday;
    LPSTR pszPager;
} HTTPCONTACTINFO;
typedef struct tagHTTPCONTACTINFO *LPHTTPCONTACTINFO;
typedef struct tagHTTPCONTACTINFOLIST {
    ULONG cContactInfo;
    LPHTTPCONTACTINFO prgContactInfo;
} HTTPCONTACTINFOLIST;
typedef struct tagHTTPCONTACTINFOLIST *LPHTTPCONTACTINFOLIST;
typedef struct tagHTTPMAILRESPONSE {
    HTTPMAILCOMMAND command;
    DWORD dwContext;
    BOOL fDone;
    IXPRESULT rIxpResult;
    IHTTPMailTransport *pTransport;
    __C89_NAMELESS union {
        HTTPMAILGETPROP rGetPropInfo;
        HTTPMAILGET rGetInfo;
        HTTPMAILPOST rPutInfo;
        HTTPMAILPOST rPostInfo;
        HTTPMAILPROPFIND rPropFindInfo;
        HTTPMAILLOCATION rMkColInfo;
        HTTPMAILLOCATION rCopyMoveInfo;
        HTTPMAILBCOPYMOVELIST rBCopyMoveList;
        HTTPMEMBERINFOLIST rMemberInfoList;
        HTTPMEMBERERRORLIST rMemberErrorList;
        HTTPMAILPOST rSendMessageInfo;
        HTTPCONTACTIDLIST rContactIdList;
        HTTPCONTACTINFOLIST rContactInfoList;
        HTTPCONTACTID rPostContactInfo;
        HTTPCONTACTID rPatchContactInfo;
    } __C89_NAMELESSUNIONNAME;
} HTTPMAILRESPONSE;
typedef struct tagHTTPMAILRESPONSE *LPHTTPMAILRESPONSE;
DEFINE_GUID(IID_IHTTPMailCallback, 0x19f6481c, 0xe5f0, 0x11d1, 0xa8,0x6e, 0x00,0x00,0xf8,0x08,0x4f,0x96);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("19f6481c-e5f0-11d1-a86e-0000f8084f96")
IHTTPMailCallback : public ITransportCallback
{
    virtual HRESULT STDMETHODCALLTYPE OnResponse(
        LPHTTPMAILRESPONSE pResponse) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetParentWindow(
        HWND *phwndParent) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IHTTPMailCallback, 0x19f6481c, 0xe5f0, 0x11d1, 0xa8,0x6e, 0x00,0x00,0xf8,0x08,0x4f,0x96)
#endif
#else
typedef struct IHTTPMailCallbackVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IHTTPMailCallback *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IHTTPMailCallback *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IHTTPMailCallback *This);

    /*** ITransportCallback methods ***/
    HRESULT (STDMETHODCALLTYPE *OnTimeout)(
        IHTTPMailCallback *This,
        DWORD *pdwTimeout,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnLogonPrompt)(
        IHTTPMailCallback *This,
        LPINETSERVER pInetServer,
        IInternetTransport *pTransport);

    INT (STDMETHODCALLTYPE *OnPrompt)(
        IHTTPMailCallback *This,
        HRESULT hrError,
        LPCTSTR pszText,
        LPCTSTR pszCaption,
        UINT uType,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnStatus)(
        IHTTPMailCallback *This,
        IXPSTATUS ixpstatus,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnError)(
        IHTTPMailCallback *This,
        IXPSTATUS ixpstatus,
        LPIXPRESULT pResult,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnCommand)(
        IHTTPMailCallback *This,
        CMDTYPE cmdtype,
        LPSTR pszLine,
        HRESULT hrResponse,
        IInternetTransport *pTransport);

    /*** IHTTPMailCallback methods ***/
    HRESULT (STDMETHODCALLTYPE *OnResponse)(
        IHTTPMailCallback *This,
        LPHTTPMAILRESPONSE pResponse);

    HRESULT (STDMETHODCALLTYPE *GetParentWindow)(
        IHTTPMailCallback *This,
        HWND *phwndParent);

    END_INTERFACE
} IHTTPMailCallbackVtbl;

interface IHTTPMailCallback {
    CONST_VTBL IHTTPMailCallbackVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IHTTPMailCallback_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IHTTPMailCallback_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IHTTPMailCallback_Release(This) (This)->lpVtbl->Release(This)
/*** ITransportCallback methods ***/
#define IHTTPMailCallback_OnTimeout(This,pdwTimeout,pTransport) (This)->lpVtbl->OnTimeout(This,pdwTimeout,pTransport)
#define IHTTPMailCallback_OnLogonPrompt(This,pInetServer,pTransport) (This)->lpVtbl->OnLogonPrompt(This,pInetServer,pTransport)
#define IHTTPMailCallback_OnPrompt(This,hrError,pszText,pszCaption,uType,pTransport) (This)->lpVtbl->OnPrompt(This,hrError,pszText,pszCaption,uType,pTransport)
#define IHTTPMailCallback_OnStatus(This,ixpstatus,pTransport) (This)->lpVtbl->OnStatus(This,ixpstatus,pTransport)
#define IHTTPMailCallback_OnError(This,ixpstatus,pResult,pTransport) (This)->lpVtbl->OnError(This,ixpstatus,pResult,pTransport)
#define IHTTPMailCallback_OnCommand(This,cmdtype,pszLine,hrResponse,pTransport) (This)->lpVtbl->OnCommand(This,cmdtype,pszLine,hrResponse,pTransport)
/*** IHTTPMailCallback methods ***/
#define IHTTPMailCallback_OnResponse(This,pResponse) (This)->lpVtbl->OnResponse(This,pResponse)
#define IHTTPMailCallback_GetParentWindow(This,phwndParent) (This)->lpVtbl->GetParentWindow(This,phwndParent)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IHTTPMailCallback_QueryInterface(IHTTPMailCallback* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IHTTPMailCallback_AddRef(IHTTPMailCallback* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IHTTPMailCallback_Release(IHTTPMailCallback* This) {
    return This->lpVtbl->Release(This);
}
/*** ITransportCallback methods ***/
static FORCEINLINE HRESULT IHTTPMailCallback_OnTimeout(IHTTPMailCallback* This,DWORD *pdwTimeout,IInternetTransport *pTransport) {
    return This->lpVtbl->OnTimeout(This,pdwTimeout,pTransport);
}
static FORCEINLINE HRESULT IHTTPMailCallback_OnLogonPrompt(IHTTPMailCallback* This,LPINETSERVER pInetServer,IInternetTransport *pTransport) {
    return This->lpVtbl->OnLogonPrompt(This,pInetServer,pTransport);
}
static FORCEINLINE INT IHTTPMailCallback_OnPrompt(IHTTPMailCallback* This,HRESULT hrError,LPCTSTR pszText,LPCTSTR pszCaption,UINT uType,IInternetTransport *pTransport) {
    return This->lpVtbl->OnPrompt(This,hrError,pszText,pszCaption,uType,pTransport);
}
static FORCEINLINE HRESULT IHTTPMailCallback_OnStatus(IHTTPMailCallback* This,IXPSTATUS ixpstatus,IInternetTransport *pTransport) {
    return This->lpVtbl->OnStatus(This,ixpstatus,pTransport);
}
static FORCEINLINE HRESULT IHTTPMailCallback_OnError(IHTTPMailCallback* This,IXPSTATUS ixpstatus,LPIXPRESULT pResult,IInternetTransport *pTransport) {
    return This->lpVtbl->OnError(This,ixpstatus,pResult,pTransport);
}
static FORCEINLINE HRESULT IHTTPMailCallback_OnCommand(IHTTPMailCallback* This,CMDTYPE cmdtype,LPSTR pszLine,HRESULT hrResponse,IInternetTransport *pTransport) {
    return This->lpVtbl->OnCommand(This,cmdtype,pszLine,hrResponse,pTransport);
}
/*** IHTTPMailCallback methods ***/
static FORCEINLINE HRESULT IHTTPMailCallback_OnResponse(IHTTPMailCallback* This,LPHTTPMAILRESPONSE pResponse) {
    return This->lpVtbl->OnResponse(This,pResponse);
}
static FORCEINLINE HRESULT IHTTPMailCallback_GetParentWindow(IHTTPMailCallback* This,HWND *phwndParent) {
    return This->lpVtbl->GetParentWindow(This,phwndParent);
}
#endif
#endif

#endif


#endif  /* __IHTTPMailCallback_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IHTTPMailTransport interface
 */
#ifndef __IHTTPMailTransport_INTERFACE_DEFINED__
#define __IHTTPMailTransport_INTERFACE_DEFINED__

typedef struct tagHTTPTARGETLIST {
    ULONG cTarget;
    LPCSTR *prgTarget;
} HTTPTARGETLIST;
typedef struct tagHTTPTARGETLIST *LPHTTPTARGETLIST;
DEFINE_GUID(IID_IHTTPMailTransport, 0xb8bde03c, 0xe548, 0x11d1, 0xa8,0x6e, 0x00,0x00,0xf8,0x08,0x4f,0x96);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("b8bde03c-e548-11d1-a86e-0000f8084f96")
IHTTPMailTransport : public IInternetTransport
{
    virtual HRESULT STDMETHODCALLTYPE InitNew(
        LPCSTR pszUserAgent,
        LPCSTR pszLogFilePath,
        IHTTPMailCallback *pCallback) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandGET(
        LPCSTR pszPath,
        LPCSTR *rgszAcceptTypes,
        BOOL fTranslate,
        DWORD dwContext) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandPUT(
        LPCSTR pszPath,
        LPVOID lpvData,
        ULONG cbSize,
        DWORD dwContext) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandPOST(
        LPCSTR pszPath,
        IStream *pStream,
        LPCSTR pszContentType,
        DWORD dwContext) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandDELETE(
        LPCSTR pszPath,
        DWORD dwContext) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandBDELETE(
        LPCSTR pszSourceCollection,
        LPHTTPTARGETLIST pTargets,
        DWORD dwContext) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandPROPFIND(
        LPCSTR pszPath,
        IPropFindRequest *pRequest,
        DWORD dwDepth,
        DWORD dwContext) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandPROPPATCH(
        LPCSTR pszPath,
        IPropPatchRequest *pRequest,
        DWORD dwContext) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandMKCOL(
        LPCSTR pszPath,
        DWORD dwContext) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandCOPY(
        LPCSTR pszPath,
        LPCSTR pszDestination,
        BOOL fAllowRename,
        DWORD dwContext) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandBCOPY(
        LPCSTR pszSourceCollection,
        LPHTTPTARGETLIST pTargets,
        LPCSTR pszDestCollection,
        LPHTTPTARGETLIST pDestinations,
        BOOL fAllowRename,
        DWORD dwContext) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandMOVE(
        LPCSTR pszPath,
        LPCSTR pszDestination,
        BOOL fAllowRename,
        DWORD dwContext) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandBMOVE(
        LPCSTR pszSourceCollection,
        LPHTTPTARGETLIST pTargets,
        LPCSTR pszDestCollection,
        LPHTTPTARGETLIST pDestinations,
        BOOL fAllowRename,
        DWORD dwContext) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetProperty(
        HTTPMAILPROPTYPE proptype,
        LPSTR *ppszProp) = 0;

    virtual HRESULT STDMETHODCALLTYPE MemberInfo(
        LPCSTR pszPath,
        MEMBERINFOFLAGS flags,
        DWORD dwDepth,
        BOOL fIncludeRoot,
        DWORD dwContext) = 0;

    virtual HRESULT STDMETHODCALLTYPE FindFolders(
        LPCSTR pszPath,
        DWORD dwContext) = 0;

    virtual HRESULT STDMETHODCALLTYPE MarkRead(
        LPCSTR pszPath,
        LPHTTPTARGETLIST pTargets,
        BOOL fMarkRead,
        DWORD dwContext) = 0;

    virtual HRESULT STDMETHODCALLTYPE SendMessage(
        LPCSTR pszPath,
        LPCSTR pszFrom,
        LPHTTPTARGETLIST pTargets,
        BOOL fSaveInSent,
        IStream *pMessageStream,
        DWORD dwContext) = 0;

    virtual HRESULT STDMETHODCALLTYPE ListContacts(
        LPCSTR pszPath,
        DWORD dwContext) = 0;

    virtual HRESULT STDMETHODCALLTYPE ListContactInfos(
        LPCSTR pszCollectionPath,
        DWORD dwContext) = 0;

    virtual HRESULT STDMETHODCALLTYPE ContactInfo(
        LPCSTR pszPath,
        DWORD dwContext) = 0;

    virtual HRESULT STDMETHODCALLTYPE PostContact(
        LPCSTR pszPath,
        LPHTTPCONTACTINFO pciInfo,
        DWORD dwContext) = 0;

    virtual HRESULT STDMETHODCALLTYPE PatchContact(
        LPCSTR pszPath,
        LPHTTPCONTACTINFO pciInfo,
        DWORD dwContext) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IHTTPMailTransport, 0xb8bde03c, 0xe548, 0x11d1, 0xa8,0x6e, 0x00,0x00,0xf8,0x08,0x4f,0x96)
#endif
#else
typedef struct IHTTPMailTransportVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IHTTPMailTransport *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IHTTPMailTransport *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IHTTPMailTransport *This);

    /*** IInternetTransport methods ***/
    HRESULT (STDMETHODCALLTYPE *GetServerInfo)(
        IHTTPMailTransport *This,
        LPINETSERVER pInetServer);

    IXPTYPE (STDMETHODCALLTYPE *GetIXPType)(
        IHTTPMailTransport *This);

    HRESULT (STDMETHODCALLTYPE *IsState)(
        IHTTPMailTransport *This,
        IXPISSTATE isstate);

    HRESULT (STDMETHODCALLTYPE *InetServerFromAccount)(
        IHTTPMailTransport *This,
        IImnAccount *pAccount,
        LPINETSERVER pInetServer);

    HRESULT (STDMETHODCALLTYPE *Connect)(
        IHTTPMailTransport *This,
        LPINETSERVER pInetServer,
        boolean fAuthenticate,
        boolean fCommandLogging);

    HRESULT (STDMETHODCALLTYPE *HandsOffCallback)(
        IHTTPMailTransport *This);

    HRESULT (STDMETHODCALLTYPE *Disconnect)(
        IHTTPMailTransport *This);

    HRESULT (STDMETHODCALLTYPE *DropConnection)(
        IHTTPMailTransport *This);

    HRESULT (STDMETHODCALLTYPE *GetStatus)(
        IHTTPMailTransport *This,
        IXPSTATUS *pCurrentStatus);

    /*** IHTTPMailTransport methods ***/
    HRESULT (STDMETHODCALLTYPE *InitNew)(
        IHTTPMailTransport *This,
        LPCSTR pszUserAgent,
        LPCSTR pszLogFilePath,
        IHTTPMailCallback *pCallback);

    HRESULT (STDMETHODCALLTYPE *CommandGET)(
        IHTTPMailTransport *This,
        LPCSTR pszPath,
        LPCSTR *rgszAcceptTypes,
        BOOL fTranslate,
        DWORD dwContext);

    HRESULT (STDMETHODCALLTYPE *CommandPUT)(
        IHTTPMailTransport *This,
        LPCSTR pszPath,
        LPVOID lpvData,
        ULONG cbSize,
        DWORD dwContext);

    HRESULT (STDMETHODCALLTYPE *CommandPOST)(
        IHTTPMailTransport *This,
        LPCSTR pszPath,
        IStream *pStream,
        LPCSTR pszContentType,
        DWORD dwContext);

    HRESULT (STDMETHODCALLTYPE *CommandDELETE)(
        IHTTPMailTransport *This,
        LPCSTR pszPath,
        DWORD dwContext);

    HRESULT (STDMETHODCALLTYPE *CommandBDELETE)(
        IHTTPMailTransport *This,
        LPCSTR pszSourceCollection,
        LPHTTPTARGETLIST pTargets,
        DWORD dwContext);

    HRESULT (STDMETHODCALLTYPE *CommandPROPFIND)(
        IHTTPMailTransport *This,
        LPCSTR pszPath,
        IPropFindRequest *pRequest,
        DWORD dwDepth,
        DWORD dwContext);

    HRESULT (STDMETHODCALLTYPE *CommandPROPPATCH)(
        IHTTPMailTransport *This,
        LPCSTR pszPath,
        IPropPatchRequest *pRequest,
        DWORD dwContext);

    HRESULT (STDMETHODCALLTYPE *CommandMKCOL)(
        IHTTPMailTransport *This,
        LPCSTR pszPath,
        DWORD dwContext);

    HRESULT (STDMETHODCALLTYPE *CommandCOPY)(
        IHTTPMailTransport *This,
        LPCSTR pszPath,
        LPCSTR pszDestination,
        BOOL fAllowRename,
        DWORD dwContext);

    HRESULT (STDMETHODCALLTYPE *CommandBCOPY)(
        IHTTPMailTransport *This,
        LPCSTR pszSourceCollection,
        LPHTTPTARGETLIST pTargets,
        LPCSTR pszDestCollection,
        LPHTTPTARGETLIST pDestinations,
        BOOL fAllowRename,
        DWORD dwContext);

    HRESULT (STDMETHODCALLTYPE *CommandMOVE)(
        IHTTPMailTransport *This,
        LPCSTR pszPath,
        LPCSTR pszDestination,
        BOOL fAllowRename,
        DWORD dwContext);

    HRESULT (STDMETHODCALLTYPE *CommandBMOVE)(
        IHTTPMailTransport *This,
        LPCSTR pszSourceCollection,
        LPHTTPTARGETLIST pTargets,
        LPCSTR pszDestCollection,
        LPHTTPTARGETLIST pDestinations,
        BOOL fAllowRename,
        DWORD dwContext);

    HRESULT (STDMETHODCALLTYPE *GetProperty)(
        IHTTPMailTransport *This,
        HTTPMAILPROPTYPE proptype,
        LPSTR *ppszProp);

    HRESULT (STDMETHODCALLTYPE *MemberInfo)(
        IHTTPMailTransport *This,
        LPCSTR pszPath,
        MEMBERINFOFLAGS flags,
        DWORD dwDepth,
        BOOL fIncludeRoot,
        DWORD dwContext);

    HRESULT (STDMETHODCALLTYPE *FindFolders)(
        IHTTPMailTransport *This,
        LPCSTR pszPath,
        DWORD dwContext);

    HRESULT (STDMETHODCALLTYPE *MarkRead)(
        IHTTPMailTransport *This,
        LPCSTR pszPath,
        LPHTTPTARGETLIST pTargets,
        BOOL fMarkRead,
        DWORD dwContext);

    HRESULT (STDMETHODCALLTYPE *SendMessage)(
        IHTTPMailTransport *This,
        LPCSTR pszPath,
        LPCSTR pszFrom,
        LPHTTPTARGETLIST pTargets,
        BOOL fSaveInSent,
        IStream *pMessageStream,
        DWORD dwContext);

    HRESULT (STDMETHODCALLTYPE *ListContacts)(
        IHTTPMailTransport *This,
        LPCSTR pszPath,
        DWORD dwContext);

    HRESULT (STDMETHODCALLTYPE *ListContactInfos)(
        IHTTPMailTransport *This,
        LPCSTR pszCollectionPath,
        DWORD dwContext);

    HRESULT (STDMETHODCALLTYPE *ContactInfo)(
        IHTTPMailTransport *This,
        LPCSTR pszPath,
        DWORD dwContext);

    HRESULT (STDMETHODCALLTYPE *PostContact)(
        IHTTPMailTransport *This,
        LPCSTR pszPath,
        LPHTTPCONTACTINFO pciInfo,
        DWORD dwContext);

    HRESULT (STDMETHODCALLTYPE *PatchContact)(
        IHTTPMailTransport *This,
        LPCSTR pszPath,
        LPHTTPCONTACTINFO pciInfo,
        DWORD dwContext);

    END_INTERFACE
} IHTTPMailTransportVtbl;

interface IHTTPMailTransport {
    CONST_VTBL IHTTPMailTransportVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IHTTPMailTransport_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IHTTPMailTransport_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IHTTPMailTransport_Release(This) (This)->lpVtbl->Release(This)
/*** IInternetTransport methods ***/
#define IHTTPMailTransport_GetServerInfo(This,pInetServer) (This)->lpVtbl->GetServerInfo(This,pInetServer)
#define IHTTPMailTransport_GetIXPType(This) (This)->lpVtbl->GetIXPType(This)
#define IHTTPMailTransport_IsState(This,isstate) (This)->lpVtbl->IsState(This,isstate)
#define IHTTPMailTransport_InetServerFromAccount(This,pAccount,pInetServer) (This)->lpVtbl->InetServerFromAccount(This,pAccount,pInetServer)
#define IHTTPMailTransport_Connect(This,pInetServer,fAuthenticate,fCommandLogging) (This)->lpVtbl->Connect(This,pInetServer,fAuthenticate,fCommandLogging)
#define IHTTPMailTransport_HandsOffCallback(This) (This)->lpVtbl->HandsOffCallback(This)
#define IHTTPMailTransport_Disconnect(This) (This)->lpVtbl->Disconnect(This)
#define IHTTPMailTransport_DropConnection(This) (This)->lpVtbl->DropConnection(This)
#define IHTTPMailTransport_GetStatus(This,pCurrentStatus) (This)->lpVtbl->GetStatus(This,pCurrentStatus)
/*** IHTTPMailTransport methods ***/
#define IHTTPMailTransport_InitNew(This,pszUserAgent,pszLogFilePath,pCallback) (This)->lpVtbl->InitNew(This,pszUserAgent,pszLogFilePath,pCallback)
#define IHTTPMailTransport_CommandGET(This,pszPath,rgszAcceptTypes,fTranslate,dwContext) (This)->lpVtbl->CommandGET(This,pszPath,rgszAcceptTypes,fTranslate,dwContext)
#define IHTTPMailTransport_CommandPUT(This,pszPath,lpvData,cbSize,dwContext) (This)->lpVtbl->CommandPUT(This,pszPath,lpvData,cbSize,dwContext)
#define IHTTPMailTransport_CommandPOST(This,pszPath,pStream,pszContentType,dwContext) (This)->lpVtbl->CommandPOST(This,pszPath,pStream,pszContentType,dwContext)
#define IHTTPMailTransport_CommandDELETE(This,pszPath,dwContext) (This)->lpVtbl->CommandDELETE(This,pszPath,dwContext)
#define IHTTPMailTransport_CommandBDELETE(This,pszSourceCollection,pTargets,dwContext) (This)->lpVtbl->CommandBDELETE(This,pszSourceCollection,pTargets,dwContext)
#define IHTTPMailTransport_CommandPROPFIND(This,pszPath,pRequest,dwDepth,dwContext) (This)->lpVtbl->CommandPROPFIND(This,pszPath,pRequest,dwDepth,dwContext)
#define IHTTPMailTransport_CommandPROPPATCH(This,pszPath,pRequest,dwContext) (This)->lpVtbl->CommandPROPPATCH(This,pszPath,pRequest,dwContext)
#define IHTTPMailTransport_CommandMKCOL(This,pszPath,dwContext) (This)->lpVtbl->CommandMKCOL(This,pszPath,dwContext)
#define IHTTPMailTransport_CommandCOPY(This,pszPath,pszDestination,fAllowRename,dwContext) (This)->lpVtbl->CommandCOPY(This,pszPath,pszDestination,fAllowRename,dwContext)
#define IHTTPMailTransport_CommandBCOPY(This,pszSourceCollection,pTargets,pszDestCollection,pDestinations,fAllowRename,dwContext) (This)->lpVtbl->CommandBCOPY(This,pszSourceCollection,pTargets,pszDestCollection,pDestinations,fAllowRename,dwContext)
#define IHTTPMailTransport_CommandMOVE(This,pszPath,pszDestination,fAllowRename,dwContext) (This)->lpVtbl->CommandMOVE(This,pszPath,pszDestination,fAllowRename,dwContext)
#define IHTTPMailTransport_CommandBMOVE(This,pszSourceCollection,pTargets,pszDestCollection,pDestinations,fAllowRename,dwContext) (This)->lpVtbl->CommandBMOVE(This,pszSourceCollection,pTargets,pszDestCollection,pDestinations,fAllowRename,dwContext)
#define IHTTPMailTransport_GetProperty(This,proptype,ppszProp) (This)->lpVtbl->GetProperty(This,proptype,ppszProp)
#define IHTTPMailTransport_MemberInfo(This,pszPath,flags,dwDepth,fIncludeRoot,dwContext) (This)->lpVtbl->MemberInfo(This,pszPath,flags,dwDepth,fIncludeRoot,dwContext)
#define IHTTPMailTransport_FindFolders(This,pszPath,dwContext) (This)->lpVtbl->FindFolders(This,pszPath,dwContext)
#define IHTTPMailTransport_MarkRead(This,pszPath,pTargets,fMarkRead,dwContext) (This)->lpVtbl->MarkRead(This,pszPath,pTargets,fMarkRead,dwContext)
#define IHTTPMailTransport_SendMessage(This,pszPath,pszFrom,pTargets,fSaveInSent,pMessageStream,dwContext) (This)->lpVtbl->SendMessage(This,pszPath,pszFrom,pTargets,fSaveInSent,pMessageStream,dwContext)
#define IHTTPMailTransport_ListContacts(This,pszPath,dwContext) (This)->lpVtbl->ListContacts(This,pszPath,dwContext)
#define IHTTPMailTransport_ListContactInfos(This,pszCollectionPath,dwContext) (This)->lpVtbl->ListContactInfos(This,pszCollectionPath,dwContext)
#define IHTTPMailTransport_ContactInfo(This,pszPath,dwContext) (This)->lpVtbl->ContactInfo(This,pszPath,dwContext)
#define IHTTPMailTransport_PostContact(This,pszPath,pciInfo,dwContext) (This)->lpVtbl->PostContact(This,pszPath,pciInfo,dwContext)
#define IHTTPMailTransport_PatchContact(This,pszPath,pciInfo,dwContext) (This)->lpVtbl->PatchContact(This,pszPath,pciInfo,dwContext)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IHTTPMailTransport_QueryInterface(IHTTPMailTransport* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IHTTPMailTransport_AddRef(IHTTPMailTransport* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IHTTPMailTransport_Release(IHTTPMailTransport* This) {
    return This->lpVtbl->Release(This);
}
/*** IInternetTransport methods ***/
static FORCEINLINE HRESULT IHTTPMailTransport_GetServerInfo(IHTTPMailTransport* This,LPINETSERVER pInetServer) {
    return This->lpVtbl->GetServerInfo(This,pInetServer);
}
static FORCEINLINE IXPTYPE IHTTPMailTransport_GetIXPType(IHTTPMailTransport* This) {
    return This->lpVtbl->GetIXPType(This);
}
static FORCEINLINE HRESULT IHTTPMailTransport_IsState(IHTTPMailTransport* This,IXPISSTATE isstate) {
    return This->lpVtbl->IsState(This,isstate);
}
static FORCEINLINE HRESULT IHTTPMailTransport_InetServerFromAccount(IHTTPMailTransport* This,IImnAccount *pAccount,LPINETSERVER pInetServer) {
    return This->lpVtbl->InetServerFromAccount(This,pAccount,pInetServer);
}
static FORCEINLINE HRESULT IHTTPMailTransport_Connect(IHTTPMailTransport* This,LPINETSERVER pInetServer,boolean fAuthenticate,boolean fCommandLogging) {
    return This->lpVtbl->Connect(This,pInetServer,fAuthenticate,fCommandLogging);
}
static FORCEINLINE HRESULT IHTTPMailTransport_HandsOffCallback(IHTTPMailTransport* This) {
    return This->lpVtbl->HandsOffCallback(This);
}
static FORCEINLINE HRESULT IHTTPMailTransport_Disconnect(IHTTPMailTransport* This) {
    return This->lpVtbl->Disconnect(This);
}
static FORCEINLINE HRESULT IHTTPMailTransport_DropConnection(IHTTPMailTransport* This) {
    return This->lpVtbl->DropConnection(This);
}
static FORCEINLINE HRESULT IHTTPMailTransport_GetStatus(IHTTPMailTransport* This,IXPSTATUS *pCurrentStatus) {
    return This->lpVtbl->GetStatus(This,pCurrentStatus);
}
/*** IHTTPMailTransport methods ***/
static FORCEINLINE HRESULT IHTTPMailTransport_InitNew(IHTTPMailTransport* This,LPCSTR pszUserAgent,LPCSTR pszLogFilePath,IHTTPMailCallback *pCallback) {
    return This->lpVtbl->InitNew(This,pszUserAgent,pszLogFilePath,pCallback);
}
static FORCEINLINE HRESULT IHTTPMailTransport_CommandGET(IHTTPMailTransport* This,LPCSTR pszPath,LPCSTR *rgszAcceptTypes,BOOL fTranslate,DWORD dwContext) {
    return This->lpVtbl->CommandGET(This,pszPath,rgszAcceptTypes,fTranslate,dwContext);
}
static FORCEINLINE HRESULT IHTTPMailTransport_CommandPUT(IHTTPMailTransport* This,LPCSTR pszPath,LPVOID lpvData,ULONG cbSize,DWORD dwContext) {
    return This->lpVtbl->CommandPUT(This,pszPath,lpvData,cbSize,dwContext);
}
static FORCEINLINE HRESULT IHTTPMailTransport_CommandPOST(IHTTPMailTransport* This,LPCSTR pszPath,IStream *pStream,LPCSTR pszContentType,DWORD dwContext) {
    return This->lpVtbl->CommandPOST(This,pszPath,pStream,pszContentType,dwContext);
}
static FORCEINLINE HRESULT IHTTPMailTransport_CommandDELETE(IHTTPMailTransport* This,LPCSTR pszPath,DWORD dwContext) {
    return This->lpVtbl->CommandDELETE(This,pszPath,dwContext);
}
static FORCEINLINE HRESULT IHTTPMailTransport_CommandBDELETE(IHTTPMailTransport* This,LPCSTR pszSourceCollection,LPHTTPTARGETLIST pTargets,DWORD dwContext) {
    return This->lpVtbl->CommandBDELETE(This,pszSourceCollection,pTargets,dwContext);
}
static FORCEINLINE HRESULT IHTTPMailTransport_CommandPROPFIND(IHTTPMailTransport* This,LPCSTR pszPath,IPropFindRequest *pRequest,DWORD dwDepth,DWORD dwContext) {
    return This->lpVtbl->CommandPROPFIND(This,pszPath,pRequest,dwDepth,dwContext);
}
static FORCEINLINE HRESULT IHTTPMailTransport_CommandPROPPATCH(IHTTPMailTransport* This,LPCSTR pszPath,IPropPatchRequest *pRequest,DWORD dwContext) {
    return This->lpVtbl->CommandPROPPATCH(This,pszPath,pRequest,dwContext);
}
static FORCEINLINE HRESULT IHTTPMailTransport_CommandMKCOL(IHTTPMailTransport* This,LPCSTR pszPath,DWORD dwContext) {
    return This->lpVtbl->CommandMKCOL(This,pszPath,dwContext);
}
static FORCEINLINE HRESULT IHTTPMailTransport_CommandCOPY(IHTTPMailTransport* This,LPCSTR pszPath,LPCSTR pszDestination,BOOL fAllowRename,DWORD dwContext) {
    return This->lpVtbl->CommandCOPY(This,pszPath,pszDestination,fAllowRename,dwContext);
}
static FORCEINLINE HRESULT IHTTPMailTransport_CommandBCOPY(IHTTPMailTransport* This,LPCSTR pszSourceCollection,LPHTTPTARGETLIST pTargets,LPCSTR pszDestCollection,LPHTTPTARGETLIST pDestinations,BOOL fAllowRename,DWORD dwContext) {
    return This->lpVtbl->CommandBCOPY(This,pszSourceCollection,pTargets,pszDestCollection,pDestinations,fAllowRename,dwContext);
}
static FORCEINLINE HRESULT IHTTPMailTransport_CommandMOVE(IHTTPMailTransport* This,LPCSTR pszPath,LPCSTR pszDestination,BOOL fAllowRename,DWORD dwContext) {
    return This->lpVtbl->CommandMOVE(This,pszPath,pszDestination,fAllowRename,dwContext);
}
static FORCEINLINE HRESULT IHTTPMailTransport_CommandBMOVE(IHTTPMailTransport* This,LPCSTR pszSourceCollection,LPHTTPTARGETLIST pTargets,LPCSTR pszDestCollection,LPHTTPTARGETLIST pDestinations,BOOL fAllowRename,DWORD dwContext) {
    return This->lpVtbl->CommandBMOVE(This,pszSourceCollection,pTargets,pszDestCollection,pDestinations,fAllowRename,dwContext);
}
static FORCEINLINE HRESULT IHTTPMailTransport_GetProperty(IHTTPMailTransport* This,HTTPMAILPROPTYPE proptype,LPSTR *ppszProp) {
    return This->lpVtbl->GetProperty(This,proptype,ppszProp);
}
static FORCEINLINE HRESULT IHTTPMailTransport_MemberInfo(IHTTPMailTransport* This,LPCSTR pszPath,MEMBERINFOFLAGS flags,DWORD dwDepth,BOOL fIncludeRoot,DWORD dwContext) {
    return This->lpVtbl->MemberInfo(This,pszPath,flags,dwDepth,fIncludeRoot,dwContext);
}
static FORCEINLINE HRESULT IHTTPMailTransport_FindFolders(IHTTPMailTransport* This,LPCSTR pszPath,DWORD dwContext) {
    return This->lpVtbl->FindFolders(This,pszPath,dwContext);
}
static FORCEINLINE HRESULT IHTTPMailTransport_MarkRead(IHTTPMailTransport* This,LPCSTR pszPath,LPHTTPTARGETLIST pTargets,BOOL fMarkRead,DWORD dwContext) {
    return This->lpVtbl->MarkRead(This,pszPath,pTargets,fMarkRead,dwContext);
}
static FORCEINLINE HRESULT IHTTPMailTransport_SendMessage(IHTTPMailTransport* This,LPCSTR pszPath,LPCSTR pszFrom,LPHTTPTARGETLIST pTargets,BOOL fSaveInSent,IStream *pMessageStream,DWORD dwContext) {
    return This->lpVtbl->SendMessage(This,pszPath,pszFrom,pTargets,fSaveInSent,pMessageStream,dwContext);
}
static FORCEINLINE HRESULT IHTTPMailTransport_ListContacts(IHTTPMailTransport* This,LPCSTR pszPath,DWORD dwContext) {
    return This->lpVtbl->ListContacts(This,pszPath,dwContext);
}
static FORCEINLINE HRESULT IHTTPMailTransport_ListContactInfos(IHTTPMailTransport* This,LPCSTR pszCollectionPath,DWORD dwContext) {
    return This->lpVtbl->ListContactInfos(This,pszCollectionPath,dwContext);
}
static FORCEINLINE HRESULT IHTTPMailTransport_ContactInfo(IHTTPMailTransport* This,LPCSTR pszPath,DWORD dwContext) {
    return This->lpVtbl->ContactInfo(This,pszPath,dwContext);
}
static FORCEINLINE HRESULT IHTTPMailTransport_PostContact(IHTTPMailTransport* This,LPCSTR pszPath,LPHTTPCONTACTINFO pciInfo,DWORD dwContext) {
    return This->lpVtbl->PostContact(This,pszPath,pciInfo,dwContext);
}
static FORCEINLINE HRESULT IHTTPMailTransport_PatchContact(IHTTPMailTransport* This,LPCSTR pszPath,LPHTTPCONTACTINFO pciInfo,DWORD dwContext) {
    return This->lpVtbl->PatchContact(This,pszPath,pciInfo,dwContext);
}
#endif
#endif

#endif


#endif  /* __IHTTPMailTransport_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IHTTPMailTransport2 interface
 */
#ifndef __IHTTPMailTransport2_INTERFACE_DEFINED__
#define __IHTTPMailTransport2_INTERFACE_DEFINED__

DEFINE_GUID(IID_IHTTPMailTransport2, 0x82758005, 0xd38a, 0x11d3, 0x8e,0x81, 0x00,0xc0,0x4f,0x79,0xe1,0x3b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("82758005-d38a-11d3-8e81-00c04f79e13b")
IHTTPMailTransport2 : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE RootMemberInfo(
        LPCSTR pszPath,
        MEMBERINFOFLAGS flags,
        DWORD dwDepth,
        BOOL fIncludeRoot,
        DWORD dwContext,
        LPSTR pszRootTimeStamp,
        LPSTR pszInboxTimeStamp) = 0;

    virtual HRESULT STDMETHODCALLTYPE FolderMemberInfo(
        LPCSTR pszPath,
        MEMBERINFOFLAGS flags,
        DWORD dwDepth,
        BOOL fIncludeRoot,
        DWORD dwContext,
        LPSTR pszFolderTimeStamp,
        LPSTR pszFolderName) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetPropertyDw(
        HTTPMAILPROPTYPE proptype,
        LPDWORD lpdwProp) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IHTTPMailTransport2, 0x82758005, 0xd38a, 0x11d3, 0x8e,0x81, 0x00,0xc0,0x4f,0x79,0xe1,0x3b)
#endif
#else
typedef struct IHTTPMailTransport2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IHTTPMailTransport2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IHTTPMailTransport2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IHTTPMailTransport2 *This);

    /*** IHTTPMailTransport2 methods ***/
    HRESULT (STDMETHODCALLTYPE *RootMemberInfo)(
        IHTTPMailTransport2 *This,
        LPCSTR pszPath,
        MEMBERINFOFLAGS flags,
        DWORD dwDepth,
        BOOL fIncludeRoot,
        DWORD dwContext,
        LPSTR pszRootTimeStamp,
        LPSTR pszInboxTimeStamp);

    HRESULT (STDMETHODCALLTYPE *FolderMemberInfo)(
        IHTTPMailTransport2 *This,
        LPCSTR pszPath,
        MEMBERINFOFLAGS flags,
        DWORD dwDepth,
        BOOL fIncludeRoot,
        DWORD dwContext,
        LPSTR pszFolderTimeStamp,
        LPSTR pszFolderName);

    HRESULT (STDMETHODCALLTYPE *GetPropertyDw)(
        IHTTPMailTransport2 *This,
        HTTPMAILPROPTYPE proptype,
        LPDWORD lpdwProp);

    END_INTERFACE
} IHTTPMailTransport2Vtbl;

interface IHTTPMailTransport2 {
    CONST_VTBL IHTTPMailTransport2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IHTTPMailTransport2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IHTTPMailTransport2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IHTTPMailTransport2_Release(This) (This)->lpVtbl->Release(This)
/*** IHTTPMailTransport2 methods ***/
#define IHTTPMailTransport2_RootMemberInfo(This,pszPath,flags,dwDepth,fIncludeRoot,dwContext,pszRootTimeStamp,pszInboxTimeStamp) (This)->lpVtbl->RootMemberInfo(This,pszPath,flags,dwDepth,fIncludeRoot,dwContext,pszRootTimeStamp,pszInboxTimeStamp)
#define IHTTPMailTransport2_FolderMemberInfo(This,pszPath,flags,dwDepth,fIncludeRoot,dwContext,pszFolderTimeStamp,pszFolderName) (This)->lpVtbl->FolderMemberInfo(This,pszPath,flags,dwDepth,fIncludeRoot,dwContext,pszFolderTimeStamp,pszFolderName)
#define IHTTPMailTransport2_GetPropertyDw(This,proptype,lpdwProp) (This)->lpVtbl->GetPropertyDw(This,proptype,lpdwProp)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IHTTPMailTransport2_QueryInterface(IHTTPMailTransport2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IHTTPMailTransport2_AddRef(IHTTPMailTransport2* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IHTTPMailTransport2_Release(IHTTPMailTransport2* This) {
    return This->lpVtbl->Release(This);
}
/*** IHTTPMailTransport2 methods ***/
static FORCEINLINE HRESULT IHTTPMailTransport2_RootMemberInfo(IHTTPMailTransport2* This,LPCSTR pszPath,MEMBERINFOFLAGS flags,DWORD dwDepth,BOOL fIncludeRoot,DWORD dwContext,LPSTR pszRootTimeStamp,LPSTR pszInboxTimeStamp) {
    return This->lpVtbl->RootMemberInfo(This,pszPath,flags,dwDepth,fIncludeRoot,dwContext,pszRootTimeStamp,pszInboxTimeStamp);
}
static FORCEINLINE HRESULT IHTTPMailTransport2_FolderMemberInfo(IHTTPMailTransport2* This,LPCSTR pszPath,MEMBERINFOFLAGS flags,DWORD dwDepth,BOOL fIncludeRoot,DWORD dwContext,LPSTR pszFolderTimeStamp,LPSTR pszFolderName) {
    return This->lpVtbl->FolderMemberInfo(This,pszPath,flags,dwDepth,fIncludeRoot,dwContext,pszFolderTimeStamp,pszFolderName);
}
static FORCEINLINE HRESULT IHTTPMailTransport2_GetPropertyDw(IHTTPMailTransport2* This,HTTPMAILPROPTYPE proptype,LPDWORD lpdwProp) {
    return This->lpVtbl->GetPropertyDw(This,proptype,lpdwProp);
}
#endif
#endif

#endif


#endif  /* __IHTTPMailTransport2_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IPOP3Callback interface
 */
#ifndef __IPOP3Callback_INTERFACE_DEFINED__
#define __IPOP3Callback_INTERFACE_DEFINED__

typedef enum tagPOP3COMMAND {
    POP3_NONE = 0,
    POP3_BANNER = 1,
    POP3_CONNECTED = 2,
    POP3_USER = 3,
    POP3_PASS = 4,
    POP3_AUTH = 5,
    POP3_UIDL = 6,
    POP3_STAT = 7,
    POP3_LIST = 8,
    POP3_DELE = 9,
    POP3_RETR = 10,
    POP3_TOP = 11,
    POP3_NOOP = 12,
    POP3_QUIT = 13,
    POP3_RSET = 14,
    POP3_CUSTOM = 15
} POP3COMMAND;
typedef struct tagPOP3RETR {
    BOOL fHeader;
    BOOL fBody;
    DWORD dwPopId;
    DWORD cbSoFar;
    LPSTR pszLines;
    ULONG cbLines;
} POP3RETR;
typedef struct tagPOP3RETR *LPPOP3RETR;
typedef struct tagPOP3TOP {
    BOOL fHeader;
    BOOL fBody;
    DWORD dwPopId;
    DWORD cPreviewLines;
    DWORD cbSoFar;
    LPSTR pszLines;
    ULONG cbLines;
} POP3TOP;
typedef struct tagPOP3TOP *LPPOP3TOP;
typedef struct tagPOP3LIST {
    DWORD dwPopId;
    DWORD cbSize;
} POP3LIST;
typedef struct tagPOP3LIST *LPPOP3LIST;
typedef struct tagPOP3UIDL {
    DWORD dwPopId;
    LPSTR pszUidl;
} POP3UIDL;
typedef struct tagPOP3UIDL *LPPOP3UIDL;
typedef struct tagPOP3STAT {
    DWORD cMessages;
    DWORD cbMessages;
} POP3STAT;
typedef struct tagPOP3STAT *LPPOP3STAT;
typedef struct tagPOP3RESPONSE {
    POP3COMMAND command;
    BOOL fDone;
    IXPRESULT rIxpResult;
    IPOP3Transport *pTransport;
    BOOL fValidInfo;
    __C89_NAMELESS union {
        POP3UIDL rUidlInfo;
        POP3STAT rStatInfo;
        POP3LIST rListInfo;
        DWORD dwPopId;
        POP3RETR rRetrInfo;
        POP3TOP rTopInfo;
    } __C89_NAMELESSUNIONNAME;
} POP3RESPONSE;
typedef struct tagPOP3RESPONSE *LPPOP3RESPONSE;
DEFINE_GUID(IID_IPOP3Callback, 0x0df2c7e3, 0x3435, 0x11d0, 0x81,0xd0, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("0df2c7e3-3435-11d0-81d0-00c04fd85ab4")
IPOP3Callback : public ITransportCallback
{
    virtual HRESULT STDMETHODCALLTYPE OnResponse(
        LPPOP3RESPONSE pResponse) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IPOP3Callback, 0x0df2c7e3, 0x3435, 0x11d0, 0x81,0xd0, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4)
#endif
#else
typedef struct IPOP3CallbackVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IPOP3Callback *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IPOP3Callback *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IPOP3Callback *This);

    /*** ITransportCallback methods ***/
    HRESULT (STDMETHODCALLTYPE *OnTimeout)(
        IPOP3Callback *This,
        DWORD *pdwTimeout,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnLogonPrompt)(
        IPOP3Callback *This,
        LPINETSERVER pInetServer,
        IInternetTransport *pTransport);

    INT (STDMETHODCALLTYPE *OnPrompt)(
        IPOP3Callback *This,
        HRESULT hrError,
        LPCTSTR pszText,
        LPCTSTR pszCaption,
        UINT uType,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnStatus)(
        IPOP3Callback *This,
        IXPSTATUS ixpstatus,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnError)(
        IPOP3Callback *This,
        IXPSTATUS ixpstatus,
        LPIXPRESULT pResult,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnCommand)(
        IPOP3Callback *This,
        CMDTYPE cmdtype,
        LPSTR pszLine,
        HRESULT hrResponse,
        IInternetTransport *pTransport);

    /*** IPOP3Callback methods ***/
    HRESULT (STDMETHODCALLTYPE *OnResponse)(
        IPOP3Callback *This,
        LPPOP3RESPONSE pResponse);

    END_INTERFACE
} IPOP3CallbackVtbl;

interface IPOP3Callback {
    CONST_VTBL IPOP3CallbackVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IPOP3Callback_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IPOP3Callback_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IPOP3Callback_Release(This) (This)->lpVtbl->Release(This)
/*** ITransportCallback methods ***/
#define IPOP3Callback_OnTimeout(This,pdwTimeout,pTransport) (This)->lpVtbl->OnTimeout(This,pdwTimeout,pTransport)
#define IPOP3Callback_OnLogonPrompt(This,pInetServer,pTransport) (This)->lpVtbl->OnLogonPrompt(This,pInetServer,pTransport)
#define IPOP3Callback_OnPrompt(This,hrError,pszText,pszCaption,uType,pTransport) (This)->lpVtbl->OnPrompt(This,hrError,pszText,pszCaption,uType,pTransport)
#define IPOP3Callback_OnStatus(This,ixpstatus,pTransport) (This)->lpVtbl->OnStatus(This,ixpstatus,pTransport)
#define IPOP3Callback_OnError(This,ixpstatus,pResult,pTransport) (This)->lpVtbl->OnError(This,ixpstatus,pResult,pTransport)
#define IPOP3Callback_OnCommand(This,cmdtype,pszLine,hrResponse,pTransport) (This)->lpVtbl->OnCommand(This,cmdtype,pszLine,hrResponse,pTransport)
/*** IPOP3Callback methods ***/
#define IPOP3Callback_OnResponse(This,pResponse) (This)->lpVtbl->OnResponse(This,pResponse)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IPOP3Callback_QueryInterface(IPOP3Callback* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IPOP3Callback_AddRef(IPOP3Callback* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IPOP3Callback_Release(IPOP3Callback* This) {
    return This->lpVtbl->Release(This);
}
/*** ITransportCallback methods ***/
static FORCEINLINE HRESULT IPOP3Callback_OnTimeout(IPOP3Callback* This,DWORD *pdwTimeout,IInternetTransport *pTransport) {
    return This->lpVtbl->OnTimeout(This,pdwTimeout,pTransport);
}
static FORCEINLINE HRESULT IPOP3Callback_OnLogonPrompt(IPOP3Callback* This,LPINETSERVER pInetServer,IInternetTransport *pTransport) {
    return This->lpVtbl->OnLogonPrompt(This,pInetServer,pTransport);
}
static FORCEINLINE INT IPOP3Callback_OnPrompt(IPOP3Callback* This,HRESULT hrError,LPCTSTR pszText,LPCTSTR pszCaption,UINT uType,IInternetTransport *pTransport) {
    return This->lpVtbl->OnPrompt(This,hrError,pszText,pszCaption,uType,pTransport);
}
static FORCEINLINE HRESULT IPOP3Callback_OnStatus(IPOP3Callback* This,IXPSTATUS ixpstatus,IInternetTransport *pTransport) {
    return This->lpVtbl->OnStatus(This,ixpstatus,pTransport);
}
static FORCEINLINE HRESULT IPOP3Callback_OnError(IPOP3Callback* This,IXPSTATUS ixpstatus,LPIXPRESULT pResult,IInternetTransport *pTransport) {
    return This->lpVtbl->OnError(This,ixpstatus,pResult,pTransport);
}
static FORCEINLINE HRESULT IPOP3Callback_OnCommand(IPOP3Callback* This,CMDTYPE cmdtype,LPSTR pszLine,HRESULT hrResponse,IInternetTransport *pTransport) {
    return This->lpVtbl->OnCommand(This,cmdtype,pszLine,hrResponse,pTransport);
}
/*** IPOP3Callback methods ***/
static FORCEINLINE HRESULT IPOP3Callback_OnResponse(IPOP3Callback* This,LPPOP3RESPONSE pResponse) {
    return This->lpVtbl->OnResponse(This,pResponse);
}
#endif
#endif

#endif


#endif  /* __IPOP3Callback_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IPOP3Transport interface
 */
#ifndef __IPOP3Transport_INTERFACE_DEFINED__
#define __IPOP3Transport_INTERFACE_DEFINED__

typedef enum tagPOP3CMDTYPE {
    POP3CMD_GET_POPID = 0,
    POP3CMD_GET_MARKED = 1,
    POP3CMD_GET_ALL = 2
} POP3CMDTYPE;
typedef enum tagPOP3MARKTYPE {
    POP3_MARK_FOR_TOP = 0x1,
    POP3_MARK_FOR_RETR = 0x2,
    POP3_MARK_FOR_DELE = 0x4,
    POP3_MARK_FOR_UIDL = 0x8,
    POP3_MARK_FOR_LIST = 0x10
} POP3MARKTYPE;
DEFINE_GUID(IID_IPOP3Transport, 0x0df2c7e4, 0x3435, 0x11d0, 0x81,0xd0, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("0df2c7e4-3435-11d0-81d0-00c04fd85ab4")
IPOP3Transport : public IInternetTransport
{
    virtual HRESULT STDMETHODCALLTYPE InitNew(
        LPSTR pszLogFilePath,
        IPOP3Callback *pCallback) = 0;

    virtual HRESULT STDMETHODCALLTYPE MarkItem(
        POP3MARKTYPE marktype,
        DWORD dwPopId,
        boolean fMarked) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandAUTH(
        LPSTR pszAuthType) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandUSER(
        LPSTR pszUserName) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandPASS(
        LPSTR pszPassword) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandLIST(
        POP3CMDTYPE cmdtype,
        DWORD dwPopId) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandTOP(
        POP3CMDTYPE cmdtype,
        DWORD dwPopId,
        DWORD cPreviewLines) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandQUIT(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandSTAT(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandNOOP(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandRSET(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandUIDL(
        POP3CMDTYPE cmdtype,
        DWORD dwPopId) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandDELE(
        POP3CMDTYPE cmdtype,
        DWORD dwPopId) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandRETR(
        POP3CMDTYPE cmdtype,
        DWORD dwPopId) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IPOP3Transport, 0x0df2c7e4, 0x3435, 0x11d0, 0x81,0xd0, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4)
#endif
#else
typedef struct IPOP3TransportVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IPOP3Transport *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IPOP3Transport *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IPOP3Transport *This);

    /*** IInternetTransport methods ***/
    HRESULT (STDMETHODCALLTYPE *GetServerInfo)(
        IPOP3Transport *This,
        LPINETSERVER pInetServer);

    IXPTYPE (STDMETHODCALLTYPE *GetIXPType)(
        IPOP3Transport *This);

    HRESULT (STDMETHODCALLTYPE *IsState)(
        IPOP3Transport *This,
        IXPISSTATE isstate);

    HRESULT (STDMETHODCALLTYPE *InetServerFromAccount)(
        IPOP3Transport *This,
        IImnAccount *pAccount,
        LPINETSERVER pInetServer);

    HRESULT (STDMETHODCALLTYPE *Connect)(
        IPOP3Transport *This,
        LPINETSERVER pInetServer,
        boolean fAuthenticate,
        boolean fCommandLogging);

    HRESULT (STDMETHODCALLTYPE *HandsOffCallback)(
        IPOP3Transport *This);

    HRESULT (STDMETHODCALLTYPE *Disconnect)(
        IPOP3Transport *This);

    HRESULT (STDMETHODCALLTYPE *DropConnection)(
        IPOP3Transport *This);

    HRESULT (STDMETHODCALLTYPE *GetStatus)(
        IPOP3Transport *This,
        IXPSTATUS *pCurrentStatus);

    /*** IPOP3Transport methods ***/
    HRESULT (STDMETHODCALLTYPE *InitNew)(
        IPOP3Transport *This,
        LPSTR pszLogFilePath,
        IPOP3Callback *pCallback);

    HRESULT (STDMETHODCALLTYPE *MarkItem)(
        IPOP3Transport *This,
        POP3MARKTYPE marktype,
        DWORD dwPopId,
        boolean fMarked);

    HRESULT (STDMETHODCALLTYPE *CommandAUTH)(
        IPOP3Transport *This,
        LPSTR pszAuthType);

    HRESULT (STDMETHODCALLTYPE *CommandUSER)(
        IPOP3Transport *This,
        LPSTR pszUserName);

    HRESULT (STDMETHODCALLTYPE *CommandPASS)(
        IPOP3Transport *This,
        LPSTR pszPassword);

    HRESULT (STDMETHODCALLTYPE *CommandLIST)(
        IPOP3Transport *This,
        POP3CMDTYPE cmdtype,
        DWORD dwPopId);

    HRESULT (STDMETHODCALLTYPE *CommandTOP)(
        IPOP3Transport *This,
        POP3CMDTYPE cmdtype,
        DWORD dwPopId,
        DWORD cPreviewLines);

    HRESULT (STDMETHODCALLTYPE *CommandQUIT)(
        IPOP3Transport *This);

    HRESULT (STDMETHODCALLTYPE *CommandSTAT)(
        IPOP3Transport *This);

    HRESULT (STDMETHODCALLTYPE *CommandNOOP)(
        IPOP3Transport *This);

    HRESULT (STDMETHODCALLTYPE *CommandRSET)(
        IPOP3Transport *This);

    HRESULT (STDMETHODCALLTYPE *CommandUIDL)(
        IPOP3Transport *This,
        POP3CMDTYPE cmdtype,
        DWORD dwPopId);

    HRESULT (STDMETHODCALLTYPE *CommandDELE)(
        IPOP3Transport *This,
        POP3CMDTYPE cmdtype,
        DWORD dwPopId);

    HRESULT (STDMETHODCALLTYPE *CommandRETR)(
        IPOP3Transport *This,
        POP3CMDTYPE cmdtype,
        DWORD dwPopId);

    END_INTERFACE
} IPOP3TransportVtbl;

interface IPOP3Transport {
    CONST_VTBL IPOP3TransportVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IPOP3Transport_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IPOP3Transport_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IPOP3Transport_Release(This) (This)->lpVtbl->Release(This)
/*** IInternetTransport methods ***/
#define IPOP3Transport_GetServerInfo(This,pInetServer) (This)->lpVtbl->GetServerInfo(This,pInetServer)
#define IPOP3Transport_GetIXPType(This) (This)->lpVtbl->GetIXPType(This)
#define IPOP3Transport_IsState(This,isstate) (This)->lpVtbl->IsState(This,isstate)
#define IPOP3Transport_InetServerFromAccount(This,pAccount,pInetServer) (This)->lpVtbl->InetServerFromAccount(This,pAccount,pInetServer)
#define IPOP3Transport_Connect(This,pInetServer,fAuthenticate,fCommandLogging) (This)->lpVtbl->Connect(This,pInetServer,fAuthenticate,fCommandLogging)
#define IPOP3Transport_HandsOffCallback(This) (This)->lpVtbl->HandsOffCallback(This)
#define IPOP3Transport_Disconnect(This) (This)->lpVtbl->Disconnect(This)
#define IPOP3Transport_DropConnection(This) (This)->lpVtbl->DropConnection(This)
#define IPOP3Transport_GetStatus(This,pCurrentStatus) (This)->lpVtbl->GetStatus(This,pCurrentStatus)
/*** IPOP3Transport methods ***/
#define IPOP3Transport_InitNew(This,pszLogFilePath,pCallback) (This)->lpVtbl->InitNew(This,pszLogFilePath,pCallback)
#define IPOP3Transport_MarkItem(This,marktype,dwPopId,fMarked) (This)->lpVtbl->MarkItem(This,marktype,dwPopId,fMarked)
#define IPOP3Transport_CommandAUTH(This,pszAuthType) (This)->lpVtbl->CommandAUTH(This,pszAuthType)
#define IPOP3Transport_CommandUSER(This,pszUserName) (This)->lpVtbl->CommandUSER(This,pszUserName)
#define IPOP3Transport_CommandPASS(This,pszPassword) (This)->lpVtbl->CommandPASS(This,pszPassword)
#define IPOP3Transport_CommandLIST(This,cmdtype,dwPopId) (This)->lpVtbl->CommandLIST(This,cmdtype,dwPopId)
#define IPOP3Transport_CommandTOP(This,cmdtype,dwPopId,cPreviewLines) (This)->lpVtbl->CommandTOP(This,cmdtype,dwPopId,cPreviewLines)
#define IPOP3Transport_CommandQUIT(This) (This)->lpVtbl->CommandQUIT(This)
#define IPOP3Transport_CommandSTAT(This) (This)->lpVtbl->CommandSTAT(This)
#define IPOP3Transport_CommandNOOP(This) (This)->lpVtbl->CommandNOOP(This)
#define IPOP3Transport_CommandRSET(This) (This)->lpVtbl->CommandRSET(This)
#define IPOP3Transport_CommandUIDL(This,cmdtype,dwPopId) (This)->lpVtbl->CommandUIDL(This,cmdtype,dwPopId)
#define IPOP3Transport_CommandDELE(This,cmdtype,dwPopId) (This)->lpVtbl->CommandDELE(This,cmdtype,dwPopId)
#define IPOP3Transport_CommandRETR(This,cmdtype,dwPopId) (This)->lpVtbl->CommandRETR(This,cmdtype,dwPopId)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IPOP3Transport_QueryInterface(IPOP3Transport* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IPOP3Transport_AddRef(IPOP3Transport* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IPOP3Transport_Release(IPOP3Transport* This) {
    return This->lpVtbl->Release(This);
}
/*** IInternetTransport methods ***/
static FORCEINLINE HRESULT IPOP3Transport_GetServerInfo(IPOP3Transport* This,LPINETSERVER pInetServer) {
    return This->lpVtbl->GetServerInfo(This,pInetServer);
}
static FORCEINLINE IXPTYPE IPOP3Transport_GetIXPType(IPOP3Transport* This) {
    return This->lpVtbl->GetIXPType(This);
}
static FORCEINLINE HRESULT IPOP3Transport_IsState(IPOP3Transport* This,IXPISSTATE isstate) {
    return This->lpVtbl->IsState(This,isstate);
}
static FORCEINLINE HRESULT IPOP3Transport_InetServerFromAccount(IPOP3Transport* This,IImnAccount *pAccount,LPINETSERVER pInetServer) {
    return This->lpVtbl->InetServerFromAccount(This,pAccount,pInetServer);
}
static FORCEINLINE HRESULT IPOP3Transport_Connect(IPOP3Transport* This,LPINETSERVER pInetServer,boolean fAuthenticate,boolean fCommandLogging) {
    return This->lpVtbl->Connect(This,pInetServer,fAuthenticate,fCommandLogging);
}
static FORCEINLINE HRESULT IPOP3Transport_HandsOffCallback(IPOP3Transport* This) {
    return This->lpVtbl->HandsOffCallback(This);
}
static FORCEINLINE HRESULT IPOP3Transport_Disconnect(IPOP3Transport* This) {
    return This->lpVtbl->Disconnect(This);
}
static FORCEINLINE HRESULT IPOP3Transport_DropConnection(IPOP3Transport* This) {
    return This->lpVtbl->DropConnection(This);
}
static FORCEINLINE HRESULT IPOP3Transport_GetStatus(IPOP3Transport* This,IXPSTATUS *pCurrentStatus) {
    return This->lpVtbl->GetStatus(This,pCurrentStatus);
}
/*** IPOP3Transport methods ***/
static FORCEINLINE HRESULT IPOP3Transport_InitNew(IPOP3Transport* This,LPSTR pszLogFilePath,IPOP3Callback *pCallback) {
    return This->lpVtbl->InitNew(This,pszLogFilePath,pCallback);
}
static FORCEINLINE HRESULT IPOP3Transport_MarkItem(IPOP3Transport* This,POP3MARKTYPE marktype,DWORD dwPopId,boolean fMarked) {
    return This->lpVtbl->MarkItem(This,marktype,dwPopId,fMarked);
}
static FORCEINLINE HRESULT IPOP3Transport_CommandAUTH(IPOP3Transport* This,LPSTR pszAuthType) {
    return This->lpVtbl->CommandAUTH(This,pszAuthType);
}
static FORCEINLINE HRESULT IPOP3Transport_CommandUSER(IPOP3Transport* This,LPSTR pszUserName) {
    return This->lpVtbl->CommandUSER(This,pszUserName);
}
static FORCEINLINE HRESULT IPOP3Transport_CommandPASS(IPOP3Transport* This,LPSTR pszPassword) {
    return This->lpVtbl->CommandPASS(This,pszPassword);
}
static FORCEINLINE HRESULT IPOP3Transport_CommandLIST(IPOP3Transport* This,POP3CMDTYPE cmdtype,DWORD dwPopId) {
    return This->lpVtbl->CommandLIST(This,cmdtype,dwPopId);
}
static FORCEINLINE HRESULT IPOP3Transport_CommandTOP(IPOP3Transport* This,POP3CMDTYPE cmdtype,DWORD dwPopId,DWORD cPreviewLines) {
    return This->lpVtbl->CommandTOP(This,cmdtype,dwPopId,cPreviewLines);
}
static FORCEINLINE HRESULT IPOP3Transport_CommandQUIT(IPOP3Transport* This) {
    return This->lpVtbl->CommandQUIT(This);
}
static FORCEINLINE HRESULT IPOP3Transport_CommandSTAT(IPOP3Transport* This) {
    return This->lpVtbl->CommandSTAT(This);
}
static FORCEINLINE HRESULT IPOP3Transport_CommandNOOP(IPOP3Transport* This) {
    return This->lpVtbl->CommandNOOP(This);
}
static FORCEINLINE HRESULT IPOP3Transport_CommandRSET(IPOP3Transport* This) {
    return This->lpVtbl->CommandRSET(This);
}
static FORCEINLINE HRESULT IPOP3Transport_CommandUIDL(IPOP3Transport* This,POP3CMDTYPE cmdtype,DWORD dwPopId) {
    return This->lpVtbl->CommandUIDL(This,cmdtype,dwPopId);
}
static FORCEINLINE HRESULT IPOP3Transport_CommandDELE(IPOP3Transport* This,POP3CMDTYPE cmdtype,DWORD dwPopId) {
    return This->lpVtbl->CommandDELE(This,cmdtype,dwPopId);
}
static FORCEINLINE HRESULT IPOP3Transport_CommandRETR(IPOP3Transport* This,POP3CMDTYPE cmdtype,DWORD dwPopId) {
    return This->lpVtbl->CommandRETR(This,cmdtype,dwPopId);
}
#endif
#endif

#endif


#endif  /* __IPOP3Transport_INTERFACE_DEFINED__ */

/*****************************************************************************
 * INNTPCallback interface
 */
#ifndef __INNTPCallback_INTERFACE_DEFINED__
#define __INNTPCallback_INTERFACE_DEFINED__

typedef enum tagNNTPSTATE {
    NS_DISCONNECTED = 0,
    NS_CONNECT = 1,
    NS_AUTHINFO = 2,
    NS_POST = 3,
    NS_IDLE = 4,
    NS_LIST = 5,
    NS_LISTGROUP = 6,
    NS_NEWGROUPS = 7,
    NS_GROUP = 8,
    NS_LAST = 9,
    NS_NEXT = 10,
    NS_STAT = 11,
    NS_ARTICLE = 12,
    NS_HEAD = 13,
    NS_BODY = 14,
    NS_DATE = 15,
    NS_MODE = 16,
    NS_QUIT = 17,
    NS_HEADERS = 18,
    NS_XHDR = 19
} NNTPSTATE;
typedef struct tagNNTPGROUP {
    DWORD dwCount;
    DWORD dwFirst;
    DWORD dwLast;
    LPSTR pszGroup;
} NNTPGROUP;
typedef struct tagNNTPGROUP *LPNNTPGROUP;
typedef struct tagNNTPNEXT {
    DWORD dwArticleNum;
    LPSTR pszMessageId;
} NNTPNEXT;
typedef struct tagNNTPNEXT *LPNNTPNEXT;
typedef struct tagNNTPARTICLE {
    DWORD dwArticleNum;
    LPSTR pszMessageId;
    LPSTR pszLines;
    ULONG cbLines;
    ULONG cLines;
    DWORD dwReserved;
} NNTPARTICLE;
typedef struct tagNNTPARTICLE *LPNNTPARTICLE;
typedef struct tagNNTPLIST {
    DWORD cLines;
    LPSTR *rgszLines;
} NNTPLIST;
typedef struct tagNNTPLIST *LPNNTPLIST;
typedef struct tagNNTPLISTGROUP {
    DWORD cArticles;
    DWORD *rgArticles;
} NNTPLISTGROUP;
typedef struct tagNNTPLISTGROUP *LPNNTPLISTGROUP;
typedef struct tagNNTPHEADER {
    DWORD dwArticleNum;
    LPSTR pszSubject;
    LPSTR pszFrom;
    LPSTR pszDate;
    LPSTR pszMessageId;
    LPSTR pszReferences;
    DWORD dwBytes;
    DWORD dwLines;
    LPSTR pszXref;
} NNTPHEADER;
typedef struct tagNNTPHEADER *LPNNTPHEADER;
typedef struct tagNNTPHEADERRESP {
    DWORD cHeaders;
    LPNNTPHEADER rgHeaders;
    BOOL fSupportsXRef;
    DWORD_PTR dwReserved;
} NNTPHEADERRESP;
typedef struct tagNNTPHEADERRESP *LPNNTPHEADERRESP;
typedef struct tagNNTPXHDR {
    DWORD dwArticleNum;
    LPSTR pszHeader;
} NNTPXHDR;
typedef struct tagNNTPXHDR *LPNNTPXHDR;
typedef struct tagNNTPXHDRRESP {
    DWORD cHeaders;
    LPNNTPXHDR rgHeaders;
    DWORD_PTR dwReserved;
} NNTPXHDRRESP;
typedef struct tagNNTPXHDRRESP *LPNNTPXHDRRESP;
typedef struct tagNNTPRESPONSE {
    NNTPSTATE state;
    BOOL fMustRelease;
    BOOL fDone;
    IXPRESULT rIxpResult;
    INNTPTransport *pTransport;
    __C89_NAMELESS union {
        NNTPGROUP rGroup;
        NNTPNEXT rLast;
        NNTPNEXT rNext;
        NNTPNEXT rStat;
        NNTPARTICLE rArticle;
        NNTPARTICLE rHead;
        NNTPARTICLE rBody;
        NNTPLIST rList;
        NNTPLISTGROUP rListGroup;
        NNTPLIST rNewgroups;
        SYSTEMTIME rDate;
        NNTPHEADERRESP rHeaders;
        NNTPXHDRRESP rXhdr;
    } __C89_NAMELESSUNIONNAME;
} NNTPRESPONSE;
typedef struct tagNNTPRESPONSE *LPNNTPRESPONSE;
DEFINE_GUID(IID_INNTPCallback, 0x0df2c7e6, 0x3435, 0x11d0, 0x81,0xd0, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("0df2c7e6-3435-11d0-81d0-00c04fd85ab4")
INNTPCallback : public ITransportCallback
{
    virtual HRESULT STDMETHODCALLTYPE OnResponse(
        LPNNTPRESPONSE pResponse) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(INNTPCallback, 0x0df2c7e6, 0x3435, 0x11d0, 0x81,0xd0, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4)
#endif
#else
typedef struct INNTPCallbackVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        INNTPCallback *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        INNTPCallback *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        INNTPCallback *This);

    /*** ITransportCallback methods ***/
    HRESULT (STDMETHODCALLTYPE *OnTimeout)(
        INNTPCallback *This,
        DWORD *pdwTimeout,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnLogonPrompt)(
        INNTPCallback *This,
        LPINETSERVER pInetServer,
        IInternetTransport *pTransport);

    INT (STDMETHODCALLTYPE *OnPrompt)(
        INNTPCallback *This,
        HRESULT hrError,
        LPCTSTR pszText,
        LPCTSTR pszCaption,
        UINT uType,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnStatus)(
        INNTPCallback *This,
        IXPSTATUS ixpstatus,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnError)(
        INNTPCallback *This,
        IXPSTATUS ixpstatus,
        LPIXPRESULT pResult,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnCommand)(
        INNTPCallback *This,
        CMDTYPE cmdtype,
        LPSTR pszLine,
        HRESULT hrResponse,
        IInternetTransport *pTransport);

    /*** INNTPCallback methods ***/
    HRESULT (STDMETHODCALLTYPE *OnResponse)(
        INNTPCallback *This,
        LPNNTPRESPONSE pResponse);

    END_INTERFACE
} INNTPCallbackVtbl;

interface INNTPCallback {
    CONST_VTBL INNTPCallbackVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define INNTPCallback_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define INNTPCallback_AddRef(This) (This)->lpVtbl->AddRef(This)
#define INNTPCallback_Release(This) (This)->lpVtbl->Release(This)
/*** ITransportCallback methods ***/
#define INNTPCallback_OnTimeout(This,pdwTimeout,pTransport) (This)->lpVtbl->OnTimeout(This,pdwTimeout,pTransport)
#define INNTPCallback_OnLogonPrompt(This,pInetServer,pTransport) (This)->lpVtbl->OnLogonPrompt(This,pInetServer,pTransport)
#define INNTPCallback_OnPrompt(This,hrError,pszText,pszCaption,uType,pTransport) (This)->lpVtbl->OnPrompt(This,hrError,pszText,pszCaption,uType,pTransport)
#define INNTPCallback_OnStatus(This,ixpstatus,pTransport) (This)->lpVtbl->OnStatus(This,ixpstatus,pTransport)
#define INNTPCallback_OnError(This,ixpstatus,pResult,pTransport) (This)->lpVtbl->OnError(This,ixpstatus,pResult,pTransport)
#define INNTPCallback_OnCommand(This,cmdtype,pszLine,hrResponse,pTransport) (This)->lpVtbl->OnCommand(This,cmdtype,pszLine,hrResponse,pTransport)
/*** INNTPCallback methods ***/
#define INNTPCallback_OnResponse(This,pResponse) (This)->lpVtbl->OnResponse(This,pResponse)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT INNTPCallback_QueryInterface(INNTPCallback* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG INNTPCallback_AddRef(INNTPCallback* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG INNTPCallback_Release(INNTPCallback* This) {
    return This->lpVtbl->Release(This);
}
/*** ITransportCallback methods ***/
static FORCEINLINE HRESULT INNTPCallback_OnTimeout(INNTPCallback* This,DWORD *pdwTimeout,IInternetTransport *pTransport) {
    return This->lpVtbl->OnTimeout(This,pdwTimeout,pTransport);
}
static FORCEINLINE HRESULT INNTPCallback_OnLogonPrompt(INNTPCallback* This,LPINETSERVER pInetServer,IInternetTransport *pTransport) {
    return This->lpVtbl->OnLogonPrompt(This,pInetServer,pTransport);
}
static FORCEINLINE INT INNTPCallback_OnPrompt(INNTPCallback* This,HRESULT hrError,LPCTSTR pszText,LPCTSTR pszCaption,UINT uType,IInternetTransport *pTransport) {
    return This->lpVtbl->OnPrompt(This,hrError,pszText,pszCaption,uType,pTransport);
}
static FORCEINLINE HRESULT INNTPCallback_OnStatus(INNTPCallback* This,IXPSTATUS ixpstatus,IInternetTransport *pTransport) {
    return This->lpVtbl->OnStatus(This,ixpstatus,pTransport);
}
static FORCEINLINE HRESULT INNTPCallback_OnError(INNTPCallback* This,IXPSTATUS ixpstatus,LPIXPRESULT pResult,IInternetTransport *pTransport) {
    return This->lpVtbl->OnError(This,ixpstatus,pResult,pTransport);
}
static FORCEINLINE HRESULT INNTPCallback_OnCommand(INNTPCallback* This,CMDTYPE cmdtype,LPSTR pszLine,HRESULT hrResponse,IInternetTransport *pTransport) {
    return This->lpVtbl->OnCommand(This,cmdtype,pszLine,hrResponse,pTransport);
}
/*** INNTPCallback methods ***/
static FORCEINLINE HRESULT INNTPCallback_OnResponse(INNTPCallback* This,LPNNTPRESPONSE pResponse) {
    return This->lpVtbl->OnResponse(This,pResponse);
}
#endif
#endif

#endif


#endif  /* __INNTPCallback_INTERFACE_DEFINED__ */

/*****************************************************************************
 * INNTPTransport interface
 */
#ifndef __INNTPTransport_INTERFACE_DEFINED__
#define __INNTPTransport_INTERFACE_DEFINED__

typedef enum tagAUTHTYPE {
    AUTHTYPE_USERPASS = 0,
    AUTHTYPE_SIMPLE = 1,
    AUTHTYPE_SASL = 2
} AUTHTYPE;
typedef struct tagNNTPAUTHINFO {
    AUTHTYPE authtype;
    LPSTR pszUser;
    LPSTR pszPass;
} NNTPAUTHINFO;
typedef struct tagNNTPAUTHINFO *LPNNTPAUTHINFO;
typedef enum tagARTICLEIDTYPE {
    AID_MSGID = 0,
    AID_ARTICLENUM = 1
} ARTICLEIDTYPE;
typedef struct ARTICLEID {
    ARTICLEIDTYPE idType;
    __C89_NAMELESS union {
        LPSTR pszMessageId;
        DWORD_PTR dwArticleNum;
    } __C89_NAMELESSUNIONNAME;
} ARTICLEID;
typedef struct ARTICLEID *LPARTICLEID;
typedef struct tagNNTPMESSAGE {
    ULONG cbSize;
    LPSTREAM pstmMsg;
} NNTPMESSAGE;
typedef struct tagNNTPMESSAGE *LPNNTPMESSAGE;
typedef enum tagRANGETYPE {
    RT_SINGLE = 0,
    RT_RANGE = 1
} RANGETYPE;
typedef struct tagRANGE {
    RANGETYPE idType;
    DWORD dwFirst;
    DWORD dwLast;
} RANGE;
typedef struct tagRANGE *LPRANGE;
DEFINE_GUID(IID_INNTPTransport, 0x0df2c7e5, 0x3435, 0x11d0, 0x81,0xd0, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("0df2c7e5-3435-11d0-81d0-00c04fd85ab4")
INNTPTransport : public IInternetTransport
{
    virtual HRESULT STDMETHODCALLTYPE InitNew(
        LPSTR pszLogFilePath,
        INNTPCallback *pCallback) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandAUTHINFO(
        LPNNTPAUTHINFO pAuthInfo) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandGROUP(
        LPSTR pszGroup) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandLAST(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandNEXT(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandSTAT(
        LPARTICLEID pArticleId) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandARTICLE(
        LPARTICLEID pArticleId) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandHEAD(
        LPARTICLEID pArticleId) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandBODY(
        LPARTICLEID pArticleId) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandPOST(
        LPNNTPMESSAGE pMessage) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandLIST(
        LPSTR pszArgs) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandLISTGROUP(
        LPSTR pszGroup) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandNEWGROUPS(
        SYSTEMTIME *pstLast,
        LPSTR pszDist) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandDATE(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandMODE(
        LPSTR pszMode) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandXHDR(
        LPSTR pszHeader,
        LPRANGE pRange,
        LPSTR pszMessageId) = 0;

    virtual HRESULT STDMETHODCALLTYPE CommandQUIT(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetHeaders(
        LPRANGE pRange) = 0;

    virtual HRESULT STDMETHODCALLTYPE ReleaseResponse(
        LPNNTPRESPONSE pResponse) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(INNTPTransport, 0x0df2c7e5, 0x3435, 0x11d0, 0x81,0xd0, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4)
#endif
#else
typedef struct INNTPTransportVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        INNTPTransport *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        INNTPTransport *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        INNTPTransport *This);

    /*** IInternetTransport methods ***/
    HRESULT (STDMETHODCALLTYPE *GetServerInfo)(
        INNTPTransport *This,
        LPINETSERVER pInetServer);

    IXPTYPE (STDMETHODCALLTYPE *GetIXPType)(
        INNTPTransport *This);

    HRESULT (STDMETHODCALLTYPE *IsState)(
        INNTPTransport *This,
        IXPISSTATE isstate);

    HRESULT (STDMETHODCALLTYPE *InetServerFromAccount)(
        INNTPTransport *This,
        IImnAccount *pAccount,
        LPINETSERVER pInetServer);

    HRESULT (STDMETHODCALLTYPE *Connect)(
        INNTPTransport *This,
        LPINETSERVER pInetServer,
        boolean fAuthenticate,
        boolean fCommandLogging);

    HRESULT (STDMETHODCALLTYPE *HandsOffCallback)(
        INNTPTransport *This);

    HRESULT (STDMETHODCALLTYPE *Disconnect)(
        INNTPTransport *This);

    HRESULT (STDMETHODCALLTYPE *DropConnection)(
        INNTPTransport *This);

    HRESULT (STDMETHODCALLTYPE *GetStatus)(
        INNTPTransport *This,
        IXPSTATUS *pCurrentStatus);

    /*** INNTPTransport methods ***/
    HRESULT (STDMETHODCALLTYPE *InitNew)(
        INNTPTransport *This,
        LPSTR pszLogFilePath,
        INNTPCallback *pCallback);

    HRESULT (STDMETHODCALLTYPE *CommandAUTHINFO)(
        INNTPTransport *This,
        LPNNTPAUTHINFO pAuthInfo);

    HRESULT (STDMETHODCALLTYPE *CommandGROUP)(
        INNTPTransport *This,
        LPSTR pszGroup);

    HRESULT (STDMETHODCALLTYPE *CommandLAST)(
        INNTPTransport *This);

    HRESULT (STDMETHODCALLTYPE *CommandNEXT)(
        INNTPTransport *This);

    HRESULT (STDMETHODCALLTYPE *CommandSTAT)(
        INNTPTransport *This,
        LPARTICLEID pArticleId);

    HRESULT (STDMETHODCALLTYPE *CommandARTICLE)(
        INNTPTransport *This,
        LPARTICLEID pArticleId);

    HRESULT (STDMETHODCALLTYPE *CommandHEAD)(
        INNTPTransport *This,
        LPARTICLEID pArticleId);

    HRESULT (STDMETHODCALLTYPE *CommandBODY)(
        INNTPTransport *This,
        LPARTICLEID pArticleId);

    HRESULT (STDMETHODCALLTYPE *CommandPOST)(
        INNTPTransport *This,
        LPNNTPMESSAGE pMessage);

    HRESULT (STDMETHODCALLTYPE *CommandLIST)(
        INNTPTransport *This,
        LPSTR pszArgs);

    HRESULT (STDMETHODCALLTYPE *CommandLISTGROUP)(
        INNTPTransport *This,
        LPSTR pszGroup);

    HRESULT (STDMETHODCALLTYPE *CommandNEWGROUPS)(
        INNTPTransport *This,
        SYSTEMTIME *pstLast,
        LPSTR pszDist);

    HRESULT (STDMETHODCALLTYPE *CommandDATE)(
        INNTPTransport *This);

    HRESULT (STDMETHODCALLTYPE *CommandMODE)(
        INNTPTransport *This,
        LPSTR pszMode);

    HRESULT (STDMETHODCALLTYPE *CommandXHDR)(
        INNTPTransport *This,
        LPSTR pszHeader,
        LPRANGE pRange,
        LPSTR pszMessageId);

    HRESULT (STDMETHODCALLTYPE *CommandQUIT)(
        INNTPTransport *This);

    HRESULT (STDMETHODCALLTYPE *GetHeaders)(
        INNTPTransport *This,
        LPRANGE pRange);

    HRESULT (STDMETHODCALLTYPE *ReleaseResponse)(
        INNTPTransport *This,
        LPNNTPRESPONSE pResponse);

    END_INTERFACE
} INNTPTransportVtbl;

interface INNTPTransport {
    CONST_VTBL INNTPTransportVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define INNTPTransport_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define INNTPTransport_AddRef(This) (This)->lpVtbl->AddRef(This)
#define INNTPTransport_Release(This) (This)->lpVtbl->Release(This)
/*** IInternetTransport methods ***/
#define INNTPTransport_GetServerInfo(This,pInetServer) (This)->lpVtbl->GetServerInfo(This,pInetServer)
#define INNTPTransport_GetIXPType(This) (This)->lpVtbl->GetIXPType(This)
#define INNTPTransport_IsState(This,isstate) (This)->lpVtbl->IsState(This,isstate)
#define INNTPTransport_InetServerFromAccount(This,pAccount,pInetServer) (This)->lpVtbl->InetServerFromAccount(This,pAccount,pInetServer)
#define INNTPTransport_Connect(This,pInetServer,fAuthenticate,fCommandLogging) (This)->lpVtbl->Connect(This,pInetServer,fAuthenticate,fCommandLogging)
#define INNTPTransport_HandsOffCallback(This) (This)->lpVtbl->HandsOffCallback(This)
#define INNTPTransport_Disconnect(This) (This)->lpVtbl->Disconnect(This)
#define INNTPTransport_DropConnection(This) (This)->lpVtbl->DropConnection(This)
#define INNTPTransport_GetStatus(This,pCurrentStatus) (This)->lpVtbl->GetStatus(This,pCurrentStatus)
/*** INNTPTransport methods ***/
#define INNTPTransport_InitNew(This,pszLogFilePath,pCallback) (This)->lpVtbl->InitNew(This,pszLogFilePath,pCallback)
#define INNTPTransport_CommandAUTHINFO(This,pAuthInfo) (This)->lpVtbl->CommandAUTHINFO(This,pAuthInfo)
#define INNTPTransport_CommandGROUP(This,pszGroup) (This)->lpVtbl->CommandGROUP(This,pszGroup)
#define INNTPTransport_CommandLAST(This) (This)->lpVtbl->CommandLAST(This)
#define INNTPTransport_CommandNEXT(This) (This)->lpVtbl->CommandNEXT(This)
#define INNTPTransport_CommandSTAT(This,pArticleId) (This)->lpVtbl->CommandSTAT(This,pArticleId)
#define INNTPTransport_CommandARTICLE(This,pArticleId) (This)->lpVtbl->CommandARTICLE(This,pArticleId)
#define INNTPTransport_CommandHEAD(This,pArticleId) (This)->lpVtbl->CommandHEAD(This,pArticleId)
#define INNTPTransport_CommandBODY(This,pArticleId) (This)->lpVtbl->CommandBODY(This,pArticleId)
#define INNTPTransport_CommandPOST(This,pMessage) (This)->lpVtbl->CommandPOST(This,pMessage)
#define INNTPTransport_CommandLIST(This,pszArgs) (This)->lpVtbl->CommandLIST(This,pszArgs)
#define INNTPTransport_CommandLISTGROUP(This,pszGroup) (This)->lpVtbl->CommandLISTGROUP(This,pszGroup)
#define INNTPTransport_CommandNEWGROUPS(This,pstLast,pszDist) (This)->lpVtbl->CommandNEWGROUPS(This,pstLast,pszDist)
#define INNTPTransport_CommandDATE(This) (This)->lpVtbl->CommandDATE(This)
#define INNTPTransport_CommandMODE(This,pszMode) (This)->lpVtbl->CommandMODE(This,pszMode)
#define INNTPTransport_CommandXHDR(This,pszHeader,pRange,pszMessageId) (This)->lpVtbl->CommandXHDR(This,pszHeader,pRange,pszMessageId)
#define INNTPTransport_CommandQUIT(This) (This)->lpVtbl->CommandQUIT(This)
#define INNTPTransport_GetHeaders(This,pRange) (This)->lpVtbl->GetHeaders(This,pRange)
#define INNTPTransport_ReleaseResponse(This,pResponse) (This)->lpVtbl->ReleaseResponse(This,pResponse)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT INNTPTransport_QueryInterface(INNTPTransport* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG INNTPTransport_AddRef(INNTPTransport* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG INNTPTransport_Release(INNTPTransport* This) {
    return This->lpVtbl->Release(This);
}
/*** IInternetTransport methods ***/
static FORCEINLINE HRESULT INNTPTransport_GetServerInfo(INNTPTransport* This,LPINETSERVER pInetServer) {
    return This->lpVtbl->GetServerInfo(This,pInetServer);
}
static FORCEINLINE IXPTYPE INNTPTransport_GetIXPType(INNTPTransport* This) {
    return This->lpVtbl->GetIXPType(This);
}
static FORCEINLINE HRESULT INNTPTransport_IsState(INNTPTransport* This,IXPISSTATE isstate) {
    return This->lpVtbl->IsState(This,isstate);
}
static FORCEINLINE HRESULT INNTPTransport_InetServerFromAccount(INNTPTransport* This,IImnAccount *pAccount,LPINETSERVER pInetServer) {
    return This->lpVtbl->InetServerFromAccount(This,pAccount,pInetServer);
}
static FORCEINLINE HRESULT INNTPTransport_Connect(INNTPTransport* This,LPINETSERVER pInetServer,boolean fAuthenticate,boolean fCommandLogging) {
    return This->lpVtbl->Connect(This,pInetServer,fAuthenticate,fCommandLogging);
}
static FORCEINLINE HRESULT INNTPTransport_HandsOffCallback(INNTPTransport* This) {
    return This->lpVtbl->HandsOffCallback(This);
}
static FORCEINLINE HRESULT INNTPTransport_Disconnect(INNTPTransport* This) {
    return This->lpVtbl->Disconnect(This);
}
static FORCEINLINE HRESULT INNTPTransport_DropConnection(INNTPTransport* This) {
    return This->lpVtbl->DropConnection(This);
}
static FORCEINLINE HRESULT INNTPTransport_GetStatus(INNTPTransport* This,IXPSTATUS *pCurrentStatus) {
    return This->lpVtbl->GetStatus(This,pCurrentStatus);
}
/*** INNTPTransport methods ***/
static FORCEINLINE HRESULT INNTPTransport_InitNew(INNTPTransport* This,LPSTR pszLogFilePath,INNTPCallback *pCallback) {
    return This->lpVtbl->InitNew(This,pszLogFilePath,pCallback);
}
static FORCEINLINE HRESULT INNTPTransport_CommandAUTHINFO(INNTPTransport* This,LPNNTPAUTHINFO pAuthInfo) {
    return This->lpVtbl->CommandAUTHINFO(This,pAuthInfo);
}
static FORCEINLINE HRESULT INNTPTransport_CommandGROUP(INNTPTransport* This,LPSTR pszGroup) {
    return This->lpVtbl->CommandGROUP(This,pszGroup);
}
static FORCEINLINE HRESULT INNTPTransport_CommandLAST(INNTPTransport* This) {
    return This->lpVtbl->CommandLAST(This);
}
static FORCEINLINE HRESULT INNTPTransport_CommandNEXT(INNTPTransport* This) {
    return This->lpVtbl->CommandNEXT(This);
}
static FORCEINLINE HRESULT INNTPTransport_CommandSTAT(INNTPTransport* This,LPARTICLEID pArticleId) {
    return This->lpVtbl->CommandSTAT(This,pArticleId);
}
static FORCEINLINE HRESULT INNTPTransport_CommandARTICLE(INNTPTransport* This,LPARTICLEID pArticleId) {
    return This->lpVtbl->CommandARTICLE(This,pArticleId);
}
static FORCEINLINE HRESULT INNTPTransport_CommandHEAD(INNTPTransport* This,LPARTICLEID pArticleId) {
    return This->lpVtbl->CommandHEAD(This,pArticleId);
}
static FORCEINLINE HRESULT INNTPTransport_CommandBODY(INNTPTransport* This,LPARTICLEID pArticleId) {
    return This->lpVtbl->CommandBODY(This,pArticleId);
}
static FORCEINLINE HRESULT INNTPTransport_CommandPOST(INNTPTransport* This,LPNNTPMESSAGE pMessage) {
    return This->lpVtbl->CommandPOST(This,pMessage);
}
static FORCEINLINE HRESULT INNTPTransport_CommandLIST(INNTPTransport* This,LPSTR pszArgs) {
    return This->lpVtbl->CommandLIST(This,pszArgs);
}
static FORCEINLINE HRESULT INNTPTransport_CommandLISTGROUP(INNTPTransport* This,LPSTR pszGroup) {
    return This->lpVtbl->CommandLISTGROUP(This,pszGroup);
}
static FORCEINLINE HRESULT INNTPTransport_CommandNEWGROUPS(INNTPTransport* This,SYSTEMTIME *pstLast,LPSTR pszDist) {
    return This->lpVtbl->CommandNEWGROUPS(This,pstLast,pszDist);
}
static FORCEINLINE HRESULT INNTPTransport_CommandDATE(INNTPTransport* This) {
    return This->lpVtbl->CommandDATE(This);
}
static FORCEINLINE HRESULT INNTPTransport_CommandMODE(INNTPTransport* This,LPSTR pszMode) {
    return This->lpVtbl->CommandMODE(This,pszMode);
}
static FORCEINLINE HRESULT INNTPTransport_CommandXHDR(INNTPTransport* This,LPSTR pszHeader,LPRANGE pRange,LPSTR pszMessageId) {
    return This->lpVtbl->CommandXHDR(This,pszHeader,pRange,pszMessageId);
}
static FORCEINLINE HRESULT INNTPTransport_CommandQUIT(INNTPTransport* This) {
    return This->lpVtbl->CommandQUIT(This);
}
static FORCEINLINE HRESULT INNTPTransport_GetHeaders(INNTPTransport* This,LPRANGE pRange) {
    return This->lpVtbl->GetHeaders(This,pRange);
}
static FORCEINLINE HRESULT INNTPTransport_ReleaseResponse(INNTPTransport* This,LPNNTPRESPONSE pResponse) {
    return This->lpVtbl->ReleaseResponse(This,pResponse);
}
#endif
#endif

#endif


#endif  /* __INNTPTransport_INTERFACE_DEFINED__ */

/*****************************************************************************
 * INNTPTransport2 interface
 */
#ifndef __INNTPTransport2_INTERFACE_DEFINED__
#define __INNTPTransport2_INTERFACE_DEFINED__

DEFINE_GUID(IID_INNTPTransport2, 0x0df2c7ed, 0x3435, 0x11d0, 0x81,0xd0, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("0df2c7ed-3435-11d0-81d0-00c04fd85ab4")
INNTPTransport2 : public INNTPTransport
{
    virtual HRESULT STDMETHODCALLTYPE SetWindow(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE ResetWindow(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(INNTPTransport2, 0x0df2c7ed, 0x3435, 0x11d0, 0x81,0xd0, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4)
#endif
#else
typedef struct INNTPTransport2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        INNTPTransport2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        INNTPTransport2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        INNTPTransport2 *This);

    /*** IInternetTransport methods ***/
    HRESULT (STDMETHODCALLTYPE *GetServerInfo)(
        INNTPTransport2 *This,
        LPINETSERVER pInetServer);

    IXPTYPE (STDMETHODCALLTYPE *GetIXPType)(
        INNTPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *IsState)(
        INNTPTransport2 *This,
        IXPISSTATE isstate);

    HRESULT (STDMETHODCALLTYPE *InetServerFromAccount)(
        INNTPTransport2 *This,
        IImnAccount *pAccount,
        LPINETSERVER pInetServer);

    HRESULT (STDMETHODCALLTYPE *Connect)(
        INNTPTransport2 *This,
        LPINETSERVER pInetServer,
        boolean fAuthenticate,
        boolean fCommandLogging);

    HRESULT (STDMETHODCALLTYPE *HandsOffCallback)(
        INNTPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *Disconnect)(
        INNTPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *DropConnection)(
        INNTPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *GetStatus)(
        INNTPTransport2 *This,
        IXPSTATUS *pCurrentStatus);

    /*** INNTPTransport methods ***/
    HRESULT (STDMETHODCALLTYPE *InitNew)(
        INNTPTransport2 *This,
        LPSTR pszLogFilePath,
        INNTPCallback *pCallback);

    HRESULT (STDMETHODCALLTYPE *CommandAUTHINFO)(
        INNTPTransport2 *This,
        LPNNTPAUTHINFO pAuthInfo);

    HRESULT (STDMETHODCALLTYPE *CommandGROUP)(
        INNTPTransport2 *This,
        LPSTR pszGroup);

    HRESULT (STDMETHODCALLTYPE *CommandLAST)(
        INNTPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *CommandNEXT)(
        INNTPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *CommandSTAT)(
        INNTPTransport2 *This,
        LPARTICLEID pArticleId);

    HRESULT (STDMETHODCALLTYPE *CommandARTICLE)(
        INNTPTransport2 *This,
        LPARTICLEID pArticleId);

    HRESULT (STDMETHODCALLTYPE *CommandHEAD)(
        INNTPTransport2 *This,
        LPARTICLEID pArticleId);

    HRESULT (STDMETHODCALLTYPE *CommandBODY)(
        INNTPTransport2 *This,
        LPARTICLEID pArticleId);

    HRESULT (STDMETHODCALLTYPE *CommandPOST)(
        INNTPTransport2 *This,
        LPNNTPMESSAGE pMessage);

    HRESULT (STDMETHODCALLTYPE *CommandLIST)(
        INNTPTransport2 *This,
        LPSTR pszArgs);

    HRESULT (STDMETHODCALLTYPE *CommandLISTGROUP)(
        INNTPTransport2 *This,
        LPSTR pszGroup);

    HRESULT (STDMETHODCALLTYPE *CommandNEWGROUPS)(
        INNTPTransport2 *This,
        SYSTEMTIME *pstLast,
        LPSTR pszDist);

    HRESULT (STDMETHODCALLTYPE *CommandDATE)(
        INNTPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *CommandMODE)(
        INNTPTransport2 *This,
        LPSTR pszMode);

    HRESULT (STDMETHODCALLTYPE *CommandXHDR)(
        INNTPTransport2 *This,
        LPSTR pszHeader,
        LPRANGE pRange,
        LPSTR pszMessageId);

    HRESULT (STDMETHODCALLTYPE *CommandQUIT)(
        INNTPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *GetHeaders)(
        INNTPTransport2 *This,
        LPRANGE pRange);

    HRESULT (STDMETHODCALLTYPE *ReleaseResponse)(
        INNTPTransport2 *This,
        LPNNTPRESPONSE pResponse);

    /*** INNTPTransport2 methods ***/
    HRESULT (STDMETHODCALLTYPE *SetWindow)(
        INNTPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *ResetWindow)(
        INNTPTransport2 *This);

    END_INTERFACE
} INNTPTransport2Vtbl;

interface INNTPTransport2 {
    CONST_VTBL INNTPTransport2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define INNTPTransport2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define INNTPTransport2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define INNTPTransport2_Release(This) (This)->lpVtbl->Release(This)
/*** IInternetTransport methods ***/
#define INNTPTransport2_GetServerInfo(This,pInetServer) (This)->lpVtbl->GetServerInfo(This,pInetServer)
#define INNTPTransport2_GetIXPType(This) (This)->lpVtbl->GetIXPType(This)
#define INNTPTransport2_IsState(This,isstate) (This)->lpVtbl->IsState(This,isstate)
#define INNTPTransport2_InetServerFromAccount(This,pAccount,pInetServer) (This)->lpVtbl->InetServerFromAccount(This,pAccount,pInetServer)
#define INNTPTransport2_Connect(This,pInetServer,fAuthenticate,fCommandLogging) (This)->lpVtbl->Connect(This,pInetServer,fAuthenticate,fCommandLogging)
#define INNTPTransport2_HandsOffCallback(This) (This)->lpVtbl->HandsOffCallback(This)
#define INNTPTransport2_Disconnect(This) (This)->lpVtbl->Disconnect(This)
#define INNTPTransport2_DropConnection(This) (This)->lpVtbl->DropConnection(This)
#define INNTPTransport2_GetStatus(This,pCurrentStatus) (This)->lpVtbl->GetStatus(This,pCurrentStatus)
/*** INNTPTransport methods ***/
#define INNTPTransport2_InitNew(This,pszLogFilePath,pCallback) (This)->lpVtbl->InitNew(This,pszLogFilePath,pCallback)
#define INNTPTransport2_CommandAUTHINFO(This,pAuthInfo) (This)->lpVtbl->CommandAUTHINFO(This,pAuthInfo)
#define INNTPTransport2_CommandGROUP(This,pszGroup) (This)->lpVtbl->CommandGROUP(This,pszGroup)
#define INNTPTransport2_CommandLAST(This) (This)->lpVtbl->CommandLAST(This)
#define INNTPTransport2_CommandNEXT(This) (This)->lpVtbl->CommandNEXT(This)
#define INNTPTransport2_CommandSTAT(This,pArticleId) (This)->lpVtbl->CommandSTAT(This,pArticleId)
#define INNTPTransport2_CommandARTICLE(This,pArticleId) (This)->lpVtbl->CommandARTICLE(This,pArticleId)
#define INNTPTransport2_CommandHEAD(This,pArticleId) (This)->lpVtbl->CommandHEAD(This,pArticleId)
#define INNTPTransport2_CommandBODY(This,pArticleId) (This)->lpVtbl->CommandBODY(This,pArticleId)
#define INNTPTransport2_CommandPOST(This,pMessage) (This)->lpVtbl->CommandPOST(This,pMessage)
#define INNTPTransport2_CommandLIST(This,pszArgs) (This)->lpVtbl->CommandLIST(This,pszArgs)
#define INNTPTransport2_CommandLISTGROUP(This,pszGroup) (This)->lpVtbl->CommandLISTGROUP(This,pszGroup)
#define INNTPTransport2_CommandNEWGROUPS(This,pstLast,pszDist) (This)->lpVtbl->CommandNEWGROUPS(This,pstLast,pszDist)
#define INNTPTransport2_CommandDATE(This) (This)->lpVtbl->CommandDATE(This)
#define INNTPTransport2_CommandMODE(This,pszMode) (This)->lpVtbl->CommandMODE(This,pszMode)
#define INNTPTransport2_CommandXHDR(This,pszHeader,pRange,pszMessageId) (This)->lpVtbl->CommandXHDR(This,pszHeader,pRange,pszMessageId)
#define INNTPTransport2_CommandQUIT(This) (This)->lpVtbl->CommandQUIT(This)
#define INNTPTransport2_GetHeaders(This,pRange) (This)->lpVtbl->GetHeaders(This,pRange)
#define INNTPTransport2_ReleaseResponse(This,pResponse) (This)->lpVtbl->ReleaseResponse(This,pResponse)
/*** INNTPTransport2 methods ***/
#define INNTPTransport2_SetWindow(This) (This)->lpVtbl->SetWindow(This)
#define INNTPTransport2_ResetWindow(This) (This)->lpVtbl->ResetWindow(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT INNTPTransport2_QueryInterface(INNTPTransport2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG INNTPTransport2_AddRef(INNTPTransport2* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG INNTPTransport2_Release(INNTPTransport2* This) {
    return This->lpVtbl->Release(This);
}
/*** IInternetTransport methods ***/
static FORCEINLINE HRESULT INNTPTransport2_GetServerInfo(INNTPTransport2* This,LPINETSERVER pInetServer) {
    return This->lpVtbl->GetServerInfo(This,pInetServer);
}
static FORCEINLINE IXPTYPE INNTPTransport2_GetIXPType(INNTPTransport2* This) {
    return This->lpVtbl->GetIXPType(This);
}
static FORCEINLINE HRESULT INNTPTransport2_IsState(INNTPTransport2* This,IXPISSTATE isstate) {
    return This->lpVtbl->IsState(This,isstate);
}
static FORCEINLINE HRESULT INNTPTransport2_InetServerFromAccount(INNTPTransport2* This,IImnAccount *pAccount,LPINETSERVER pInetServer) {
    return This->lpVtbl->InetServerFromAccount(This,pAccount,pInetServer);
}
static FORCEINLINE HRESULT INNTPTransport2_Connect(INNTPTransport2* This,LPINETSERVER pInetServer,boolean fAuthenticate,boolean fCommandLogging) {
    return This->lpVtbl->Connect(This,pInetServer,fAuthenticate,fCommandLogging);
}
static FORCEINLINE HRESULT INNTPTransport2_HandsOffCallback(INNTPTransport2* This) {
    return This->lpVtbl->HandsOffCallback(This);
}
static FORCEINLINE HRESULT INNTPTransport2_Disconnect(INNTPTransport2* This) {
    return This->lpVtbl->Disconnect(This);
}
static FORCEINLINE HRESULT INNTPTransport2_DropConnection(INNTPTransport2* This) {
    return This->lpVtbl->DropConnection(This);
}
static FORCEINLINE HRESULT INNTPTransport2_GetStatus(INNTPTransport2* This,IXPSTATUS *pCurrentStatus) {
    return This->lpVtbl->GetStatus(This,pCurrentStatus);
}
/*** INNTPTransport methods ***/
static FORCEINLINE HRESULT INNTPTransport2_InitNew(INNTPTransport2* This,LPSTR pszLogFilePath,INNTPCallback *pCallback) {
    return This->lpVtbl->InitNew(This,pszLogFilePath,pCallback);
}
static FORCEINLINE HRESULT INNTPTransport2_CommandAUTHINFO(INNTPTransport2* This,LPNNTPAUTHINFO pAuthInfo) {
    return This->lpVtbl->CommandAUTHINFO(This,pAuthInfo);
}
static FORCEINLINE HRESULT INNTPTransport2_CommandGROUP(INNTPTransport2* This,LPSTR pszGroup) {
    return This->lpVtbl->CommandGROUP(This,pszGroup);
}
static FORCEINLINE HRESULT INNTPTransport2_CommandLAST(INNTPTransport2* This) {
    return This->lpVtbl->CommandLAST(This);
}
static FORCEINLINE HRESULT INNTPTransport2_CommandNEXT(INNTPTransport2* This) {
    return This->lpVtbl->CommandNEXT(This);
}
static FORCEINLINE HRESULT INNTPTransport2_CommandSTAT(INNTPTransport2* This,LPARTICLEID pArticleId) {
    return This->lpVtbl->CommandSTAT(This,pArticleId);
}
static FORCEINLINE HRESULT INNTPTransport2_CommandARTICLE(INNTPTransport2* This,LPARTICLEID pArticleId) {
    return This->lpVtbl->CommandARTICLE(This,pArticleId);
}
static FORCEINLINE HRESULT INNTPTransport2_CommandHEAD(INNTPTransport2* This,LPARTICLEID pArticleId) {
    return This->lpVtbl->CommandHEAD(This,pArticleId);
}
static FORCEINLINE HRESULT INNTPTransport2_CommandBODY(INNTPTransport2* This,LPARTICLEID pArticleId) {
    return This->lpVtbl->CommandBODY(This,pArticleId);
}
static FORCEINLINE HRESULT INNTPTransport2_CommandPOST(INNTPTransport2* This,LPNNTPMESSAGE pMessage) {
    return This->lpVtbl->CommandPOST(This,pMessage);
}
static FORCEINLINE HRESULT INNTPTransport2_CommandLIST(INNTPTransport2* This,LPSTR pszArgs) {
    return This->lpVtbl->CommandLIST(This,pszArgs);
}
static FORCEINLINE HRESULT INNTPTransport2_CommandLISTGROUP(INNTPTransport2* This,LPSTR pszGroup) {
    return This->lpVtbl->CommandLISTGROUP(This,pszGroup);
}
static FORCEINLINE HRESULT INNTPTransport2_CommandNEWGROUPS(INNTPTransport2* This,SYSTEMTIME *pstLast,LPSTR pszDist) {
    return This->lpVtbl->CommandNEWGROUPS(This,pstLast,pszDist);
}
static FORCEINLINE HRESULT INNTPTransport2_CommandDATE(INNTPTransport2* This) {
    return This->lpVtbl->CommandDATE(This);
}
static FORCEINLINE HRESULT INNTPTransport2_CommandMODE(INNTPTransport2* This,LPSTR pszMode) {
    return This->lpVtbl->CommandMODE(This,pszMode);
}
static FORCEINLINE HRESULT INNTPTransport2_CommandXHDR(INNTPTransport2* This,LPSTR pszHeader,LPRANGE pRange,LPSTR pszMessageId) {
    return This->lpVtbl->CommandXHDR(This,pszHeader,pRange,pszMessageId);
}
static FORCEINLINE HRESULT INNTPTransport2_CommandQUIT(INNTPTransport2* This) {
    return This->lpVtbl->CommandQUIT(This);
}
static FORCEINLINE HRESULT INNTPTransport2_GetHeaders(INNTPTransport2* This,LPRANGE pRange) {
    return This->lpVtbl->GetHeaders(This,pRange);
}
static FORCEINLINE HRESULT INNTPTransport2_ReleaseResponse(INNTPTransport2* This,LPNNTPRESPONSE pResponse) {
    return This->lpVtbl->ReleaseResponse(This,pResponse);
}
/*** INNTPTransport2 methods ***/
static FORCEINLINE HRESULT INNTPTransport2_SetWindow(INNTPTransport2* This) {
    return This->lpVtbl->SetWindow(This);
}
static FORCEINLINE HRESULT INNTPTransport2_ResetWindow(INNTPTransport2* This) {
    return This->lpVtbl->ResetWindow(This);
}
#endif
#endif

#endif


#endif  /* __INNTPTransport2_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IRASCallback interface
 */
#ifndef __IRASCallback_INTERFACE_DEFINED__
#define __IRASCallback_INTERFACE_DEFINED__

typedef struct tagIXPRASLOGON {
    CHAR szConnectoid[256];
    CHAR szUserName[256];
    CHAR szPassword[256];
    CHAR szDomain[256];
    CHAR szPhoneNumber[128];
    BOOL fSavePassword;
} IXPRASLOGON;
typedef struct tagIXPRASLOGON *LPIXPRASLOGON;
#ifndef RASCONNSTATE
typedef DWORD RASCONNSTATE;
#endif
DEFINE_GUID(IID_IRASCallback, 0x36d88911, 0x3cd6, 0x11d0, 0x81,0xdf, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("36d88911-3cd6-11d0-81df-00c04fd85ab4")
IRASCallback : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE OnReconnect(
        LPSTR pszCurrentConnectoid,
        LPSTR pszNewConnectoid,
        IRASTransport *pTransport) = 0;

    virtual HRESULT STDMETHODCALLTYPE OnLogonPrompt(
        LPIXPRASLOGON pRasLogon,
        IRASTransport *pTransport) = 0;

    virtual HRESULT STDMETHODCALLTYPE OnRasDialStatus(
        RASCONNSTATE rasconnstate,
        DWORD dwError,
        IRASTransport *pTransport) = 0;

    virtual HRESULT STDMETHODCALLTYPE OnDisconnect(
        LPSTR pszCurrentConnectoid,
        boolean fConnectionOwner,
        IRASTransport *pTransport) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IRASCallback, 0x36d88911, 0x3cd6, 0x11d0, 0x81,0xdf, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4)
#endif
#else
typedef struct IRASCallbackVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IRASCallback *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IRASCallback *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IRASCallback *This);

    /*** IRASCallback methods ***/
    HRESULT (STDMETHODCALLTYPE *OnReconnect)(
        IRASCallback *This,
        LPSTR pszCurrentConnectoid,
        LPSTR pszNewConnectoid,
        IRASTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnLogonPrompt)(
        IRASCallback *This,
        LPIXPRASLOGON pRasLogon,
        IRASTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnRasDialStatus)(
        IRASCallback *This,
        RASCONNSTATE rasconnstate,
        DWORD dwError,
        IRASTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnDisconnect)(
        IRASCallback *This,
        LPSTR pszCurrentConnectoid,
        boolean fConnectionOwner,
        IRASTransport *pTransport);

    END_INTERFACE
} IRASCallbackVtbl;

interface IRASCallback {
    CONST_VTBL IRASCallbackVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IRASCallback_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IRASCallback_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IRASCallback_Release(This) (This)->lpVtbl->Release(This)
/*** IRASCallback methods ***/
#define IRASCallback_OnReconnect(This,pszCurrentConnectoid,pszNewConnectoid,pTransport) (This)->lpVtbl->OnReconnect(This,pszCurrentConnectoid,pszNewConnectoid,pTransport)
#define IRASCallback_OnLogonPrompt(This,pRasLogon,pTransport) (This)->lpVtbl->OnLogonPrompt(This,pRasLogon,pTransport)
#define IRASCallback_OnRasDialStatus(This,rasconnstate,dwError,pTransport) (This)->lpVtbl->OnRasDialStatus(This,rasconnstate,dwError,pTransport)
#define IRASCallback_OnDisconnect(This,pszCurrentConnectoid,fConnectionOwner,pTransport) (This)->lpVtbl->OnDisconnect(This,pszCurrentConnectoid,fConnectionOwner,pTransport)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IRASCallback_QueryInterface(IRASCallback* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IRASCallback_AddRef(IRASCallback* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IRASCallback_Release(IRASCallback* This) {
    return This->lpVtbl->Release(This);
}
/*** IRASCallback methods ***/
static FORCEINLINE HRESULT IRASCallback_OnReconnect(IRASCallback* This,LPSTR pszCurrentConnectoid,LPSTR pszNewConnectoid,IRASTransport *pTransport) {
    return This->lpVtbl->OnReconnect(This,pszCurrentConnectoid,pszNewConnectoid,pTransport);
}
static FORCEINLINE HRESULT IRASCallback_OnLogonPrompt(IRASCallback* This,LPIXPRASLOGON pRasLogon,IRASTransport *pTransport) {
    return This->lpVtbl->OnLogonPrompt(This,pRasLogon,pTransport);
}
static FORCEINLINE HRESULT IRASCallback_OnRasDialStatus(IRASCallback* This,RASCONNSTATE rasconnstate,DWORD dwError,IRASTransport *pTransport) {
    return This->lpVtbl->OnRasDialStatus(This,rasconnstate,dwError,pTransport);
}
static FORCEINLINE HRESULT IRASCallback_OnDisconnect(IRASCallback* This,LPSTR pszCurrentConnectoid,boolean fConnectionOwner,IRASTransport *pTransport) {
    return This->lpVtbl->OnDisconnect(This,pszCurrentConnectoid,fConnectionOwner,pTransport);
}
#endif
#endif

#endif


#endif  /* __IRASCallback_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IRASTransport interface
 */
#ifndef __IRASTransport_INTERFACE_DEFINED__
#define __IRASTransport_INTERFACE_DEFINED__

DEFINE_GUID(IID_IRASTransport, 0x8a950001, 0x3ccf, 0x11d0, 0x81,0xdf, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("8a950001-3ccf-11d0-81df-00c04fd85ab4")
IRASTransport : public IInternetTransport
{
    virtual HRESULT STDMETHODCALLTYPE InitNew(
        IRASCallback *pCallback) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetCurrentConnectoid(
        LPSTR pszConnectoid,
        ULONG cchMax) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetRasErrorString(
        UINT uRasErrorValue,
        LPSTR pszErrorString,
        ULONG cchMax,
        DWORD *pdwRASResult) = 0;

    virtual HRESULT STDMETHODCALLTYPE FillConnectoidCombo(
        HWND hwndComboBox,
        boolean fUpdateOnly,
        DWORD *pdwRASResult) = 0;

    virtual HRESULT STDMETHODCALLTYPE EditConnectoid(
        HWND hwndParent,
        LPSTR pszConnectoid,
        DWORD *pdwRASResult) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateConnectoid(
        HWND hwndParent,
        DWORD *pdwRASResult) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IRASTransport, 0x8a950001, 0x3ccf, 0x11d0, 0x81,0xdf, 0x00,0xc0,0x4f,0xd8,0x5a,0xb4)
#endif
#else
typedef struct IRASTransportVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IRASTransport *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IRASTransport *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IRASTransport *This);

    /*** IInternetTransport methods ***/
    HRESULT (STDMETHODCALLTYPE *GetServerInfo)(
        IRASTransport *This,
        LPINETSERVER pInetServer);

    IXPTYPE (STDMETHODCALLTYPE *GetIXPType)(
        IRASTransport *This);

    HRESULT (STDMETHODCALLTYPE *IsState)(
        IRASTransport *This,
        IXPISSTATE isstate);

    HRESULT (STDMETHODCALLTYPE *InetServerFromAccount)(
        IRASTransport *This,
        IImnAccount *pAccount,
        LPINETSERVER pInetServer);

    HRESULT (STDMETHODCALLTYPE *Connect)(
        IRASTransport *This,
        LPINETSERVER pInetServer,
        boolean fAuthenticate,
        boolean fCommandLogging);

    HRESULT (STDMETHODCALLTYPE *HandsOffCallback)(
        IRASTransport *This);

    HRESULT (STDMETHODCALLTYPE *Disconnect)(
        IRASTransport *This);

    HRESULT (STDMETHODCALLTYPE *DropConnection)(
        IRASTransport *This);

    HRESULT (STDMETHODCALLTYPE *GetStatus)(
        IRASTransport *This,
        IXPSTATUS *pCurrentStatus);

    /*** IRASTransport methods ***/
    HRESULT (STDMETHODCALLTYPE *InitNew)(
        IRASTransport *This,
        IRASCallback *pCallback);

    HRESULT (STDMETHODCALLTYPE *GetCurrentConnectoid)(
        IRASTransport *This,
        LPSTR pszConnectoid,
        ULONG cchMax);

    HRESULT (STDMETHODCALLTYPE *GetRasErrorString)(
        IRASTransport *This,
        UINT uRasErrorValue,
        LPSTR pszErrorString,
        ULONG cchMax,
        DWORD *pdwRASResult);

    HRESULT (STDMETHODCALLTYPE *FillConnectoidCombo)(
        IRASTransport *This,
        HWND hwndComboBox,
        boolean fUpdateOnly,
        DWORD *pdwRASResult);

    HRESULT (STDMETHODCALLTYPE *EditConnectoid)(
        IRASTransport *This,
        HWND hwndParent,
        LPSTR pszConnectoid,
        DWORD *pdwRASResult);

    HRESULT (STDMETHODCALLTYPE *CreateConnectoid)(
        IRASTransport *This,
        HWND hwndParent,
        DWORD *pdwRASResult);

    END_INTERFACE
} IRASTransportVtbl;

interface IRASTransport {
    CONST_VTBL IRASTransportVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IRASTransport_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IRASTransport_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IRASTransport_Release(This) (This)->lpVtbl->Release(This)
/*** IInternetTransport methods ***/
#define IRASTransport_GetServerInfo(This,pInetServer) (This)->lpVtbl->GetServerInfo(This,pInetServer)
#define IRASTransport_GetIXPType(This) (This)->lpVtbl->GetIXPType(This)
#define IRASTransport_IsState(This,isstate) (This)->lpVtbl->IsState(This,isstate)
#define IRASTransport_InetServerFromAccount(This,pAccount,pInetServer) (This)->lpVtbl->InetServerFromAccount(This,pAccount,pInetServer)
#define IRASTransport_Connect(This,pInetServer,fAuthenticate,fCommandLogging) (This)->lpVtbl->Connect(This,pInetServer,fAuthenticate,fCommandLogging)
#define IRASTransport_HandsOffCallback(This) (This)->lpVtbl->HandsOffCallback(This)
#define IRASTransport_Disconnect(This) (This)->lpVtbl->Disconnect(This)
#define IRASTransport_DropConnection(This) (This)->lpVtbl->DropConnection(This)
#define IRASTransport_GetStatus(This,pCurrentStatus) (This)->lpVtbl->GetStatus(This,pCurrentStatus)
/*** IRASTransport methods ***/
#define IRASTransport_InitNew(This,pCallback) (This)->lpVtbl->InitNew(This,pCallback)
#define IRASTransport_GetCurrentConnectoid(This,pszConnectoid,cchMax) (This)->lpVtbl->GetCurrentConnectoid(This,pszConnectoid,cchMax)
#define IRASTransport_GetRasErrorString(This,uRasErrorValue,pszErrorString,cchMax,pdwRASResult) (This)->lpVtbl->GetRasErrorString(This,uRasErrorValue,pszErrorString,cchMax,pdwRASResult)
#define IRASTransport_FillConnectoidCombo(This,hwndComboBox,fUpdateOnly,pdwRASResult) (This)->lpVtbl->FillConnectoidCombo(This,hwndComboBox,fUpdateOnly,pdwRASResult)
#define IRASTransport_EditConnectoid(This,hwndParent,pszConnectoid,pdwRASResult) (This)->lpVtbl->EditConnectoid(This,hwndParent,pszConnectoid,pdwRASResult)
#define IRASTransport_CreateConnectoid(This,hwndParent,pdwRASResult) (This)->lpVtbl->CreateConnectoid(This,hwndParent,pdwRASResult)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IRASTransport_QueryInterface(IRASTransport* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IRASTransport_AddRef(IRASTransport* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IRASTransport_Release(IRASTransport* This) {
    return This->lpVtbl->Release(This);
}
/*** IInternetTransport methods ***/
static FORCEINLINE HRESULT IRASTransport_GetServerInfo(IRASTransport* This,LPINETSERVER pInetServer) {
    return This->lpVtbl->GetServerInfo(This,pInetServer);
}
static FORCEINLINE IXPTYPE IRASTransport_GetIXPType(IRASTransport* This) {
    return This->lpVtbl->GetIXPType(This);
}
static FORCEINLINE HRESULT IRASTransport_IsState(IRASTransport* This,IXPISSTATE isstate) {
    return This->lpVtbl->IsState(This,isstate);
}
static FORCEINLINE HRESULT IRASTransport_InetServerFromAccount(IRASTransport* This,IImnAccount *pAccount,LPINETSERVER pInetServer) {
    return This->lpVtbl->InetServerFromAccount(This,pAccount,pInetServer);
}
static FORCEINLINE HRESULT IRASTransport_Connect(IRASTransport* This,LPINETSERVER pInetServer,boolean fAuthenticate,boolean fCommandLogging) {
    return This->lpVtbl->Connect(This,pInetServer,fAuthenticate,fCommandLogging);
}
static FORCEINLINE HRESULT IRASTransport_HandsOffCallback(IRASTransport* This) {
    return This->lpVtbl->HandsOffCallback(This);
}
static FORCEINLINE HRESULT IRASTransport_Disconnect(IRASTransport* This) {
    return This->lpVtbl->Disconnect(This);
}
static FORCEINLINE HRESULT IRASTransport_DropConnection(IRASTransport* This) {
    return This->lpVtbl->DropConnection(This);
}
static FORCEINLINE HRESULT IRASTransport_GetStatus(IRASTransport* This,IXPSTATUS *pCurrentStatus) {
    return This->lpVtbl->GetStatus(This,pCurrentStatus);
}
/*** IRASTransport methods ***/
static FORCEINLINE HRESULT IRASTransport_InitNew(IRASTransport* This,IRASCallback *pCallback) {
    return This->lpVtbl->InitNew(This,pCallback);
}
static FORCEINLINE HRESULT IRASTransport_GetCurrentConnectoid(IRASTransport* This,LPSTR pszConnectoid,ULONG cchMax) {
    return This->lpVtbl->GetCurrentConnectoid(This,pszConnectoid,cchMax);
}
static FORCEINLINE HRESULT IRASTransport_GetRasErrorString(IRASTransport* This,UINT uRasErrorValue,LPSTR pszErrorString,ULONG cchMax,DWORD *pdwRASResult) {
    return This->lpVtbl->GetRasErrorString(This,uRasErrorValue,pszErrorString,cchMax,pdwRASResult);
}
static FORCEINLINE HRESULT IRASTransport_FillConnectoidCombo(IRASTransport* This,HWND hwndComboBox,boolean fUpdateOnly,DWORD *pdwRASResult) {
    return This->lpVtbl->FillConnectoidCombo(This,hwndComboBox,fUpdateOnly,pdwRASResult);
}
static FORCEINLINE HRESULT IRASTransport_EditConnectoid(IRASTransport* This,HWND hwndParent,LPSTR pszConnectoid,DWORD *pdwRASResult) {
    return This->lpVtbl->EditConnectoid(This,hwndParent,pszConnectoid,pdwRASResult);
}
static FORCEINLINE HRESULT IRASTransport_CreateConnectoid(IRASTransport* This,HWND hwndParent,DWORD *pdwRASResult) {
    return This->lpVtbl->CreateConnectoid(This,hwndParent,pdwRASResult);
}
#endif
#endif

#endif


#endif  /* __IRASTransport_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IRangeList interface
 */
#ifndef __IRangeList_INTERFACE_DEFINED__
#define __IRangeList_INTERFACE_DEFINED__

#define RL_RANGE_ERROR ((ULONG)-1)

#define RL_LAST_MESSAGE ((ULONG)-1)

DEFINE_GUID(IID_IRangeList, 0x8c438160, 0x4ef6, 0x11d0, 0x87,0x4f, 0x00,0xaa,0x00,0x53,0x0e,0xe9);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("8c438160-4ef6-11d0-874f-00aa00530ee9")
IRangeList : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE Clear(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE IsInRange(
        const ULONG value) = 0;

    virtual HRESULT STDMETHODCALLTYPE Min(
        ULONG *pulMin) = 0;

    virtual HRESULT STDMETHODCALLTYPE Max(
        ULONG *pulMax) = 0;

    virtual HRESULT STDMETHODCALLTYPE Save(
        byte **ppbDestination,
        ULONG *pulSizeOfDestination) = 0;

    virtual HRESULT STDMETHODCALLTYPE Load(
        byte *pbSource,
        const ULONG ulSizeOfSource) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddRange(
        const ULONG low,
        const ULONG high) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddSingleValue(
        const ULONG value) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddRangeList(
        const IRangeList *prl) = 0;

    virtual HRESULT STDMETHODCALLTYPE DeleteRange(
        const ULONG low,
        const ULONG high) = 0;

    virtual HRESULT STDMETHODCALLTYPE DeleteSingleValue(
        const ULONG value) = 0;

    virtual HRESULT STDMETHODCALLTYPE DeleteRangeList(
        const IRangeList *prl) = 0;

    virtual HRESULT STDMETHODCALLTYPE MinOfRange(
        const ULONG value,
        ULONG *pulMinOfRange) = 0;

    virtual HRESULT STDMETHODCALLTYPE MaxOfRange(
        const ULONG value,
        ULONG *pulMaxOfRange) = 0;

    virtual HRESULT STDMETHODCALLTYPE RangeToIMAPString(
        LPSTR *ppszDestination,
        LPDWORD pdwLengthOfDestination) = 0;

    virtual HRESULT STDMETHODCALLTYPE Next(
        const ULONG current,
        ULONG *pulNext) = 0;

    virtual HRESULT STDMETHODCALLTYPE Prev(
        const ULONG current,
        ULONG *pulPrev) = 0;

    virtual HRESULT STDMETHODCALLTYPE Cardinality(
        ULONG *pulCardinality) = 0;

    virtual HRESULT STDMETHODCALLTYPE CardinalityFrom(
        const ULONG ulStartPoint,
        ULONG *pulCardinalityFrom) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IRangeList, 0x8c438160, 0x4ef6, 0x11d0, 0x87,0x4f, 0x00,0xaa,0x00,0x53,0x0e,0xe9)
#endif
#else
typedef struct IRangeListVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IRangeList *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IRangeList *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IRangeList *This);

    /*** IRangeList methods ***/
    HRESULT (STDMETHODCALLTYPE *Clear)(
        IRangeList *This);

    HRESULT (STDMETHODCALLTYPE *IsInRange)(
        IRangeList *This,
        const ULONG value);

    HRESULT (STDMETHODCALLTYPE *Min)(
        IRangeList *This,
        ULONG *pulMin);

    HRESULT (STDMETHODCALLTYPE *Max)(
        IRangeList *This,
        ULONG *pulMax);

    HRESULT (STDMETHODCALLTYPE *Save)(
        IRangeList *This,
        byte **ppbDestination,
        ULONG *pulSizeOfDestination);

    HRESULT (STDMETHODCALLTYPE *Load)(
        IRangeList *This,
        byte *pbSource,
        const ULONG ulSizeOfSource);

    HRESULT (STDMETHODCALLTYPE *AddRange)(
        IRangeList *This,
        const ULONG low,
        const ULONG high);

    HRESULT (STDMETHODCALLTYPE *AddSingleValue)(
        IRangeList *This,
        const ULONG value);

    HRESULT (STDMETHODCALLTYPE *AddRangeList)(
        IRangeList *This,
        const IRangeList *prl);

    HRESULT (STDMETHODCALLTYPE *DeleteRange)(
        IRangeList *This,
        const ULONG low,
        const ULONG high);

    HRESULT (STDMETHODCALLTYPE *DeleteSingleValue)(
        IRangeList *This,
        const ULONG value);

    HRESULT (STDMETHODCALLTYPE *DeleteRangeList)(
        IRangeList *This,
        const IRangeList *prl);

    HRESULT (STDMETHODCALLTYPE *MinOfRange)(
        IRangeList *This,
        const ULONG value,
        ULONG *pulMinOfRange);

    HRESULT (STDMETHODCALLTYPE *MaxOfRange)(
        IRangeList *This,
        const ULONG value,
        ULONG *pulMaxOfRange);

    HRESULT (STDMETHODCALLTYPE *RangeToIMAPString)(
        IRangeList *This,
        LPSTR *ppszDestination,
        LPDWORD pdwLengthOfDestination);

    HRESULT (STDMETHODCALLTYPE *Next)(
        IRangeList *This,
        const ULONG current,
        ULONG *pulNext);

    HRESULT (STDMETHODCALLTYPE *Prev)(
        IRangeList *This,
        const ULONG current,
        ULONG *pulPrev);

    HRESULT (STDMETHODCALLTYPE *Cardinality)(
        IRangeList *This,
        ULONG *pulCardinality);

    HRESULT (STDMETHODCALLTYPE *CardinalityFrom)(
        IRangeList *This,
        const ULONG ulStartPoint,
        ULONG *pulCardinalityFrom);

    END_INTERFACE
} IRangeListVtbl;

interface IRangeList {
    CONST_VTBL IRangeListVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IRangeList_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IRangeList_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IRangeList_Release(This) (This)->lpVtbl->Release(This)
/*** IRangeList methods ***/
#define IRangeList_Clear(This) (This)->lpVtbl->Clear(This)
#define IRangeList_IsInRange(This,value) (This)->lpVtbl->IsInRange(This,value)
#define IRangeList_Min(This,pulMin) (This)->lpVtbl->Min(This,pulMin)
#define IRangeList_Max(This,pulMax) (This)->lpVtbl->Max(This,pulMax)
#define IRangeList_Save(This,ppbDestination,pulSizeOfDestination) (This)->lpVtbl->Save(This,ppbDestination,pulSizeOfDestination)
#define IRangeList_Load(This,pbSource,ulSizeOfSource) (This)->lpVtbl->Load(This,pbSource,ulSizeOfSource)
#define IRangeList_AddRange(This,low,high) (This)->lpVtbl->AddRange(This,low,high)
#define IRangeList_AddSingleValue(This,value) (This)->lpVtbl->AddSingleValue(This,value)
#define IRangeList_AddRangeList(This,prl) (This)->lpVtbl->AddRangeList(This,prl)
#define IRangeList_DeleteRange(This,low,high) (This)->lpVtbl->DeleteRange(This,low,high)
#define IRangeList_DeleteSingleValue(This,value) (This)->lpVtbl->DeleteSingleValue(This,value)
#define IRangeList_DeleteRangeList(This,prl) (This)->lpVtbl->DeleteRangeList(This,prl)
#define IRangeList_MinOfRange(This,value,pulMinOfRange) (This)->lpVtbl->MinOfRange(This,value,pulMinOfRange)
#define IRangeList_MaxOfRange(This,value,pulMaxOfRange) (This)->lpVtbl->MaxOfRange(This,value,pulMaxOfRange)
#define IRangeList_RangeToIMAPString(This,ppszDestination,pdwLengthOfDestination) (This)->lpVtbl->RangeToIMAPString(This,ppszDestination,pdwLengthOfDestination)
#define IRangeList_Next(This,current,pulNext) (This)->lpVtbl->Next(This,current,pulNext)
#define IRangeList_Prev(This,current,pulPrev) (This)->lpVtbl->Prev(This,current,pulPrev)
#define IRangeList_Cardinality(This,pulCardinality) (This)->lpVtbl->Cardinality(This,pulCardinality)
#define IRangeList_CardinalityFrom(This,ulStartPoint,pulCardinalityFrom) (This)->lpVtbl->CardinalityFrom(This,ulStartPoint,pulCardinalityFrom)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IRangeList_QueryInterface(IRangeList* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IRangeList_AddRef(IRangeList* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IRangeList_Release(IRangeList* This) {
    return This->lpVtbl->Release(This);
}
/*** IRangeList methods ***/
static FORCEINLINE HRESULT IRangeList_Clear(IRangeList* This) {
    return This->lpVtbl->Clear(This);
}
static FORCEINLINE HRESULT IRangeList_IsInRange(IRangeList* This,const ULONG value) {
    return This->lpVtbl->IsInRange(This,value);
}
static FORCEINLINE HRESULT IRangeList_Min(IRangeList* This,ULONG *pulMin) {
    return This->lpVtbl->Min(This,pulMin);
}
static FORCEINLINE HRESULT IRangeList_Max(IRangeList* This,ULONG *pulMax) {
    return This->lpVtbl->Max(This,pulMax);
}
static FORCEINLINE HRESULT IRangeList_Save(IRangeList* This,byte **ppbDestination,ULONG *pulSizeOfDestination) {
    return This->lpVtbl->Save(This,ppbDestination,pulSizeOfDestination);
}
static FORCEINLINE HRESULT IRangeList_Load(IRangeList* This,byte *pbSource,const ULONG ulSizeOfSource) {
    return This->lpVtbl->Load(This,pbSource,ulSizeOfSource);
}
static FORCEINLINE HRESULT IRangeList_AddRange(IRangeList* This,const ULONG low,const ULONG high) {
    return This->lpVtbl->AddRange(This,low,high);
}
static FORCEINLINE HRESULT IRangeList_AddSingleValue(IRangeList* This,const ULONG value) {
    return This->lpVtbl->AddSingleValue(This,value);
}
static FORCEINLINE HRESULT IRangeList_AddRangeList(IRangeList* This,const IRangeList *prl) {
    return This->lpVtbl->AddRangeList(This,prl);
}
static FORCEINLINE HRESULT IRangeList_DeleteRange(IRangeList* This,const ULONG low,const ULONG high) {
    return This->lpVtbl->DeleteRange(This,low,high);
}
static FORCEINLINE HRESULT IRangeList_DeleteSingleValue(IRangeList* This,const ULONG value) {
    return This->lpVtbl->DeleteSingleValue(This,value);
}
static FORCEINLINE HRESULT IRangeList_DeleteRangeList(IRangeList* This,const IRangeList *prl) {
    return This->lpVtbl->DeleteRangeList(This,prl);
}
static FORCEINLINE HRESULT IRangeList_MinOfRange(IRangeList* This,const ULONG value,ULONG *pulMinOfRange) {
    return This->lpVtbl->MinOfRange(This,value,pulMinOfRange);
}
static FORCEINLINE HRESULT IRangeList_MaxOfRange(IRangeList* This,const ULONG value,ULONG *pulMaxOfRange) {
    return This->lpVtbl->MaxOfRange(This,value,pulMaxOfRange);
}
static FORCEINLINE HRESULT IRangeList_RangeToIMAPString(IRangeList* This,LPSTR *ppszDestination,LPDWORD pdwLengthOfDestination) {
    return This->lpVtbl->RangeToIMAPString(This,ppszDestination,pdwLengthOfDestination);
}
static FORCEINLINE HRESULT IRangeList_Next(IRangeList* This,const ULONG current,ULONG *pulNext) {
    return This->lpVtbl->Next(This,current,pulNext);
}
static FORCEINLINE HRESULT IRangeList_Prev(IRangeList* This,const ULONG current,ULONG *pulPrev) {
    return This->lpVtbl->Prev(This,current,pulPrev);
}
static FORCEINLINE HRESULT IRangeList_Cardinality(IRangeList* This,ULONG *pulCardinality) {
    return This->lpVtbl->Cardinality(This,pulCardinality);
}
static FORCEINLINE HRESULT IRangeList_CardinalityFrom(IRangeList* This,const ULONG ulStartPoint,ULONG *pulCardinalityFrom) {
    return This->lpVtbl->CardinalityFrom(This,ulStartPoint,pulCardinalityFrom);
}
#endif
#endif

#endif


#endif  /* __IRangeList_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IIMAPCallback interface
 */
#ifndef __IIMAPCallback_INTERFACE_DEFINED__
#define __IIMAPCallback_INTERFACE_DEFINED__

typedef DWORD IMAP_MBOXFLAGS;
#define IMAP_MBOX_NOFLAGS (0x0)

#define IMAP_MBOX_MARKED (0x1)

#define IMAP_MBOX_NOINFERIORS (0x2)

#define IMAP_MBOX_NOSELECT (0x4)

#define IMAP_MBOX_UNMARKED (0x8)

#define IMAP_MBOX_ALLFLAGS (0xf)

typedef enum tagIMAP_RESPONSE_TYPE {
    irtERROR_NOTIFICATION = 0,
    irtCOMMAND_COMPLETION = 1,
    irtSERVER_ALERT = 2,
    irtPARSE_ERROR = 3,
    irtMAILBOX_UPDATE = 4,
    irtDELETED_MSG = 5,
    irtFETCH_BODY = 6,
    irtUPDATE_MSG = 7,
    irtAPPLICABLE_FLAGS = 8,
    irtPERMANENT_FLAGS = 9,
    irtUIDVALIDITY = 10,
    irtREADWRITE_STATUS = 11,
    irtTRYCREATE = 12,
    irtSEARCH = 13,
    irtMAILBOX_LISTING = 14,
    irtMAILBOX_STATUS = 15,
    irtAPPEND_PROGRESS = 16,
    irtUPDATE_MSG_EX = 17
} IMAP_RESPONSE_TYPE;
typedef struct tagFETCH_BODY_PART {
    DWORD dwMsgSeqNum;
    LPSTR pszBodyTag;
    DWORD dwTotalBytes;
    DWORD dwSizeOfData;
    DWORD dwOffset;
    BOOL fDone;
    LPSTR pszData;
    LPARAM lpFetchCookie1;
    LPARAM lpFetchCookie2;
} FETCH_BODY_PART;
typedef struct tagFETCH_CMD_RESULTS {
    DWORD dwMsgSeqNum;
    BOOL bMsgFlags;
    IMAP_MSGFLAGS mfMsgFlags;
    BOOL bRFC822Size;
    DWORD dwRFC822Size;
    BOOL bUID;
    DWORD dwUID;
    BOOL bInternalDate;
    FILETIME ftInternalDate;
    LPARAM lpFetchCookie1;
    LPARAM lpFetchCookie2;
} FETCH_CMD_RESULTS;
typedef struct tagIMAPADDR {
    LPSTR pszName;
    LPSTR pszADL;
    LPSTR pszMailbox;
    LPSTR pszHost;
    struct tagIMAPADDR *pNext;
} IMAPADDR;
typedef struct tagFETCH_CMD_RESULTS_EX {
    DWORD dwMsgSeqNum;
    BOOL bMsgFlags;
    IMAP_MSGFLAGS mfMsgFlags;
    BOOL bRFC822Size;
    DWORD dwRFC822Size;
    BOOL bUID;
    DWORD dwUID;
    BOOL bInternalDate;
    FILETIME ftInternalDate;
    LPARAM lpFetchCookie1;
    LPARAM lpFetchCookie2;
    BOOL bEnvelope;
    FILETIME ftENVDate;
    LPSTR pszENVSubject;
    IMAPADDR *piaENVFrom;
    IMAPADDR *piaENVSender;
    IMAPADDR *piaENVReplyTo;
    IMAPADDR *piaENVTo;
    IMAPADDR *piaENVCc;
    IMAPADDR *piaENVBcc;
    LPSTR pszENVInReplyTo;
    LPSTR pszENVMessageID;
    DWORD dwReserved1;
    DWORD dwReserved2;
    DWORD dwReserved3;
} FETCH_CMD_RESULTS_EX;
typedef struct tagMBOX_MSGCOUNT {
    BOOL bGotExistsResponse;
    DWORD dwExists;
    BOOL bGotRecentResponse;
    DWORD dwRecent;
    BOOL bGotUnseenResponse;
    DWORD dwUnseen;
} MBOX_MSGCOUNT;
typedef struct tagIMAP_LISTLSUB_RESPONSE {
    LPSTR pszMailboxName;
    IMAP_MBOXFLAGS imfMboxFlags;
    char cHierarchyChar;
} IMAP_LISTLSUB_RESPONSE;
typedef struct tagIMAP_STATUS_RESPONSE {
    LPSTR pszMailboxName;
    BOOL fMessages;
    DWORD dwMessages;
    BOOL fRecent;
    DWORD dwRecent;
    BOOL fUIDNext;
    DWORD dwUIDNext;
    BOOL fUIDValidity;
    DWORD dwUIDValidity;
    BOOL fUnseen;
    DWORD dwUnseen;
} IMAP_STATUS_RESPONSE;
typedef struct tagAPPEND_PROGRESS {
    DWORD dwUploaded;
    DWORD dwTotal;
} APPEND_PROGRESS;
typedef union tagIMAP_RESPONSE_DATA {
    MBOX_MSGCOUNT *pmcMsgCount;
    DWORD dwDeletedMsgSeqNum;
    FETCH_BODY_PART *pFetchBodyPart;
    FETCH_CMD_RESULTS *pFetchResults;
    IMAP_MSGFLAGS imfImapMessageFlags;
    DWORD dwUIDValidity;
    BOOL bReadWrite;
    IRangeList *prlSearchResults;
    IMAP_LISTLSUB_RESPONSE illrdMailboxListing;
    IMAP_STATUS_RESPONSE *pisrStatusResponse;
    APPEND_PROGRESS *papAppendProgress;
    FETCH_CMD_RESULTS_EX *pFetchResultsEx;
} IMAP_RESPONSE_DATA;
typedef struct tagIMAP_RESPONSE {
    WPARAM wParam;
    LPARAM lParam;
    HRESULT hrResult;
    LPSTR lpszResponseText;
    IMAP_RESPONSE_TYPE irtResponseType;
    IMAP_RESPONSE_DATA irdResponseData;
} IMAP_RESPONSE;
DEFINE_GUID(IID_IIMAPCallback, 0xe9e9d8a3, 0x4edd, 0x11d0, 0x87,0x4f, 0x00,0xaa,0x00,0x53,0x0e,0xe9);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("e9e9d8a3-4edd-11d0-874f-00aa00530ee9")
IIMAPCallback : public ITransportCallback
{
    virtual HRESULT STDMETHODCALLTYPE OnResponse(
        const IMAP_RESPONSE *pirIMAPResponse) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IIMAPCallback, 0xe9e9d8a3, 0x4edd, 0x11d0, 0x87,0x4f, 0x00,0xaa,0x00,0x53,0x0e,0xe9)
#endif
#else
typedef struct IIMAPCallbackVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IIMAPCallback *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IIMAPCallback *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IIMAPCallback *This);

    /*** ITransportCallback methods ***/
    HRESULT (STDMETHODCALLTYPE *OnTimeout)(
        IIMAPCallback *This,
        DWORD *pdwTimeout,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnLogonPrompt)(
        IIMAPCallback *This,
        LPINETSERVER pInetServer,
        IInternetTransport *pTransport);

    INT (STDMETHODCALLTYPE *OnPrompt)(
        IIMAPCallback *This,
        HRESULT hrError,
        LPCTSTR pszText,
        LPCTSTR pszCaption,
        UINT uType,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnStatus)(
        IIMAPCallback *This,
        IXPSTATUS ixpstatus,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnError)(
        IIMAPCallback *This,
        IXPSTATUS ixpstatus,
        LPIXPRESULT pResult,
        IInternetTransport *pTransport);

    HRESULT (STDMETHODCALLTYPE *OnCommand)(
        IIMAPCallback *This,
        CMDTYPE cmdtype,
        LPSTR pszLine,
        HRESULT hrResponse,
        IInternetTransport *pTransport);

    /*** IIMAPCallback methods ***/
    HRESULT (STDMETHODCALLTYPE *OnResponse)(
        IIMAPCallback *This,
        const IMAP_RESPONSE *pirIMAPResponse);

    END_INTERFACE
} IIMAPCallbackVtbl;

interface IIMAPCallback {
    CONST_VTBL IIMAPCallbackVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IIMAPCallback_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IIMAPCallback_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IIMAPCallback_Release(This) (This)->lpVtbl->Release(This)
/*** ITransportCallback methods ***/
#define IIMAPCallback_OnTimeout(This,pdwTimeout,pTransport) (This)->lpVtbl->OnTimeout(This,pdwTimeout,pTransport)
#define IIMAPCallback_OnLogonPrompt(This,pInetServer,pTransport) (This)->lpVtbl->OnLogonPrompt(This,pInetServer,pTransport)
#define IIMAPCallback_OnPrompt(This,hrError,pszText,pszCaption,uType,pTransport) (This)->lpVtbl->OnPrompt(This,hrError,pszText,pszCaption,uType,pTransport)
#define IIMAPCallback_OnStatus(This,ixpstatus,pTransport) (This)->lpVtbl->OnStatus(This,ixpstatus,pTransport)
#define IIMAPCallback_OnError(This,ixpstatus,pResult,pTransport) (This)->lpVtbl->OnError(This,ixpstatus,pResult,pTransport)
#define IIMAPCallback_OnCommand(This,cmdtype,pszLine,hrResponse,pTransport) (This)->lpVtbl->OnCommand(This,cmdtype,pszLine,hrResponse,pTransport)
/*** IIMAPCallback methods ***/
#define IIMAPCallback_OnResponse(This,pirIMAPResponse) (This)->lpVtbl->OnResponse(This,pirIMAPResponse)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IIMAPCallback_QueryInterface(IIMAPCallback* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IIMAPCallback_AddRef(IIMAPCallback* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IIMAPCallback_Release(IIMAPCallback* This) {
    return This->lpVtbl->Release(This);
}
/*** ITransportCallback methods ***/
static FORCEINLINE HRESULT IIMAPCallback_OnTimeout(IIMAPCallback* This,DWORD *pdwTimeout,IInternetTransport *pTransport) {
    return This->lpVtbl->OnTimeout(This,pdwTimeout,pTransport);
}
static FORCEINLINE HRESULT IIMAPCallback_OnLogonPrompt(IIMAPCallback* This,LPINETSERVER pInetServer,IInternetTransport *pTransport) {
    return This->lpVtbl->OnLogonPrompt(This,pInetServer,pTransport);
}
static FORCEINLINE INT IIMAPCallback_OnPrompt(IIMAPCallback* This,HRESULT hrError,LPCTSTR pszText,LPCTSTR pszCaption,UINT uType,IInternetTransport *pTransport) {
    return This->lpVtbl->OnPrompt(This,hrError,pszText,pszCaption,uType,pTransport);
}
static FORCEINLINE HRESULT IIMAPCallback_OnStatus(IIMAPCallback* This,IXPSTATUS ixpstatus,IInternetTransport *pTransport) {
    return This->lpVtbl->OnStatus(This,ixpstatus,pTransport);
}
static FORCEINLINE HRESULT IIMAPCallback_OnError(IIMAPCallback* This,IXPSTATUS ixpstatus,LPIXPRESULT pResult,IInternetTransport *pTransport) {
    return This->lpVtbl->OnError(This,ixpstatus,pResult,pTransport);
}
static FORCEINLINE HRESULT IIMAPCallback_OnCommand(IIMAPCallback* This,CMDTYPE cmdtype,LPSTR pszLine,HRESULT hrResponse,IInternetTransport *pTransport) {
    return This->lpVtbl->OnCommand(This,cmdtype,pszLine,hrResponse,pTransport);
}
/*** IIMAPCallback methods ***/
static FORCEINLINE HRESULT IIMAPCallback_OnResponse(IIMAPCallback* This,const IMAP_RESPONSE *pirIMAPResponse) {
    return This->lpVtbl->OnResponse(This,pirIMAPResponse);
}
#endif
#endif

#endif


#endif  /* __IIMAPCallback_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IIMAPTransport interface
 */
#ifndef __IIMAPTransport_INTERFACE_DEFINED__
#define __IIMAPTransport_INTERFACE_DEFINED__

#define IMAP_CAPABILITY_IMAP4 (0x1)

#define IMAP_CAPABILITY_IMAP4rev1 (0x2)

#define IMAP_CAPABILITY_IDLE (0x4)

#define IMAP_CAPABILITY_ALLFLAGS (0x7)

DEFINE_GUID(IID_IIMAPTransport, 0xe9e9d8a8, 0x4edd, 0x11d0, 0x87,0x4f, 0x00,0xaa,0x00,0x53,0x0e,0xe9);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("e9e9d8a8-4edd-11d0-874f-00aa00530ee9")
IIMAPTransport : public IInternetTransport
{
    virtual HRESULT STDMETHODCALLTYPE InitNew(
        LPSTR pszLogFilePath,
        IIMAPCallback *pCBHandler) = 0;

    virtual HRESULT STDMETHODCALLTYPE NewIRangeList(
        IRangeList **pprlNewRangeList) = 0;

    virtual HRESULT STDMETHODCALLTYPE Capability(
        DWORD *pdwCapabilityFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE Select(
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName) = 0;

    virtual HRESULT STDMETHODCALLTYPE Examine(
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName) = 0;

    virtual HRESULT STDMETHODCALLTYPE Create(
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName) = 0;

    virtual HRESULT STDMETHODCALLTYPE Delete(
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName) = 0;

    virtual HRESULT STDMETHODCALLTYPE Rename(
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName,
        LPSTR lpszNewMailboxName) = 0;

    virtual HRESULT STDMETHODCALLTYPE Subscribe(
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName) = 0;

    virtual HRESULT STDMETHODCALLTYPE Unsubscribe(
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName) = 0;

    virtual HRESULT STDMETHODCALLTYPE List(
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxNameReference,
        LPSTR lpszMailboxNamePattern) = 0;

    virtual HRESULT STDMETHODCALLTYPE Lsub(
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxNameReference,
        LPSTR lpszMailboxNamePattern) = 0;

    virtual HRESULT STDMETHODCALLTYPE Append(
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName,
        LPSTR lpszMessageFlags,
        FILETIME ftMessageDateTime,
        LPSTREAM lpstmMessageToSave) = 0;

    virtual HRESULT STDMETHODCALLTYPE Close(
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler) = 0;

    virtual HRESULT STDMETHODCALLTYPE Expunge(
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler) = 0;

    virtual HRESULT STDMETHODCALLTYPE Search(
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszSearchCriteria,
        boolean bReturnUIDs,
        IRangeList *pMsgRange,
        boolean bUIDRangeList) = 0;

    virtual HRESULT STDMETHODCALLTYPE Fetch(
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        IRangeList *pMsgRange,
        boolean bUIDMsgRange,
        LPSTR lpszFetchArgs) = 0;

    virtual HRESULT STDMETHODCALLTYPE Store(
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        IRangeList *pMsgRange,
        boolean bUIDRangeList,
        LPSTR lpszStoreArgs) = 0;

    virtual HRESULT STDMETHODCALLTYPE Copy(
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        IRangeList *pMsgRange,
        boolean bUIDRangeList,
        LPSTR lpszMailboxName) = 0;

    virtual HRESULT STDMETHODCALLTYPE Noop(
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler) = 0;

    virtual HRESULT STDMETHODCALLTYPE ResizeMsgSeqNumTable(
        DWORD dwSizeOfMbox) = 0;

    virtual HRESULT STDMETHODCALLTYPE UpdateSeqNumToUID(
        DWORD dwMsgSeqNum,
        DWORD dwUID) = 0;

    virtual HRESULT STDMETHODCALLTYPE RemoveSequenceNum(
        DWORD dwDeletedMsgSeqNum) = 0;

    virtual HRESULT STDMETHODCALLTYPE MsgSeqNumToUID(
        DWORD dwMsgSeqNum,
        DWORD *pdwUID) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetMsgSeqNumToUIDArray(
        DWORD **ppdwMsgSeqNumToUIDArray,
        DWORD *pdwNumberOfElements) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetHighestMsgSeqNum(
        DWORD *pdwHighestMSN) = 0;

    virtual HRESULT STDMETHODCALLTYPE ResetMsgSeqNumToUID(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetDefaultCBHandler(
        IIMAPCallback *pCBHandler) = 0;

    virtual HRESULT STDMETHODCALLTYPE Status(
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR pszMailboxName,
        LPSTR pszStatusCmdArgs) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IIMAPTransport, 0xe9e9d8a8, 0x4edd, 0x11d0, 0x87,0x4f, 0x00,0xaa,0x00,0x53,0x0e,0xe9)
#endif
#else
typedef struct IIMAPTransportVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IIMAPTransport *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IIMAPTransport *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IIMAPTransport *This);

    /*** IInternetTransport methods ***/
    HRESULT (STDMETHODCALLTYPE *GetServerInfo)(
        IIMAPTransport *This,
        LPINETSERVER pInetServer);

    IXPTYPE (STDMETHODCALLTYPE *GetIXPType)(
        IIMAPTransport *This);

    HRESULT (STDMETHODCALLTYPE *IsState)(
        IIMAPTransport *This,
        IXPISSTATE isstate);

    HRESULT (STDMETHODCALLTYPE *InetServerFromAccount)(
        IIMAPTransport *This,
        IImnAccount *pAccount,
        LPINETSERVER pInetServer);

    HRESULT (STDMETHODCALLTYPE *Connect)(
        IIMAPTransport *This,
        LPINETSERVER pInetServer,
        boolean fAuthenticate,
        boolean fCommandLogging);

    HRESULT (STDMETHODCALLTYPE *HandsOffCallback)(
        IIMAPTransport *This);

    HRESULT (STDMETHODCALLTYPE *Disconnect)(
        IIMAPTransport *This);

    HRESULT (STDMETHODCALLTYPE *DropConnection)(
        IIMAPTransport *This);

    HRESULT (STDMETHODCALLTYPE *GetStatus)(
        IIMAPTransport *This,
        IXPSTATUS *pCurrentStatus);

    /*** IIMAPTransport methods ***/
    HRESULT (STDMETHODCALLTYPE *InitNew)(
        IIMAPTransport *This,
        LPSTR pszLogFilePath,
        IIMAPCallback *pCBHandler);

    HRESULT (STDMETHODCALLTYPE *NewIRangeList)(
        IIMAPTransport *This,
        IRangeList **pprlNewRangeList);

    HRESULT (STDMETHODCALLTYPE *Capability)(
        IIMAPTransport *This,
        DWORD *pdwCapabilityFlags);

    HRESULT (STDMETHODCALLTYPE *Select)(
        IIMAPTransport *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName);

    HRESULT (STDMETHODCALLTYPE *Examine)(
        IIMAPTransport *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName);

    HRESULT (STDMETHODCALLTYPE *Create)(
        IIMAPTransport *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName);

    HRESULT (STDMETHODCALLTYPE *Delete)(
        IIMAPTransport *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName);

    HRESULT (STDMETHODCALLTYPE *Rename)(
        IIMAPTransport *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName,
        LPSTR lpszNewMailboxName);

    HRESULT (STDMETHODCALLTYPE *Subscribe)(
        IIMAPTransport *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName);

    HRESULT (STDMETHODCALLTYPE *Unsubscribe)(
        IIMAPTransport *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName);

    HRESULT (STDMETHODCALLTYPE *List)(
        IIMAPTransport *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxNameReference,
        LPSTR lpszMailboxNamePattern);

    HRESULT (STDMETHODCALLTYPE *Lsub)(
        IIMAPTransport *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxNameReference,
        LPSTR lpszMailboxNamePattern);

    HRESULT (STDMETHODCALLTYPE *Append)(
        IIMAPTransport *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName,
        LPSTR lpszMessageFlags,
        FILETIME ftMessageDateTime,
        LPSTREAM lpstmMessageToSave);

    HRESULT (STDMETHODCALLTYPE *Close)(
        IIMAPTransport *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler);

    HRESULT (STDMETHODCALLTYPE *Expunge)(
        IIMAPTransport *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler);

    HRESULT (STDMETHODCALLTYPE *Search)(
        IIMAPTransport *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszSearchCriteria,
        boolean bReturnUIDs,
        IRangeList *pMsgRange,
        boolean bUIDRangeList);

    HRESULT (STDMETHODCALLTYPE *Fetch)(
        IIMAPTransport *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        IRangeList *pMsgRange,
        boolean bUIDMsgRange,
        LPSTR lpszFetchArgs);

    HRESULT (STDMETHODCALLTYPE *Store)(
        IIMAPTransport *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        IRangeList *pMsgRange,
        boolean bUIDRangeList,
        LPSTR lpszStoreArgs);

    HRESULT (STDMETHODCALLTYPE *Copy)(
        IIMAPTransport *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        IRangeList *pMsgRange,
        boolean bUIDRangeList,
        LPSTR lpszMailboxName);

    HRESULT (STDMETHODCALLTYPE *Noop)(
        IIMAPTransport *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler);

    HRESULT (STDMETHODCALLTYPE *ResizeMsgSeqNumTable)(
        IIMAPTransport *This,
        DWORD dwSizeOfMbox);

    HRESULT (STDMETHODCALLTYPE *UpdateSeqNumToUID)(
        IIMAPTransport *This,
        DWORD dwMsgSeqNum,
        DWORD dwUID);

    HRESULT (STDMETHODCALLTYPE *RemoveSequenceNum)(
        IIMAPTransport *This,
        DWORD dwDeletedMsgSeqNum);

    HRESULT (STDMETHODCALLTYPE *MsgSeqNumToUID)(
        IIMAPTransport *This,
        DWORD dwMsgSeqNum,
        DWORD *pdwUID);

    HRESULT (STDMETHODCALLTYPE *GetMsgSeqNumToUIDArray)(
        IIMAPTransport *This,
        DWORD **ppdwMsgSeqNumToUIDArray,
        DWORD *pdwNumberOfElements);

    HRESULT (STDMETHODCALLTYPE *GetHighestMsgSeqNum)(
        IIMAPTransport *This,
        DWORD *pdwHighestMSN);

    HRESULT (STDMETHODCALLTYPE *ResetMsgSeqNumToUID)(
        IIMAPTransport *This);

    HRESULT (STDMETHODCALLTYPE *SetDefaultCBHandler)(
        IIMAPTransport *This,
        IIMAPCallback *pCBHandler);

    HRESULT (STDMETHODCALLTYPE *Status)(
        IIMAPTransport *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR pszMailboxName,
        LPSTR pszStatusCmdArgs);

    END_INTERFACE
} IIMAPTransportVtbl;

interface IIMAPTransport {
    CONST_VTBL IIMAPTransportVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IIMAPTransport_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IIMAPTransport_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IIMAPTransport_Release(This) (This)->lpVtbl->Release(This)
/*** IInternetTransport methods ***/
#define IIMAPTransport_GetServerInfo(This,pInetServer) (This)->lpVtbl->GetServerInfo(This,pInetServer)
#define IIMAPTransport_GetIXPType(This) (This)->lpVtbl->GetIXPType(This)
#define IIMAPTransport_IsState(This,isstate) (This)->lpVtbl->IsState(This,isstate)
#define IIMAPTransport_InetServerFromAccount(This,pAccount,pInetServer) (This)->lpVtbl->InetServerFromAccount(This,pAccount,pInetServer)
#define IIMAPTransport_Connect(This,pInetServer,fAuthenticate,fCommandLogging) (This)->lpVtbl->Connect(This,pInetServer,fAuthenticate,fCommandLogging)
#define IIMAPTransport_HandsOffCallback(This) (This)->lpVtbl->HandsOffCallback(This)
#define IIMAPTransport_Disconnect(This) (This)->lpVtbl->Disconnect(This)
#define IIMAPTransport_DropConnection(This) (This)->lpVtbl->DropConnection(This)
#define IIMAPTransport_GetStatus(This,pCurrentStatus) (This)->lpVtbl->GetStatus(This,pCurrentStatus)
/*** IIMAPTransport methods ***/
#define IIMAPTransport_InitNew(This,pszLogFilePath,pCBHandler) (This)->lpVtbl->InitNew(This,pszLogFilePath,pCBHandler)
#define IIMAPTransport_NewIRangeList(This,pprlNewRangeList) (This)->lpVtbl->NewIRangeList(This,pprlNewRangeList)
#define IIMAPTransport_Capability(This,pdwCapabilityFlags) (This)->lpVtbl->Capability(This,pdwCapabilityFlags)
#define IIMAPTransport_Select(This,wParam,lParam,pCBHandler,lpszMailboxName) (This)->lpVtbl->Select(This,wParam,lParam,pCBHandler,lpszMailboxName)
#define IIMAPTransport_Examine(This,wParam,lParam,pCBHandler,lpszMailboxName) (This)->lpVtbl->Examine(This,wParam,lParam,pCBHandler,lpszMailboxName)
#define IIMAPTransport_Create(This,wParam,lParam,pCBHandler,lpszMailboxName) (This)->lpVtbl->Create(This,wParam,lParam,pCBHandler,lpszMailboxName)
#define IIMAPTransport_Delete(This,wParam,lParam,pCBHandler,lpszMailboxName) (This)->lpVtbl->Delete(This,wParam,lParam,pCBHandler,lpszMailboxName)
#define IIMAPTransport_Rename(This,wParam,lParam,pCBHandler,lpszMailboxName,lpszNewMailboxName) (This)->lpVtbl->Rename(This,wParam,lParam,pCBHandler,lpszMailboxName,lpszNewMailboxName)
#define IIMAPTransport_Subscribe(This,wParam,lParam,pCBHandler,lpszMailboxName) (This)->lpVtbl->Subscribe(This,wParam,lParam,pCBHandler,lpszMailboxName)
#define IIMAPTransport_Unsubscribe(This,wParam,lParam,pCBHandler,lpszMailboxName) (This)->lpVtbl->Unsubscribe(This,wParam,lParam,pCBHandler,lpszMailboxName)
#define IIMAPTransport_List(This,wParam,lParam,pCBHandler,lpszMailboxNameReference,lpszMailboxNamePattern) (This)->lpVtbl->List(This,wParam,lParam,pCBHandler,lpszMailboxNameReference,lpszMailboxNamePattern)
#define IIMAPTransport_Lsub(This,wParam,lParam,pCBHandler,lpszMailboxNameReference,lpszMailboxNamePattern) (This)->lpVtbl->Lsub(This,wParam,lParam,pCBHandler,lpszMailboxNameReference,lpszMailboxNamePattern)
#define IIMAPTransport_Append(This,wParam,lParam,pCBHandler,lpszMailboxName,lpszMessageFlags,ftMessageDateTime,lpstmMessageToSave) (This)->lpVtbl->Append(This,wParam,lParam,pCBHandler,lpszMailboxName,lpszMessageFlags,ftMessageDateTime,lpstmMessageToSave)
#define IIMAPTransport_Close(This,wParam,lParam,pCBHandler) (This)->lpVtbl->Close(This,wParam,lParam,pCBHandler)
#define IIMAPTransport_Expunge(This,wParam,lParam,pCBHandler) (This)->lpVtbl->Expunge(This,wParam,lParam,pCBHandler)
#define IIMAPTransport_Search(This,wParam,lParam,pCBHandler,lpszSearchCriteria,bReturnUIDs,pMsgRange,bUIDRangeList) (This)->lpVtbl->Search(This,wParam,lParam,pCBHandler,lpszSearchCriteria,bReturnUIDs,pMsgRange,bUIDRangeList)
#define IIMAPTransport_Fetch(This,wParam,lParam,pCBHandler,pMsgRange,bUIDMsgRange,lpszFetchArgs) (This)->lpVtbl->Fetch(This,wParam,lParam,pCBHandler,pMsgRange,bUIDMsgRange,lpszFetchArgs)
#define IIMAPTransport_Store(This,wParam,lParam,pCBHandler,pMsgRange,bUIDRangeList,lpszStoreArgs) (This)->lpVtbl->Store(This,wParam,lParam,pCBHandler,pMsgRange,bUIDRangeList,lpszStoreArgs)
#define IIMAPTransport_Copy(This,wParam,lParam,pCBHandler,pMsgRange,bUIDRangeList,lpszMailboxName) (This)->lpVtbl->Copy(This,wParam,lParam,pCBHandler,pMsgRange,bUIDRangeList,lpszMailboxName)
#define IIMAPTransport_Noop(This,wParam,lParam,pCBHandler) (This)->lpVtbl->Noop(This,wParam,lParam,pCBHandler)
#define IIMAPTransport_ResizeMsgSeqNumTable(This,dwSizeOfMbox) (This)->lpVtbl->ResizeMsgSeqNumTable(This,dwSizeOfMbox)
#define IIMAPTransport_UpdateSeqNumToUID(This,dwMsgSeqNum,dwUID) (This)->lpVtbl->UpdateSeqNumToUID(This,dwMsgSeqNum,dwUID)
#define IIMAPTransport_RemoveSequenceNum(This,dwDeletedMsgSeqNum) (This)->lpVtbl->RemoveSequenceNum(This,dwDeletedMsgSeqNum)
#define IIMAPTransport_MsgSeqNumToUID(This,dwMsgSeqNum,pdwUID) (This)->lpVtbl->MsgSeqNumToUID(This,dwMsgSeqNum,pdwUID)
#define IIMAPTransport_GetMsgSeqNumToUIDArray(This,ppdwMsgSeqNumToUIDArray,pdwNumberOfElements) (This)->lpVtbl->GetMsgSeqNumToUIDArray(This,ppdwMsgSeqNumToUIDArray,pdwNumberOfElements)
#define IIMAPTransport_GetHighestMsgSeqNum(This,pdwHighestMSN) (This)->lpVtbl->GetHighestMsgSeqNum(This,pdwHighestMSN)
#define IIMAPTransport_ResetMsgSeqNumToUID(This) (This)->lpVtbl->ResetMsgSeqNumToUID(This)
#define IIMAPTransport_SetDefaultCBHandler(This,pCBHandler) (This)->lpVtbl->SetDefaultCBHandler(This,pCBHandler)
#define IIMAPTransport_Status(This,wParam,lParam,pCBHandler,pszMailboxName,pszStatusCmdArgs) (This)->lpVtbl->Status(This,wParam,lParam,pCBHandler,pszMailboxName,pszStatusCmdArgs)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IIMAPTransport_QueryInterface(IIMAPTransport* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IIMAPTransport_AddRef(IIMAPTransport* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IIMAPTransport_Release(IIMAPTransport* This) {
    return This->lpVtbl->Release(This);
}
/*** IInternetTransport methods ***/
static FORCEINLINE HRESULT IIMAPTransport_GetServerInfo(IIMAPTransport* This,LPINETSERVER pInetServer) {
    return This->lpVtbl->GetServerInfo(This,pInetServer);
}
static FORCEINLINE IXPTYPE IIMAPTransport_GetIXPType(IIMAPTransport* This) {
    return This->lpVtbl->GetIXPType(This);
}
static FORCEINLINE HRESULT IIMAPTransport_IsState(IIMAPTransport* This,IXPISSTATE isstate) {
    return This->lpVtbl->IsState(This,isstate);
}
static FORCEINLINE HRESULT IIMAPTransport_InetServerFromAccount(IIMAPTransport* This,IImnAccount *pAccount,LPINETSERVER pInetServer) {
    return This->lpVtbl->InetServerFromAccount(This,pAccount,pInetServer);
}
static FORCEINLINE HRESULT IIMAPTransport_Connect(IIMAPTransport* This,LPINETSERVER pInetServer,boolean fAuthenticate,boolean fCommandLogging) {
    return This->lpVtbl->Connect(This,pInetServer,fAuthenticate,fCommandLogging);
}
static FORCEINLINE HRESULT IIMAPTransport_HandsOffCallback(IIMAPTransport* This) {
    return This->lpVtbl->HandsOffCallback(This);
}
static FORCEINLINE HRESULT IIMAPTransport_Disconnect(IIMAPTransport* This) {
    return This->lpVtbl->Disconnect(This);
}
static FORCEINLINE HRESULT IIMAPTransport_DropConnection(IIMAPTransport* This) {
    return This->lpVtbl->DropConnection(This);
}
static FORCEINLINE HRESULT IIMAPTransport_GetStatus(IIMAPTransport* This,IXPSTATUS *pCurrentStatus) {
    return This->lpVtbl->GetStatus(This,pCurrentStatus);
}
/*** IIMAPTransport methods ***/
static FORCEINLINE HRESULT IIMAPTransport_InitNew(IIMAPTransport* This,LPSTR pszLogFilePath,IIMAPCallback *pCBHandler) {
    return This->lpVtbl->InitNew(This,pszLogFilePath,pCBHandler);
}
static FORCEINLINE HRESULT IIMAPTransport_NewIRangeList(IIMAPTransport* This,IRangeList **pprlNewRangeList) {
    return This->lpVtbl->NewIRangeList(This,pprlNewRangeList);
}
static FORCEINLINE HRESULT IIMAPTransport_Capability(IIMAPTransport* This,DWORD *pdwCapabilityFlags) {
    return This->lpVtbl->Capability(This,pdwCapabilityFlags);
}
static FORCEINLINE HRESULT IIMAPTransport_Select(IIMAPTransport* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszMailboxName) {
    return This->lpVtbl->Select(This,wParam,lParam,pCBHandler,lpszMailboxName);
}
static FORCEINLINE HRESULT IIMAPTransport_Examine(IIMAPTransport* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszMailboxName) {
    return This->lpVtbl->Examine(This,wParam,lParam,pCBHandler,lpszMailboxName);
}
static FORCEINLINE HRESULT IIMAPTransport_Create(IIMAPTransport* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszMailboxName) {
    return This->lpVtbl->Create(This,wParam,lParam,pCBHandler,lpszMailboxName);
}
static FORCEINLINE HRESULT IIMAPTransport_Delete(IIMAPTransport* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszMailboxName) {
    return This->lpVtbl->Delete(This,wParam,lParam,pCBHandler,lpszMailboxName);
}
static FORCEINLINE HRESULT IIMAPTransport_Rename(IIMAPTransport* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszMailboxName,LPSTR lpszNewMailboxName) {
    return This->lpVtbl->Rename(This,wParam,lParam,pCBHandler,lpszMailboxName,lpszNewMailboxName);
}
static FORCEINLINE HRESULT IIMAPTransport_Subscribe(IIMAPTransport* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszMailboxName) {
    return This->lpVtbl->Subscribe(This,wParam,lParam,pCBHandler,lpszMailboxName);
}
static FORCEINLINE HRESULT IIMAPTransport_Unsubscribe(IIMAPTransport* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszMailboxName) {
    return This->lpVtbl->Unsubscribe(This,wParam,lParam,pCBHandler,lpszMailboxName);
}
static FORCEINLINE HRESULT IIMAPTransport_List(IIMAPTransport* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszMailboxNameReference,LPSTR lpszMailboxNamePattern) {
    return This->lpVtbl->List(This,wParam,lParam,pCBHandler,lpszMailboxNameReference,lpszMailboxNamePattern);
}
static FORCEINLINE HRESULT IIMAPTransport_Lsub(IIMAPTransport* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszMailboxNameReference,LPSTR lpszMailboxNamePattern) {
    return This->lpVtbl->Lsub(This,wParam,lParam,pCBHandler,lpszMailboxNameReference,lpszMailboxNamePattern);
}
static FORCEINLINE HRESULT IIMAPTransport_Append(IIMAPTransport* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszMailboxName,LPSTR lpszMessageFlags,FILETIME ftMessageDateTime,LPSTREAM lpstmMessageToSave) {
    return This->lpVtbl->Append(This,wParam,lParam,pCBHandler,lpszMailboxName,lpszMessageFlags,ftMessageDateTime,lpstmMessageToSave);
}
static FORCEINLINE HRESULT IIMAPTransport_Close(IIMAPTransport* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler) {
    return This->lpVtbl->Close(This,wParam,lParam,pCBHandler);
}
static FORCEINLINE HRESULT IIMAPTransport_Expunge(IIMAPTransport* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler) {
    return This->lpVtbl->Expunge(This,wParam,lParam,pCBHandler);
}
static FORCEINLINE HRESULT IIMAPTransport_Search(IIMAPTransport* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszSearchCriteria,boolean bReturnUIDs,IRangeList *pMsgRange,boolean bUIDRangeList) {
    return This->lpVtbl->Search(This,wParam,lParam,pCBHandler,lpszSearchCriteria,bReturnUIDs,pMsgRange,bUIDRangeList);
}
static FORCEINLINE HRESULT IIMAPTransport_Fetch(IIMAPTransport* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,IRangeList *pMsgRange,boolean bUIDMsgRange,LPSTR lpszFetchArgs) {
    return This->lpVtbl->Fetch(This,wParam,lParam,pCBHandler,pMsgRange,bUIDMsgRange,lpszFetchArgs);
}
static FORCEINLINE HRESULT IIMAPTransport_Store(IIMAPTransport* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,IRangeList *pMsgRange,boolean bUIDRangeList,LPSTR lpszStoreArgs) {
    return This->lpVtbl->Store(This,wParam,lParam,pCBHandler,pMsgRange,bUIDRangeList,lpszStoreArgs);
}
static FORCEINLINE HRESULT IIMAPTransport_Copy(IIMAPTransport* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,IRangeList *pMsgRange,boolean bUIDRangeList,LPSTR lpszMailboxName) {
    return This->lpVtbl->Copy(This,wParam,lParam,pCBHandler,pMsgRange,bUIDRangeList,lpszMailboxName);
}
static FORCEINLINE HRESULT IIMAPTransport_Noop(IIMAPTransport* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler) {
    return This->lpVtbl->Noop(This,wParam,lParam,pCBHandler);
}
static FORCEINLINE HRESULT IIMAPTransport_ResizeMsgSeqNumTable(IIMAPTransport* This,DWORD dwSizeOfMbox) {
    return This->lpVtbl->ResizeMsgSeqNumTable(This,dwSizeOfMbox);
}
static FORCEINLINE HRESULT IIMAPTransport_UpdateSeqNumToUID(IIMAPTransport* This,DWORD dwMsgSeqNum,DWORD dwUID) {
    return This->lpVtbl->UpdateSeqNumToUID(This,dwMsgSeqNum,dwUID);
}
static FORCEINLINE HRESULT IIMAPTransport_RemoveSequenceNum(IIMAPTransport* This,DWORD dwDeletedMsgSeqNum) {
    return This->lpVtbl->RemoveSequenceNum(This,dwDeletedMsgSeqNum);
}
static FORCEINLINE HRESULT IIMAPTransport_MsgSeqNumToUID(IIMAPTransport* This,DWORD dwMsgSeqNum,DWORD *pdwUID) {
    return This->lpVtbl->MsgSeqNumToUID(This,dwMsgSeqNum,pdwUID);
}
static FORCEINLINE HRESULT IIMAPTransport_GetMsgSeqNumToUIDArray(IIMAPTransport* This,DWORD **ppdwMsgSeqNumToUIDArray,DWORD *pdwNumberOfElements) {
    return This->lpVtbl->GetMsgSeqNumToUIDArray(This,ppdwMsgSeqNumToUIDArray,pdwNumberOfElements);
}
static FORCEINLINE HRESULT IIMAPTransport_GetHighestMsgSeqNum(IIMAPTransport* This,DWORD *pdwHighestMSN) {
    return This->lpVtbl->GetHighestMsgSeqNum(This,pdwHighestMSN);
}
static FORCEINLINE HRESULT IIMAPTransport_ResetMsgSeqNumToUID(IIMAPTransport* This) {
    return This->lpVtbl->ResetMsgSeqNumToUID(This);
}
static FORCEINLINE HRESULT IIMAPTransport_SetDefaultCBHandler(IIMAPTransport* This,IIMAPCallback *pCBHandler) {
    return This->lpVtbl->SetDefaultCBHandler(This,pCBHandler);
}
static FORCEINLINE HRESULT IIMAPTransport_Status(IIMAPTransport* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR pszMailboxName,LPSTR pszStatusCmdArgs) {
    return This->lpVtbl->Status(This,wParam,lParam,pCBHandler,pszMailboxName,pszStatusCmdArgs);
}
#endif
#endif

#endif


#endif  /* __IIMAPTransport_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IIMAPTransport2 interface
 */
#ifndef __IIMAPTransport2_INTERFACE_DEFINED__
#define __IIMAPTransport2_INTERFACE_DEFINED__

#define IMAP_MBOXXLATE_DEFAULT (0x0)

#define IMAP_MBOXXLATE_DISABLE (0x1)

#define IMAP_MBOXXLATE_DISABLEIMAP4 (0x2)

#define IMAP_MBOXXLATE_VERBATIMOK (0x4)

#define IMAP_MBOXXLATE_RETAINCP (0x8)

#define IMAP_IDLE_DISABLE (0x0)

#define IMAP_IDLE_ENABLE (0x1)

#define IMAP_FETCHEX_DISABLE (0x0)

#define IMAP_FETCHEX_ENABLE (0x1)

DEFINE_GUID(IID_IIMAPTransport2, 0xda8283c0, 0x37c5, 0x11d2, 0xac,0xd9, 0x00,0x80,0xc7,0xb6,0xe3,0xc5);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("da8283c0-37c5-11d2-acd9-0080c7b6e3c5")
IIMAPTransport2 : public IIMAPTransport
{
    virtual HRESULT STDMETHODCALLTYPE SetDefaultCP(
        DWORD dwTranslateFlags,
        UINT uiCodePage) = 0;

    virtual HRESULT STDMETHODCALLTYPE MultiByteToModifiedUTF7(
        LPCSTR pszSource,
        LPSTR *ppszDestination,
        UINT uiSourceCP,
        DWORD dwFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE ModifiedUTF7ToMultiByte(
        LPCSTR pszSource,
        LPSTR *ppszDestination,
        UINT uiDestinationCP,
        DWORD dwFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetIdleMode(
        DWORD dwIdleFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnableFetchEx(
        DWORD dwFetchExFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetWindow(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE ResetWindow(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IIMAPTransport2, 0xda8283c0, 0x37c5, 0x11d2, 0xac,0xd9, 0x00,0x80,0xc7,0xb6,0xe3,0xc5)
#endif
#else
typedef struct IIMAPTransport2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IIMAPTransport2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IIMAPTransport2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IIMAPTransport2 *This);

    /*** IInternetTransport methods ***/
    HRESULT (STDMETHODCALLTYPE *GetServerInfo)(
        IIMAPTransport2 *This,
        LPINETSERVER pInetServer);

    IXPTYPE (STDMETHODCALLTYPE *GetIXPType)(
        IIMAPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *IsState)(
        IIMAPTransport2 *This,
        IXPISSTATE isstate);

    HRESULT (STDMETHODCALLTYPE *InetServerFromAccount)(
        IIMAPTransport2 *This,
        IImnAccount *pAccount,
        LPINETSERVER pInetServer);

    HRESULT (STDMETHODCALLTYPE *Connect)(
        IIMAPTransport2 *This,
        LPINETSERVER pInetServer,
        boolean fAuthenticate,
        boolean fCommandLogging);

    HRESULT (STDMETHODCALLTYPE *HandsOffCallback)(
        IIMAPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *Disconnect)(
        IIMAPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *DropConnection)(
        IIMAPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *GetStatus)(
        IIMAPTransport2 *This,
        IXPSTATUS *pCurrentStatus);

    /*** IIMAPTransport methods ***/
    HRESULT (STDMETHODCALLTYPE *InitNew)(
        IIMAPTransport2 *This,
        LPSTR pszLogFilePath,
        IIMAPCallback *pCBHandler);

    HRESULT (STDMETHODCALLTYPE *NewIRangeList)(
        IIMAPTransport2 *This,
        IRangeList **pprlNewRangeList);

    HRESULT (STDMETHODCALLTYPE *Capability)(
        IIMAPTransport2 *This,
        DWORD *pdwCapabilityFlags);

    HRESULT (STDMETHODCALLTYPE *Select)(
        IIMAPTransport2 *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName);

    HRESULT (STDMETHODCALLTYPE *Examine)(
        IIMAPTransport2 *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName);

    HRESULT (STDMETHODCALLTYPE *Create)(
        IIMAPTransport2 *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName);

    HRESULT (STDMETHODCALLTYPE *Delete)(
        IIMAPTransport2 *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName);

    HRESULT (STDMETHODCALLTYPE *Rename)(
        IIMAPTransport2 *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName,
        LPSTR lpszNewMailboxName);

    HRESULT (STDMETHODCALLTYPE *Subscribe)(
        IIMAPTransport2 *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName);

    HRESULT (STDMETHODCALLTYPE *Unsubscribe)(
        IIMAPTransport2 *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName);

    HRESULT (STDMETHODCALLTYPE *List)(
        IIMAPTransport2 *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxNameReference,
        LPSTR lpszMailboxNamePattern);

    HRESULT (STDMETHODCALLTYPE *Lsub)(
        IIMAPTransport2 *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxNameReference,
        LPSTR lpszMailboxNamePattern);

    HRESULT (STDMETHODCALLTYPE *Append)(
        IIMAPTransport2 *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszMailboxName,
        LPSTR lpszMessageFlags,
        FILETIME ftMessageDateTime,
        LPSTREAM lpstmMessageToSave);

    HRESULT (STDMETHODCALLTYPE *Close)(
        IIMAPTransport2 *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler);

    HRESULT (STDMETHODCALLTYPE *Expunge)(
        IIMAPTransport2 *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler);

    HRESULT (STDMETHODCALLTYPE *Search)(
        IIMAPTransport2 *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR lpszSearchCriteria,
        boolean bReturnUIDs,
        IRangeList *pMsgRange,
        boolean bUIDRangeList);

    HRESULT (STDMETHODCALLTYPE *Fetch)(
        IIMAPTransport2 *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        IRangeList *pMsgRange,
        boolean bUIDMsgRange,
        LPSTR lpszFetchArgs);

    HRESULT (STDMETHODCALLTYPE *Store)(
        IIMAPTransport2 *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        IRangeList *pMsgRange,
        boolean bUIDRangeList,
        LPSTR lpszStoreArgs);

    HRESULT (STDMETHODCALLTYPE *Copy)(
        IIMAPTransport2 *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        IRangeList *pMsgRange,
        boolean bUIDRangeList,
        LPSTR lpszMailboxName);

    HRESULT (STDMETHODCALLTYPE *Noop)(
        IIMAPTransport2 *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler);

    HRESULT (STDMETHODCALLTYPE *ResizeMsgSeqNumTable)(
        IIMAPTransport2 *This,
        DWORD dwSizeOfMbox);

    HRESULT (STDMETHODCALLTYPE *UpdateSeqNumToUID)(
        IIMAPTransport2 *This,
        DWORD dwMsgSeqNum,
        DWORD dwUID);

    HRESULT (STDMETHODCALLTYPE *RemoveSequenceNum)(
        IIMAPTransport2 *This,
        DWORD dwDeletedMsgSeqNum);

    HRESULT (STDMETHODCALLTYPE *MsgSeqNumToUID)(
        IIMAPTransport2 *This,
        DWORD dwMsgSeqNum,
        DWORD *pdwUID);

    HRESULT (STDMETHODCALLTYPE *GetMsgSeqNumToUIDArray)(
        IIMAPTransport2 *This,
        DWORD **ppdwMsgSeqNumToUIDArray,
        DWORD *pdwNumberOfElements);

    HRESULT (STDMETHODCALLTYPE *GetHighestMsgSeqNum)(
        IIMAPTransport2 *This,
        DWORD *pdwHighestMSN);

    HRESULT (STDMETHODCALLTYPE *ResetMsgSeqNumToUID)(
        IIMAPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *SetDefaultCBHandler)(
        IIMAPTransport2 *This,
        IIMAPCallback *pCBHandler);

    HRESULT (STDMETHODCALLTYPE *Status)(
        IIMAPTransport2 *This,
        WPARAM wParam,
        LPARAM lParam,
        IIMAPCallback *pCBHandler,
        LPSTR pszMailboxName,
        LPSTR pszStatusCmdArgs);

    /*** IIMAPTransport2 methods ***/
    HRESULT (STDMETHODCALLTYPE *SetDefaultCP)(
        IIMAPTransport2 *This,
        DWORD dwTranslateFlags,
        UINT uiCodePage);

    HRESULT (STDMETHODCALLTYPE *MultiByteToModifiedUTF7)(
        IIMAPTransport2 *This,
        LPCSTR pszSource,
        LPSTR *ppszDestination,
        UINT uiSourceCP,
        DWORD dwFlags);

    HRESULT (STDMETHODCALLTYPE *ModifiedUTF7ToMultiByte)(
        IIMAPTransport2 *This,
        LPCSTR pszSource,
        LPSTR *ppszDestination,
        UINT uiDestinationCP,
        DWORD dwFlags);

    HRESULT (STDMETHODCALLTYPE *SetIdleMode)(
        IIMAPTransport2 *This,
        DWORD dwIdleFlags);

    HRESULT (STDMETHODCALLTYPE *EnableFetchEx)(
        IIMAPTransport2 *This,
        DWORD dwFetchExFlags);

    HRESULT (STDMETHODCALLTYPE *SetWindow)(
        IIMAPTransport2 *This);

    HRESULT (STDMETHODCALLTYPE *ResetWindow)(
        IIMAPTransport2 *This);

    END_INTERFACE
} IIMAPTransport2Vtbl;

interface IIMAPTransport2 {
    CONST_VTBL IIMAPTransport2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IIMAPTransport2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IIMAPTransport2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IIMAPTransport2_Release(This) (This)->lpVtbl->Release(This)
/*** IInternetTransport methods ***/
#define IIMAPTransport2_GetServerInfo(This,pInetServer) (This)->lpVtbl->GetServerInfo(This,pInetServer)
#define IIMAPTransport2_GetIXPType(This) (This)->lpVtbl->GetIXPType(This)
#define IIMAPTransport2_IsState(This,isstate) (This)->lpVtbl->IsState(This,isstate)
#define IIMAPTransport2_InetServerFromAccount(This,pAccount,pInetServer) (This)->lpVtbl->InetServerFromAccount(This,pAccount,pInetServer)
#define IIMAPTransport2_Connect(This,pInetServer,fAuthenticate,fCommandLogging) (This)->lpVtbl->Connect(This,pInetServer,fAuthenticate,fCommandLogging)
#define IIMAPTransport2_HandsOffCallback(This) (This)->lpVtbl->HandsOffCallback(This)
#define IIMAPTransport2_Disconnect(This) (This)->lpVtbl->Disconnect(This)
#define IIMAPTransport2_DropConnection(This) (This)->lpVtbl->DropConnection(This)
#define IIMAPTransport2_GetStatus(This,pCurrentStatus) (This)->lpVtbl->GetStatus(This,pCurrentStatus)
/*** IIMAPTransport methods ***/
#define IIMAPTransport2_InitNew(This,pszLogFilePath,pCBHandler) (This)->lpVtbl->InitNew(This,pszLogFilePath,pCBHandler)
#define IIMAPTransport2_NewIRangeList(This,pprlNewRangeList) (This)->lpVtbl->NewIRangeList(This,pprlNewRangeList)
#define IIMAPTransport2_Capability(This,pdwCapabilityFlags) (This)->lpVtbl->Capability(This,pdwCapabilityFlags)
#define IIMAPTransport2_Select(This,wParam,lParam,pCBHandler,lpszMailboxName) (This)->lpVtbl->Select(This,wParam,lParam,pCBHandler,lpszMailboxName)
#define IIMAPTransport2_Examine(This,wParam,lParam,pCBHandler,lpszMailboxName) (This)->lpVtbl->Examine(This,wParam,lParam,pCBHandler,lpszMailboxName)
#define IIMAPTransport2_Create(This,wParam,lParam,pCBHandler,lpszMailboxName) (This)->lpVtbl->Create(This,wParam,lParam,pCBHandler,lpszMailboxName)
#define IIMAPTransport2_Delete(This,wParam,lParam,pCBHandler,lpszMailboxName) (This)->lpVtbl->Delete(This,wParam,lParam,pCBHandler,lpszMailboxName)
#define IIMAPTransport2_Rename(This,wParam,lParam,pCBHandler,lpszMailboxName,lpszNewMailboxName) (This)->lpVtbl->Rename(This,wParam,lParam,pCBHandler,lpszMailboxName,lpszNewMailboxName)
#define IIMAPTransport2_Subscribe(This,wParam,lParam,pCBHandler,lpszMailboxName) (This)->lpVtbl->Subscribe(This,wParam,lParam,pCBHandler,lpszMailboxName)
#define IIMAPTransport2_Unsubscribe(This,wParam,lParam,pCBHandler,lpszMailboxName) (This)->lpVtbl->Unsubscribe(This,wParam,lParam,pCBHandler,lpszMailboxName)
#define IIMAPTransport2_List(This,wParam,lParam,pCBHandler,lpszMailboxNameReference,lpszMailboxNamePattern) (This)->lpVtbl->List(This,wParam,lParam,pCBHandler,lpszMailboxNameReference,lpszMailboxNamePattern)
#define IIMAPTransport2_Lsub(This,wParam,lParam,pCBHandler,lpszMailboxNameReference,lpszMailboxNamePattern) (This)->lpVtbl->Lsub(This,wParam,lParam,pCBHandler,lpszMailboxNameReference,lpszMailboxNamePattern)
#define IIMAPTransport2_Append(This,wParam,lParam,pCBHandler,lpszMailboxName,lpszMessageFlags,ftMessageDateTime,lpstmMessageToSave) (This)->lpVtbl->Append(This,wParam,lParam,pCBHandler,lpszMailboxName,lpszMessageFlags,ftMessageDateTime,lpstmMessageToSave)
#define IIMAPTransport2_Close(This,wParam,lParam,pCBHandler) (This)->lpVtbl->Close(This,wParam,lParam,pCBHandler)
#define IIMAPTransport2_Expunge(This,wParam,lParam,pCBHandler) (This)->lpVtbl->Expunge(This,wParam,lParam,pCBHandler)
#define IIMAPTransport2_Search(This,wParam,lParam,pCBHandler,lpszSearchCriteria,bReturnUIDs,pMsgRange,bUIDRangeList) (This)->lpVtbl->Search(This,wParam,lParam,pCBHandler,lpszSearchCriteria,bReturnUIDs,pMsgRange,bUIDRangeList)
#define IIMAPTransport2_Fetch(This,wParam,lParam,pCBHandler,pMsgRange,bUIDMsgRange,lpszFetchArgs) (This)->lpVtbl->Fetch(This,wParam,lParam,pCBHandler,pMsgRange,bUIDMsgRange,lpszFetchArgs)
#define IIMAPTransport2_Store(This,wParam,lParam,pCBHandler,pMsgRange,bUIDRangeList,lpszStoreArgs) (This)->lpVtbl->Store(This,wParam,lParam,pCBHandler,pMsgRange,bUIDRangeList,lpszStoreArgs)
#define IIMAPTransport2_Copy(This,wParam,lParam,pCBHandler,pMsgRange,bUIDRangeList,lpszMailboxName) (This)->lpVtbl->Copy(This,wParam,lParam,pCBHandler,pMsgRange,bUIDRangeList,lpszMailboxName)
#define IIMAPTransport2_Noop(This,wParam,lParam,pCBHandler) (This)->lpVtbl->Noop(This,wParam,lParam,pCBHandler)
#define IIMAPTransport2_ResizeMsgSeqNumTable(This,dwSizeOfMbox) (This)->lpVtbl->ResizeMsgSeqNumTable(This,dwSizeOfMbox)
#define IIMAPTransport2_UpdateSeqNumToUID(This,dwMsgSeqNum,dwUID) (This)->lpVtbl->UpdateSeqNumToUID(This,dwMsgSeqNum,dwUID)
#define IIMAPTransport2_RemoveSequenceNum(This,dwDeletedMsgSeqNum) (This)->lpVtbl->RemoveSequenceNum(This,dwDeletedMsgSeqNum)
#define IIMAPTransport2_MsgSeqNumToUID(This,dwMsgSeqNum,pdwUID) (This)->lpVtbl->MsgSeqNumToUID(This,dwMsgSeqNum,pdwUID)
#define IIMAPTransport2_GetMsgSeqNumToUIDArray(This,ppdwMsgSeqNumToUIDArray,pdwNumberOfElements) (This)->lpVtbl->GetMsgSeqNumToUIDArray(This,ppdwMsgSeqNumToUIDArray,pdwNumberOfElements)
#define IIMAPTransport2_GetHighestMsgSeqNum(This,pdwHighestMSN) (This)->lpVtbl->GetHighestMsgSeqNum(This,pdwHighestMSN)
#define IIMAPTransport2_ResetMsgSeqNumToUID(This) (This)->lpVtbl->ResetMsgSeqNumToUID(This)
#define IIMAPTransport2_SetDefaultCBHandler(This,pCBHandler) (This)->lpVtbl->SetDefaultCBHandler(This,pCBHandler)
#define IIMAPTransport2_Status(This,wParam,lParam,pCBHandler,pszMailboxName,pszStatusCmdArgs) (This)->lpVtbl->Status(This,wParam,lParam,pCBHandler,pszMailboxName,pszStatusCmdArgs)
/*** IIMAPTransport2 methods ***/
#define IIMAPTransport2_SetDefaultCP(This,dwTranslateFlags,uiCodePage) (This)->lpVtbl->SetDefaultCP(This,dwTranslateFlags,uiCodePage)
#define IIMAPTransport2_MultiByteToModifiedUTF7(This,pszSource,ppszDestination,uiSourceCP,dwFlags) (This)->lpVtbl->MultiByteToModifiedUTF7(This,pszSource,ppszDestination,uiSourceCP,dwFlags)
#define IIMAPTransport2_ModifiedUTF7ToMultiByte(This,pszSource,ppszDestination,uiDestinationCP,dwFlags) (This)->lpVtbl->ModifiedUTF7ToMultiByte(This,pszSource,ppszDestination,uiDestinationCP,dwFlags)
#define IIMAPTransport2_SetIdleMode(This,dwIdleFlags) (This)->lpVtbl->SetIdleMode(This,dwIdleFlags)
#define IIMAPTransport2_EnableFetchEx(This,dwFetchExFlags) (This)->lpVtbl->EnableFetchEx(This,dwFetchExFlags)
#define IIMAPTransport2_SetWindow(This) (This)->lpVtbl->SetWindow(This)
#define IIMAPTransport2_ResetWindow(This) (This)->lpVtbl->ResetWindow(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IIMAPTransport2_QueryInterface(IIMAPTransport2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IIMAPTransport2_AddRef(IIMAPTransport2* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IIMAPTransport2_Release(IIMAPTransport2* This) {
    return This->lpVtbl->Release(This);
}
/*** IInternetTransport methods ***/
static FORCEINLINE HRESULT IIMAPTransport2_GetServerInfo(IIMAPTransport2* This,LPINETSERVER pInetServer) {
    return This->lpVtbl->GetServerInfo(This,pInetServer);
}
static FORCEINLINE IXPTYPE IIMAPTransport2_GetIXPType(IIMAPTransport2* This) {
    return This->lpVtbl->GetIXPType(This);
}
static FORCEINLINE HRESULT IIMAPTransport2_IsState(IIMAPTransport2* This,IXPISSTATE isstate) {
    return This->lpVtbl->IsState(This,isstate);
}
static FORCEINLINE HRESULT IIMAPTransport2_InetServerFromAccount(IIMAPTransport2* This,IImnAccount *pAccount,LPINETSERVER pInetServer) {
    return This->lpVtbl->InetServerFromAccount(This,pAccount,pInetServer);
}
static FORCEINLINE HRESULT IIMAPTransport2_Connect(IIMAPTransport2* This,LPINETSERVER pInetServer,boolean fAuthenticate,boolean fCommandLogging) {
    return This->lpVtbl->Connect(This,pInetServer,fAuthenticate,fCommandLogging);
}
static FORCEINLINE HRESULT IIMAPTransport2_HandsOffCallback(IIMAPTransport2* This) {
    return This->lpVtbl->HandsOffCallback(This);
}
static FORCEINLINE HRESULT IIMAPTransport2_Disconnect(IIMAPTransport2* This) {
    return This->lpVtbl->Disconnect(This);
}
static FORCEINLINE HRESULT IIMAPTransport2_DropConnection(IIMAPTransport2* This) {
    return This->lpVtbl->DropConnection(This);
}
static FORCEINLINE HRESULT IIMAPTransport2_GetStatus(IIMAPTransport2* This,IXPSTATUS *pCurrentStatus) {
    return This->lpVtbl->GetStatus(This,pCurrentStatus);
}
/*** IIMAPTransport methods ***/
static FORCEINLINE HRESULT IIMAPTransport2_InitNew(IIMAPTransport2* This,LPSTR pszLogFilePath,IIMAPCallback *pCBHandler) {
    return This->lpVtbl->InitNew(This,pszLogFilePath,pCBHandler);
}
static FORCEINLINE HRESULT IIMAPTransport2_NewIRangeList(IIMAPTransport2* This,IRangeList **pprlNewRangeList) {
    return This->lpVtbl->NewIRangeList(This,pprlNewRangeList);
}
static FORCEINLINE HRESULT IIMAPTransport2_Capability(IIMAPTransport2* This,DWORD *pdwCapabilityFlags) {
    return This->lpVtbl->Capability(This,pdwCapabilityFlags);
}
static FORCEINLINE HRESULT IIMAPTransport2_Select(IIMAPTransport2* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszMailboxName) {
    return This->lpVtbl->Select(This,wParam,lParam,pCBHandler,lpszMailboxName);
}
static FORCEINLINE HRESULT IIMAPTransport2_Examine(IIMAPTransport2* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszMailboxName) {
    return This->lpVtbl->Examine(This,wParam,lParam,pCBHandler,lpszMailboxName);
}
static FORCEINLINE HRESULT IIMAPTransport2_Create(IIMAPTransport2* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszMailboxName) {
    return This->lpVtbl->Create(This,wParam,lParam,pCBHandler,lpszMailboxName);
}
static FORCEINLINE HRESULT IIMAPTransport2_Delete(IIMAPTransport2* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszMailboxName) {
    return This->lpVtbl->Delete(This,wParam,lParam,pCBHandler,lpszMailboxName);
}
static FORCEINLINE HRESULT IIMAPTransport2_Rename(IIMAPTransport2* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszMailboxName,LPSTR lpszNewMailboxName) {
    return This->lpVtbl->Rename(This,wParam,lParam,pCBHandler,lpszMailboxName,lpszNewMailboxName);
}
static FORCEINLINE HRESULT IIMAPTransport2_Subscribe(IIMAPTransport2* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszMailboxName) {
    return This->lpVtbl->Subscribe(This,wParam,lParam,pCBHandler,lpszMailboxName);
}
static FORCEINLINE HRESULT IIMAPTransport2_Unsubscribe(IIMAPTransport2* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszMailboxName) {
    return This->lpVtbl->Unsubscribe(This,wParam,lParam,pCBHandler,lpszMailboxName);
}
static FORCEINLINE HRESULT IIMAPTransport2_List(IIMAPTransport2* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszMailboxNameReference,LPSTR lpszMailboxNamePattern) {
    return This->lpVtbl->List(This,wParam,lParam,pCBHandler,lpszMailboxNameReference,lpszMailboxNamePattern);
}
static FORCEINLINE HRESULT IIMAPTransport2_Lsub(IIMAPTransport2* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszMailboxNameReference,LPSTR lpszMailboxNamePattern) {
    return This->lpVtbl->Lsub(This,wParam,lParam,pCBHandler,lpszMailboxNameReference,lpszMailboxNamePattern);
}
static FORCEINLINE HRESULT IIMAPTransport2_Append(IIMAPTransport2* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszMailboxName,LPSTR lpszMessageFlags,FILETIME ftMessageDateTime,LPSTREAM lpstmMessageToSave) {
    return This->lpVtbl->Append(This,wParam,lParam,pCBHandler,lpszMailboxName,lpszMessageFlags,ftMessageDateTime,lpstmMessageToSave);
}
static FORCEINLINE HRESULT IIMAPTransport2_Close(IIMAPTransport2* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler) {
    return This->lpVtbl->Close(This,wParam,lParam,pCBHandler);
}
static FORCEINLINE HRESULT IIMAPTransport2_Expunge(IIMAPTransport2* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler) {
    return This->lpVtbl->Expunge(This,wParam,lParam,pCBHandler);
}
static FORCEINLINE HRESULT IIMAPTransport2_Search(IIMAPTransport2* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR lpszSearchCriteria,boolean bReturnUIDs,IRangeList *pMsgRange,boolean bUIDRangeList) {
    return This->lpVtbl->Search(This,wParam,lParam,pCBHandler,lpszSearchCriteria,bReturnUIDs,pMsgRange,bUIDRangeList);
}
static FORCEINLINE HRESULT IIMAPTransport2_Fetch(IIMAPTransport2* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,IRangeList *pMsgRange,boolean bUIDMsgRange,LPSTR lpszFetchArgs) {
    return This->lpVtbl->Fetch(This,wParam,lParam,pCBHandler,pMsgRange,bUIDMsgRange,lpszFetchArgs);
}
static FORCEINLINE HRESULT IIMAPTransport2_Store(IIMAPTransport2* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,IRangeList *pMsgRange,boolean bUIDRangeList,LPSTR lpszStoreArgs) {
    return This->lpVtbl->Store(This,wParam,lParam,pCBHandler,pMsgRange,bUIDRangeList,lpszStoreArgs);
}
static FORCEINLINE HRESULT IIMAPTransport2_Copy(IIMAPTransport2* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,IRangeList *pMsgRange,boolean bUIDRangeList,LPSTR lpszMailboxName) {
    return This->lpVtbl->Copy(This,wParam,lParam,pCBHandler,pMsgRange,bUIDRangeList,lpszMailboxName);
}
static FORCEINLINE HRESULT IIMAPTransport2_Noop(IIMAPTransport2* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler) {
    return This->lpVtbl->Noop(This,wParam,lParam,pCBHandler);
}
static FORCEINLINE HRESULT IIMAPTransport2_ResizeMsgSeqNumTable(IIMAPTransport2* This,DWORD dwSizeOfMbox) {
    return This->lpVtbl->ResizeMsgSeqNumTable(This,dwSizeOfMbox);
}
static FORCEINLINE HRESULT IIMAPTransport2_UpdateSeqNumToUID(IIMAPTransport2* This,DWORD dwMsgSeqNum,DWORD dwUID) {
    return This->lpVtbl->UpdateSeqNumToUID(This,dwMsgSeqNum,dwUID);
}
static FORCEINLINE HRESULT IIMAPTransport2_RemoveSequenceNum(IIMAPTransport2* This,DWORD dwDeletedMsgSeqNum) {
    return This->lpVtbl->RemoveSequenceNum(This,dwDeletedMsgSeqNum);
}
static FORCEINLINE HRESULT IIMAPTransport2_MsgSeqNumToUID(IIMAPTransport2* This,DWORD dwMsgSeqNum,DWORD *pdwUID) {
    return This->lpVtbl->MsgSeqNumToUID(This,dwMsgSeqNum,pdwUID);
}
static FORCEINLINE HRESULT IIMAPTransport2_GetMsgSeqNumToUIDArray(IIMAPTransport2* This,DWORD **ppdwMsgSeqNumToUIDArray,DWORD *pdwNumberOfElements) {
    return This->lpVtbl->GetMsgSeqNumToUIDArray(This,ppdwMsgSeqNumToUIDArray,pdwNumberOfElements);
}
static FORCEINLINE HRESULT IIMAPTransport2_GetHighestMsgSeqNum(IIMAPTransport2* This,DWORD *pdwHighestMSN) {
    return This->lpVtbl->GetHighestMsgSeqNum(This,pdwHighestMSN);
}
static FORCEINLINE HRESULT IIMAPTransport2_ResetMsgSeqNumToUID(IIMAPTransport2* This) {
    return This->lpVtbl->ResetMsgSeqNumToUID(This);
}
static FORCEINLINE HRESULT IIMAPTransport2_SetDefaultCBHandler(IIMAPTransport2* This,IIMAPCallback *pCBHandler) {
    return This->lpVtbl->SetDefaultCBHandler(This,pCBHandler);
}
static FORCEINLINE HRESULT IIMAPTransport2_Status(IIMAPTransport2* This,WPARAM wParam,LPARAM lParam,IIMAPCallback *pCBHandler,LPSTR pszMailboxName,LPSTR pszStatusCmdArgs) {
    return This->lpVtbl->Status(This,wParam,lParam,pCBHandler,pszMailboxName,pszStatusCmdArgs);
}
/*** IIMAPTransport2 methods ***/
static FORCEINLINE HRESULT IIMAPTransport2_SetDefaultCP(IIMAPTransport2* This,DWORD dwTranslateFlags,UINT uiCodePage) {
    return This->lpVtbl->SetDefaultCP(This,dwTranslateFlags,uiCodePage);
}
static FORCEINLINE HRESULT IIMAPTransport2_MultiByteToModifiedUTF7(IIMAPTransport2* This,LPCSTR pszSource,LPSTR *ppszDestination,UINT uiSourceCP,DWORD dwFlags) {
    return This->lpVtbl->MultiByteToModifiedUTF7(This,pszSource,ppszDestination,uiSourceCP,dwFlags);
}
static FORCEINLINE HRESULT IIMAPTransport2_ModifiedUTF7ToMultiByte(IIMAPTransport2* This,LPCSTR pszSource,LPSTR *ppszDestination,UINT uiDestinationCP,DWORD dwFlags) {
    return This->lpVtbl->ModifiedUTF7ToMultiByte(This,pszSource,ppszDestination,uiDestinationCP,dwFlags);
}
static FORCEINLINE HRESULT IIMAPTransport2_SetIdleMode(IIMAPTransport2* This,DWORD dwIdleFlags) {
    return This->lpVtbl->SetIdleMode(This,dwIdleFlags);
}
static FORCEINLINE HRESULT IIMAPTransport2_EnableFetchEx(IIMAPTransport2* This,DWORD dwFetchExFlags) {
    return This->lpVtbl->EnableFetchEx(This,dwFetchExFlags);
}
static FORCEINLINE HRESULT IIMAPTransport2_SetWindow(IIMAPTransport2* This) {
    return This->lpVtbl->SetWindow(This);
}
static FORCEINLINE HRESULT IIMAPTransport2_ResetWindow(IIMAPTransport2* This) {
    return This->lpVtbl->ResetWindow(This);
}
#endif
#endif

#endif


#endif  /* __IIMAPTransport2_INTERFACE_DEFINED__ */

// --------------------------------------------------------------------------------
// Exported C Functions
// --------------------------------------------------------------------------------
#if !defined(_IMNXPORT_)
#define IMNXPORTAPI DECLSPEC_IMPORT HRESULT WINAPI
#else
#define IMNXPORTAPI HRESULT WINAPI
#endif
#ifdef __cplusplus
extern "C" {
#endif

// --------------------------------------------------------------------------------
//   CreateRASTransport
//   
//   Description:
//   This method creates a IRASTransport object. The client must initialize the
//   object by calling IRASTransport::InitNew
//   
//   Parameters:
//   ppTransport                 Upon successful return, contains the a pointer to
//                               an IRASTransport interface
//   
//   Return Values:
//   S_OK                        Successful.
//   E_INVALIDARG                ppTransport is NULL
//   E_OUTOFMEMORY               Memory allocation failure...
//   
// --------------------------------------------------------------------------------
IMNXPORTAPI CreateRASTransport(
                  /* out */     _Outptr_ IRASTransport **ppTransport);

// --------------------------------------------------------------------------------
//   CreateNNTPTransport
//   
//   Description:
//   This method creates a INNTPTransport object. The client must initialize the
//   object by calling INNTPTransport::InitNew
//   
//   Parameters:
//   ppTransport                 Upon successful return, contains the a pointer to
//                               an INNTPTransport interface
//   
//   Return Values:
//   S_OK                        Successful.
//   E_INVALIDARG                ppTransport is NULL
//   E_OUTOFMEMORY               Memory allocation failure...
//   
// --------------------------------------------------------------------------------
IMNXPORTAPI CreateNNTPTransport(
                  /* out */     _Outptr_ INNTPTransport **ppTransport);

// --------------------------------------------------------------------------------
//   CreateSMTPTransport
//   
//   Description:
//   This method creates a ISMTPTransport object. The client must initialize the
//   object by calling ISMTPTransport::InitNew
//   
//   Parameters:
//   ppTransport                 Upon successful return, contains the a pointer to
//                               an ISMTPTransport interface
//   
//   Return Values:
//   S_OK                        Successful.
//   E_INVALIDARG                ppTransport is NULL
//   E_OUTOFMEMORY               Memory allocation failure...
//   
// --------------------------------------------------------------------------------
IMNXPORTAPI CreateSMTPTransport(
                  /* out */     _Outptr_ ISMTPTransport **ppTransport);

// --------------------------------------------------------------------------------
//   CreatePOP3Transport
//   
//   Description:
//   This method creates a IPOP3Transport object. The client must initialize the
//   object by calling IPOP3Transport::InitNew
//   
//   Parameters:
//   ppTransport                 Upon successful return, contains the a pointer to
//                               an IPOP3Transport interface
//   
//   Return Values:
//   S_OK                        Successful.
//   E_INVALIDARG                ppTransport is NULL
//   E_OUTOFMEMORY               Memory allocation failure...
//   
// --------------------------------------------------------------------------------
IMNXPORTAPI CreatePOP3Transport(
                  /* out */     _Outptr_ IPOP3Transport **ppTransport);

// --------------------------------------------------------------------------------
//   CreateIMAPTransport
//   
//   Description:
//   This method creates a IIMAPTransport object. The client must initialize the
//   object by calling IIMAPTransport::InitNew
//   
//   Parameters:
//   ppTransport                 Upon successful return, contains the a pointer to
//                               an IIMAPTransport interface
//   
//   Return Values:
//   S_OK                        Successful.
//   E_INVALIDARG                ppTransport is NULL
//   E_OUTOFMEMORY               Memory allocation failure...
//   
// --------------------------------------------------------------------------------
IMNXPORTAPI CreateIMAPTransport(
                  /* out */     _Outptr_ IIMAPTransport **ppTransport);

// --------------------------------------------------------------------------------
//   CreateIMAPTransport2
//   
//   Description:
//   This method creates an IIMAPTransport2 object. The client must initialize the
//   object by calling IIMAPTransport2::InitNew
//   
//   Parameters:
//   ppTransport                 Upon successful return, contains the a pointer to
//                               an IIMAPTransport2 interface
//   
//   Return Values:
//   S_OK                        Successful.
//   E_INVALIDARG                ppTransport is NULL
//   E_OUTOFMEMORY               Memory allocation failure...
//   
// --------------------------------------------------------------------------------
IMNXPORTAPI CreateIMAPTransport2(
                  /* out */     _Outptr_ IIMAPTransport2 **ppTransport);

// --------------------------------------------------------------------------------
//   CreateRangeList
//   
//   Description:
//   This method creates a IRangeList object.
//   
//   Parameters:
//   ppRangeList                 Upon successful return, contains the a pointer to
//                               an IRangeList interface
//   
//   Return Values:
//   S_OK                        Successful.
//   E_INVALIDARG                ppRangeList is NULL
//   E_OUTOFMEMORY               Memory allocation failure...
//   
// --------------------------------------------------------------------------------
IMNXPORTAPI CreateRangeList(
                  /* out */     _Outptr_ IRangeList **ppRangeList);

#ifdef __cplusplus
}
#endif

#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) */
/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __imnxport_h__ */
