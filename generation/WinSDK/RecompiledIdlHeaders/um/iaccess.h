/*** Autogenerated by WIDL 5.0 from ./iaccess.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __iaccess_h__
#define __iaccess_h__

/* Forward declarations */

#ifndef __IAccessControl_FWD_DEFINED__
#define __IAccessControl_FWD_DEFINED__
typedef interface IAccessControl IAccessControl;
#ifdef __cplusplus
interface IAccessControl;
#endif /* __cplusplus */
#endif

#ifndef __IAuditControl_FWD_DEFINED__
#define __IAuditControl_FWD_DEFINED__
typedef interface IAuditControl IAuditControl;
#ifdef __cplusplus
interface IAuditControl;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <unknwn.h>
#include <accctrl.h>

#ifdef __cplusplus
extern "C" {
#endif

//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
//--------------------------------------------------------------------------
#if ( _MSC_VER >= 1020 )
#pragma once
#endif
#include <winapifamily.h>
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
typedef PACTRL_ACCESSW PACTRL_ACCESSW_ALLOCATE_ALL_NODES;
typedef PACTRL_AUDITW PACTRL_AUDITW_ALLOCATE_ALL_NODES;
#ifndef __IAccessControl_FWD_DEFINED__
#define __IAccessControl_FWD_DEFINED__
typedef interface IAccessControl IAccessControl;
#ifdef __cplusplus
interface IAccessControl;
#endif /* __cplusplus */
#endif

/*****************************************************************************
 * IAccessControl interface
 */
#ifndef __IAccessControl_INTERFACE_DEFINED__
#define __IAccessControl_INTERFACE_DEFINED__

DEFINE_GUID(IID_IAccessControl, 0xeedd23e0, 0x8410, 0x11ce, 0xa1,0xc3, 0x08,0x00,0x2b,0x2b,0x8d,0x8f);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("eedd23e0-8410-11ce-a1c3-08002b2b8d8f")
IAccessControl : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GrantAccessRights(
        PACTRL_ACCESSW pAccessList) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetAccessRights(
        PACTRL_ACCESSW pAccessList) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetOwner(
        PTRUSTEEW pOwner,
        PTRUSTEEW pGroup) = 0;

    virtual HRESULT STDMETHODCALLTYPE RevokeAccessRights(
        LPWSTR lpProperty,
        ULONG cTrustees,
        TRUSTEEW prgTrustees[]) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetAllAccessRights(
        LPWSTR lpProperty,
        PACTRL_ACCESSW_ALLOCATE_ALL_NODES *ppAccessList,
        PTRUSTEEW *ppOwner,
        PTRUSTEEW *ppGroup) = 0;

    virtual HRESULT STDMETHODCALLTYPE IsAccessAllowed(
        PTRUSTEEW pTrustee,
        LPWSTR lpProperty,
        ACCESS_RIGHTS AccessRights,
        BOOL *pfAccessAllowed) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IAccessControl, 0xeedd23e0, 0x8410, 0x11ce, 0xa1,0xc3, 0x08,0x00,0x2b,0x2b,0x8d,0x8f)
#endif
#else
typedef struct IAccessControlVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IAccessControl *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IAccessControl *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IAccessControl *This);

    /*** IAccessControl methods ***/
    HRESULT (STDMETHODCALLTYPE *GrantAccessRights)(
        IAccessControl *This,
        PACTRL_ACCESSW pAccessList);

    HRESULT (STDMETHODCALLTYPE *SetAccessRights)(
        IAccessControl *This,
        PACTRL_ACCESSW pAccessList);

    HRESULT (STDMETHODCALLTYPE *SetOwner)(
        IAccessControl *This,
        PTRUSTEEW pOwner,
        PTRUSTEEW pGroup);

    HRESULT (STDMETHODCALLTYPE *RevokeAccessRights)(
        IAccessControl *This,
        LPWSTR lpProperty,
        ULONG cTrustees,
        TRUSTEEW prgTrustees[]);

    HRESULT (STDMETHODCALLTYPE *GetAllAccessRights)(
        IAccessControl *This,
        LPWSTR lpProperty,
        PACTRL_ACCESSW_ALLOCATE_ALL_NODES *ppAccessList,
        PTRUSTEEW *ppOwner,
        PTRUSTEEW *ppGroup);

    HRESULT (STDMETHODCALLTYPE *IsAccessAllowed)(
        IAccessControl *This,
        PTRUSTEEW pTrustee,
        LPWSTR lpProperty,
        ACCESS_RIGHTS AccessRights,
        BOOL *pfAccessAllowed);

    END_INTERFACE
} IAccessControlVtbl;

interface IAccessControl {
    CONST_VTBL IAccessControlVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IAccessControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAccessControl_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAccessControl_Release(This) (This)->lpVtbl->Release(This)
/*** IAccessControl methods ***/
#define IAccessControl_GrantAccessRights(This,pAccessList) (This)->lpVtbl->GrantAccessRights(This,pAccessList)
#define IAccessControl_SetAccessRights(This,pAccessList) (This)->lpVtbl->SetAccessRights(This,pAccessList)
#define IAccessControl_SetOwner(This,pOwner,pGroup) (This)->lpVtbl->SetOwner(This,pOwner,pGroup)
#define IAccessControl_RevokeAccessRights(This,lpProperty,cTrustees,prgTrustees) (This)->lpVtbl->RevokeAccessRights(This,lpProperty,cTrustees,prgTrustees)
#define IAccessControl_GetAllAccessRights(This,lpProperty,ppAccessList,ppOwner,ppGroup) (This)->lpVtbl->GetAllAccessRights(This,lpProperty,ppAccessList,ppOwner,ppGroup)
#define IAccessControl_IsAccessAllowed(This,pTrustee,lpProperty,AccessRights,pfAccessAllowed) (This)->lpVtbl->IsAccessAllowed(This,pTrustee,lpProperty,AccessRights,pfAccessAllowed)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IAccessControl_QueryInterface(IAccessControl* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IAccessControl_AddRef(IAccessControl* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IAccessControl_Release(IAccessControl* This) {
    return This->lpVtbl->Release(This);
}
/*** IAccessControl methods ***/
static FORCEINLINE HRESULT IAccessControl_GrantAccessRights(IAccessControl* This,PACTRL_ACCESSW pAccessList) {
    return This->lpVtbl->GrantAccessRights(This,pAccessList);
}
static FORCEINLINE HRESULT IAccessControl_SetAccessRights(IAccessControl* This,PACTRL_ACCESSW pAccessList) {
    return This->lpVtbl->SetAccessRights(This,pAccessList);
}
static FORCEINLINE HRESULT IAccessControl_SetOwner(IAccessControl* This,PTRUSTEEW pOwner,PTRUSTEEW pGroup) {
    return This->lpVtbl->SetOwner(This,pOwner,pGroup);
}
static FORCEINLINE HRESULT IAccessControl_RevokeAccessRights(IAccessControl* This,LPWSTR lpProperty,ULONG cTrustees,TRUSTEEW prgTrustees[]) {
    return This->lpVtbl->RevokeAccessRights(This,lpProperty,cTrustees,prgTrustees);
}
static FORCEINLINE HRESULT IAccessControl_GetAllAccessRights(IAccessControl* This,LPWSTR lpProperty,PACTRL_ACCESSW_ALLOCATE_ALL_NODES *ppAccessList,PTRUSTEEW *ppOwner,PTRUSTEEW *ppGroup) {
    return This->lpVtbl->GetAllAccessRights(This,lpProperty,ppAccessList,ppOwner,ppGroup);
}
static FORCEINLINE HRESULT IAccessControl_IsAccessAllowed(IAccessControl* This,PTRUSTEEW pTrustee,LPWSTR lpProperty,ACCESS_RIGHTS AccessRights,BOOL *pfAccessAllowed) {
    return This->lpVtbl->IsAccessAllowed(This,pTrustee,lpProperty,AccessRights,pfAccessAllowed);
}
#endif
#endif

#endif


#endif  /* __IAccessControl_INTERFACE_DEFINED__ */

#ifndef __IAuditControl_FWD_DEFINED__
#define __IAuditControl_FWD_DEFINED__
typedef interface IAuditControl IAuditControl;
#ifdef __cplusplus
interface IAuditControl;
#endif /* __cplusplus */
#endif

/*****************************************************************************
 * IAuditControl interface
 */
#ifndef __IAuditControl_INTERFACE_DEFINED__
#define __IAuditControl_INTERFACE_DEFINED__

DEFINE_GUID(IID_IAuditControl, 0x1da6292f, 0xbc66, 0x11ce, 0xaa,0xe3, 0x00,0xaa,0x00,0x4c,0x27,0x37);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("1da6292f-bc66-11ce-aae3-00aa004c2737")
IAuditControl : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GrantAuditRights(
        PACTRL_AUDITW pAuditList) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetAuditRights(
        PACTRL_AUDITW pAuditList) = 0;

    virtual HRESULT STDMETHODCALLTYPE RevokeAuditRights(
        LPWSTR lpProperty,
        ULONG cTrustees,
        TRUSTEEW prgTrustees[]) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetAllAuditRights(
        LPWSTR lpProperty,
        PACTRL_AUDITW *ppAuditList) = 0;

    virtual HRESULT STDMETHODCALLTYPE IsAccessAudited(
        PTRUSTEEW pTrustee,
        ACCESS_RIGHTS AuditRights,
        BOOL *pfAccessAudited) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IAuditControl, 0x1da6292f, 0xbc66, 0x11ce, 0xaa,0xe3, 0x00,0xaa,0x00,0x4c,0x27,0x37)
#endif
#else
typedef struct IAuditControlVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IAuditControl *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IAuditControl *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IAuditControl *This);

    /*** IAuditControl methods ***/
    HRESULT (STDMETHODCALLTYPE *GrantAuditRights)(
        IAuditControl *This,
        PACTRL_AUDITW pAuditList);

    HRESULT (STDMETHODCALLTYPE *SetAuditRights)(
        IAuditControl *This,
        PACTRL_AUDITW pAuditList);

    HRESULT (STDMETHODCALLTYPE *RevokeAuditRights)(
        IAuditControl *This,
        LPWSTR lpProperty,
        ULONG cTrustees,
        TRUSTEEW prgTrustees[]);

    HRESULT (STDMETHODCALLTYPE *GetAllAuditRights)(
        IAuditControl *This,
        LPWSTR lpProperty,
        PACTRL_AUDITW *ppAuditList);

    HRESULT (STDMETHODCALLTYPE *IsAccessAudited)(
        IAuditControl *This,
        PTRUSTEEW pTrustee,
        ACCESS_RIGHTS AuditRights,
        BOOL *pfAccessAudited);

    END_INTERFACE
} IAuditControlVtbl;

interface IAuditControl {
    CONST_VTBL IAuditControlVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IAuditControl_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAuditControl_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAuditControl_Release(This) (This)->lpVtbl->Release(This)
/*** IAuditControl methods ***/
#define IAuditControl_GrantAuditRights(This,pAuditList) (This)->lpVtbl->GrantAuditRights(This,pAuditList)
#define IAuditControl_SetAuditRights(This,pAuditList) (This)->lpVtbl->SetAuditRights(This,pAuditList)
#define IAuditControl_RevokeAuditRights(This,lpProperty,cTrustees,prgTrustees) (This)->lpVtbl->RevokeAuditRights(This,lpProperty,cTrustees,prgTrustees)
#define IAuditControl_GetAllAuditRights(This,lpProperty,ppAuditList) (This)->lpVtbl->GetAllAuditRights(This,lpProperty,ppAuditList)
#define IAuditControl_IsAccessAudited(This,pTrustee,AuditRights,pfAccessAudited) (This)->lpVtbl->IsAccessAudited(This,pTrustee,AuditRights,pfAccessAudited)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IAuditControl_QueryInterface(IAuditControl* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IAuditControl_AddRef(IAuditControl* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IAuditControl_Release(IAuditControl* This) {
    return This->lpVtbl->Release(This);
}
/*** IAuditControl methods ***/
static FORCEINLINE HRESULT IAuditControl_GrantAuditRights(IAuditControl* This,PACTRL_AUDITW pAuditList) {
    return This->lpVtbl->GrantAuditRights(This,pAuditList);
}
static FORCEINLINE HRESULT IAuditControl_SetAuditRights(IAuditControl* This,PACTRL_AUDITW pAuditList) {
    return This->lpVtbl->SetAuditRights(This,pAuditList);
}
static FORCEINLINE HRESULT IAuditControl_RevokeAuditRights(IAuditControl* This,LPWSTR lpProperty,ULONG cTrustees,TRUSTEEW prgTrustees[]) {
    return This->lpVtbl->RevokeAuditRights(This,lpProperty,cTrustees,prgTrustees);
}
static FORCEINLINE HRESULT IAuditControl_GetAllAuditRights(IAuditControl* This,LPWSTR lpProperty,PACTRL_AUDITW *ppAuditList) {
    return This->lpVtbl->GetAllAuditRights(This,lpProperty,ppAuditList);
}
static FORCEINLINE HRESULT IAuditControl_IsAccessAudited(IAuditControl* This,PTRUSTEEW pTrustee,ACCESS_RIGHTS AuditRights,BOOL *pfAccessAudited) {
    return This->lpVtbl->IsAccessAudited(This,pTrustee,AuditRights,pfAccessAudited);
}
#endif
#endif

#endif


#endif  /* __IAuditControl_INTERFACE_DEFINED__ */

#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) */
/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __iaccess_h__ */
