/*** Autogenerated by WIDL 7.0-rc1 from ./dpx1.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __dpx1_h__
#define __dpx1_h__

/* Forward declarations */

#ifndef __IDpxJob_FWD_DEFINED__
#define __IDpxJob_FWD_DEFINED__
typedef interface IDpxJob IDpxJob;
#ifdef __cplusplus
interface IDpxJob;
#endif /* __cplusplus */
#endif

#ifndef __IFileHashProviderCallback_FWD_DEFINED__
#define __IFileHashProviderCallback_FWD_DEFINED__
typedef interface IFileHashProviderCallback IFileHashProviderCallback;
#ifdef __cplusplus
interface IFileHashProviderCallback;
#endif /* __cplusplus */
#endif

#ifndef __IDpxJob2_FWD_DEFINED__
#define __IDpxJob2_FWD_DEFINED__
typedef interface IDpxJob2 IDpxJob2;
#ifdef __cplusplus
interface IDpxJob2;
#endif /* __cplusplus */
#endif

#ifndef __IDpxContainer_FWD_DEFINED__
#define __IDpxContainer_FWD_DEFINED__
typedef interface IDpxContainer IDpxContainer;
#ifdef __cplusplus
interface IDpxContainer;
#endif /* __cplusplus */
#endif

#ifndef __IDpxFile_FWD_DEFINED__
#define __IDpxFile_FWD_DEFINED__
typedef interface IDpxFile IDpxFile;
#ifdef __cplusplus
interface IDpxFile;
#endif /* __cplusplus */
#endif

#ifndef __IDpxFile2_FWD_DEFINED__
#define __IDpxFile2_FWD_DEFINED__
typedef interface IDpxFile2 IDpxFile2;
#ifdef __cplusplus
interface IDpxFile2;
#endif /* __cplusplus */
#endif

#ifndef __IDpxContainerDirectoryEntry_FWD_DEFINED__
#define __IDpxContainerDirectoryEntry_FWD_DEFINED__
typedef interface IDpxContainerDirectoryEntry IDpxContainerDirectoryEntry;
#ifdef __cplusplus
interface IDpxContainerDirectoryEntry;
#endif /* __cplusplus */
#endif

#ifndef __IDpxDownloadProvider_FWD_DEFINED__
#define __IDpxDownloadProvider_FWD_DEFINED__
typedef interface IDpxDownloadProvider IDpxDownloadProvider;
#ifdef __cplusplus
interface IDpxDownloadProvider;
#endif /* __cplusplus */
#endif

#ifndef __IDpxDownloadCallback_FWD_DEFINED__
#define __IDpxDownloadCallback_FWD_DEFINED__
typedef interface IDpxDownloadCallback IDpxDownloadCallback;
#ifdef __cplusplus
interface IDpxDownloadCallback;
#endif /* __cplusplus */
#endif

#ifndef __IEnumDpxContainers_FWD_DEFINED__
#define __IEnumDpxContainers_FWD_DEFINED__
typedef interface IEnumDpxContainers IEnumDpxContainers;
#ifdef __cplusplus
interface IEnumDpxContainers;
#endif /* __cplusplus */
#endif

#ifndef __IEnumDpxFiles_FWD_DEFINED__
#define __IEnumDpxFiles_FWD_DEFINED__
typedef interface IEnumDpxFiles IEnumDpxFiles;
#ifdef __cplusplus
interface IEnumDpxFiles;
#endif /* __cplusplus */
#endif

#ifndef __IEnumDpxContainerDirectoryEntries_FWD_DEFINED__
#define __IEnumDpxContainerDirectoryEntries_FWD_DEFINED__
typedef interface IEnumDpxContainerDirectoryEntries IEnumDpxContainerDirectoryEntries;
#ifdef __cplusplus
interface IEnumDpxContainerDirectoryEntries;
#endif /* __cplusplus */
#endif

#ifndef __IDpxEncryptedContainer_FWD_DEFINED__
#define __IDpxEncryptedContainer_FWD_DEFINED__
typedef interface IDpxEncryptedContainer IDpxEncryptedContainer;
#ifdef __cplusplus
interface IDpxEncryptedContainer;
#endif /* __cplusplus */
#endif

#ifndef __IDpxContainer2_FWD_DEFINED__
#define __IDpxContainer2_FWD_DEFINED__
typedef interface IDpxContainer2 IDpxContainer2;
#ifdef __cplusplus
interface IDpxContainer2;
#endif /* __cplusplus */
#endif

#ifndef __IDpxContainer3_FWD_DEFINED__
#define __IDpxContainer3_FWD_DEFINED__
typedef interface IDpxContainer3 IDpxContainer3;
#ifdef __cplusplus
interface IDpxContainer3;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <oaidl.h>
#include <ocidl.h>

#ifdef __cplusplus
extern "C" {
#endif

// Copyright (c) Microsoft Corporation.  All rights reserved.

#include <winapifamily.h>
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
#include <SpecStrings.h>
typedef unsigned int ALG_ID;
#ifndef __IDpxJob_FWD_DEFINED__
#define __IDpxJob_FWD_DEFINED__
typedef interface IDpxJob IDpxJob;
#ifdef __cplusplus
interface IDpxJob;
#endif /* __cplusplus */
#endif

#ifndef __IDpxContainer_FWD_DEFINED__
#define __IDpxContainer_FWD_DEFINED__
typedef interface IDpxContainer IDpxContainer;
#ifdef __cplusplus
interface IDpxContainer;
#endif /* __cplusplus */
#endif

#ifndef __IDpxFile_FWD_DEFINED__
#define __IDpxFile_FWD_DEFINED__
typedef interface IDpxFile IDpxFile;
#ifdef __cplusplus
interface IDpxFile;
#endif /* __cplusplus */
#endif

#ifndef __IDpxContainerDirectoryEntry_FWD_DEFINED__
#define __IDpxContainerDirectoryEntry_FWD_DEFINED__
typedef interface IDpxContainerDirectoryEntry IDpxContainerDirectoryEntry;
#ifdef __cplusplus
interface IDpxContainerDirectoryEntry;
#endif /* __cplusplus */
#endif

#ifndef __IDpxDownloadProvider_FWD_DEFINED__
#define __IDpxDownloadProvider_FWD_DEFINED__
typedef interface IDpxDownloadProvider IDpxDownloadProvider;
#ifdef __cplusplus
interface IDpxDownloadProvider;
#endif /* __cplusplus */
#endif

#ifndef __IDpxDownloadCallback_FWD_DEFINED__
#define __IDpxDownloadCallback_FWD_DEFINED__
typedef interface IDpxDownloadCallback IDpxDownloadCallback;
#ifdef __cplusplus
interface IDpxDownloadCallback;
#endif /* __cplusplus */
#endif

#ifndef __IEnumDpxContainers_FWD_DEFINED__
#define __IEnumDpxContainers_FWD_DEFINED__
typedef interface IEnumDpxContainers IEnumDpxContainers;
#ifdef __cplusplus
interface IEnumDpxContainers;
#endif /* __cplusplus */
#endif

#ifndef __IEnumDpxFiles_FWD_DEFINED__
#define __IEnumDpxFiles_FWD_DEFINED__
typedef interface IEnumDpxFiles IEnumDpxFiles;
#ifdef __cplusplus
interface IEnumDpxFiles;
#endif /* __cplusplus */
#endif

#ifndef __IEnumDpxContainerDirectoryEntries_FWD_DEFINED__
#define __IEnumDpxContainerDirectoryEntries_FWD_DEFINED__
typedef interface IEnumDpxContainerDirectoryEntries IEnumDpxContainerDirectoryEntries;
#ifdef __cplusplus
interface IEnumDpxContainerDirectoryEntries;
#endif /* __cplusplus */
#endif

typedef unsigned int LOCATIONTYPE;
#define LOCATIONTYPE_UNKNOWN (0x0)

#define LOCATIONTYPE_NONE (0x1000000)

#define LOCATIONTYPE_LOCAL (0x2000000)

#define LOCATIONTYPE_CAB (0x3000000)

#define LOCATIONTYPE_CMI (0x4000000)

#define LOCATIONTYPE__MASK_FLAGS (0xffff)

#define LOCATIONTYPE_RECURSIVE (0x1)

#define LOCATIONTYPE_ABSOLUTE (0x2)

#define LOCATIONTYPE_COMPRESSED (0x4)

#define LOCATIONTYPE_IGNORE (0x8)

#define LOCATIONTYPE_DUPLICATE (0x10)

#define LOCATIONTYPE_INTERMEDIATE (0x20)

#define LOCATIONTYPE__MASK_TYPE (0xffff0000)

typedef enum __WIDL_dpx1_generated_name_00000020 {
    DPX_RESUME_AND_DOWNLOAD = 0x0,
    DPX_RESUME_UNTIL_DOWNLOAD = 0x1,
    DPX_RESUME_AND_DOWNLOAD_FALLBACK = 0x2,
    DPX_RESUME_UNTIL_DOWNLOAD_NO_CLONE = 0x3
} DPX_RESUME_TYPE;
#define DPX_MAX_HASH_SIZE 64
typedef struct __WIDL_dpx1_generated_name_00000021 {
    ALG_ID AlgorithmId;
    UINT HashSize;
    BYTE HashData[64];
} DPX_HASH;
typedef struct __WIDL_dpx1_generated_name_00000022 {
    UINT64 Offset;
    UINT64 Length;
} DPX_BYTE_RANGE;
typedef enum __WIDL_dpx1_generated_name_00000023 {
    DPX_PHASE_JOB_IDLE = 0x0,
    DPX_PHASE_DOWNLOAD_INDEX = 0x10,
    DPX_PHASE_INVENTORY = 0x20,
    DPX_PHASE_DOWNLOAD_FILES = 0x30,
    DPX_PHASE_EXPAND_FILES = 0x40,
    DPX_PHASE_JOB_INPROGRESS = 0x50,
    DPX_PHASE_JOB_COMPLETE = 0x7f00,
    DPX_PHASE_JOB_CANCELLED = 0xfffe,
    DPX_PHASE_JOB_FAILURE = 0xffff
} DPX_PROGRESS_PHASE;
typedef struct __WIDL_dpx1_generated_name_00000024 {
    UINT64 Completed;
    UINT64 Remaining;
} DPX_PROGRESS_REMAIN;
typedef struct __WIDL_dpx1_generated_name_00000025 {
    DPX_PROGRESS_REMAIN Inventory;
    DPX_PROGRESS_REMAIN Download;
    DPX_PROGRESS_REMAIN Expansion;
    DPX_PROGRESS_REMAIN Files;
    DPX_PROGRESS_REMAIN Overall;
    DPX_PROGRESS_PHASE ePhase;
} DPX_PROGRESS;
#define DPX_OPTION_DELTA_BASIS_ROOT L"delta_basis_root"
#define DPX_COMPRESSION_ALGORITHM_OPTION_NAME L"postprocess_compression_algorithm"
#define DPX_CLEANUP_OPTION_NAME L"postprocess_source_cleanup"
#define DPX_COMPRESSION_ALGORITHM_XPRESS_HUFF L"xpress_huff"
#define DPX_COMPRESSION_ALGORITHM_WOF_PROVIDER_FILE L"wof_provider_file"
#define DPX_COMPRESSED_FILE_HEADER_LENGTH 4
#define DPX_COMPRESSED_FILE_HEADER_XPRESS_HUFF {'D', 'C', 'X', '\x01'}
#define DPX_XPRESS_HUFF_BLOCK_SIZE (1024 * 1024)
#define DPX_OPTION_TELEMETRY_CORRELATION_VECTOR L"Telemetry_correlation_vector"
#define DPX_OPTION_HASH_TYPE L"cix_hash_type"
#define DPX_OPTION_HARDLINK_ASSETS L"hardlink_assets"
#define DPX_OPTION_COMPLETE_SELF_COPIES L"complete_self_copies"
/*****************************************************************************
 * IDpxJob interface
 */
#ifndef __IDpxJob_INTERFACE_DEFINED__
#define __IDpxJob_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDpxJob, 0xddc1b711, 0x0e55, 0x452f, 0x83,0x8e, 0xd1,0x50,0x5b,0x86,0x6e,0x2b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ddc1b711-0e55-452f-838e-d1505b866e2b")
IDpxJob : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetTargetPath(
        LPWSTR *TargetPath) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddContainer(
        LPCWSTR ContainerPath,
        IDpxContainer **ppContainer) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumContainers(
        IEnumDpxContainers **ppEnumContainers) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetDownloadProvider(
        IDpxDownloadProvider *pDownloadProvider) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetDownloadProvider(
        IDpxDownloadProvider **ppDownloadProvider) = 0;

    virtual HRESULT STDMETHODCALLTYPE Resume(
        DPX_RESUME_TYPE eResumeType) = 0;

    virtual HRESULT STDMETHODCALLTYPE Suspend(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Cancel(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetProgress(
        DPX_PROGRESS *pProgress) = 0;

    virtual HRESULT STDMETHODCALLTYPE SaveJobState(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetUserValue(
        UINT64 UserValue) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetUserValue(
        UINT64 *pUserValue) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetOptionValue(
        LPCWSTR OptionName,
        LPCWSTR OptionValue) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetOptionValue(
        LPCWSTR OptionName,
        LPWSTR *pOptionValue) = 0;

    virtual void STDMETHODCALLTYPE FreeMemory(
        void *Allocation) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDpxJob, 0xddc1b711, 0x0e55, 0x452f, 0x83,0x8e, 0xd1,0x50,0x5b,0x86,0x6e,0x2b)
#endif
#else
typedef struct IDpxJobVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDpxJob *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDpxJob *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDpxJob *This);

    /*** IDpxJob methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTargetPath)(
        IDpxJob *This,
        LPWSTR *TargetPath);

    HRESULT (STDMETHODCALLTYPE *AddContainer)(
        IDpxJob *This,
        LPCWSTR ContainerPath,
        IDpxContainer **ppContainer);

    HRESULT (STDMETHODCALLTYPE *EnumContainers)(
        IDpxJob *This,
        IEnumDpxContainers **ppEnumContainers);

    HRESULT (STDMETHODCALLTYPE *SetDownloadProvider)(
        IDpxJob *This,
        IDpxDownloadProvider *pDownloadProvider);

    HRESULT (STDMETHODCALLTYPE *GetDownloadProvider)(
        IDpxJob *This,
        IDpxDownloadProvider **ppDownloadProvider);

    HRESULT (STDMETHODCALLTYPE *Resume)(
        IDpxJob *This,
        DPX_RESUME_TYPE eResumeType);

    HRESULT (STDMETHODCALLTYPE *Suspend)(
        IDpxJob *This);

    HRESULT (STDMETHODCALLTYPE *Cancel)(
        IDpxJob *This);

    HRESULT (STDMETHODCALLTYPE *GetProgress)(
        IDpxJob *This,
        DPX_PROGRESS *pProgress);

    HRESULT (STDMETHODCALLTYPE *SaveJobState)(
        IDpxJob *This);

    HRESULT (STDMETHODCALLTYPE *SetUserValue)(
        IDpxJob *This,
        UINT64 UserValue);

    HRESULT (STDMETHODCALLTYPE *GetUserValue)(
        IDpxJob *This,
        UINT64 *pUserValue);

    HRESULT (STDMETHODCALLTYPE *SetOptionValue)(
        IDpxJob *This,
        LPCWSTR OptionName,
        LPCWSTR OptionValue);

    HRESULT (STDMETHODCALLTYPE *GetOptionValue)(
        IDpxJob *This,
        LPCWSTR OptionName,
        LPWSTR *pOptionValue);

    void (STDMETHODCALLTYPE *FreeMemory)(
        IDpxJob *This,
        void *Allocation);

    END_INTERFACE
} IDpxJobVtbl;

interface IDpxJob {
    CONST_VTBL IDpxJobVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDpxJob_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDpxJob_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDpxJob_Release(This) (This)->lpVtbl->Release(This)
/*** IDpxJob methods ***/
#define IDpxJob_GetTargetPath(This,TargetPath) (This)->lpVtbl->GetTargetPath(This,TargetPath)
#define IDpxJob_AddContainer(This,ContainerPath,ppContainer) (This)->lpVtbl->AddContainer(This,ContainerPath,ppContainer)
#define IDpxJob_EnumContainers(This,ppEnumContainers) (This)->lpVtbl->EnumContainers(This,ppEnumContainers)
#define IDpxJob_SetDownloadProvider(This,pDownloadProvider) (This)->lpVtbl->SetDownloadProvider(This,pDownloadProvider)
#define IDpxJob_GetDownloadProvider(This,ppDownloadProvider) (This)->lpVtbl->GetDownloadProvider(This,ppDownloadProvider)
#define IDpxJob_Resume(This,eResumeType) (This)->lpVtbl->Resume(This,eResumeType)
#define IDpxJob_Suspend(This) (This)->lpVtbl->Suspend(This)
#define IDpxJob_Cancel(This) (This)->lpVtbl->Cancel(This)
#define IDpxJob_GetProgress(This,pProgress) (This)->lpVtbl->GetProgress(This,pProgress)
#define IDpxJob_SaveJobState(This) (This)->lpVtbl->SaveJobState(This)
#define IDpxJob_SetUserValue(This,UserValue) (This)->lpVtbl->SetUserValue(This,UserValue)
#define IDpxJob_GetUserValue(This,pUserValue) (This)->lpVtbl->GetUserValue(This,pUserValue)
#define IDpxJob_SetOptionValue(This,OptionName,OptionValue) (This)->lpVtbl->SetOptionValue(This,OptionName,OptionValue)
#define IDpxJob_GetOptionValue(This,OptionName,pOptionValue) (This)->lpVtbl->GetOptionValue(This,OptionName,pOptionValue)
#define IDpxJob_FreeMemory(This,Allocation) (This)->lpVtbl->FreeMemory(This,Allocation)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDpxJob_QueryInterface(IDpxJob* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDpxJob_AddRef(IDpxJob* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDpxJob_Release(IDpxJob* This) {
    return This->lpVtbl->Release(This);
}
/*** IDpxJob methods ***/
static FORCEINLINE HRESULT IDpxJob_GetTargetPath(IDpxJob* This,LPWSTR *TargetPath) {
    return This->lpVtbl->GetTargetPath(This,TargetPath);
}
static FORCEINLINE HRESULT IDpxJob_AddContainer(IDpxJob* This,LPCWSTR ContainerPath,IDpxContainer **ppContainer) {
    return This->lpVtbl->AddContainer(This,ContainerPath,ppContainer);
}
static FORCEINLINE HRESULT IDpxJob_EnumContainers(IDpxJob* This,IEnumDpxContainers **ppEnumContainers) {
    return This->lpVtbl->EnumContainers(This,ppEnumContainers);
}
static FORCEINLINE HRESULT IDpxJob_SetDownloadProvider(IDpxJob* This,IDpxDownloadProvider *pDownloadProvider) {
    return This->lpVtbl->SetDownloadProvider(This,pDownloadProvider);
}
static FORCEINLINE HRESULT IDpxJob_GetDownloadProvider(IDpxJob* This,IDpxDownloadProvider **ppDownloadProvider) {
    return This->lpVtbl->GetDownloadProvider(This,ppDownloadProvider);
}
static FORCEINLINE HRESULT IDpxJob_Resume(IDpxJob* This,DPX_RESUME_TYPE eResumeType) {
    return This->lpVtbl->Resume(This,eResumeType);
}
static FORCEINLINE HRESULT IDpxJob_Suspend(IDpxJob* This) {
    return This->lpVtbl->Suspend(This);
}
static FORCEINLINE HRESULT IDpxJob_Cancel(IDpxJob* This) {
    return This->lpVtbl->Cancel(This);
}
static FORCEINLINE HRESULT IDpxJob_GetProgress(IDpxJob* This,DPX_PROGRESS *pProgress) {
    return This->lpVtbl->GetProgress(This,pProgress);
}
static FORCEINLINE HRESULT IDpxJob_SaveJobState(IDpxJob* This) {
    return This->lpVtbl->SaveJobState(This);
}
static FORCEINLINE HRESULT IDpxJob_SetUserValue(IDpxJob* This,UINT64 UserValue) {
    return This->lpVtbl->SetUserValue(This,UserValue);
}
static FORCEINLINE HRESULT IDpxJob_GetUserValue(IDpxJob* This,UINT64 *pUserValue) {
    return This->lpVtbl->GetUserValue(This,pUserValue);
}
static FORCEINLINE HRESULT IDpxJob_SetOptionValue(IDpxJob* This,LPCWSTR OptionName,LPCWSTR OptionValue) {
    return This->lpVtbl->SetOptionValue(This,OptionName,OptionValue);
}
static FORCEINLINE HRESULT IDpxJob_GetOptionValue(IDpxJob* This,LPCWSTR OptionName,LPWSTR *pOptionValue) {
    return This->lpVtbl->GetOptionValue(This,OptionName,pOptionValue);
}
static FORCEINLINE void IDpxJob_FreeMemory(IDpxJob* This,void *Allocation) {
    This->lpVtbl->FreeMemory(This,Allocation);
}
#endif
#endif

#endif


#endif  /* __IDpxJob_INTERFACE_DEFINED__ */

#ifdef __cplusplus
enum class DPX_FILE_PROVIDER_QUERY_DISPOSITION
{
    Invalid = 0,
    Success = 1,
    Compressed = 2
};
#else
typedef enum tagDPX_FILE_PROVIDER_QUERY_DISPOSITION {
    DPX_FILE_PROVIDER_QUERY_DISPOSITION_INVALID = 0,
    DPX_FILE_PROVIDER_QUERY_DISPOSITION_SUCCESS = 1,
    DPX_FILE_PROVIDER_QUERY_DISPOSITION_COMPRESSED = 2
} DPX_FILE_PROVIDER_QUERY_DISPOSITION;
#endif
/*****************************************************************************
 * IFileHashProviderCallback interface
 */
#ifndef __IFileHashProviderCallback_INTERFACE_DEFINED__
#define __IFileHashProviderCallback_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFileHashProviderCallback, 0xe9a288f7, 0xbcfb, 0x4466, 0x95,0xc6, 0x5a,0x38,0x82,0x63,0xd8,0xfb);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("e9a288f7-bcfb-4466-95c6-5a388263d8fb")
IFileHashProviderCallback : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetFileHash(
        LPCWSTR FilePath,
        ALG_ID algId,
        DPX_FILE_PROVIDER_QUERY_DISPOSITION *pDisposition,
        UINT cbHashData,
        BYTE pbHashData[]) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFileHashProviderCallback, 0xe9a288f7, 0xbcfb, 0x4466, 0x95,0xc6, 0x5a,0x38,0x82,0x63,0xd8,0xfb)
#endif
#else
typedef struct IFileHashProviderCallbackVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFileHashProviderCallback *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFileHashProviderCallback *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFileHashProviderCallback *This);

    /*** IFileHashProviderCallback methods ***/
    HRESULT (STDMETHODCALLTYPE *GetFileHash)(
        IFileHashProviderCallback *This,
        LPCWSTR FilePath,
        ALG_ID algId,
        DPX_FILE_PROVIDER_QUERY_DISPOSITION *pDisposition,
        UINT cbHashData,
        BYTE pbHashData[]);

    END_INTERFACE
} IFileHashProviderCallbackVtbl;

interface IFileHashProviderCallback {
    CONST_VTBL IFileHashProviderCallbackVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFileHashProviderCallback_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFileHashProviderCallback_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFileHashProviderCallback_Release(This) (This)->lpVtbl->Release(This)
/*** IFileHashProviderCallback methods ***/
#define IFileHashProviderCallback_GetFileHash(This,FilePath,algId,pDisposition,cbHashData,pbHashData) (This)->lpVtbl->GetFileHash(This,FilePath,algId,pDisposition,cbHashData,pbHashData)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IFileHashProviderCallback_QueryInterface(IFileHashProviderCallback* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IFileHashProviderCallback_AddRef(IFileHashProviderCallback* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IFileHashProviderCallback_Release(IFileHashProviderCallback* This) {
    return This->lpVtbl->Release(This);
}
/*** IFileHashProviderCallback methods ***/
static FORCEINLINE HRESULT IFileHashProviderCallback_GetFileHash(IFileHashProviderCallback* This,LPCWSTR FilePath,ALG_ID algId,DPX_FILE_PROVIDER_QUERY_DISPOSITION *pDisposition,UINT cbHashData,BYTE pbHashData[]) {
    return This->lpVtbl->GetFileHash(This,FilePath,algId,pDisposition,cbHashData,pbHashData);
}
#endif
#endif

#endif


#endif  /* __IFileHashProviderCallback_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDpxJob2 interface
 */
#ifndef __IDpxJob2_INTERFACE_DEFINED__
#define __IDpxJob2_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDpxJob2, 0xe1c292c8, 0x919a, 0x4f1b, 0xb8,0x5a, 0x9c,0x54,0x29,0x32,0xfc,0x8d);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("e1c292c8-919a-4f1b-b85a-9c542932fc8d")
IDpxJob2 : public IDpxJob
{
    virtual HRESULT STDMETHODCALLTYPE SetInventoryProvider(
        LOCATIONTYPE locationType,
        IFileHashProviderCallback *pProvider) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDpxJob2, 0xe1c292c8, 0x919a, 0x4f1b, 0xb8,0x5a, 0x9c,0x54,0x29,0x32,0xfc,0x8d)
#endif
#else
typedef struct IDpxJob2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDpxJob2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDpxJob2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDpxJob2 *This);

    /*** IDpxJob methods ***/
    HRESULT (STDMETHODCALLTYPE *GetTargetPath)(
        IDpxJob2 *This,
        LPWSTR *TargetPath);

    HRESULT (STDMETHODCALLTYPE *AddContainer)(
        IDpxJob2 *This,
        LPCWSTR ContainerPath,
        IDpxContainer **ppContainer);

    HRESULT (STDMETHODCALLTYPE *EnumContainers)(
        IDpxJob2 *This,
        IEnumDpxContainers **ppEnumContainers);

    HRESULT (STDMETHODCALLTYPE *SetDownloadProvider)(
        IDpxJob2 *This,
        IDpxDownloadProvider *pDownloadProvider);

    HRESULT (STDMETHODCALLTYPE *GetDownloadProvider)(
        IDpxJob2 *This,
        IDpxDownloadProvider **ppDownloadProvider);

    HRESULT (STDMETHODCALLTYPE *Resume)(
        IDpxJob2 *This,
        DPX_RESUME_TYPE eResumeType);

    HRESULT (STDMETHODCALLTYPE *Suspend)(
        IDpxJob2 *This);

    HRESULT (STDMETHODCALLTYPE *Cancel)(
        IDpxJob2 *This);

    HRESULT (STDMETHODCALLTYPE *GetProgress)(
        IDpxJob2 *This,
        DPX_PROGRESS *pProgress);

    HRESULT (STDMETHODCALLTYPE *SaveJobState)(
        IDpxJob2 *This);

    HRESULT (STDMETHODCALLTYPE *SetUserValue)(
        IDpxJob2 *This,
        UINT64 UserValue);

    HRESULT (STDMETHODCALLTYPE *GetUserValue)(
        IDpxJob2 *This,
        UINT64 *pUserValue);

    HRESULT (STDMETHODCALLTYPE *SetOptionValue)(
        IDpxJob2 *This,
        LPCWSTR OptionName,
        LPCWSTR OptionValue);

    HRESULT (STDMETHODCALLTYPE *GetOptionValue)(
        IDpxJob2 *This,
        LPCWSTR OptionName,
        LPWSTR *pOptionValue);

    void (STDMETHODCALLTYPE *FreeMemory)(
        IDpxJob2 *This,
        void *Allocation);

    /*** IDpxJob2 methods ***/
    HRESULT (STDMETHODCALLTYPE *SetInventoryProvider)(
        IDpxJob2 *This,
        LOCATIONTYPE locationType,
        IFileHashProviderCallback *pProvider);

    END_INTERFACE
} IDpxJob2Vtbl;

interface IDpxJob2 {
    CONST_VTBL IDpxJob2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDpxJob2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDpxJob2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDpxJob2_Release(This) (This)->lpVtbl->Release(This)
/*** IDpxJob methods ***/
#define IDpxJob2_GetTargetPath(This,TargetPath) (This)->lpVtbl->GetTargetPath(This,TargetPath)
#define IDpxJob2_AddContainer(This,ContainerPath,ppContainer) (This)->lpVtbl->AddContainer(This,ContainerPath,ppContainer)
#define IDpxJob2_EnumContainers(This,ppEnumContainers) (This)->lpVtbl->EnumContainers(This,ppEnumContainers)
#define IDpxJob2_SetDownloadProvider(This,pDownloadProvider) (This)->lpVtbl->SetDownloadProvider(This,pDownloadProvider)
#define IDpxJob2_GetDownloadProvider(This,ppDownloadProvider) (This)->lpVtbl->GetDownloadProvider(This,ppDownloadProvider)
#define IDpxJob2_Resume(This,eResumeType) (This)->lpVtbl->Resume(This,eResumeType)
#define IDpxJob2_Suspend(This) (This)->lpVtbl->Suspend(This)
#define IDpxJob2_Cancel(This) (This)->lpVtbl->Cancel(This)
#define IDpxJob2_GetProgress(This,pProgress) (This)->lpVtbl->GetProgress(This,pProgress)
#define IDpxJob2_SaveJobState(This) (This)->lpVtbl->SaveJobState(This)
#define IDpxJob2_SetUserValue(This,UserValue) (This)->lpVtbl->SetUserValue(This,UserValue)
#define IDpxJob2_GetUserValue(This,pUserValue) (This)->lpVtbl->GetUserValue(This,pUserValue)
#define IDpxJob2_SetOptionValue(This,OptionName,OptionValue) (This)->lpVtbl->SetOptionValue(This,OptionName,OptionValue)
#define IDpxJob2_GetOptionValue(This,OptionName,pOptionValue) (This)->lpVtbl->GetOptionValue(This,OptionName,pOptionValue)
#define IDpxJob2_FreeMemory(This,Allocation) (This)->lpVtbl->FreeMemory(This,Allocation)
/*** IDpxJob2 methods ***/
#define IDpxJob2_SetInventoryProvider(This,locationType,pProvider) (This)->lpVtbl->SetInventoryProvider(This,locationType,pProvider)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDpxJob2_QueryInterface(IDpxJob2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDpxJob2_AddRef(IDpxJob2* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDpxJob2_Release(IDpxJob2* This) {
    return This->lpVtbl->Release(This);
}
/*** IDpxJob methods ***/
static FORCEINLINE HRESULT IDpxJob2_GetTargetPath(IDpxJob2* This,LPWSTR *TargetPath) {
    return This->lpVtbl->GetTargetPath(This,TargetPath);
}
static FORCEINLINE HRESULT IDpxJob2_AddContainer(IDpxJob2* This,LPCWSTR ContainerPath,IDpxContainer **ppContainer) {
    return This->lpVtbl->AddContainer(This,ContainerPath,ppContainer);
}
static FORCEINLINE HRESULT IDpxJob2_EnumContainers(IDpxJob2* This,IEnumDpxContainers **ppEnumContainers) {
    return This->lpVtbl->EnumContainers(This,ppEnumContainers);
}
static FORCEINLINE HRESULT IDpxJob2_SetDownloadProvider(IDpxJob2* This,IDpxDownloadProvider *pDownloadProvider) {
    return This->lpVtbl->SetDownloadProvider(This,pDownloadProvider);
}
static FORCEINLINE HRESULT IDpxJob2_GetDownloadProvider(IDpxJob2* This,IDpxDownloadProvider **ppDownloadProvider) {
    return This->lpVtbl->GetDownloadProvider(This,ppDownloadProvider);
}
static FORCEINLINE HRESULT IDpxJob2_Resume(IDpxJob2* This,DPX_RESUME_TYPE eResumeType) {
    return This->lpVtbl->Resume(This,eResumeType);
}
static FORCEINLINE HRESULT IDpxJob2_Suspend(IDpxJob2* This) {
    return This->lpVtbl->Suspend(This);
}
static FORCEINLINE HRESULT IDpxJob2_Cancel(IDpxJob2* This) {
    return This->lpVtbl->Cancel(This);
}
static FORCEINLINE HRESULT IDpxJob2_GetProgress(IDpxJob2* This,DPX_PROGRESS *pProgress) {
    return This->lpVtbl->GetProgress(This,pProgress);
}
static FORCEINLINE HRESULT IDpxJob2_SaveJobState(IDpxJob2* This) {
    return This->lpVtbl->SaveJobState(This);
}
static FORCEINLINE HRESULT IDpxJob2_SetUserValue(IDpxJob2* This,UINT64 UserValue) {
    return This->lpVtbl->SetUserValue(This,UserValue);
}
static FORCEINLINE HRESULT IDpxJob2_GetUserValue(IDpxJob2* This,UINT64 *pUserValue) {
    return This->lpVtbl->GetUserValue(This,pUserValue);
}
static FORCEINLINE HRESULT IDpxJob2_SetOptionValue(IDpxJob2* This,LPCWSTR OptionName,LPCWSTR OptionValue) {
    return This->lpVtbl->SetOptionValue(This,OptionName,OptionValue);
}
static FORCEINLINE HRESULT IDpxJob2_GetOptionValue(IDpxJob2* This,LPCWSTR OptionName,LPWSTR *pOptionValue) {
    return This->lpVtbl->GetOptionValue(This,OptionName,pOptionValue);
}
static FORCEINLINE void IDpxJob2_FreeMemory(IDpxJob2* This,void *Allocation) {
    This->lpVtbl->FreeMemory(This,Allocation);
}
/*** IDpxJob2 methods ***/
static FORCEINLINE HRESULT IDpxJob2_SetInventoryProvider(IDpxJob2* This,LOCATIONTYPE locationType,IFileHashProviderCallback *pProvider) {
    return This->lpVtbl->SetInventoryProvider(This,locationType,pProvider);
}
#endif
#endif

#endif


#endif  /* __IDpxJob2_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDpxContainer interface
 */
#ifndef __IDpxContainer_INTERFACE_DEFINED__
#define __IDpxContainer_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDpxContainer, 0xddc1b712, 0x0e55, 0x452f, 0x83,0x8e, 0xd1,0x50,0x5b,0x86,0x6e,0x2b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ddc1b712-0e55-452f-838e-d1505b866e2b")
IDpxContainer : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE SetContainerPath(
        LPCWSTR ContainerPath) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetContainerPath(
        LPWSTR *pContainerPath) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddFileToExtract(
        LPCWSTR SourceFileName,
        LPCWSTR TargetFileName,
        DPX_HASH *TargetFileHash) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddFileToExtract2(
        LPCWSTR SourceFileName,
        LPCWSTR TargetFileName,
        IDpxFile **ppFile) = 0;

    virtual HRESULT STDMETHODCALLTYPE ExtractAllFiles(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumFilesToExtract(
        IEnumDpxFiles **ppEnumFiles) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetExpectedContainerIndexHash(
        DPX_HASH *pExpectedHash) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetExpectedContainerIndexHash(
        DPX_HASH **ppExpectedHash) = 0;

    virtual HRESULT STDMETHODCALLTYPE ProvideContainerIndex(
        UINT IndexSize,
        BYTE IndexData[]) = 0;

    virtual HRESULT STDMETHODCALLTYPE ProvideContainerIndexByFile(
        LPCWSTR IndexFileName) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumDirectoryEntries(
        IEnumDpxContainerDirectoryEntries **ppEnumEntries) = 0;

    virtual HRESULT STDMETHODCALLTYPE Remove(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetUserValue(
        UINT64 UserValue) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetUserValue(
        UINT64 *pUserValue) = 0;

    virtual void STDMETHODCALLTYPE FreeMemory(
        void *Allocation) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDpxContainer, 0xddc1b712, 0x0e55, 0x452f, 0x83,0x8e, 0xd1,0x50,0x5b,0x86,0x6e,0x2b)
#endif
#else
typedef struct IDpxContainerVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDpxContainer *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDpxContainer *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDpxContainer *This);

    /*** IDpxContainer methods ***/
    HRESULT (STDMETHODCALLTYPE *SetContainerPath)(
        IDpxContainer *This,
        LPCWSTR ContainerPath);

    HRESULT (STDMETHODCALLTYPE *GetContainerPath)(
        IDpxContainer *This,
        LPWSTR *pContainerPath);

    HRESULT (STDMETHODCALLTYPE *AddFileToExtract)(
        IDpxContainer *This,
        LPCWSTR SourceFileName,
        LPCWSTR TargetFileName,
        DPX_HASH *TargetFileHash);

    HRESULT (STDMETHODCALLTYPE *AddFileToExtract2)(
        IDpxContainer *This,
        LPCWSTR SourceFileName,
        LPCWSTR TargetFileName,
        IDpxFile **ppFile);

    HRESULT (STDMETHODCALLTYPE *ExtractAllFiles)(
        IDpxContainer *This);

    HRESULT (STDMETHODCALLTYPE *EnumFilesToExtract)(
        IDpxContainer *This,
        IEnumDpxFiles **ppEnumFiles);

    HRESULT (STDMETHODCALLTYPE *SetExpectedContainerIndexHash)(
        IDpxContainer *This,
        DPX_HASH *pExpectedHash);

    HRESULT (STDMETHODCALLTYPE *GetExpectedContainerIndexHash)(
        IDpxContainer *This,
        DPX_HASH **ppExpectedHash);

    HRESULT (STDMETHODCALLTYPE *ProvideContainerIndex)(
        IDpxContainer *This,
        UINT IndexSize,
        BYTE IndexData[]);

    HRESULT (STDMETHODCALLTYPE *ProvideContainerIndexByFile)(
        IDpxContainer *This,
        LPCWSTR IndexFileName);

    HRESULT (STDMETHODCALLTYPE *EnumDirectoryEntries)(
        IDpxContainer *This,
        IEnumDpxContainerDirectoryEntries **ppEnumEntries);

    HRESULT (STDMETHODCALLTYPE *Remove)(
        IDpxContainer *This);

    HRESULT (STDMETHODCALLTYPE *SetUserValue)(
        IDpxContainer *This,
        UINT64 UserValue);

    HRESULT (STDMETHODCALLTYPE *GetUserValue)(
        IDpxContainer *This,
        UINT64 *pUserValue);

    void (STDMETHODCALLTYPE *FreeMemory)(
        IDpxContainer *This,
        void *Allocation);

    END_INTERFACE
} IDpxContainerVtbl;

interface IDpxContainer {
    CONST_VTBL IDpxContainerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDpxContainer_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDpxContainer_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDpxContainer_Release(This) (This)->lpVtbl->Release(This)
/*** IDpxContainer methods ***/
#define IDpxContainer_SetContainerPath(This,ContainerPath) (This)->lpVtbl->SetContainerPath(This,ContainerPath)
#define IDpxContainer_GetContainerPath(This,pContainerPath) (This)->lpVtbl->GetContainerPath(This,pContainerPath)
#define IDpxContainer_AddFileToExtract(This,SourceFileName,TargetFileName,TargetFileHash) (This)->lpVtbl->AddFileToExtract(This,SourceFileName,TargetFileName,TargetFileHash)
#define IDpxContainer_AddFileToExtract2(This,SourceFileName,TargetFileName,ppFile) (This)->lpVtbl->AddFileToExtract2(This,SourceFileName,TargetFileName,ppFile)
#define IDpxContainer_ExtractAllFiles(This) (This)->lpVtbl->ExtractAllFiles(This)
#define IDpxContainer_EnumFilesToExtract(This,ppEnumFiles) (This)->lpVtbl->EnumFilesToExtract(This,ppEnumFiles)
#define IDpxContainer_SetExpectedContainerIndexHash(This,pExpectedHash) (This)->lpVtbl->SetExpectedContainerIndexHash(This,pExpectedHash)
#define IDpxContainer_GetExpectedContainerIndexHash(This,ppExpectedHash) (This)->lpVtbl->GetExpectedContainerIndexHash(This,ppExpectedHash)
#define IDpxContainer_ProvideContainerIndex(This,IndexSize,IndexData) (This)->lpVtbl->ProvideContainerIndex(This,IndexSize,IndexData)
#define IDpxContainer_ProvideContainerIndexByFile(This,IndexFileName) (This)->lpVtbl->ProvideContainerIndexByFile(This,IndexFileName)
#define IDpxContainer_EnumDirectoryEntries(This,ppEnumEntries) (This)->lpVtbl->EnumDirectoryEntries(This,ppEnumEntries)
#define IDpxContainer_Remove(This) (This)->lpVtbl->Remove(This)
#define IDpxContainer_SetUserValue(This,UserValue) (This)->lpVtbl->SetUserValue(This,UserValue)
#define IDpxContainer_GetUserValue(This,pUserValue) (This)->lpVtbl->GetUserValue(This,pUserValue)
#define IDpxContainer_FreeMemory(This,Allocation) (This)->lpVtbl->FreeMemory(This,Allocation)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDpxContainer_QueryInterface(IDpxContainer* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDpxContainer_AddRef(IDpxContainer* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDpxContainer_Release(IDpxContainer* This) {
    return This->lpVtbl->Release(This);
}
/*** IDpxContainer methods ***/
static FORCEINLINE HRESULT IDpxContainer_SetContainerPath(IDpxContainer* This,LPCWSTR ContainerPath) {
    return This->lpVtbl->SetContainerPath(This,ContainerPath);
}
static FORCEINLINE HRESULT IDpxContainer_GetContainerPath(IDpxContainer* This,LPWSTR *pContainerPath) {
    return This->lpVtbl->GetContainerPath(This,pContainerPath);
}
static FORCEINLINE HRESULT IDpxContainer_AddFileToExtract(IDpxContainer* This,LPCWSTR SourceFileName,LPCWSTR TargetFileName,DPX_HASH *TargetFileHash) {
    return This->lpVtbl->AddFileToExtract(This,SourceFileName,TargetFileName,TargetFileHash);
}
static FORCEINLINE HRESULT IDpxContainer_AddFileToExtract2(IDpxContainer* This,LPCWSTR SourceFileName,LPCWSTR TargetFileName,IDpxFile **ppFile) {
    return This->lpVtbl->AddFileToExtract2(This,SourceFileName,TargetFileName,ppFile);
}
static FORCEINLINE HRESULT IDpxContainer_ExtractAllFiles(IDpxContainer* This) {
    return This->lpVtbl->ExtractAllFiles(This);
}
static FORCEINLINE HRESULT IDpxContainer_EnumFilesToExtract(IDpxContainer* This,IEnumDpxFiles **ppEnumFiles) {
    return This->lpVtbl->EnumFilesToExtract(This,ppEnumFiles);
}
static FORCEINLINE HRESULT IDpxContainer_SetExpectedContainerIndexHash(IDpxContainer* This,DPX_HASH *pExpectedHash) {
    return This->lpVtbl->SetExpectedContainerIndexHash(This,pExpectedHash);
}
static FORCEINLINE HRESULT IDpxContainer_GetExpectedContainerIndexHash(IDpxContainer* This,DPX_HASH **ppExpectedHash) {
    return This->lpVtbl->GetExpectedContainerIndexHash(This,ppExpectedHash);
}
static FORCEINLINE HRESULT IDpxContainer_ProvideContainerIndex(IDpxContainer* This,UINT IndexSize,BYTE IndexData[]) {
    return This->lpVtbl->ProvideContainerIndex(This,IndexSize,IndexData);
}
static FORCEINLINE HRESULT IDpxContainer_ProvideContainerIndexByFile(IDpxContainer* This,LPCWSTR IndexFileName) {
    return This->lpVtbl->ProvideContainerIndexByFile(This,IndexFileName);
}
static FORCEINLINE HRESULT IDpxContainer_EnumDirectoryEntries(IDpxContainer* This,IEnumDpxContainerDirectoryEntries **ppEnumEntries) {
    return This->lpVtbl->EnumDirectoryEntries(This,ppEnumEntries);
}
static FORCEINLINE HRESULT IDpxContainer_Remove(IDpxContainer* This) {
    return This->lpVtbl->Remove(This);
}
static FORCEINLINE HRESULT IDpxContainer_SetUserValue(IDpxContainer* This,UINT64 UserValue) {
    return This->lpVtbl->SetUserValue(This,UserValue);
}
static FORCEINLINE HRESULT IDpxContainer_GetUserValue(IDpxContainer* This,UINT64 *pUserValue) {
    return This->lpVtbl->GetUserValue(This,pUserValue);
}
static FORCEINLINE void IDpxContainer_FreeMemory(IDpxContainer* This,void *Allocation) {
    This->lpVtbl->FreeMemory(This,Allocation);
}
#endif
#endif

#endif


#endif  /* __IDpxContainer_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDpxFile interface
 */
#ifndef __IDpxFile_INTERFACE_DEFINED__
#define __IDpxFile_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDpxFile, 0xddc1b713, 0x0e55, 0x452f, 0x83,0x8e, 0xd1,0x50,0x5b,0x86,0x6e,0x2b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ddc1b713-0e55-452f-838e-d1505b866e2b")
IDpxFile : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetSourceFileName(
        LPWSTR *pSourceFileName) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetTargetFileName(
        LPWSTR *pTargetFileName) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetExpectedHash(
        DPX_HASH *pExpectedHash) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetExpectedHash(
        DPX_HASH **ppExpectedHash) = 0;

    virtual HRESULT STDMETHODCALLTYPE Remove(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetUserValue(
        UINT64 UserValue) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetUserValue(
        UINT64 *pUserValue) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetStatus(
        HRESULT *pStatus) = 0;

    virtual void STDMETHODCALLTYPE FreeMemory(
        void *Allocation) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDpxFile, 0xddc1b713, 0x0e55, 0x452f, 0x83,0x8e, 0xd1,0x50,0x5b,0x86,0x6e,0x2b)
#endif
#else
typedef struct IDpxFileVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDpxFile *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDpxFile *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDpxFile *This);

    /*** IDpxFile methods ***/
    HRESULT (STDMETHODCALLTYPE *GetSourceFileName)(
        IDpxFile *This,
        LPWSTR *pSourceFileName);

    HRESULT (STDMETHODCALLTYPE *GetTargetFileName)(
        IDpxFile *This,
        LPWSTR *pTargetFileName);

    HRESULT (STDMETHODCALLTYPE *SetExpectedHash)(
        IDpxFile *This,
        DPX_HASH *pExpectedHash);

    HRESULT (STDMETHODCALLTYPE *GetExpectedHash)(
        IDpxFile *This,
        DPX_HASH **ppExpectedHash);

    HRESULT (STDMETHODCALLTYPE *Remove)(
        IDpxFile *This);

    HRESULT (STDMETHODCALLTYPE *SetUserValue)(
        IDpxFile *This,
        UINT64 UserValue);

    HRESULT (STDMETHODCALLTYPE *GetUserValue)(
        IDpxFile *This,
        UINT64 *pUserValue);

    HRESULT (STDMETHODCALLTYPE *GetStatus)(
        IDpxFile *This,
        HRESULT *pStatus);

    void (STDMETHODCALLTYPE *FreeMemory)(
        IDpxFile *This,
        void *Allocation);

    END_INTERFACE
} IDpxFileVtbl;

interface IDpxFile {
    CONST_VTBL IDpxFileVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDpxFile_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDpxFile_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDpxFile_Release(This) (This)->lpVtbl->Release(This)
/*** IDpxFile methods ***/
#define IDpxFile_GetSourceFileName(This,pSourceFileName) (This)->lpVtbl->GetSourceFileName(This,pSourceFileName)
#define IDpxFile_GetTargetFileName(This,pTargetFileName) (This)->lpVtbl->GetTargetFileName(This,pTargetFileName)
#define IDpxFile_SetExpectedHash(This,pExpectedHash) (This)->lpVtbl->SetExpectedHash(This,pExpectedHash)
#define IDpxFile_GetExpectedHash(This,ppExpectedHash) (This)->lpVtbl->GetExpectedHash(This,ppExpectedHash)
#define IDpxFile_Remove(This) (This)->lpVtbl->Remove(This)
#define IDpxFile_SetUserValue(This,UserValue) (This)->lpVtbl->SetUserValue(This,UserValue)
#define IDpxFile_GetUserValue(This,pUserValue) (This)->lpVtbl->GetUserValue(This,pUserValue)
#define IDpxFile_GetStatus(This,pStatus) (This)->lpVtbl->GetStatus(This,pStatus)
#define IDpxFile_FreeMemory(This,Allocation) (This)->lpVtbl->FreeMemory(This,Allocation)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDpxFile_QueryInterface(IDpxFile* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDpxFile_AddRef(IDpxFile* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDpxFile_Release(IDpxFile* This) {
    return This->lpVtbl->Release(This);
}
/*** IDpxFile methods ***/
static FORCEINLINE HRESULT IDpxFile_GetSourceFileName(IDpxFile* This,LPWSTR *pSourceFileName) {
    return This->lpVtbl->GetSourceFileName(This,pSourceFileName);
}
static FORCEINLINE HRESULT IDpxFile_GetTargetFileName(IDpxFile* This,LPWSTR *pTargetFileName) {
    return This->lpVtbl->GetTargetFileName(This,pTargetFileName);
}
static FORCEINLINE HRESULT IDpxFile_SetExpectedHash(IDpxFile* This,DPX_HASH *pExpectedHash) {
    return This->lpVtbl->SetExpectedHash(This,pExpectedHash);
}
static FORCEINLINE HRESULT IDpxFile_GetExpectedHash(IDpxFile* This,DPX_HASH **ppExpectedHash) {
    return This->lpVtbl->GetExpectedHash(This,ppExpectedHash);
}
static FORCEINLINE HRESULT IDpxFile_Remove(IDpxFile* This) {
    return This->lpVtbl->Remove(This);
}
static FORCEINLINE HRESULT IDpxFile_SetUserValue(IDpxFile* This,UINT64 UserValue) {
    return This->lpVtbl->SetUserValue(This,UserValue);
}
static FORCEINLINE HRESULT IDpxFile_GetUserValue(IDpxFile* This,UINT64 *pUserValue) {
    return This->lpVtbl->GetUserValue(This,pUserValue);
}
static FORCEINLINE HRESULT IDpxFile_GetStatus(IDpxFile* This,HRESULT *pStatus) {
    return This->lpVtbl->GetStatus(This,pStatus);
}
static FORCEINLINE void IDpxFile_FreeMemory(IDpxFile* This,void *Allocation) {
    This->lpVtbl->FreeMemory(This,Allocation);
}
#endif
#endif

#endif


#endif  /* __IDpxFile_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDpxFile2 interface
 */
#ifndef __IDpxFile2_INTERFACE_DEFINED__
#define __IDpxFile2_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDpxFile2, 0xc249cc11, 0xc1f5, 0x428e, 0xac,0xbf, 0xe1,0xb7,0x8b,0x30,0xb9,0x71);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c249cc11-c1f5-428e-acbf-e1b78b30b971")
IDpxFile2 : public IDpxFile
{
    virtual HRESULT STDMETHODCALLTYPE GetSize(
        UINT64 *pSize) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDpxFile2, 0xc249cc11, 0xc1f5, 0x428e, 0xac,0xbf, 0xe1,0xb7,0x8b,0x30,0xb9,0x71)
#endif
#else
typedef struct IDpxFile2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDpxFile2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDpxFile2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDpxFile2 *This);

    /*** IDpxFile methods ***/
    HRESULT (STDMETHODCALLTYPE *GetSourceFileName)(
        IDpxFile2 *This,
        LPWSTR *pSourceFileName);

    HRESULT (STDMETHODCALLTYPE *GetTargetFileName)(
        IDpxFile2 *This,
        LPWSTR *pTargetFileName);

    HRESULT (STDMETHODCALLTYPE *SetExpectedHash)(
        IDpxFile2 *This,
        DPX_HASH *pExpectedHash);

    HRESULT (STDMETHODCALLTYPE *GetExpectedHash)(
        IDpxFile2 *This,
        DPX_HASH **ppExpectedHash);

    HRESULT (STDMETHODCALLTYPE *Remove)(
        IDpxFile2 *This);

    HRESULT (STDMETHODCALLTYPE *SetUserValue)(
        IDpxFile2 *This,
        UINT64 UserValue);

    HRESULT (STDMETHODCALLTYPE *GetUserValue)(
        IDpxFile2 *This,
        UINT64 *pUserValue);

    HRESULT (STDMETHODCALLTYPE *GetStatus)(
        IDpxFile2 *This,
        HRESULT *pStatus);

    void (STDMETHODCALLTYPE *FreeMemory)(
        IDpxFile2 *This,
        void *Allocation);

    /*** IDpxFile2 methods ***/
    HRESULT (STDMETHODCALLTYPE *GetSize)(
        IDpxFile2 *This,
        UINT64 *pSize);

    END_INTERFACE
} IDpxFile2Vtbl;

interface IDpxFile2 {
    CONST_VTBL IDpxFile2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDpxFile2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDpxFile2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDpxFile2_Release(This) (This)->lpVtbl->Release(This)
/*** IDpxFile methods ***/
#define IDpxFile2_GetSourceFileName(This,pSourceFileName) (This)->lpVtbl->GetSourceFileName(This,pSourceFileName)
#define IDpxFile2_GetTargetFileName(This,pTargetFileName) (This)->lpVtbl->GetTargetFileName(This,pTargetFileName)
#define IDpxFile2_SetExpectedHash(This,pExpectedHash) (This)->lpVtbl->SetExpectedHash(This,pExpectedHash)
#define IDpxFile2_GetExpectedHash(This,ppExpectedHash) (This)->lpVtbl->GetExpectedHash(This,ppExpectedHash)
#define IDpxFile2_Remove(This) (This)->lpVtbl->Remove(This)
#define IDpxFile2_SetUserValue(This,UserValue) (This)->lpVtbl->SetUserValue(This,UserValue)
#define IDpxFile2_GetUserValue(This,pUserValue) (This)->lpVtbl->GetUserValue(This,pUserValue)
#define IDpxFile2_GetStatus(This,pStatus) (This)->lpVtbl->GetStatus(This,pStatus)
#define IDpxFile2_FreeMemory(This,Allocation) (This)->lpVtbl->FreeMemory(This,Allocation)
/*** IDpxFile2 methods ***/
#define IDpxFile2_GetSize(This,pSize) (This)->lpVtbl->GetSize(This,pSize)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDpxFile2_QueryInterface(IDpxFile2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDpxFile2_AddRef(IDpxFile2* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDpxFile2_Release(IDpxFile2* This) {
    return This->lpVtbl->Release(This);
}
/*** IDpxFile methods ***/
static FORCEINLINE HRESULT IDpxFile2_GetSourceFileName(IDpxFile2* This,LPWSTR *pSourceFileName) {
    return This->lpVtbl->GetSourceFileName(This,pSourceFileName);
}
static FORCEINLINE HRESULT IDpxFile2_GetTargetFileName(IDpxFile2* This,LPWSTR *pTargetFileName) {
    return This->lpVtbl->GetTargetFileName(This,pTargetFileName);
}
static FORCEINLINE HRESULT IDpxFile2_SetExpectedHash(IDpxFile2* This,DPX_HASH *pExpectedHash) {
    return This->lpVtbl->SetExpectedHash(This,pExpectedHash);
}
static FORCEINLINE HRESULT IDpxFile2_GetExpectedHash(IDpxFile2* This,DPX_HASH **ppExpectedHash) {
    return This->lpVtbl->GetExpectedHash(This,ppExpectedHash);
}
static FORCEINLINE HRESULT IDpxFile2_Remove(IDpxFile2* This) {
    return This->lpVtbl->Remove(This);
}
static FORCEINLINE HRESULT IDpxFile2_SetUserValue(IDpxFile2* This,UINT64 UserValue) {
    return This->lpVtbl->SetUserValue(This,UserValue);
}
static FORCEINLINE HRESULT IDpxFile2_GetUserValue(IDpxFile2* This,UINT64 *pUserValue) {
    return This->lpVtbl->GetUserValue(This,pUserValue);
}
static FORCEINLINE HRESULT IDpxFile2_GetStatus(IDpxFile2* This,HRESULT *pStatus) {
    return This->lpVtbl->GetStatus(This,pStatus);
}
static FORCEINLINE void IDpxFile2_FreeMemory(IDpxFile2* This,void *Allocation) {
    This->lpVtbl->FreeMemory(This,Allocation);
}
/*** IDpxFile2 methods ***/
static FORCEINLINE HRESULT IDpxFile2_GetSize(IDpxFile2* This,UINT64 *pSize) {
    return This->lpVtbl->GetSize(This,pSize);
}
#endif
#endif

#endif


#endif  /* __IDpxFile2_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDpxContainerDirectoryEntry interface
 */
#ifndef __IDpxContainerDirectoryEntry_INTERFACE_DEFINED__
#define __IDpxContainerDirectoryEntry_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDpxContainerDirectoryEntry, 0xddc1b715, 0x0e55, 0x452f, 0x83,0x8e, 0xd1,0x50,0x5b,0x86,0x6e,0x2b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ddc1b715-0e55-452f-838e-d1505b866e2b")
IDpxContainerDirectoryEntry : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetName(
        LPWSTR *pDirEntryName) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetHash(
        DPX_HASH **pDirEntryHash) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetSize(
        UINT64 *pDirEntrySize) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetTime(
        FILETIME *pDirEntryTime) = 0;

    virtual void STDMETHODCALLTYPE FreeMemory(
        void *Allocation) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDpxContainerDirectoryEntry, 0xddc1b715, 0x0e55, 0x452f, 0x83,0x8e, 0xd1,0x50,0x5b,0x86,0x6e,0x2b)
#endif
#else
typedef struct IDpxContainerDirectoryEntryVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDpxContainerDirectoryEntry *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDpxContainerDirectoryEntry *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDpxContainerDirectoryEntry *This);

    /*** IDpxContainerDirectoryEntry methods ***/
    HRESULT (STDMETHODCALLTYPE *GetName)(
        IDpxContainerDirectoryEntry *This,
        LPWSTR *pDirEntryName);

    HRESULT (STDMETHODCALLTYPE *GetHash)(
        IDpxContainerDirectoryEntry *This,
        DPX_HASH **pDirEntryHash);

    HRESULT (STDMETHODCALLTYPE *GetSize)(
        IDpxContainerDirectoryEntry *This,
        UINT64 *pDirEntrySize);

    HRESULT (STDMETHODCALLTYPE *GetTime)(
        IDpxContainerDirectoryEntry *This,
        FILETIME *pDirEntryTime);

    void (STDMETHODCALLTYPE *FreeMemory)(
        IDpxContainerDirectoryEntry *This,
        void *Allocation);

    END_INTERFACE
} IDpxContainerDirectoryEntryVtbl;

interface IDpxContainerDirectoryEntry {
    CONST_VTBL IDpxContainerDirectoryEntryVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDpxContainerDirectoryEntry_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDpxContainerDirectoryEntry_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDpxContainerDirectoryEntry_Release(This) (This)->lpVtbl->Release(This)
/*** IDpxContainerDirectoryEntry methods ***/
#define IDpxContainerDirectoryEntry_GetName(This,pDirEntryName) (This)->lpVtbl->GetName(This,pDirEntryName)
#define IDpxContainerDirectoryEntry_GetHash(This,pDirEntryHash) (This)->lpVtbl->GetHash(This,pDirEntryHash)
#define IDpxContainerDirectoryEntry_GetSize(This,pDirEntrySize) (This)->lpVtbl->GetSize(This,pDirEntrySize)
#define IDpxContainerDirectoryEntry_GetTime(This,pDirEntryTime) (This)->lpVtbl->GetTime(This,pDirEntryTime)
#define IDpxContainerDirectoryEntry_FreeMemory(This,Allocation) (This)->lpVtbl->FreeMemory(This,Allocation)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDpxContainerDirectoryEntry_QueryInterface(IDpxContainerDirectoryEntry* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDpxContainerDirectoryEntry_AddRef(IDpxContainerDirectoryEntry* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDpxContainerDirectoryEntry_Release(IDpxContainerDirectoryEntry* This) {
    return This->lpVtbl->Release(This);
}
/*** IDpxContainerDirectoryEntry methods ***/
static FORCEINLINE HRESULT IDpxContainerDirectoryEntry_GetName(IDpxContainerDirectoryEntry* This,LPWSTR *pDirEntryName) {
    return This->lpVtbl->GetName(This,pDirEntryName);
}
static FORCEINLINE HRESULT IDpxContainerDirectoryEntry_GetHash(IDpxContainerDirectoryEntry* This,DPX_HASH **pDirEntryHash) {
    return This->lpVtbl->GetHash(This,pDirEntryHash);
}
static FORCEINLINE HRESULT IDpxContainerDirectoryEntry_GetSize(IDpxContainerDirectoryEntry* This,UINT64 *pDirEntrySize) {
    return This->lpVtbl->GetSize(This,pDirEntrySize);
}
static FORCEINLINE HRESULT IDpxContainerDirectoryEntry_GetTime(IDpxContainerDirectoryEntry* This,FILETIME *pDirEntryTime) {
    return This->lpVtbl->GetTime(This,pDirEntryTime);
}
static FORCEINLINE void IDpxContainerDirectoryEntry_FreeMemory(IDpxContainerDirectoryEntry* This,void *Allocation) {
    This->lpVtbl->FreeMemory(This,Allocation);
}
#endif
#endif

#endif


#endif  /* __IDpxContainerDirectoryEntry_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDpxDownloadProvider interface
 */
#ifndef __IDpxDownloadProvider_INTERFACE_DEFINED__
#define __IDpxDownloadProvider_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDpxDownloadProvider, 0xddc1b716, 0x0e55, 0x452f, 0x83,0x8e, 0xd1,0x50,0x5b,0x86,0x6e,0x2b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ddc1b716-0e55-452f-838e-d1505b866e2b")
IDpxDownloadProvider : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE SetProvideDataCallback(
        IDpxDownloadCallback *pProvideData) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetProvideDataCallback(
        IDpxDownloadCallback **ppProvideData) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddContainer(
        LPCWSTR ContainerFilePath,
        UINT64 ContainerId) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddRanges(
        UINT64 ContainerId,
        UINT RangeCount,
        DPX_BYTE_RANGE RangeList[]) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetContainers(
        UINT *ContainerCount,
        UINT64 **ppContainerIdArray) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetContainerPath(
        UINT64 ContainerId,
        LPWSTR *ContainerPath) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetRanges(
        UINT64 ContainerId,
        BOOL IncludeCompletedRanges,
        UINT *RangeCount,
        DPX_BYTE_RANGE **ppRangeArray) = 0;

    virtual HRESULT STDMETHODCALLTYPE Resume(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Suspend(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Cancel(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE WaitForCompletion(
        DWORD TimeoutMilliseconds) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetProgress(
        DPX_PROGRESS_REMAIN *pDownloadProgress) = 0;

    virtual HRESULT STDMETHODCALLTYPE ClearRequest(
        ) = 0;

    virtual void STDMETHODCALLTYPE FreeMemory(
        void *Allocation) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDpxDownloadProvider, 0xddc1b716, 0x0e55, 0x452f, 0x83,0x8e, 0xd1,0x50,0x5b,0x86,0x6e,0x2b)
#endif
#else
typedef struct IDpxDownloadProviderVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDpxDownloadProvider *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDpxDownloadProvider *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDpxDownloadProvider *This);

    /*** IDpxDownloadProvider methods ***/
    HRESULT (STDMETHODCALLTYPE *SetProvideDataCallback)(
        IDpxDownloadProvider *This,
        IDpxDownloadCallback *pProvideData);

    HRESULT (STDMETHODCALLTYPE *GetProvideDataCallback)(
        IDpxDownloadProvider *This,
        IDpxDownloadCallback **ppProvideData);

    HRESULT (STDMETHODCALLTYPE *AddContainer)(
        IDpxDownloadProvider *This,
        LPCWSTR ContainerFilePath,
        UINT64 ContainerId);

    HRESULT (STDMETHODCALLTYPE *AddRanges)(
        IDpxDownloadProvider *This,
        UINT64 ContainerId,
        UINT RangeCount,
        DPX_BYTE_RANGE RangeList[]);

    HRESULT (STDMETHODCALLTYPE *GetContainers)(
        IDpxDownloadProvider *This,
        UINT *ContainerCount,
        UINT64 **ppContainerIdArray);

    HRESULT (STDMETHODCALLTYPE *GetContainerPath)(
        IDpxDownloadProvider *This,
        UINT64 ContainerId,
        LPWSTR *ContainerPath);

    HRESULT (STDMETHODCALLTYPE *GetRanges)(
        IDpxDownloadProvider *This,
        UINT64 ContainerId,
        BOOL IncludeCompletedRanges,
        UINT *RangeCount,
        DPX_BYTE_RANGE **ppRangeArray);

    HRESULT (STDMETHODCALLTYPE *Resume)(
        IDpxDownloadProvider *This);

    HRESULT (STDMETHODCALLTYPE *Suspend)(
        IDpxDownloadProvider *This);

    HRESULT (STDMETHODCALLTYPE *Cancel)(
        IDpxDownloadProvider *This);

    HRESULT (STDMETHODCALLTYPE *WaitForCompletion)(
        IDpxDownloadProvider *This,
        DWORD TimeoutMilliseconds);

    HRESULT (STDMETHODCALLTYPE *GetProgress)(
        IDpxDownloadProvider *This,
        DPX_PROGRESS_REMAIN *pDownloadProgress);

    HRESULT (STDMETHODCALLTYPE *ClearRequest)(
        IDpxDownloadProvider *This);

    void (STDMETHODCALLTYPE *FreeMemory)(
        IDpxDownloadProvider *This,
        void *Allocation);

    END_INTERFACE
} IDpxDownloadProviderVtbl;

interface IDpxDownloadProvider {
    CONST_VTBL IDpxDownloadProviderVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDpxDownloadProvider_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDpxDownloadProvider_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDpxDownloadProvider_Release(This) (This)->lpVtbl->Release(This)
/*** IDpxDownloadProvider methods ***/
#define IDpxDownloadProvider_SetProvideDataCallback(This,pProvideData) (This)->lpVtbl->SetProvideDataCallback(This,pProvideData)
#define IDpxDownloadProvider_GetProvideDataCallback(This,ppProvideData) (This)->lpVtbl->GetProvideDataCallback(This,ppProvideData)
#define IDpxDownloadProvider_AddContainer(This,ContainerFilePath,ContainerId) (This)->lpVtbl->AddContainer(This,ContainerFilePath,ContainerId)
#define IDpxDownloadProvider_AddRanges(This,ContainerId,RangeCount,RangeList) (This)->lpVtbl->AddRanges(This,ContainerId,RangeCount,RangeList)
#define IDpxDownloadProvider_GetContainers(This,ContainerCount,ppContainerIdArray) (This)->lpVtbl->GetContainers(This,ContainerCount,ppContainerIdArray)
#define IDpxDownloadProvider_GetContainerPath(This,ContainerId,ContainerPath) (This)->lpVtbl->GetContainerPath(This,ContainerId,ContainerPath)
#define IDpxDownloadProvider_GetRanges(This,ContainerId,IncludeCompletedRanges,RangeCount,ppRangeArray) (This)->lpVtbl->GetRanges(This,ContainerId,IncludeCompletedRanges,RangeCount,ppRangeArray)
#define IDpxDownloadProvider_Resume(This) (This)->lpVtbl->Resume(This)
#define IDpxDownloadProvider_Suspend(This) (This)->lpVtbl->Suspend(This)
#define IDpxDownloadProvider_Cancel(This) (This)->lpVtbl->Cancel(This)
#define IDpxDownloadProvider_WaitForCompletion(This,TimeoutMilliseconds) (This)->lpVtbl->WaitForCompletion(This,TimeoutMilliseconds)
#define IDpxDownloadProvider_GetProgress(This,pDownloadProgress) (This)->lpVtbl->GetProgress(This,pDownloadProgress)
#define IDpxDownloadProvider_ClearRequest(This) (This)->lpVtbl->ClearRequest(This)
#define IDpxDownloadProvider_FreeMemory(This,Allocation) (This)->lpVtbl->FreeMemory(This,Allocation)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDpxDownloadProvider_QueryInterface(IDpxDownloadProvider* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDpxDownloadProvider_AddRef(IDpxDownloadProvider* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDpxDownloadProvider_Release(IDpxDownloadProvider* This) {
    return This->lpVtbl->Release(This);
}
/*** IDpxDownloadProvider methods ***/
static FORCEINLINE HRESULT IDpxDownloadProvider_SetProvideDataCallback(IDpxDownloadProvider* This,IDpxDownloadCallback *pProvideData) {
    return This->lpVtbl->SetProvideDataCallback(This,pProvideData);
}
static FORCEINLINE HRESULT IDpxDownloadProvider_GetProvideDataCallback(IDpxDownloadProvider* This,IDpxDownloadCallback **ppProvideData) {
    return This->lpVtbl->GetProvideDataCallback(This,ppProvideData);
}
static FORCEINLINE HRESULT IDpxDownloadProvider_AddContainer(IDpxDownloadProvider* This,LPCWSTR ContainerFilePath,UINT64 ContainerId) {
    return This->lpVtbl->AddContainer(This,ContainerFilePath,ContainerId);
}
static FORCEINLINE HRESULT IDpxDownloadProvider_AddRanges(IDpxDownloadProvider* This,UINT64 ContainerId,UINT RangeCount,DPX_BYTE_RANGE RangeList[]) {
    return This->lpVtbl->AddRanges(This,ContainerId,RangeCount,RangeList);
}
static FORCEINLINE HRESULT IDpxDownloadProvider_GetContainers(IDpxDownloadProvider* This,UINT *ContainerCount,UINT64 **ppContainerIdArray) {
    return This->lpVtbl->GetContainers(This,ContainerCount,ppContainerIdArray);
}
static FORCEINLINE HRESULT IDpxDownloadProvider_GetContainerPath(IDpxDownloadProvider* This,UINT64 ContainerId,LPWSTR *ContainerPath) {
    return This->lpVtbl->GetContainerPath(This,ContainerId,ContainerPath);
}
static FORCEINLINE HRESULT IDpxDownloadProvider_GetRanges(IDpxDownloadProvider* This,UINT64 ContainerId,BOOL IncludeCompletedRanges,UINT *RangeCount,DPX_BYTE_RANGE **ppRangeArray) {
    return This->lpVtbl->GetRanges(This,ContainerId,IncludeCompletedRanges,RangeCount,ppRangeArray);
}
static FORCEINLINE HRESULT IDpxDownloadProvider_Resume(IDpxDownloadProvider* This) {
    return This->lpVtbl->Resume(This);
}
static FORCEINLINE HRESULT IDpxDownloadProvider_Suspend(IDpxDownloadProvider* This) {
    return This->lpVtbl->Suspend(This);
}
static FORCEINLINE HRESULT IDpxDownloadProvider_Cancel(IDpxDownloadProvider* This) {
    return This->lpVtbl->Cancel(This);
}
static FORCEINLINE HRESULT IDpxDownloadProvider_WaitForCompletion(IDpxDownloadProvider* This,DWORD TimeoutMilliseconds) {
    return This->lpVtbl->WaitForCompletion(This,TimeoutMilliseconds);
}
static FORCEINLINE HRESULT IDpxDownloadProvider_GetProgress(IDpxDownloadProvider* This,DPX_PROGRESS_REMAIN *pDownloadProgress) {
    return This->lpVtbl->GetProgress(This,pDownloadProgress);
}
static FORCEINLINE HRESULT IDpxDownloadProvider_ClearRequest(IDpxDownloadProvider* This) {
    return This->lpVtbl->ClearRequest(This);
}
static FORCEINLINE void IDpxDownloadProvider_FreeMemory(IDpxDownloadProvider* This,void *Allocation) {
    This->lpVtbl->FreeMemory(This,Allocation);
}
#endif
#endif

#endif


#endif  /* __IDpxDownloadProvider_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDpxDownloadCallback interface
 */
#ifndef __IDpxDownloadCallback_INTERFACE_DEFINED__
#define __IDpxDownloadCallback_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDpxDownloadCallback, 0xddc1b717, 0x0e55, 0x452f, 0x83,0x8e, 0xd1,0x50,0x5b,0x86,0x6e,0x2b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ddc1b717-0e55-452f-838e-d1505b866e2b")
IDpxDownloadCallback : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE ProvideRequestedData(
        UINT64 ContainerId,
        UINT RangeCount,
        DPX_BYTE_RANGE RangeList[],
        const BYTE * RangeData[]) = 0;

    virtual HRESULT STDMETHODCALLTYPE ProvideRequestedDataByFile(
        UINT64 ContainerId,
        LPCWSTR ResponseFilePath,
        UINT RangeCount,
        DPX_BYTE_RANGE RangeArray[],
        UINT64 OffsetInResponseFile[]) = 0;

    virtual HRESULT STDMETHODCALLTYPE ProvideRequestedDataByPackedRangeFile(
        UINT64 ContainerId,
        LPCWSTR ResponseFilePath) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDpxDownloadCallback, 0xddc1b717, 0x0e55, 0x452f, 0x83,0x8e, 0xd1,0x50,0x5b,0x86,0x6e,0x2b)
#endif
#else
typedef struct IDpxDownloadCallbackVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDpxDownloadCallback *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDpxDownloadCallback *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDpxDownloadCallback *This);

    /*** IDpxDownloadCallback methods ***/
    HRESULT (STDMETHODCALLTYPE *ProvideRequestedData)(
        IDpxDownloadCallback *This,
        UINT64 ContainerId,
        UINT RangeCount,
        DPX_BYTE_RANGE RangeList[],
        const BYTE * RangeData[]);

    HRESULT (STDMETHODCALLTYPE *ProvideRequestedDataByFile)(
        IDpxDownloadCallback *This,
        UINT64 ContainerId,
        LPCWSTR ResponseFilePath,
        UINT RangeCount,
        DPX_BYTE_RANGE RangeArray[],
        UINT64 OffsetInResponseFile[]);

    HRESULT (STDMETHODCALLTYPE *ProvideRequestedDataByPackedRangeFile)(
        IDpxDownloadCallback *This,
        UINT64 ContainerId,
        LPCWSTR ResponseFilePath);

    END_INTERFACE
} IDpxDownloadCallbackVtbl;

interface IDpxDownloadCallback {
    CONST_VTBL IDpxDownloadCallbackVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDpxDownloadCallback_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDpxDownloadCallback_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDpxDownloadCallback_Release(This) (This)->lpVtbl->Release(This)
/*** IDpxDownloadCallback methods ***/
#define IDpxDownloadCallback_ProvideRequestedData(This,ContainerId,RangeCount,RangeList,RangeData) (This)->lpVtbl->ProvideRequestedData(This,ContainerId,RangeCount,RangeList,RangeData)
#define IDpxDownloadCallback_ProvideRequestedDataByFile(This,ContainerId,ResponseFilePath,RangeCount,RangeArray,OffsetInResponseFile) (This)->lpVtbl->ProvideRequestedDataByFile(This,ContainerId,ResponseFilePath,RangeCount,RangeArray,OffsetInResponseFile)
#define IDpxDownloadCallback_ProvideRequestedDataByPackedRangeFile(This,ContainerId,ResponseFilePath) (This)->lpVtbl->ProvideRequestedDataByPackedRangeFile(This,ContainerId,ResponseFilePath)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDpxDownloadCallback_QueryInterface(IDpxDownloadCallback* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDpxDownloadCallback_AddRef(IDpxDownloadCallback* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDpxDownloadCallback_Release(IDpxDownloadCallback* This) {
    return This->lpVtbl->Release(This);
}
/*** IDpxDownloadCallback methods ***/
static FORCEINLINE HRESULT IDpxDownloadCallback_ProvideRequestedData(IDpxDownloadCallback* This,UINT64 ContainerId,UINT RangeCount,DPX_BYTE_RANGE RangeList[],const BYTE * RangeData[]) {
    return This->lpVtbl->ProvideRequestedData(This,ContainerId,RangeCount,RangeList,RangeData);
}
static FORCEINLINE HRESULT IDpxDownloadCallback_ProvideRequestedDataByFile(IDpxDownloadCallback* This,UINT64 ContainerId,LPCWSTR ResponseFilePath,UINT RangeCount,DPX_BYTE_RANGE RangeArray[],UINT64 OffsetInResponseFile[]) {
    return This->lpVtbl->ProvideRequestedDataByFile(This,ContainerId,ResponseFilePath,RangeCount,RangeArray,OffsetInResponseFile);
}
static FORCEINLINE HRESULT IDpxDownloadCallback_ProvideRequestedDataByPackedRangeFile(IDpxDownloadCallback* This,UINT64 ContainerId,LPCWSTR ResponseFilePath) {
    return This->lpVtbl->ProvideRequestedDataByPackedRangeFile(This,ContainerId,ResponseFilePath);
}
#endif
#endif

#endif


#endif  /* __IDpxDownloadCallback_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IEnumDpxContainers interface
 */
#ifndef __IEnumDpxContainers_INTERFACE_DEFINED__
#define __IEnumDpxContainers_INTERFACE_DEFINED__

DEFINE_GUID(IID_IEnumDpxContainers, 0xddc1b722, 0x0e55, 0x452f, 0x83,0x8e, 0xd1,0x50,0x5b,0x86,0x6e,0x2b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ddc1b722-0e55-452f-838e-d1505b866e2b")
IEnumDpxContainers : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE Next(
        UINT ItemCount,
        IDpxContainer **ppContainers,
        UINT *pFetchedCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE Skip(
        UINT ItemCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE Reset(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Clone(
        IEnumDpxContainers **ppEnum) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetCount(
        UINT *pItemCount) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IEnumDpxContainers, 0xddc1b722, 0x0e55, 0x452f, 0x83,0x8e, 0xd1,0x50,0x5b,0x86,0x6e,0x2b)
#endif
#else
typedef struct IEnumDpxContainersVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IEnumDpxContainers *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IEnumDpxContainers *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IEnumDpxContainers *This);

    /*** IEnumDpxContainers methods ***/
    HRESULT (STDMETHODCALLTYPE *Next)(
        IEnumDpxContainers *This,
        UINT ItemCount,
        IDpxContainer **ppContainers,
        UINT *pFetchedCount);

    HRESULT (STDMETHODCALLTYPE *Skip)(
        IEnumDpxContainers *This,
        UINT ItemCount);

    HRESULT (STDMETHODCALLTYPE *Reset)(
        IEnumDpxContainers *This);

    HRESULT (STDMETHODCALLTYPE *Clone)(
        IEnumDpxContainers *This,
        IEnumDpxContainers **ppEnum);

    HRESULT (STDMETHODCALLTYPE *GetCount)(
        IEnumDpxContainers *This,
        UINT *pItemCount);

    END_INTERFACE
} IEnumDpxContainersVtbl;

interface IEnumDpxContainers {
    CONST_VTBL IEnumDpxContainersVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IEnumDpxContainers_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IEnumDpxContainers_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IEnumDpxContainers_Release(This) (This)->lpVtbl->Release(This)
/*** IEnumDpxContainers methods ***/
#define IEnumDpxContainers_Next(This,ItemCount,ppContainers,pFetchedCount) (This)->lpVtbl->Next(This,ItemCount,ppContainers,pFetchedCount)
#define IEnumDpxContainers_Skip(This,ItemCount) (This)->lpVtbl->Skip(This,ItemCount)
#define IEnumDpxContainers_Reset(This) (This)->lpVtbl->Reset(This)
#define IEnumDpxContainers_Clone(This,ppEnum) (This)->lpVtbl->Clone(This,ppEnum)
#define IEnumDpxContainers_GetCount(This,pItemCount) (This)->lpVtbl->GetCount(This,pItemCount)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IEnumDpxContainers_QueryInterface(IEnumDpxContainers* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IEnumDpxContainers_AddRef(IEnumDpxContainers* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IEnumDpxContainers_Release(IEnumDpxContainers* This) {
    return This->lpVtbl->Release(This);
}
/*** IEnumDpxContainers methods ***/
static FORCEINLINE HRESULT IEnumDpxContainers_Next(IEnumDpxContainers* This,UINT ItemCount,IDpxContainer **ppContainers,UINT *pFetchedCount) {
    return This->lpVtbl->Next(This,ItemCount,ppContainers,pFetchedCount);
}
static FORCEINLINE HRESULT IEnumDpxContainers_Skip(IEnumDpxContainers* This,UINT ItemCount) {
    return This->lpVtbl->Skip(This,ItemCount);
}
static FORCEINLINE HRESULT IEnumDpxContainers_Reset(IEnumDpxContainers* This) {
    return This->lpVtbl->Reset(This);
}
static FORCEINLINE HRESULT IEnumDpxContainers_Clone(IEnumDpxContainers* This,IEnumDpxContainers **ppEnum) {
    return This->lpVtbl->Clone(This,ppEnum);
}
static FORCEINLINE HRESULT IEnumDpxContainers_GetCount(IEnumDpxContainers* This,UINT *pItemCount) {
    return This->lpVtbl->GetCount(This,pItemCount);
}
#endif
#endif

#endif


#endif  /* __IEnumDpxContainers_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IEnumDpxFiles interface
 */
#ifndef __IEnumDpxFiles_INTERFACE_DEFINED__
#define __IEnumDpxFiles_INTERFACE_DEFINED__

DEFINE_GUID(IID_IEnumDpxFiles, 0xddc1b723, 0x0e55, 0x452f, 0x83,0x8e, 0xd1,0x50,0x5b,0x86,0x6e,0x2b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ddc1b723-0e55-452f-838e-d1505b866e2b")
IEnumDpxFiles : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE Next(
        UINT ItemCount,
        IDpxFile **ppFiles,
        UINT *pFetchedCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE Skip(
        UINT ItemCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE Reset(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Clone(
        IEnumDpxFiles **ppEnum) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetCount(
        UINT *pItemCount) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IEnumDpxFiles, 0xddc1b723, 0x0e55, 0x452f, 0x83,0x8e, 0xd1,0x50,0x5b,0x86,0x6e,0x2b)
#endif
#else
typedef struct IEnumDpxFilesVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IEnumDpxFiles *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IEnumDpxFiles *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IEnumDpxFiles *This);

    /*** IEnumDpxFiles methods ***/
    HRESULT (STDMETHODCALLTYPE *Next)(
        IEnumDpxFiles *This,
        UINT ItemCount,
        IDpxFile **ppFiles,
        UINT *pFetchedCount);

    HRESULT (STDMETHODCALLTYPE *Skip)(
        IEnumDpxFiles *This,
        UINT ItemCount);

    HRESULT (STDMETHODCALLTYPE *Reset)(
        IEnumDpxFiles *This);

    HRESULT (STDMETHODCALLTYPE *Clone)(
        IEnumDpxFiles *This,
        IEnumDpxFiles **ppEnum);

    HRESULT (STDMETHODCALLTYPE *GetCount)(
        IEnumDpxFiles *This,
        UINT *pItemCount);

    END_INTERFACE
} IEnumDpxFilesVtbl;

interface IEnumDpxFiles {
    CONST_VTBL IEnumDpxFilesVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IEnumDpxFiles_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IEnumDpxFiles_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IEnumDpxFiles_Release(This) (This)->lpVtbl->Release(This)
/*** IEnumDpxFiles methods ***/
#define IEnumDpxFiles_Next(This,ItemCount,ppFiles,pFetchedCount) (This)->lpVtbl->Next(This,ItemCount,ppFiles,pFetchedCount)
#define IEnumDpxFiles_Skip(This,ItemCount) (This)->lpVtbl->Skip(This,ItemCount)
#define IEnumDpxFiles_Reset(This) (This)->lpVtbl->Reset(This)
#define IEnumDpxFiles_Clone(This,ppEnum) (This)->lpVtbl->Clone(This,ppEnum)
#define IEnumDpxFiles_GetCount(This,pItemCount) (This)->lpVtbl->GetCount(This,pItemCount)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IEnumDpxFiles_QueryInterface(IEnumDpxFiles* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IEnumDpxFiles_AddRef(IEnumDpxFiles* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IEnumDpxFiles_Release(IEnumDpxFiles* This) {
    return This->lpVtbl->Release(This);
}
/*** IEnumDpxFiles methods ***/
static FORCEINLINE HRESULT IEnumDpxFiles_Next(IEnumDpxFiles* This,UINT ItemCount,IDpxFile **ppFiles,UINT *pFetchedCount) {
    return This->lpVtbl->Next(This,ItemCount,ppFiles,pFetchedCount);
}
static FORCEINLINE HRESULT IEnumDpxFiles_Skip(IEnumDpxFiles* This,UINT ItemCount) {
    return This->lpVtbl->Skip(This,ItemCount);
}
static FORCEINLINE HRESULT IEnumDpxFiles_Reset(IEnumDpxFiles* This) {
    return This->lpVtbl->Reset(This);
}
static FORCEINLINE HRESULT IEnumDpxFiles_Clone(IEnumDpxFiles* This,IEnumDpxFiles **ppEnum) {
    return This->lpVtbl->Clone(This,ppEnum);
}
static FORCEINLINE HRESULT IEnumDpxFiles_GetCount(IEnumDpxFiles* This,UINT *pItemCount) {
    return This->lpVtbl->GetCount(This,pItemCount);
}
#endif
#endif

#endif


#endif  /* __IEnumDpxFiles_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IEnumDpxContainerDirectoryEntries interface
 */
#ifndef __IEnumDpxContainerDirectoryEntries_INTERFACE_DEFINED__
#define __IEnumDpxContainerDirectoryEntries_INTERFACE_DEFINED__

DEFINE_GUID(IID_IEnumDpxContainerDirectoryEntries, 0xddc1b725, 0x0e55, 0x452f, 0x83,0x8e, 0xd1,0x50,0x5b,0x86,0x6e,0x2b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ddc1b725-0e55-452f-838e-d1505b866e2b")
IEnumDpxContainerDirectoryEntries : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE Next(
        UINT ItemCount,
        IDpxContainerDirectoryEntry **ppDirectoryEntries,
        UINT *pFetchedCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE Skip(
        UINT ItemCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE Reset(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Clone(
        IEnumDpxContainerDirectoryEntries **ppEnum) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetCount(
        UINT *pItemCount) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IEnumDpxContainerDirectoryEntries, 0xddc1b725, 0x0e55, 0x452f, 0x83,0x8e, 0xd1,0x50,0x5b,0x86,0x6e,0x2b)
#endif
#else
typedef struct IEnumDpxContainerDirectoryEntriesVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IEnumDpxContainerDirectoryEntries *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IEnumDpxContainerDirectoryEntries *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IEnumDpxContainerDirectoryEntries *This);

    /*** IEnumDpxContainerDirectoryEntries methods ***/
    HRESULT (STDMETHODCALLTYPE *Next)(
        IEnumDpxContainerDirectoryEntries *This,
        UINT ItemCount,
        IDpxContainerDirectoryEntry **ppDirectoryEntries,
        UINT *pFetchedCount);

    HRESULT (STDMETHODCALLTYPE *Skip)(
        IEnumDpxContainerDirectoryEntries *This,
        UINT ItemCount);

    HRESULT (STDMETHODCALLTYPE *Reset)(
        IEnumDpxContainerDirectoryEntries *This);

    HRESULT (STDMETHODCALLTYPE *Clone)(
        IEnumDpxContainerDirectoryEntries *This,
        IEnumDpxContainerDirectoryEntries **ppEnum);

    HRESULT (STDMETHODCALLTYPE *GetCount)(
        IEnumDpxContainerDirectoryEntries *This,
        UINT *pItemCount);

    END_INTERFACE
} IEnumDpxContainerDirectoryEntriesVtbl;

interface IEnumDpxContainerDirectoryEntries {
    CONST_VTBL IEnumDpxContainerDirectoryEntriesVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IEnumDpxContainerDirectoryEntries_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IEnumDpxContainerDirectoryEntries_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IEnumDpxContainerDirectoryEntries_Release(This) (This)->lpVtbl->Release(This)
/*** IEnumDpxContainerDirectoryEntries methods ***/
#define IEnumDpxContainerDirectoryEntries_Next(This,ItemCount,ppDirectoryEntries,pFetchedCount) (This)->lpVtbl->Next(This,ItemCount,ppDirectoryEntries,pFetchedCount)
#define IEnumDpxContainerDirectoryEntries_Skip(This,ItemCount) (This)->lpVtbl->Skip(This,ItemCount)
#define IEnumDpxContainerDirectoryEntries_Reset(This) (This)->lpVtbl->Reset(This)
#define IEnumDpxContainerDirectoryEntries_Clone(This,ppEnum) (This)->lpVtbl->Clone(This,ppEnum)
#define IEnumDpxContainerDirectoryEntries_GetCount(This,pItemCount) (This)->lpVtbl->GetCount(This,pItemCount)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IEnumDpxContainerDirectoryEntries_QueryInterface(IEnumDpxContainerDirectoryEntries* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IEnumDpxContainerDirectoryEntries_AddRef(IEnumDpxContainerDirectoryEntries* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IEnumDpxContainerDirectoryEntries_Release(IEnumDpxContainerDirectoryEntries* This) {
    return This->lpVtbl->Release(This);
}
/*** IEnumDpxContainerDirectoryEntries methods ***/
static FORCEINLINE HRESULT IEnumDpxContainerDirectoryEntries_Next(IEnumDpxContainerDirectoryEntries* This,UINT ItemCount,IDpxContainerDirectoryEntry **ppDirectoryEntries,UINT *pFetchedCount) {
    return This->lpVtbl->Next(This,ItemCount,ppDirectoryEntries,pFetchedCount);
}
static FORCEINLINE HRESULT IEnumDpxContainerDirectoryEntries_Skip(IEnumDpxContainerDirectoryEntries* This,UINT ItemCount) {
    return This->lpVtbl->Skip(This,ItemCount);
}
static FORCEINLINE HRESULT IEnumDpxContainerDirectoryEntries_Reset(IEnumDpxContainerDirectoryEntries* This) {
    return This->lpVtbl->Reset(This);
}
static FORCEINLINE HRESULT IEnumDpxContainerDirectoryEntries_Clone(IEnumDpxContainerDirectoryEntries* This,IEnumDpxContainerDirectoryEntries **ppEnum) {
    return This->lpVtbl->Clone(This,ppEnum);
}
static FORCEINLINE HRESULT IEnumDpxContainerDirectoryEntries_GetCount(IEnumDpxContainerDirectoryEntries* This,UINT *pItemCount) {
    return This->lpVtbl->GetCount(This,pItemCount);
}
#endif
#endif

#endif


#endif  /* __IEnumDpxContainerDirectoryEntries_INTERFACE_DEFINED__ */

typedef struct tagDpxContainerDecryptionData {
    ULONG cbDecryptionData;
    BYTE *pDecryptionData;
} DpxContainerDecryptionData;
typedef enum tagDPX_CONTAINER_ENCRYPTION_ENUM {
    DPX_CONTAINER_ENCRYPTION_NONE = 0,
    DPX_CONTAINER_ENCRYPTION_ITERATIVE = 1,
    DPX_CONTAINER_ENCRYPTION_MAX_ENUM = DPX_CONTAINER_ENCRYPTION_ITERATIVE
} DPX_CONTAINER_ENCRYPTION_ENUM;
/*****************************************************************************
 * IDpxEncryptedContainer interface
 */
#ifndef __IDpxEncryptedContainer_INTERFACE_DEFINED__
#define __IDpxEncryptedContainer_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDpxEncryptedContainer, 0xddc1b726, 0x0e55, 0x452f, 0x83,0x8e, 0xd1,0x50,0x5b,0x86,0x6e,0x2b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ddc1b726-0e55-452f-838e-d1505b866e2b")
IDpxEncryptedContainer : public IDpxContainer
{
    virtual HRESULT STDMETHODCALLTYPE SetContainerDecryption(
        UINT DecryptionDataCount,
        DpxContainerDecryptionData DecryptionData[],
        DPX_CONTAINER_ENCRYPTION_ENUM EncryptionType) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDpxEncryptedContainer, 0xddc1b726, 0x0e55, 0x452f, 0x83,0x8e, 0xd1,0x50,0x5b,0x86,0x6e,0x2b)
#endif
#else
typedef struct IDpxEncryptedContainerVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDpxEncryptedContainer *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDpxEncryptedContainer *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDpxEncryptedContainer *This);

    /*** IDpxContainer methods ***/
    HRESULT (STDMETHODCALLTYPE *SetContainerPath)(
        IDpxEncryptedContainer *This,
        LPCWSTR ContainerPath);

    HRESULT (STDMETHODCALLTYPE *GetContainerPath)(
        IDpxEncryptedContainer *This,
        LPWSTR *pContainerPath);

    HRESULT (STDMETHODCALLTYPE *AddFileToExtract)(
        IDpxEncryptedContainer *This,
        LPCWSTR SourceFileName,
        LPCWSTR TargetFileName,
        DPX_HASH *TargetFileHash);

    HRESULT (STDMETHODCALLTYPE *AddFileToExtract2)(
        IDpxEncryptedContainer *This,
        LPCWSTR SourceFileName,
        LPCWSTR TargetFileName,
        IDpxFile **ppFile);

    HRESULT (STDMETHODCALLTYPE *ExtractAllFiles)(
        IDpxEncryptedContainer *This);

    HRESULT (STDMETHODCALLTYPE *EnumFilesToExtract)(
        IDpxEncryptedContainer *This,
        IEnumDpxFiles **ppEnumFiles);

    HRESULT (STDMETHODCALLTYPE *SetExpectedContainerIndexHash)(
        IDpxEncryptedContainer *This,
        DPX_HASH *pExpectedHash);

    HRESULT (STDMETHODCALLTYPE *GetExpectedContainerIndexHash)(
        IDpxEncryptedContainer *This,
        DPX_HASH **ppExpectedHash);

    HRESULT (STDMETHODCALLTYPE *ProvideContainerIndex)(
        IDpxEncryptedContainer *This,
        UINT IndexSize,
        BYTE IndexData[]);

    HRESULT (STDMETHODCALLTYPE *ProvideContainerIndexByFile)(
        IDpxEncryptedContainer *This,
        LPCWSTR IndexFileName);

    HRESULT (STDMETHODCALLTYPE *EnumDirectoryEntries)(
        IDpxEncryptedContainer *This,
        IEnumDpxContainerDirectoryEntries **ppEnumEntries);

    HRESULT (STDMETHODCALLTYPE *Remove)(
        IDpxEncryptedContainer *This);

    HRESULT (STDMETHODCALLTYPE *SetUserValue)(
        IDpxEncryptedContainer *This,
        UINT64 UserValue);

    HRESULT (STDMETHODCALLTYPE *GetUserValue)(
        IDpxEncryptedContainer *This,
        UINT64 *pUserValue);

    void (STDMETHODCALLTYPE *FreeMemory)(
        IDpxEncryptedContainer *This,
        void *Allocation);

    /*** IDpxEncryptedContainer methods ***/
    HRESULT (STDMETHODCALLTYPE *SetContainerDecryption)(
        IDpxEncryptedContainer *This,
        UINT DecryptionDataCount,
        DpxContainerDecryptionData DecryptionData[],
        DPX_CONTAINER_ENCRYPTION_ENUM EncryptionType);

    END_INTERFACE
} IDpxEncryptedContainerVtbl;

interface IDpxEncryptedContainer {
    CONST_VTBL IDpxEncryptedContainerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDpxEncryptedContainer_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDpxEncryptedContainer_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDpxEncryptedContainer_Release(This) (This)->lpVtbl->Release(This)
/*** IDpxContainer methods ***/
#define IDpxEncryptedContainer_SetContainerPath(This,ContainerPath) (This)->lpVtbl->SetContainerPath(This,ContainerPath)
#define IDpxEncryptedContainer_GetContainerPath(This,pContainerPath) (This)->lpVtbl->GetContainerPath(This,pContainerPath)
#define IDpxEncryptedContainer_AddFileToExtract(This,SourceFileName,TargetFileName,TargetFileHash) (This)->lpVtbl->AddFileToExtract(This,SourceFileName,TargetFileName,TargetFileHash)
#define IDpxEncryptedContainer_AddFileToExtract2(This,SourceFileName,TargetFileName,ppFile) (This)->lpVtbl->AddFileToExtract2(This,SourceFileName,TargetFileName,ppFile)
#define IDpxEncryptedContainer_ExtractAllFiles(This) (This)->lpVtbl->ExtractAllFiles(This)
#define IDpxEncryptedContainer_EnumFilesToExtract(This,ppEnumFiles) (This)->lpVtbl->EnumFilesToExtract(This,ppEnumFiles)
#define IDpxEncryptedContainer_SetExpectedContainerIndexHash(This,pExpectedHash) (This)->lpVtbl->SetExpectedContainerIndexHash(This,pExpectedHash)
#define IDpxEncryptedContainer_GetExpectedContainerIndexHash(This,ppExpectedHash) (This)->lpVtbl->GetExpectedContainerIndexHash(This,ppExpectedHash)
#define IDpxEncryptedContainer_ProvideContainerIndex(This,IndexSize,IndexData) (This)->lpVtbl->ProvideContainerIndex(This,IndexSize,IndexData)
#define IDpxEncryptedContainer_ProvideContainerIndexByFile(This,IndexFileName) (This)->lpVtbl->ProvideContainerIndexByFile(This,IndexFileName)
#define IDpxEncryptedContainer_EnumDirectoryEntries(This,ppEnumEntries) (This)->lpVtbl->EnumDirectoryEntries(This,ppEnumEntries)
#define IDpxEncryptedContainer_Remove(This) (This)->lpVtbl->Remove(This)
#define IDpxEncryptedContainer_SetUserValue(This,UserValue) (This)->lpVtbl->SetUserValue(This,UserValue)
#define IDpxEncryptedContainer_GetUserValue(This,pUserValue) (This)->lpVtbl->GetUserValue(This,pUserValue)
#define IDpxEncryptedContainer_FreeMemory(This,Allocation) (This)->lpVtbl->FreeMemory(This,Allocation)
/*** IDpxEncryptedContainer methods ***/
#define IDpxEncryptedContainer_SetContainerDecryption(This,DecryptionDataCount,DecryptionData,EncryptionType) (This)->lpVtbl->SetContainerDecryption(This,DecryptionDataCount,DecryptionData,EncryptionType)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDpxEncryptedContainer_QueryInterface(IDpxEncryptedContainer* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDpxEncryptedContainer_AddRef(IDpxEncryptedContainer* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDpxEncryptedContainer_Release(IDpxEncryptedContainer* This) {
    return This->lpVtbl->Release(This);
}
/*** IDpxContainer methods ***/
static FORCEINLINE HRESULT IDpxEncryptedContainer_SetContainerPath(IDpxEncryptedContainer* This,LPCWSTR ContainerPath) {
    return This->lpVtbl->SetContainerPath(This,ContainerPath);
}
static FORCEINLINE HRESULT IDpxEncryptedContainer_GetContainerPath(IDpxEncryptedContainer* This,LPWSTR *pContainerPath) {
    return This->lpVtbl->GetContainerPath(This,pContainerPath);
}
static FORCEINLINE HRESULT IDpxEncryptedContainer_AddFileToExtract(IDpxEncryptedContainer* This,LPCWSTR SourceFileName,LPCWSTR TargetFileName,DPX_HASH *TargetFileHash) {
    return This->lpVtbl->AddFileToExtract(This,SourceFileName,TargetFileName,TargetFileHash);
}
static FORCEINLINE HRESULT IDpxEncryptedContainer_AddFileToExtract2(IDpxEncryptedContainer* This,LPCWSTR SourceFileName,LPCWSTR TargetFileName,IDpxFile **ppFile) {
    return This->lpVtbl->AddFileToExtract2(This,SourceFileName,TargetFileName,ppFile);
}
static FORCEINLINE HRESULT IDpxEncryptedContainer_ExtractAllFiles(IDpxEncryptedContainer* This) {
    return This->lpVtbl->ExtractAllFiles(This);
}
static FORCEINLINE HRESULT IDpxEncryptedContainer_EnumFilesToExtract(IDpxEncryptedContainer* This,IEnumDpxFiles **ppEnumFiles) {
    return This->lpVtbl->EnumFilesToExtract(This,ppEnumFiles);
}
static FORCEINLINE HRESULT IDpxEncryptedContainer_SetExpectedContainerIndexHash(IDpxEncryptedContainer* This,DPX_HASH *pExpectedHash) {
    return This->lpVtbl->SetExpectedContainerIndexHash(This,pExpectedHash);
}
static FORCEINLINE HRESULT IDpxEncryptedContainer_GetExpectedContainerIndexHash(IDpxEncryptedContainer* This,DPX_HASH **ppExpectedHash) {
    return This->lpVtbl->GetExpectedContainerIndexHash(This,ppExpectedHash);
}
static FORCEINLINE HRESULT IDpxEncryptedContainer_ProvideContainerIndex(IDpxEncryptedContainer* This,UINT IndexSize,BYTE IndexData[]) {
    return This->lpVtbl->ProvideContainerIndex(This,IndexSize,IndexData);
}
static FORCEINLINE HRESULT IDpxEncryptedContainer_ProvideContainerIndexByFile(IDpxEncryptedContainer* This,LPCWSTR IndexFileName) {
    return This->lpVtbl->ProvideContainerIndexByFile(This,IndexFileName);
}
static FORCEINLINE HRESULT IDpxEncryptedContainer_EnumDirectoryEntries(IDpxEncryptedContainer* This,IEnumDpxContainerDirectoryEntries **ppEnumEntries) {
    return This->lpVtbl->EnumDirectoryEntries(This,ppEnumEntries);
}
static FORCEINLINE HRESULT IDpxEncryptedContainer_Remove(IDpxEncryptedContainer* This) {
    return This->lpVtbl->Remove(This);
}
static FORCEINLINE HRESULT IDpxEncryptedContainer_SetUserValue(IDpxEncryptedContainer* This,UINT64 UserValue) {
    return This->lpVtbl->SetUserValue(This,UserValue);
}
static FORCEINLINE HRESULT IDpxEncryptedContainer_GetUserValue(IDpxEncryptedContainer* This,UINT64 *pUserValue) {
    return This->lpVtbl->GetUserValue(This,pUserValue);
}
static FORCEINLINE void IDpxEncryptedContainer_FreeMemory(IDpxEncryptedContainer* This,void *Allocation) {
    This->lpVtbl->FreeMemory(This,Allocation);
}
/*** IDpxEncryptedContainer methods ***/
static FORCEINLINE HRESULT IDpxEncryptedContainer_SetContainerDecryption(IDpxEncryptedContainer* This,UINT DecryptionDataCount,DpxContainerDecryptionData DecryptionData[],DPX_CONTAINER_ENCRYPTION_ENUM EncryptionType) {
    return This->lpVtbl->SetContainerDecryption(This,DecryptionDataCount,DecryptionData,EncryptionType);
}
#endif
#endif

#endif


#endif  /* __IDpxEncryptedContainer_INTERFACE_DEFINED__ */

typedef struct tagDpxPredecessorFilePathInfo {
    LPCWSTR PredecessorInstallPath;
    LPCWSTR PredecessorCabPath;
    LPCWSTR CabPath;
} PredecessorFilePathInfo;
/*****************************************************************************
 * IDpxContainer2 interface
 */
#ifndef __IDpxContainer2_INTERFACE_DEFINED__
#define __IDpxContainer2_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDpxContainer2, 0xc8e1e004, 0x3a8d, 0x45c7, 0xa6,0xaa, 0x8c,0x8f,0x2f,0x2e,0xd1,0xe1);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c8e1e004-3a8d-45c7-a6aa-8c8f2f2ed1e1")
IDpxContainer2 : public IDpxEncryptedContainer
{
    virtual HRESULT STDMETHODCALLTYPE AddPredecessorContainer(
        LPCWSTR ContainerPath,
        UINT PredecessorFilePathsCount,
        PredecessorFilePathInfo PredecessorFilePaths[],
        IDpxContainer2 **ppContainer) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDpxContainer2, 0xc8e1e004, 0x3a8d, 0x45c7, 0xa6,0xaa, 0x8c,0x8f,0x2f,0x2e,0xd1,0xe1)
#endif
#else
typedef struct IDpxContainer2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDpxContainer2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDpxContainer2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDpxContainer2 *This);

    /*** IDpxContainer methods ***/
    HRESULT (STDMETHODCALLTYPE *SetContainerPath)(
        IDpxContainer2 *This,
        LPCWSTR ContainerPath);

    HRESULT (STDMETHODCALLTYPE *GetContainerPath)(
        IDpxContainer2 *This,
        LPWSTR *pContainerPath);

    HRESULT (STDMETHODCALLTYPE *AddFileToExtract)(
        IDpxContainer2 *This,
        LPCWSTR SourceFileName,
        LPCWSTR TargetFileName,
        DPX_HASH *TargetFileHash);

    HRESULT (STDMETHODCALLTYPE *AddFileToExtract2)(
        IDpxContainer2 *This,
        LPCWSTR SourceFileName,
        LPCWSTR TargetFileName,
        IDpxFile **ppFile);

    HRESULT (STDMETHODCALLTYPE *ExtractAllFiles)(
        IDpxContainer2 *This);

    HRESULT (STDMETHODCALLTYPE *EnumFilesToExtract)(
        IDpxContainer2 *This,
        IEnumDpxFiles **ppEnumFiles);

    HRESULT (STDMETHODCALLTYPE *SetExpectedContainerIndexHash)(
        IDpxContainer2 *This,
        DPX_HASH *pExpectedHash);

    HRESULT (STDMETHODCALLTYPE *GetExpectedContainerIndexHash)(
        IDpxContainer2 *This,
        DPX_HASH **ppExpectedHash);

    HRESULT (STDMETHODCALLTYPE *ProvideContainerIndex)(
        IDpxContainer2 *This,
        UINT IndexSize,
        BYTE IndexData[]);

    HRESULT (STDMETHODCALLTYPE *ProvideContainerIndexByFile)(
        IDpxContainer2 *This,
        LPCWSTR IndexFileName);

    HRESULT (STDMETHODCALLTYPE *EnumDirectoryEntries)(
        IDpxContainer2 *This,
        IEnumDpxContainerDirectoryEntries **ppEnumEntries);

    HRESULT (STDMETHODCALLTYPE *Remove)(
        IDpxContainer2 *This);

    HRESULT (STDMETHODCALLTYPE *SetUserValue)(
        IDpxContainer2 *This,
        UINT64 UserValue);

    HRESULT (STDMETHODCALLTYPE *GetUserValue)(
        IDpxContainer2 *This,
        UINT64 *pUserValue);

    void (STDMETHODCALLTYPE *FreeMemory)(
        IDpxContainer2 *This,
        void *Allocation);

    /*** IDpxEncryptedContainer methods ***/
    HRESULT (STDMETHODCALLTYPE *SetContainerDecryption)(
        IDpxContainer2 *This,
        UINT DecryptionDataCount,
        DpxContainerDecryptionData DecryptionData[],
        DPX_CONTAINER_ENCRYPTION_ENUM EncryptionType);

    /*** IDpxContainer2 methods ***/
    HRESULT (STDMETHODCALLTYPE *AddPredecessorContainer)(
        IDpxContainer2 *This,
        LPCWSTR ContainerPath,
        UINT PredecessorFilePathsCount,
        PredecessorFilePathInfo PredecessorFilePaths[],
        IDpxContainer2 **ppContainer);

    END_INTERFACE
} IDpxContainer2Vtbl;

interface IDpxContainer2 {
    CONST_VTBL IDpxContainer2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDpxContainer2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDpxContainer2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDpxContainer2_Release(This) (This)->lpVtbl->Release(This)
/*** IDpxContainer methods ***/
#define IDpxContainer2_SetContainerPath(This,ContainerPath) (This)->lpVtbl->SetContainerPath(This,ContainerPath)
#define IDpxContainer2_GetContainerPath(This,pContainerPath) (This)->lpVtbl->GetContainerPath(This,pContainerPath)
#define IDpxContainer2_AddFileToExtract(This,SourceFileName,TargetFileName,TargetFileHash) (This)->lpVtbl->AddFileToExtract(This,SourceFileName,TargetFileName,TargetFileHash)
#define IDpxContainer2_AddFileToExtract2(This,SourceFileName,TargetFileName,ppFile) (This)->lpVtbl->AddFileToExtract2(This,SourceFileName,TargetFileName,ppFile)
#define IDpxContainer2_ExtractAllFiles(This) (This)->lpVtbl->ExtractAllFiles(This)
#define IDpxContainer2_EnumFilesToExtract(This,ppEnumFiles) (This)->lpVtbl->EnumFilesToExtract(This,ppEnumFiles)
#define IDpxContainer2_SetExpectedContainerIndexHash(This,pExpectedHash) (This)->lpVtbl->SetExpectedContainerIndexHash(This,pExpectedHash)
#define IDpxContainer2_GetExpectedContainerIndexHash(This,ppExpectedHash) (This)->lpVtbl->GetExpectedContainerIndexHash(This,ppExpectedHash)
#define IDpxContainer2_ProvideContainerIndex(This,IndexSize,IndexData) (This)->lpVtbl->ProvideContainerIndex(This,IndexSize,IndexData)
#define IDpxContainer2_ProvideContainerIndexByFile(This,IndexFileName) (This)->lpVtbl->ProvideContainerIndexByFile(This,IndexFileName)
#define IDpxContainer2_EnumDirectoryEntries(This,ppEnumEntries) (This)->lpVtbl->EnumDirectoryEntries(This,ppEnumEntries)
#define IDpxContainer2_Remove(This) (This)->lpVtbl->Remove(This)
#define IDpxContainer2_SetUserValue(This,UserValue) (This)->lpVtbl->SetUserValue(This,UserValue)
#define IDpxContainer2_GetUserValue(This,pUserValue) (This)->lpVtbl->GetUserValue(This,pUserValue)
#define IDpxContainer2_FreeMemory(This,Allocation) (This)->lpVtbl->FreeMemory(This,Allocation)
/*** IDpxEncryptedContainer methods ***/
#define IDpxContainer2_SetContainerDecryption(This,DecryptionDataCount,DecryptionData,EncryptionType) (This)->lpVtbl->SetContainerDecryption(This,DecryptionDataCount,DecryptionData,EncryptionType)
/*** IDpxContainer2 methods ***/
#define IDpxContainer2_AddPredecessorContainer(This,ContainerPath,PredecessorFilePathsCount,PredecessorFilePaths,ppContainer) (This)->lpVtbl->AddPredecessorContainer(This,ContainerPath,PredecessorFilePathsCount,PredecessorFilePaths,ppContainer)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDpxContainer2_QueryInterface(IDpxContainer2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDpxContainer2_AddRef(IDpxContainer2* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDpxContainer2_Release(IDpxContainer2* This) {
    return This->lpVtbl->Release(This);
}
/*** IDpxContainer methods ***/
static FORCEINLINE HRESULT IDpxContainer2_SetContainerPath(IDpxContainer2* This,LPCWSTR ContainerPath) {
    return This->lpVtbl->SetContainerPath(This,ContainerPath);
}
static FORCEINLINE HRESULT IDpxContainer2_GetContainerPath(IDpxContainer2* This,LPWSTR *pContainerPath) {
    return This->lpVtbl->GetContainerPath(This,pContainerPath);
}
static FORCEINLINE HRESULT IDpxContainer2_AddFileToExtract(IDpxContainer2* This,LPCWSTR SourceFileName,LPCWSTR TargetFileName,DPX_HASH *TargetFileHash) {
    return This->lpVtbl->AddFileToExtract(This,SourceFileName,TargetFileName,TargetFileHash);
}
static FORCEINLINE HRESULT IDpxContainer2_AddFileToExtract2(IDpxContainer2* This,LPCWSTR SourceFileName,LPCWSTR TargetFileName,IDpxFile **ppFile) {
    return This->lpVtbl->AddFileToExtract2(This,SourceFileName,TargetFileName,ppFile);
}
static FORCEINLINE HRESULT IDpxContainer2_ExtractAllFiles(IDpxContainer2* This) {
    return This->lpVtbl->ExtractAllFiles(This);
}
static FORCEINLINE HRESULT IDpxContainer2_EnumFilesToExtract(IDpxContainer2* This,IEnumDpxFiles **ppEnumFiles) {
    return This->lpVtbl->EnumFilesToExtract(This,ppEnumFiles);
}
static FORCEINLINE HRESULT IDpxContainer2_SetExpectedContainerIndexHash(IDpxContainer2* This,DPX_HASH *pExpectedHash) {
    return This->lpVtbl->SetExpectedContainerIndexHash(This,pExpectedHash);
}
static FORCEINLINE HRESULT IDpxContainer2_GetExpectedContainerIndexHash(IDpxContainer2* This,DPX_HASH **ppExpectedHash) {
    return This->lpVtbl->GetExpectedContainerIndexHash(This,ppExpectedHash);
}
static FORCEINLINE HRESULT IDpxContainer2_ProvideContainerIndex(IDpxContainer2* This,UINT IndexSize,BYTE IndexData[]) {
    return This->lpVtbl->ProvideContainerIndex(This,IndexSize,IndexData);
}
static FORCEINLINE HRESULT IDpxContainer2_ProvideContainerIndexByFile(IDpxContainer2* This,LPCWSTR IndexFileName) {
    return This->lpVtbl->ProvideContainerIndexByFile(This,IndexFileName);
}
static FORCEINLINE HRESULT IDpxContainer2_EnumDirectoryEntries(IDpxContainer2* This,IEnumDpxContainerDirectoryEntries **ppEnumEntries) {
    return This->lpVtbl->EnumDirectoryEntries(This,ppEnumEntries);
}
static FORCEINLINE HRESULT IDpxContainer2_Remove(IDpxContainer2* This) {
    return This->lpVtbl->Remove(This);
}
static FORCEINLINE HRESULT IDpxContainer2_SetUserValue(IDpxContainer2* This,UINT64 UserValue) {
    return This->lpVtbl->SetUserValue(This,UserValue);
}
static FORCEINLINE HRESULT IDpxContainer2_GetUserValue(IDpxContainer2* This,UINT64 *pUserValue) {
    return This->lpVtbl->GetUserValue(This,pUserValue);
}
static FORCEINLINE void IDpxContainer2_FreeMemory(IDpxContainer2* This,void *Allocation) {
    This->lpVtbl->FreeMemory(This,Allocation);
}
/*** IDpxEncryptedContainer methods ***/
static FORCEINLINE HRESULT IDpxContainer2_SetContainerDecryption(IDpxContainer2* This,UINT DecryptionDataCount,DpxContainerDecryptionData DecryptionData[],DPX_CONTAINER_ENCRYPTION_ENUM EncryptionType) {
    return This->lpVtbl->SetContainerDecryption(This,DecryptionDataCount,DecryptionData,EncryptionType);
}
/*** IDpxContainer2 methods ***/
static FORCEINLINE HRESULT IDpxContainer2_AddPredecessorContainer(IDpxContainer2* This,LPCWSTR ContainerPath,UINT PredecessorFilePathsCount,PredecessorFilePathInfo PredecessorFilePaths[],IDpxContainer2 **ppContainer) {
    return This->lpVtbl->AddPredecessorContainer(This,ContainerPath,PredecessorFilePathsCount,PredecessorFilePaths,ppContainer);
}
#endif
#endif

#endif


#endif  /* __IDpxContainer2_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDpxContainer3 interface
 */
#ifndef __IDpxContainer3_INTERFACE_DEFINED__
#define __IDpxContainer3_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDpxContainer3, 0x582f768c, 0xfe7d, 0x4bf5, 0xb0,0xb8, 0x3a,0xb0,0x1d,0x53,0xb0,0xd0);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("582f768c-fe7d-4bf5-b0b8-3ab01d53b0d0")
IDpxContainer3 : public IDpxContainer2
{
    virtual HRESULT STDMETHODCALLTYPE AddPeerContainer(
        LPCWSTR ContainerPath,
        IDpxContainer3 **ppContainer) = 0;

    virtual HRESULT STDMETHODCALLTYPE IsPeer(
        IDpxContainer3 *ppOtherContainer,
        BOOL *pIsPeer) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetPeerGroupId(
        UINT64 *pnPeerGroupId) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDpxContainer3, 0x582f768c, 0xfe7d, 0x4bf5, 0xb0,0xb8, 0x3a,0xb0,0x1d,0x53,0xb0,0xd0)
#endif
#else
typedef struct IDpxContainer3Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDpxContainer3 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDpxContainer3 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDpxContainer3 *This);

    /*** IDpxContainer methods ***/
    HRESULT (STDMETHODCALLTYPE *SetContainerPath)(
        IDpxContainer3 *This,
        LPCWSTR ContainerPath);

    HRESULT (STDMETHODCALLTYPE *GetContainerPath)(
        IDpxContainer3 *This,
        LPWSTR *pContainerPath);

    HRESULT (STDMETHODCALLTYPE *AddFileToExtract)(
        IDpxContainer3 *This,
        LPCWSTR SourceFileName,
        LPCWSTR TargetFileName,
        DPX_HASH *TargetFileHash);

    HRESULT (STDMETHODCALLTYPE *AddFileToExtract2)(
        IDpxContainer3 *This,
        LPCWSTR SourceFileName,
        LPCWSTR TargetFileName,
        IDpxFile **ppFile);

    HRESULT (STDMETHODCALLTYPE *ExtractAllFiles)(
        IDpxContainer3 *This);

    HRESULT (STDMETHODCALLTYPE *EnumFilesToExtract)(
        IDpxContainer3 *This,
        IEnumDpxFiles **ppEnumFiles);

    HRESULT (STDMETHODCALLTYPE *SetExpectedContainerIndexHash)(
        IDpxContainer3 *This,
        DPX_HASH *pExpectedHash);

    HRESULT (STDMETHODCALLTYPE *GetExpectedContainerIndexHash)(
        IDpxContainer3 *This,
        DPX_HASH **ppExpectedHash);

    HRESULT (STDMETHODCALLTYPE *ProvideContainerIndex)(
        IDpxContainer3 *This,
        UINT IndexSize,
        BYTE IndexData[]);

    HRESULT (STDMETHODCALLTYPE *ProvideContainerIndexByFile)(
        IDpxContainer3 *This,
        LPCWSTR IndexFileName);

    HRESULT (STDMETHODCALLTYPE *EnumDirectoryEntries)(
        IDpxContainer3 *This,
        IEnumDpxContainerDirectoryEntries **ppEnumEntries);

    HRESULT (STDMETHODCALLTYPE *Remove)(
        IDpxContainer3 *This);

    HRESULT (STDMETHODCALLTYPE *SetUserValue)(
        IDpxContainer3 *This,
        UINT64 UserValue);

    HRESULT (STDMETHODCALLTYPE *GetUserValue)(
        IDpxContainer3 *This,
        UINT64 *pUserValue);

    void (STDMETHODCALLTYPE *FreeMemory)(
        IDpxContainer3 *This,
        void *Allocation);

    /*** IDpxEncryptedContainer methods ***/
    HRESULT (STDMETHODCALLTYPE *SetContainerDecryption)(
        IDpxContainer3 *This,
        UINT DecryptionDataCount,
        DpxContainerDecryptionData DecryptionData[],
        DPX_CONTAINER_ENCRYPTION_ENUM EncryptionType);

    /*** IDpxContainer2 methods ***/
    HRESULT (STDMETHODCALLTYPE *AddPredecessorContainer)(
        IDpxContainer3 *This,
        LPCWSTR ContainerPath,
        UINT PredecessorFilePathsCount,
        PredecessorFilePathInfo PredecessorFilePaths[],
        IDpxContainer2 **ppContainer);

    /*** IDpxContainer3 methods ***/
    HRESULT (STDMETHODCALLTYPE *AddPeerContainer)(
        IDpxContainer3 *This,
        LPCWSTR ContainerPath,
        IDpxContainer3 **ppContainer);

    HRESULT (STDMETHODCALLTYPE *IsPeer)(
        IDpxContainer3 *This,
        IDpxContainer3 *ppOtherContainer,
        BOOL *pIsPeer);

    HRESULT (STDMETHODCALLTYPE *GetPeerGroupId)(
        IDpxContainer3 *This,
        UINT64 *pnPeerGroupId);

    END_INTERFACE
} IDpxContainer3Vtbl;

interface IDpxContainer3 {
    CONST_VTBL IDpxContainer3Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDpxContainer3_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDpxContainer3_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDpxContainer3_Release(This) (This)->lpVtbl->Release(This)
/*** IDpxContainer methods ***/
#define IDpxContainer3_SetContainerPath(This,ContainerPath) (This)->lpVtbl->SetContainerPath(This,ContainerPath)
#define IDpxContainer3_GetContainerPath(This,pContainerPath) (This)->lpVtbl->GetContainerPath(This,pContainerPath)
#define IDpxContainer3_AddFileToExtract(This,SourceFileName,TargetFileName,TargetFileHash) (This)->lpVtbl->AddFileToExtract(This,SourceFileName,TargetFileName,TargetFileHash)
#define IDpxContainer3_AddFileToExtract2(This,SourceFileName,TargetFileName,ppFile) (This)->lpVtbl->AddFileToExtract2(This,SourceFileName,TargetFileName,ppFile)
#define IDpxContainer3_ExtractAllFiles(This) (This)->lpVtbl->ExtractAllFiles(This)
#define IDpxContainer3_EnumFilesToExtract(This,ppEnumFiles) (This)->lpVtbl->EnumFilesToExtract(This,ppEnumFiles)
#define IDpxContainer3_SetExpectedContainerIndexHash(This,pExpectedHash) (This)->lpVtbl->SetExpectedContainerIndexHash(This,pExpectedHash)
#define IDpxContainer3_GetExpectedContainerIndexHash(This,ppExpectedHash) (This)->lpVtbl->GetExpectedContainerIndexHash(This,ppExpectedHash)
#define IDpxContainer3_ProvideContainerIndex(This,IndexSize,IndexData) (This)->lpVtbl->ProvideContainerIndex(This,IndexSize,IndexData)
#define IDpxContainer3_ProvideContainerIndexByFile(This,IndexFileName) (This)->lpVtbl->ProvideContainerIndexByFile(This,IndexFileName)
#define IDpxContainer3_EnumDirectoryEntries(This,ppEnumEntries) (This)->lpVtbl->EnumDirectoryEntries(This,ppEnumEntries)
#define IDpxContainer3_Remove(This) (This)->lpVtbl->Remove(This)
#define IDpxContainer3_SetUserValue(This,UserValue) (This)->lpVtbl->SetUserValue(This,UserValue)
#define IDpxContainer3_GetUserValue(This,pUserValue) (This)->lpVtbl->GetUserValue(This,pUserValue)
#define IDpxContainer3_FreeMemory(This,Allocation) (This)->lpVtbl->FreeMemory(This,Allocation)
/*** IDpxEncryptedContainer methods ***/
#define IDpxContainer3_SetContainerDecryption(This,DecryptionDataCount,DecryptionData,EncryptionType) (This)->lpVtbl->SetContainerDecryption(This,DecryptionDataCount,DecryptionData,EncryptionType)
/*** IDpxContainer2 methods ***/
#define IDpxContainer3_AddPredecessorContainer(This,ContainerPath,PredecessorFilePathsCount,PredecessorFilePaths,ppContainer) (This)->lpVtbl->AddPredecessorContainer(This,ContainerPath,PredecessorFilePathsCount,PredecessorFilePaths,ppContainer)
/*** IDpxContainer3 methods ***/
#define IDpxContainer3_AddPeerContainer(This,ContainerPath,ppContainer) (This)->lpVtbl->AddPeerContainer(This,ContainerPath,ppContainer)
#define IDpxContainer3_IsPeer(This,ppOtherContainer,pIsPeer) (This)->lpVtbl->IsPeer(This,ppOtherContainer,pIsPeer)
#define IDpxContainer3_GetPeerGroupId(This,pnPeerGroupId) (This)->lpVtbl->GetPeerGroupId(This,pnPeerGroupId)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDpxContainer3_QueryInterface(IDpxContainer3* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDpxContainer3_AddRef(IDpxContainer3* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDpxContainer3_Release(IDpxContainer3* This) {
    return This->lpVtbl->Release(This);
}
/*** IDpxContainer methods ***/
static FORCEINLINE HRESULT IDpxContainer3_SetContainerPath(IDpxContainer3* This,LPCWSTR ContainerPath) {
    return This->lpVtbl->SetContainerPath(This,ContainerPath);
}
static FORCEINLINE HRESULT IDpxContainer3_GetContainerPath(IDpxContainer3* This,LPWSTR *pContainerPath) {
    return This->lpVtbl->GetContainerPath(This,pContainerPath);
}
static FORCEINLINE HRESULT IDpxContainer3_AddFileToExtract(IDpxContainer3* This,LPCWSTR SourceFileName,LPCWSTR TargetFileName,DPX_HASH *TargetFileHash) {
    return This->lpVtbl->AddFileToExtract(This,SourceFileName,TargetFileName,TargetFileHash);
}
static FORCEINLINE HRESULT IDpxContainer3_AddFileToExtract2(IDpxContainer3* This,LPCWSTR SourceFileName,LPCWSTR TargetFileName,IDpxFile **ppFile) {
    return This->lpVtbl->AddFileToExtract2(This,SourceFileName,TargetFileName,ppFile);
}
static FORCEINLINE HRESULT IDpxContainer3_ExtractAllFiles(IDpxContainer3* This) {
    return This->lpVtbl->ExtractAllFiles(This);
}
static FORCEINLINE HRESULT IDpxContainer3_EnumFilesToExtract(IDpxContainer3* This,IEnumDpxFiles **ppEnumFiles) {
    return This->lpVtbl->EnumFilesToExtract(This,ppEnumFiles);
}
static FORCEINLINE HRESULT IDpxContainer3_SetExpectedContainerIndexHash(IDpxContainer3* This,DPX_HASH *pExpectedHash) {
    return This->lpVtbl->SetExpectedContainerIndexHash(This,pExpectedHash);
}
static FORCEINLINE HRESULT IDpxContainer3_GetExpectedContainerIndexHash(IDpxContainer3* This,DPX_HASH **ppExpectedHash) {
    return This->lpVtbl->GetExpectedContainerIndexHash(This,ppExpectedHash);
}
static FORCEINLINE HRESULT IDpxContainer3_ProvideContainerIndex(IDpxContainer3* This,UINT IndexSize,BYTE IndexData[]) {
    return This->lpVtbl->ProvideContainerIndex(This,IndexSize,IndexData);
}
static FORCEINLINE HRESULT IDpxContainer3_ProvideContainerIndexByFile(IDpxContainer3* This,LPCWSTR IndexFileName) {
    return This->lpVtbl->ProvideContainerIndexByFile(This,IndexFileName);
}
static FORCEINLINE HRESULT IDpxContainer3_EnumDirectoryEntries(IDpxContainer3* This,IEnumDpxContainerDirectoryEntries **ppEnumEntries) {
    return This->lpVtbl->EnumDirectoryEntries(This,ppEnumEntries);
}
static FORCEINLINE HRESULT IDpxContainer3_Remove(IDpxContainer3* This) {
    return This->lpVtbl->Remove(This);
}
static FORCEINLINE HRESULT IDpxContainer3_SetUserValue(IDpxContainer3* This,UINT64 UserValue) {
    return This->lpVtbl->SetUserValue(This,UserValue);
}
static FORCEINLINE HRESULT IDpxContainer3_GetUserValue(IDpxContainer3* This,UINT64 *pUserValue) {
    return This->lpVtbl->GetUserValue(This,pUserValue);
}
static FORCEINLINE void IDpxContainer3_FreeMemory(IDpxContainer3* This,void *Allocation) {
    This->lpVtbl->FreeMemory(This,Allocation);
}
/*** IDpxEncryptedContainer methods ***/
static FORCEINLINE HRESULT IDpxContainer3_SetContainerDecryption(IDpxContainer3* This,UINT DecryptionDataCount,DpxContainerDecryptionData DecryptionData[],DPX_CONTAINER_ENCRYPTION_ENUM EncryptionType) {
    return This->lpVtbl->SetContainerDecryption(This,DecryptionDataCount,DecryptionData,EncryptionType);
}
/*** IDpxContainer2 methods ***/
static FORCEINLINE HRESULT IDpxContainer3_AddPredecessorContainer(IDpxContainer3* This,LPCWSTR ContainerPath,UINT PredecessorFilePathsCount,PredecessorFilePathInfo PredecessorFilePaths[],IDpxContainer2 **ppContainer) {
    return This->lpVtbl->AddPredecessorContainer(This,ContainerPath,PredecessorFilePathsCount,PredecessorFilePaths,ppContainer);
}
/*** IDpxContainer3 methods ***/
static FORCEINLINE HRESULT IDpxContainer3_AddPeerContainer(IDpxContainer3* This,LPCWSTR ContainerPath,IDpxContainer3 **ppContainer) {
    return This->lpVtbl->AddPeerContainer(This,ContainerPath,ppContainer);
}
static FORCEINLINE HRESULT IDpxContainer3_IsPeer(IDpxContainer3* This,IDpxContainer3 *ppOtherContainer,BOOL *pIsPeer) {
    return This->lpVtbl->IsPeer(This,ppOtherContainer,pIsPeer);
}
static FORCEINLINE HRESULT IDpxContainer3_GetPeerGroupId(IDpxContainer3* This,UINT64 *pnPeerGroupId) {
    return This->lpVtbl->GetPeerGroupId(This,pnPeerGroupId);
}
#endif
#endif

#endif


#endif  /* __IDpxContainer3_INTERFACE_DEFINED__ */

#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) */
/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __dpx1_h__ */
