/*** Autogenerated by WIDL 5.0 from ./qmgr.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __qmgr_h__
#define __qmgr_h__

/* Forward declarations */

#ifndef __IBackgroundCopyJob1_FWD_DEFINED__
#define __IBackgroundCopyJob1_FWD_DEFINED__
typedef interface IBackgroundCopyJob1 IBackgroundCopyJob1;
#ifdef __cplusplus
interface IBackgroundCopyJob1;
#endif /* __cplusplus */
#endif

#ifndef __IEnumBackgroundCopyJobs1_FWD_DEFINED__
#define __IEnumBackgroundCopyJobs1_FWD_DEFINED__
typedef interface IEnumBackgroundCopyJobs1 IEnumBackgroundCopyJobs1;
#ifdef __cplusplus
interface IEnumBackgroundCopyJobs1;
#endif /* __cplusplus */
#endif

#ifndef __IBackgroundCopyGroup_FWD_DEFINED__
#define __IBackgroundCopyGroup_FWD_DEFINED__
typedef interface IBackgroundCopyGroup IBackgroundCopyGroup;
#ifdef __cplusplus
interface IBackgroundCopyGroup;
#endif /* __cplusplus */
#endif

#ifndef __IEnumBackgroundCopyGroups_FWD_DEFINED__
#define __IEnumBackgroundCopyGroups_FWD_DEFINED__
typedef interface IEnumBackgroundCopyGroups IEnumBackgroundCopyGroups;
#ifdef __cplusplus
interface IEnumBackgroundCopyGroups;
#endif /* __cplusplus */
#endif

#ifndef __IBackgroundCopyCallback1_FWD_DEFINED__
#define __IBackgroundCopyCallback1_FWD_DEFINED__
typedef interface IBackgroundCopyCallback1 IBackgroundCopyCallback1;
#ifdef __cplusplus
interface IBackgroundCopyCallback1;
#endif /* __cplusplus */
#endif

#ifndef __IBackgroundCopyQMgr_FWD_DEFINED__
#define __IBackgroundCopyQMgr_FWD_DEFINED__
typedef interface IBackgroundCopyQMgr IBackgroundCopyQMgr;
#ifdef __cplusplus
interface IBackgroundCopyQMgr;
#endif /* __cplusplus */
#endif

#ifndef __BackgroundCopyQMgr_FWD_DEFINED__
#define __BackgroundCopyQMgr_FWD_DEFINED__
#ifdef __cplusplus
typedef class BackgroundCopyQMgr BackgroundCopyQMgr;
#else
typedef struct BackgroundCopyQMgr BackgroundCopyQMgr;
#endif /* defined __cplusplus */
#endif /* defined __BackgroundCopyQMgr_FWD_DEFINED__ */

/* Headers for imported files */

#include <unknwn.h>
#include <ocidl.h>
#include <oleidl.h>
#include <oaidl.h>
#include <docobj.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <winapifamily.h>
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
// Background Copy QMgr Public Interface
#define  QM_NOTIFY_FILE_DONE         0x00000001
#define  QM_NOTIFY_JOB_DONE          0x00000002
#define  QM_NOTIFY_GROUP_DONE        0x00000004
#define  QM_NOTIFY_DISABLE_NOTIFY    0x00000040
#define  QM_NOTIFY_USE_PROGRESSEX    0x00000080
#define  QM_STATUS_FILE_COMPLETE     0x00000001
#define  QM_STATUS_FILE_INCOMPLETE   0x00000002
#define  QM_STATUS_JOB_COMPLETE      0x00000004
#define  QM_STATUS_JOB_INCOMPLETE    0x00000008
#define  QM_STATUS_JOB_ERROR         0x00000010
#define  QM_STATUS_JOB_FOREGROUND    0x00000020
#define  QM_STATUS_GROUP_COMPLETE    0x00000040
#define  QM_STATUS_GROUP_INCOMPLETE  0x00000080
#define  QM_STATUS_GROUP_SUSPENDED   0x00000100
#define  QM_STATUS_GROUP_ERROR       0x00000200
#define  QM_STATUS_GROUP_FOREGROUND  0x00000400
#define  QM_PROTOCOL_HTTP            1
#define  QM_PROTOCOL_FTP             2
#define  QM_PROTOCOL_SMB             3
#define  QM_PROTOCOL_CUSTOM          4
#define  QM_PROGRESS_PERCENT_DONE    1
#define  QM_PROGRESS_TIME_DONE       2
#define  QM_PROGRESS_SIZE_DONE       3
#define  QM_E_INVALID_STATE          0x81001001
#define  QM_E_SERVICE_UNAVAILABLE    0x81001002
#define  QM_E_DOWNLOADER_UNAVAILABLE 0x81001003
#define  QM_E_ITEM_NOT_FOUND         0x81001004
/*****************************************************************************
 * IBackgroundCopyJob1 interface
 */
#ifndef __IBackgroundCopyJob1_INTERFACE_DEFINED__
#define __IBackgroundCopyJob1_INTERFACE_DEFINED__

typedef struct _FILESETINFO {
    BSTR bstrRemoteFile;
    BSTR bstrLocalFile;
    DWORD dwSizeHint;
} FILESETINFO;
DEFINE_GUID(IID_IBackgroundCopyJob1, 0x59f5553c, 0x2031, 0x4629, 0xbb,0x18, 0x26,0x45,0xa6,0x97,0x09,0x47);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("59f5553c-2031-4629-bb18-2645a6970947")
IBackgroundCopyJob1 : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE CancelJob(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetProgress(
        DWORD dwFlags,
        DWORD *pdwProgress) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetStatus(
        DWORD *pdwStatus,
        DWORD *pdwWin32Result,
        DWORD *pdwTransportResult,
        DWORD *pdwNumOfRetries) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddFiles(
        ULONG cFileCount,
        FILESETINFO **ppFileSet) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFile(
        ULONG cFileIndex,
        FILESETINFO *pFileInfo) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFileCount(
        DWORD *pdwFileCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE SwitchToForeground(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_JobID(
        GUID *pguidJobID) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IBackgroundCopyJob1, 0x59f5553c, 0x2031, 0x4629, 0xbb,0x18, 0x26,0x45,0xa6,0x97,0x09,0x47)
#endif
#else
typedef struct IBackgroundCopyJob1Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IBackgroundCopyJob1 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IBackgroundCopyJob1 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IBackgroundCopyJob1 *This);

    /*** IBackgroundCopyJob1 methods ***/
    HRESULT (STDMETHODCALLTYPE *CancelJob)(
        IBackgroundCopyJob1 *This);

    HRESULT (STDMETHODCALLTYPE *GetProgress)(
        IBackgroundCopyJob1 *This,
        DWORD dwFlags,
        DWORD *pdwProgress);

    HRESULT (STDMETHODCALLTYPE *GetStatus)(
        IBackgroundCopyJob1 *This,
        DWORD *pdwStatus,
        DWORD *pdwWin32Result,
        DWORD *pdwTransportResult,
        DWORD *pdwNumOfRetries);

    HRESULT (STDMETHODCALLTYPE *AddFiles)(
        IBackgroundCopyJob1 *This,
        ULONG cFileCount,
        FILESETINFO **ppFileSet);

    HRESULT (STDMETHODCALLTYPE *GetFile)(
        IBackgroundCopyJob1 *This,
        ULONG cFileIndex,
        FILESETINFO *pFileInfo);

    HRESULT (STDMETHODCALLTYPE *GetFileCount)(
        IBackgroundCopyJob1 *This,
        DWORD *pdwFileCount);

    HRESULT (STDMETHODCALLTYPE *SwitchToForeground)(
        IBackgroundCopyJob1 *This);

    HRESULT (STDMETHODCALLTYPE *get_JobID)(
        IBackgroundCopyJob1 *This,
        GUID *pguidJobID);

    END_INTERFACE
} IBackgroundCopyJob1Vtbl;

interface IBackgroundCopyJob1 {
    CONST_VTBL IBackgroundCopyJob1Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IBackgroundCopyJob1_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IBackgroundCopyJob1_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IBackgroundCopyJob1_Release(This) (This)->lpVtbl->Release(This)
/*** IBackgroundCopyJob1 methods ***/
#define IBackgroundCopyJob1_CancelJob(This) (This)->lpVtbl->CancelJob(This)
#define IBackgroundCopyJob1_GetProgress(This,dwFlags,pdwProgress) (This)->lpVtbl->GetProgress(This,dwFlags,pdwProgress)
#define IBackgroundCopyJob1_GetStatus(This,pdwStatus,pdwWin32Result,pdwTransportResult,pdwNumOfRetries) (This)->lpVtbl->GetStatus(This,pdwStatus,pdwWin32Result,pdwTransportResult,pdwNumOfRetries)
#define IBackgroundCopyJob1_AddFiles(This,cFileCount,ppFileSet) (This)->lpVtbl->AddFiles(This,cFileCount,ppFileSet)
#define IBackgroundCopyJob1_GetFile(This,cFileIndex,pFileInfo) (This)->lpVtbl->GetFile(This,cFileIndex,pFileInfo)
#define IBackgroundCopyJob1_GetFileCount(This,pdwFileCount) (This)->lpVtbl->GetFileCount(This,pdwFileCount)
#define IBackgroundCopyJob1_SwitchToForeground(This) (This)->lpVtbl->SwitchToForeground(This)
#define IBackgroundCopyJob1_get_JobID(This,pguidJobID) (This)->lpVtbl->get_JobID(This,pguidJobID)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IBackgroundCopyJob1_QueryInterface(IBackgroundCopyJob1* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IBackgroundCopyJob1_AddRef(IBackgroundCopyJob1* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IBackgroundCopyJob1_Release(IBackgroundCopyJob1* This) {
    return This->lpVtbl->Release(This);
}
/*** IBackgroundCopyJob1 methods ***/
static FORCEINLINE HRESULT IBackgroundCopyJob1_CancelJob(IBackgroundCopyJob1* This) {
    return This->lpVtbl->CancelJob(This);
}
static FORCEINLINE HRESULT IBackgroundCopyJob1_GetProgress(IBackgroundCopyJob1* This,DWORD dwFlags,DWORD *pdwProgress) {
    return This->lpVtbl->GetProgress(This,dwFlags,pdwProgress);
}
static FORCEINLINE HRESULT IBackgroundCopyJob1_GetStatus(IBackgroundCopyJob1* This,DWORD *pdwStatus,DWORD *pdwWin32Result,DWORD *pdwTransportResult,DWORD *pdwNumOfRetries) {
    return This->lpVtbl->GetStatus(This,pdwStatus,pdwWin32Result,pdwTransportResult,pdwNumOfRetries);
}
static FORCEINLINE HRESULT IBackgroundCopyJob1_AddFiles(IBackgroundCopyJob1* This,ULONG cFileCount,FILESETINFO **ppFileSet) {
    return This->lpVtbl->AddFiles(This,cFileCount,ppFileSet);
}
static FORCEINLINE HRESULT IBackgroundCopyJob1_GetFile(IBackgroundCopyJob1* This,ULONG cFileIndex,FILESETINFO *pFileInfo) {
    return This->lpVtbl->GetFile(This,cFileIndex,pFileInfo);
}
static FORCEINLINE HRESULT IBackgroundCopyJob1_GetFileCount(IBackgroundCopyJob1* This,DWORD *pdwFileCount) {
    return This->lpVtbl->GetFileCount(This,pdwFileCount);
}
static FORCEINLINE HRESULT IBackgroundCopyJob1_SwitchToForeground(IBackgroundCopyJob1* This) {
    return This->lpVtbl->SwitchToForeground(This);
}
static FORCEINLINE HRESULT IBackgroundCopyJob1_get_JobID(IBackgroundCopyJob1* This,GUID *pguidJobID) {
    return This->lpVtbl->get_JobID(This,pguidJobID);
}
#endif
#endif

#endif


#endif  /* __IBackgroundCopyJob1_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IEnumBackgroundCopyJobs1 interface
 */
#ifndef __IEnumBackgroundCopyJobs1_INTERFACE_DEFINED__
#define __IEnumBackgroundCopyJobs1_INTERFACE_DEFINED__

DEFINE_GUID(IID_IEnumBackgroundCopyJobs1, 0x8baeba9d, 0x8f1c, 0x42c4, 0xb8,0x2c, 0x09,0xae,0x79,0x98,0x0d,0x25);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("8baeba9d-8f1c-42c4-b82c-09ae79980d25")
IEnumBackgroundCopyJobs1 : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE Next(
        ULONG celt,
        GUID *rgelt,
        ULONG *pceltFetched) = 0;

    virtual HRESULT STDMETHODCALLTYPE Skip(
        ULONG celt) = 0;

    virtual HRESULT STDMETHODCALLTYPE Reset(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Clone(
        IEnumBackgroundCopyJobs1 **ppenum) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetCount(
        ULONG *puCount) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IEnumBackgroundCopyJobs1, 0x8baeba9d, 0x8f1c, 0x42c4, 0xb8,0x2c, 0x09,0xae,0x79,0x98,0x0d,0x25)
#endif
#else
typedef struct IEnumBackgroundCopyJobs1Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IEnumBackgroundCopyJobs1 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IEnumBackgroundCopyJobs1 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IEnumBackgroundCopyJobs1 *This);

    /*** IEnumBackgroundCopyJobs1 methods ***/
    HRESULT (STDMETHODCALLTYPE *Next)(
        IEnumBackgroundCopyJobs1 *This,
        ULONG celt,
        GUID *rgelt,
        ULONG *pceltFetched);

    HRESULT (STDMETHODCALLTYPE *Skip)(
        IEnumBackgroundCopyJobs1 *This,
        ULONG celt);

    HRESULT (STDMETHODCALLTYPE *Reset)(
        IEnumBackgroundCopyJobs1 *This);

    HRESULT (STDMETHODCALLTYPE *Clone)(
        IEnumBackgroundCopyJobs1 *This,
        IEnumBackgroundCopyJobs1 **ppenum);

    HRESULT (STDMETHODCALLTYPE *GetCount)(
        IEnumBackgroundCopyJobs1 *This,
        ULONG *puCount);

    END_INTERFACE
} IEnumBackgroundCopyJobs1Vtbl;

interface IEnumBackgroundCopyJobs1 {
    CONST_VTBL IEnumBackgroundCopyJobs1Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IEnumBackgroundCopyJobs1_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IEnumBackgroundCopyJobs1_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IEnumBackgroundCopyJobs1_Release(This) (This)->lpVtbl->Release(This)
/*** IEnumBackgroundCopyJobs1 methods ***/
#define IEnumBackgroundCopyJobs1_Next(This,celt,rgelt,pceltFetched) (This)->lpVtbl->Next(This,celt,rgelt,pceltFetched)
#define IEnumBackgroundCopyJobs1_Skip(This,celt) (This)->lpVtbl->Skip(This,celt)
#define IEnumBackgroundCopyJobs1_Reset(This) (This)->lpVtbl->Reset(This)
#define IEnumBackgroundCopyJobs1_Clone(This,ppenum) (This)->lpVtbl->Clone(This,ppenum)
#define IEnumBackgroundCopyJobs1_GetCount(This,puCount) (This)->lpVtbl->GetCount(This,puCount)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IEnumBackgroundCopyJobs1_QueryInterface(IEnumBackgroundCopyJobs1* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IEnumBackgroundCopyJobs1_AddRef(IEnumBackgroundCopyJobs1* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IEnumBackgroundCopyJobs1_Release(IEnumBackgroundCopyJobs1* This) {
    return This->lpVtbl->Release(This);
}
/*** IEnumBackgroundCopyJobs1 methods ***/
static FORCEINLINE HRESULT IEnumBackgroundCopyJobs1_Next(IEnumBackgroundCopyJobs1* This,ULONG celt,GUID *rgelt,ULONG *pceltFetched) {
    return This->lpVtbl->Next(This,celt,rgelt,pceltFetched);
}
static FORCEINLINE HRESULT IEnumBackgroundCopyJobs1_Skip(IEnumBackgroundCopyJobs1* This,ULONG celt) {
    return This->lpVtbl->Skip(This,celt);
}
static FORCEINLINE HRESULT IEnumBackgroundCopyJobs1_Reset(IEnumBackgroundCopyJobs1* This) {
    return This->lpVtbl->Reset(This);
}
static FORCEINLINE HRESULT IEnumBackgroundCopyJobs1_Clone(IEnumBackgroundCopyJobs1* This,IEnumBackgroundCopyJobs1 **ppenum) {
    return This->lpVtbl->Clone(This,ppenum);
}
static FORCEINLINE HRESULT IEnumBackgroundCopyJobs1_GetCount(IEnumBackgroundCopyJobs1* This,ULONG *puCount) {
    return This->lpVtbl->GetCount(This,puCount);
}
#endif
#endif

#endif


#endif  /* __IEnumBackgroundCopyJobs1_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IBackgroundCopyGroup interface
 */
#ifndef __IBackgroundCopyGroup_INTERFACE_DEFINED__
#define __IBackgroundCopyGroup_INTERFACE_DEFINED__

typedef enum GROUPPROP {
    GROUPPROP_PRIORITY = 0,
    GROUPPROP_REMOTEUSERID = 1,
    GROUPPROP_REMOTEUSERPWD = 2,
    GROUPPROP_LOCALUSERID = 3,
    GROUPPROP_LOCALUSERPWD = 4,
    GROUPPROP_PROTOCOLFLAGS = 5,
    GROUPPROP_NOTIFYFLAGS = 6,
    GROUPPROP_NOTIFYCLSID = 7,
    GROUPPROP_PROGRESSSIZE = 8,
    GROUPPROP_PROGRESSPERCENT = 9,
    GROUPPROP_PROGRESSTIME = 10,
    GROUPPROP_DISPLAYNAME = 11,
    GROUPPROP_DESCRIPTION = 12
} GROUPPROP;
DEFINE_GUID(IID_IBackgroundCopyGroup, 0x1ded80a7, 0x53ea, 0x424f, 0x8a,0x04, 0x17,0xfe,0xa9,0xad,0xc4,0xf5);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("1ded80a7-53ea-424f-8a04-17fea9adc4f5")
IBackgroundCopyGroup : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetProp(
        GROUPPROP propID,
        VARIANT *pvarVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetProp(
        GROUPPROP propID,
        VARIANT *pvarVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetProgress(
        DWORD dwFlags,
        DWORD *pdwProgress) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetStatus(
        DWORD *pdwStatus,
        DWORD *pdwJobIndex) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetJob(
        GUID jobID,
        IBackgroundCopyJob1 **ppJob) = 0;

    virtual HRESULT STDMETHODCALLTYPE SuspendGroup(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE ResumeGroup(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE CancelGroup(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_Size(
        DWORD *pdwSize) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_GroupID(
        GUID *pguidGroupID) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateJob(
        GUID guidJobID,
        IBackgroundCopyJob1 **ppJob) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumJobs(
        DWORD dwFlags,
        IEnumBackgroundCopyJobs1 **ppEnumJobs) = 0;

    virtual HRESULT STDMETHODCALLTYPE SwitchToForeground(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE QueryNewJobInterface(
        REFIID iid,
        IUnknown **pUnk) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetNotificationPointer(
        REFIID iid,
        IUnknown *pUnk) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IBackgroundCopyGroup, 0x1ded80a7, 0x53ea, 0x424f, 0x8a,0x04, 0x17,0xfe,0xa9,0xad,0xc4,0xf5)
#endif
#else
typedef struct IBackgroundCopyGroupVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IBackgroundCopyGroup *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IBackgroundCopyGroup *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IBackgroundCopyGroup *This);

    /*** IBackgroundCopyGroup methods ***/
    HRESULT (STDMETHODCALLTYPE *GetProp)(
        IBackgroundCopyGroup *This,
        GROUPPROP propID,
        VARIANT *pvarVal);

    HRESULT (STDMETHODCALLTYPE *SetProp)(
        IBackgroundCopyGroup *This,
        GROUPPROP propID,
        VARIANT *pvarVal);

    HRESULT (STDMETHODCALLTYPE *GetProgress)(
        IBackgroundCopyGroup *This,
        DWORD dwFlags,
        DWORD *pdwProgress);

    HRESULT (STDMETHODCALLTYPE *GetStatus)(
        IBackgroundCopyGroup *This,
        DWORD *pdwStatus,
        DWORD *pdwJobIndex);

    HRESULT (STDMETHODCALLTYPE *GetJob)(
        IBackgroundCopyGroup *This,
        GUID jobID,
        IBackgroundCopyJob1 **ppJob);

    HRESULT (STDMETHODCALLTYPE *SuspendGroup)(
        IBackgroundCopyGroup *This);

    HRESULT (STDMETHODCALLTYPE *ResumeGroup)(
        IBackgroundCopyGroup *This);

    HRESULT (STDMETHODCALLTYPE *CancelGroup)(
        IBackgroundCopyGroup *This);

    HRESULT (STDMETHODCALLTYPE *get_Size)(
        IBackgroundCopyGroup *This,
        DWORD *pdwSize);

    HRESULT (STDMETHODCALLTYPE *get_GroupID)(
        IBackgroundCopyGroup *This,
        GUID *pguidGroupID);

    HRESULT (STDMETHODCALLTYPE *CreateJob)(
        IBackgroundCopyGroup *This,
        GUID guidJobID,
        IBackgroundCopyJob1 **ppJob);

    HRESULT (STDMETHODCALLTYPE *EnumJobs)(
        IBackgroundCopyGroup *This,
        DWORD dwFlags,
        IEnumBackgroundCopyJobs1 **ppEnumJobs);

    HRESULT (STDMETHODCALLTYPE *SwitchToForeground)(
        IBackgroundCopyGroup *This);

    HRESULT (STDMETHODCALLTYPE *QueryNewJobInterface)(
        IBackgroundCopyGroup *This,
        REFIID iid,
        IUnknown **pUnk);

    HRESULT (STDMETHODCALLTYPE *SetNotificationPointer)(
        IBackgroundCopyGroup *This,
        REFIID iid,
        IUnknown *pUnk);

    END_INTERFACE
} IBackgroundCopyGroupVtbl;

interface IBackgroundCopyGroup {
    CONST_VTBL IBackgroundCopyGroupVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IBackgroundCopyGroup_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IBackgroundCopyGroup_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IBackgroundCopyGroup_Release(This) (This)->lpVtbl->Release(This)
/*** IBackgroundCopyGroup methods ***/
#define IBackgroundCopyGroup_GetProp(This,propID,pvarVal) (This)->lpVtbl->GetProp(This,propID,pvarVal)
#define IBackgroundCopyGroup_SetProp(This,propID,pvarVal) (This)->lpVtbl->SetProp(This,propID,pvarVal)
#define IBackgroundCopyGroup_GetProgress(This,dwFlags,pdwProgress) (This)->lpVtbl->GetProgress(This,dwFlags,pdwProgress)
#define IBackgroundCopyGroup_GetStatus(This,pdwStatus,pdwJobIndex) (This)->lpVtbl->GetStatus(This,pdwStatus,pdwJobIndex)
#define IBackgroundCopyGroup_GetJob(This,jobID,ppJob) (This)->lpVtbl->GetJob(This,jobID,ppJob)
#define IBackgroundCopyGroup_SuspendGroup(This) (This)->lpVtbl->SuspendGroup(This)
#define IBackgroundCopyGroup_ResumeGroup(This) (This)->lpVtbl->ResumeGroup(This)
#define IBackgroundCopyGroup_CancelGroup(This) (This)->lpVtbl->CancelGroup(This)
#define IBackgroundCopyGroup_get_Size(This,pdwSize) (This)->lpVtbl->get_Size(This,pdwSize)
#define IBackgroundCopyGroup_get_GroupID(This,pguidGroupID) (This)->lpVtbl->get_GroupID(This,pguidGroupID)
#define IBackgroundCopyGroup_CreateJob(This,guidJobID,ppJob) (This)->lpVtbl->CreateJob(This,guidJobID,ppJob)
#define IBackgroundCopyGroup_EnumJobs(This,dwFlags,ppEnumJobs) (This)->lpVtbl->EnumJobs(This,dwFlags,ppEnumJobs)
#define IBackgroundCopyGroup_SwitchToForeground(This) (This)->lpVtbl->SwitchToForeground(This)
#define IBackgroundCopyGroup_QueryNewJobInterface(This,iid,pUnk) (This)->lpVtbl->QueryNewJobInterface(This,iid,pUnk)
#define IBackgroundCopyGroup_SetNotificationPointer(This,iid,pUnk) (This)->lpVtbl->SetNotificationPointer(This,iid,pUnk)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IBackgroundCopyGroup_QueryInterface(IBackgroundCopyGroup* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IBackgroundCopyGroup_AddRef(IBackgroundCopyGroup* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IBackgroundCopyGroup_Release(IBackgroundCopyGroup* This) {
    return This->lpVtbl->Release(This);
}
/*** IBackgroundCopyGroup methods ***/
static FORCEINLINE HRESULT IBackgroundCopyGroup_GetProp(IBackgroundCopyGroup* This,GROUPPROP propID,VARIANT *pvarVal) {
    return This->lpVtbl->GetProp(This,propID,pvarVal);
}
static FORCEINLINE HRESULT IBackgroundCopyGroup_SetProp(IBackgroundCopyGroup* This,GROUPPROP propID,VARIANT *pvarVal) {
    return This->lpVtbl->SetProp(This,propID,pvarVal);
}
static FORCEINLINE HRESULT IBackgroundCopyGroup_GetProgress(IBackgroundCopyGroup* This,DWORD dwFlags,DWORD *pdwProgress) {
    return This->lpVtbl->GetProgress(This,dwFlags,pdwProgress);
}
static FORCEINLINE HRESULT IBackgroundCopyGroup_GetStatus(IBackgroundCopyGroup* This,DWORD *pdwStatus,DWORD *pdwJobIndex) {
    return This->lpVtbl->GetStatus(This,pdwStatus,pdwJobIndex);
}
static FORCEINLINE HRESULT IBackgroundCopyGroup_GetJob(IBackgroundCopyGroup* This,GUID jobID,IBackgroundCopyJob1 **ppJob) {
    return This->lpVtbl->GetJob(This,jobID,ppJob);
}
static FORCEINLINE HRESULT IBackgroundCopyGroup_SuspendGroup(IBackgroundCopyGroup* This) {
    return This->lpVtbl->SuspendGroup(This);
}
static FORCEINLINE HRESULT IBackgroundCopyGroup_ResumeGroup(IBackgroundCopyGroup* This) {
    return This->lpVtbl->ResumeGroup(This);
}
static FORCEINLINE HRESULT IBackgroundCopyGroup_CancelGroup(IBackgroundCopyGroup* This) {
    return This->lpVtbl->CancelGroup(This);
}
static FORCEINLINE HRESULT IBackgroundCopyGroup_get_Size(IBackgroundCopyGroup* This,DWORD *pdwSize) {
    return This->lpVtbl->get_Size(This,pdwSize);
}
static FORCEINLINE HRESULT IBackgroundCopyGroup_get_GroupID(IBackgroundCopyGroup* This,GUID *pguidGroupID) {
    return This->lpVtbl->get_GroupID(This,pguidGroupID);
}
static FORCEINLINE HRESULT IBackgroundCopyGroup_CreateJob(IBackgroundCopyGroup* This,GUID guidJobID,IBackgroundCopyJob1 **ppJob) {
    return This->lpVtbl->CreateJob(This,guidJobID,ppJob);
}
static FORCEINLINE HRESULT IBackgroundCopyGroup_EnumJobs(IBackgroundCopyGroup* This,DWORD dwFlags,IEnumBackgroundCopyJobs1 **ppEnumJobs) {
    return This->lpVtbl->EnumJobs(This,dwFlags,ppEnumJobs);
}
static FORCEINLINE HRESULT IBackgroundCopyGroup_SwitchToForeground(IBackgroundCopyGroup* This) {
    return This->lpVtbl->SwitchToForeground(This);
}
static FORCEINLINE HRESULT IBackgroundCopyGroup_QueryNewJobInterface(IBackgroundCopyGroup* This,REFIID iid,IUnknown **pUnk) {
    return This->lpVtbl->QueryNewJobInterface(This,iid,pUnk);
}
static FORCEINLINE HRESULT IBackgroundCopyGroup_SetNotificationPointer(IBackgroundCopyGroup* This,REFIID iid,IUnknown *pUnk) {
    return This->lpVtbl->SetNotificationPointer(This,iid,pUnk);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IBackgroundCopyGroup_InternalSetProp_Proxy(
    IBackgroundCopyGroup* This,
    GROUPPROP propID,
    VARIANT *pvarVal);
void __RPC_STUB IBackgroundCopyGroup_InternalSetProp_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT CALLBACK IBackgroundCopyGroup_SetProp_Proxy(
    IBackgroundCopyGroup* This,
    GROUPPROP propID,
    VARIANT *pvarVal);
HRESULT __RPC_STUB IBackgroundCopyGroup_SetProp_Stub(
    IBackgroundCopyGroup* This,
    GROUPPROP propID,
    VARIANT *pvarVal);

#endif  /* __IBackgroundCopyGroup_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IEnumBackgroundCopyGroups interface
 */
#ifndef __IEnumBackgroundCopyGroups_INTERFACE_DEFINED__
#define __IEnumBackgroundCopyGroups_INTERFACE_DEFINED__

DEFINE_GUID(IID_IEnumBackgroundCopyGroups, 0xd993e603, 0x4aa4, 0x47c5, 0x86,0x65, 0xc2,0x0d,0x39,0xc2,0xba,0x4f);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d993e603-4aa4-47c5-8665-c20d39c2ba4f")
IEnumBackgroundCopyGroups : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE Next(
        ULONG celt,
        GUID *rgelt,
        ULONG *pceltFetched) = 0;

    virtual HRESULT STDMETHODCALLTYPE Skip(
        ULONG celt) = 0;

    virtual HRESULT STDMETHODCALLTYPE Reset(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Clone(
        IEnumBackgroundCopyGroups **ppenum) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetCount(
        ULONG *puCount) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IEnumBackgroundCopyGroups, 0xd993e603, 0x4aa4, 0x47c5, 0x86,0x65, 0xc2,0x0d,0x39,0xc2,0xba,0x4f)
#endif
#else
typedef struct IEnumBackgroundCopyGroupsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IEnumBackgroundCopyGroups *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IEnumBackgroundCopyGroups *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IEnumBackgroundCopyGroups *This);

    /*** IEnumBackgroundCopyGroups methods ***/
    HRESULT (STDMETHODCALLTYPE *Next)(
        IEnumBackgroundCopyGroups *This,
        ULONG celt,
        GUID *rgelt,
        ULONG *pceltFetched);

    HRESULT (STDMETHODCALLTYPE *Skip)(
        IEnumBackgroundCopyGroups *This,
        ULONG celt);

    HRESULT (STDMETHODCALLTYPE *Reset)(
        IEnumBackgroundCopyGroups *This);

    HRESULT (STDMETHODCALLTYPE *Clone)(
        IEnumBackgroundCopyGroups *This,
        IEnumBackgroundCopyGroups **ppenum);

    HRESULT (STDMETHODCALLTYPE *GetCount)(
        IEnumBackgroundCopyGroups *This,
        ULONG *puCount);

    END_INTERFACE
} IEnumBackgroundCopyGroupsVtbl;

interface IEnumBackgroundCopyGroups {
    CONST_VTBL IEnumBackgroundCopyGroupsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IEnumBackgroundCopyGroups_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IEnumBackgroundCopyGroups_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IEnumBackgroundCopyGroups_Release(This) (This)->lpVtbl->Release(This)
/*** IEnumBackgroundCopyGroups methods ***/
#define IEnumBackgroundCopyGroups_Next(This,celt,rgelt,pceltFetched) (This)->lpVtbl->Next(This,celt,rgelt,pceltFetched)
#define IEnumBackgroundCopyGroups_Skip(This,celt) (This)->lpVtbl->Skip(This,celt)
#define IEnumBackgroundCopyGroups_Reset(This) (This)->lpVtbl->Reset(This)
#define IEnumBackgroundCopyGroups_Clone(This,ppenum) (This)->lpVtbl->Clone(This,ppenum)
#define IEnumBackgroundCopyGroups_GetCount(This,puCount) (This)->lpVtbl->GetCount(This,puCount)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IEnumBackgroundCopyGroups_QueryInterface(IEnumBackgroundCopyGroups* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IEnumBackgroundCopyGroups_AddRef(IEnumBackgroundCopyGroups* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IEnumBackgroundCopyGroups_Release(IEnumBackgroundCopyGroups* This) {
    return This->lpVtbl->Release(This);
}
/*** IEnumBackgroundCopyGroups methods ***/
static FORCEINLINE HRESULT IEnumBackgroundCopyGroups_Next(IEnumBackgroundCopyGroups* This,ULONG celt,GUID *rgelt,ULONG *pceltFetched) {
    return This->lpVtbl->Next(This,celt,rgelt,pceltFetched);
}
static FORCEINLINE HRESULT IEnumBackgroundCopyGroups_Skip(IEnumBackgroundCopyGroups* This,ULONG celt) {
    return This->lpVtbl->Skip(This,celt);
}
static FORCEINLINE HRESULT IEnumBackgroundCopyGroups_Reset(IEnumBackgroundCopyGroups* This) {
    return This->lpVtbl->Reset(This);
}
static FORCEINLINE HRESULT IEnumBackgroundCopyGroups_Clone(IEnumBackgroundCopyGroups* This,IEnumBackgroundCopyGroups **ppenum) {
    return This->lpVtbl->Clone(This,ppenum);
}
static FORCEINLINE HRESULT IEnumBackgroundCopyGroups_GetCount(IEnumBackgroundCopyGroups* This,ULONG *puCount) {
    return This->lpVtbl->GetCount(This,puCount);
}
#endif
#endif

#endif


#endif  /* __IEnumBackgroundCopyGroups_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IBackgroundCopyCallback1 interface
 */
#ifndef __IBackgroundCopyCallback1_INTERFACE_DEFINED__
#define __IBackgroundCopyCallback1_INTERFACE_DEFINED__

DEFINE_GUID(IID_IBackgroundCopyCallback1, 0x084f6593, 0x3800, 0x4e08, 0x9b,0x59, 0x99,0xfa,0x59,0xad,0xdf,0x82);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("084f6593-3800-4e08-9b59-99fa59addf82")
IBackgroundCopyCallback1 : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE OnStatus(
        IBackgroundCopyGroup *pGroup,
        IBackgroundCopyJob1 *pJob,
        DWORD dwFileIndex,
        DWORD dwStatus,
        DWORD dwNumOfRetries,
        DWORD dwWin32Result,
        DWORD dwTransportResult) = 0;

    virtual HRESULT STDMETHODCALLTYPE OnProgress(
        DWORD ProgressType,
        IBackgroundCopyGroup *pGroup,
        IBackgroundCopyJob1 *pJob,
        DWORD dwFileIndex,
        DWORD dwProgressValue) = 0;

    virtual HRESULT STDMETHODCALLTYPE OnProgressEx(
        DWORD ProgressType,
        IBackgroundCopyGroup *pGroup,
        IBackgroundCopyJob1 *pJob,
        DWORD dwFileIndex,
        DWORD dwProgressValue,
        DWORD dwByteArraySize,
        BYTE *pByte) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IBackgroundCopyCallback1, 0x084f6593, 0x3800, 0x4e08, 0x9b,0x59, 0x99,0xfa,0x59,0xad,0xdf,0x82)
#endif
#else
typedef struct IBackgroundCopyCallback1Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IBackgroundCopyCallback1 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IBackgroundCopyCallback1 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IBackgroundCopyCallback1 *This);

    /*** IBackgroundCopyCallback1 methods ***/
    HRESULT (STDMETHODCALLTYPE *OnStatus)(
        IBackgroundCopyCallback1 *This,
        IBackgroundCopyGroup *pGroup,
        IBackgroundCopyJob1 *pJob,
        DWORD dwFileIndex,
        DWORD dwStatus,
        DWORD dwNumOfRetries,
        DWORD dwWin32Result,
        DWORD dwTransportResult);

    HRESULT (STDMETHODCALLTYPE *OnProgress)(
        IBackgroundCopyCallback1 *This,
        DWORD ProgressType,
        IBackgroundCopyGroup *pGroup,
        IBackgroundCopyJob1 *pJob,
        DWORD dwFileIndex,
        DWORD dwProgressValue);

    HRESULT (STDMETHODCALLTYPE *OnProgressEx)(
        IBackgroundCopyCallback1 *This,
        DWORD ProgressType,
        IBackgroundCopyGroup *pGroup,
        IBackgroundCopyJob1 *pJob,
        DWORD dwFileIndex,
        DWORD dwProgressValue,
        DWORD dwByteArraySize,
        BYTE *pByte);

    END_INTERFACE
} IBackgroundCopyCallback1Vtbl;

interface IBackgroundCopyCallback1 {
    CONST_VTBL IBackgroundCopyCallback1Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IBackgroundCopyCallback1_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IBackgroundCopyCallback1_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IBackgroundCopyCallback1_Release(This) (This)->lpVtbl->Release(This)
/*** IBackgroundCopyCallback1 methods ***/
#define IBackgroundCopyCallback1_OnStatus(This,pGroup,pJob,dwFileIndex,dwStatus,dwNumOfRetries,dwWin32Result,dwTransportResult) (This)->lpVtbl->OnStatus(This,pGroup,pJob,dwFileIndex,dwStatus,dwNumOfRetries,dwWin32Result,dwTransportResult)
#define IBackgroundCopyCallback1_OnProgress(This,ProgressType,pGroup,pJob,dwFileIndex,dwProgressValue) (This)->lpVtbl->OnProgress(This,ProgressType,pGroup,pJob,dwFileIndex,dwProgressValue)
#define IBackgroundCopyCallback1_OnProgressEx(This,ProgressType,pGroup,pJob,dwFileIndex,dwProgressValue,dwByteArraySize,pByte) (This)->lpVtbl->OnProgressEx(This,ProgressType,pGroup,pJob,dwFileIndex,dwProgressValue,dwByteArraySize,pByte)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IBackgroundCopyCallback1_QueryInterface(IBackgroundCopyCallback1* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IBackgroundCopyCallback1_AddRef(IBackgroundCopyCallback1* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IBackgroundCopyCallback1_Release(IBackgroundCopyCallback1* This) {
    return This->lpVtbl->Release(This);
}
/*** IBackgroundCopyCallback1 methods ***/
static FORCEINLINE HRESULT IBackgroundCopyCallback1_OnStatus(IBackgroundCopyCallback1* This,IBackgroundCopyGroup *pGroup,IBackgroundCopyJob1 *pJob,DWORD dwFileIndex,DWORD dwStatus,DWORD dwNumOfRetries,DWORD dwWin32Result,DWORD dwTransportResult) {
    return This->lpVtbl->OnStatus(This,pGroup,pJob,dwFileIndex,dwStatus,dwNumOfRetries,dwWin32Result,dwTransportResult);
}
static FORCEINLINE HRESULT IBackgroundCopyCallback1_OnProgress(IBackgroundCopyCallback1* This,DWORD ProgressType,IBackgroundCopyGroup *pGroup,IBackgroundCopyJob1 *pJob,DWORD dwFileIndex,DWORD dwProgressValue) {
    return This->lpVtbl->OnProgress(This,ProgressType,pGroup,pJob,dwFileIndex,dwProgressValue);
}
static FORCEINLINE HRESULT IBackgroundCopyCallback1_OnProgressEx(IBackgroundCopyCallback1* This,DWORD ProgressType,IBackgroundCopyGroup *pGroup,IBackgroundCopyJob1 *pJob,DWORD dwFileIndex,DWORD dwProgressValue,DWORD dwByteArraySize,BYTE *pByte) {
    return This->lpVtbl->OnProgressEx(This,ProgressType,pGroup,pJob,dwFileIndex,dwProgressValue,dwByteArraySize,pByte);
}
#endif
#endif

#endif


#endif  /* __IBackgroundCopyCallback1_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IBackgroundCopyQMgr interface
 */
#ifndef __IBackgroundCopyQMgr_INTERFACE_DEFINED__
#define __IBackgroundCopyQMgr_INTERFACE_DEFINED__

DEFINE_GUID(IID_IBackgroundCopyQMgr, 0x16f41c69, 0x09f5, 0x41d2, 0x8c,0xd8, 0x3c,0x08,0xc4,0x7b,0xc8,0xa8);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("16f41c69-09f5-41d2-8cd8-3c08c47bc8a8")
IBackgroundCopyQMgr : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE CreateGroup(
        GUID guidGroupID,
        IBackgroundCopyGroup **ppGroup) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetGroup(
        GUID groupID,
        IBackgroundCopyGroup **ppGroup) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumGroups(
        DWORD dwFlags,
        IEnumBackgroundCopyGroups **ppEnumGroups) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IBackgroundCopyQMgr, 0x16f41c69, 0x09f5, 0x41d2, 0x8c,0xd8, 0x3c,0x08,0xc4,0x7b,0xc8,0xa8)
#endif
#else
typedef struct IBackgroundCopyQMgrVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IBackgroundCopyQMgr *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IBackgroundCopyQMgr *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IBackgroundCopyQMgr *This);

    /*** IBackgroundCopyQMgr methods ***/
    HRESULT (STDMETHODCALLTYPE *CreateGroup)(
        IBackgroundCopyQMgr *This,
        GUID guidGroupID,
        IBackgroundCopyGroup **ppGroup);

    HRESULT (STDMETHODCALLTYPE *GetGroup)(
        IBackgroundCopyQMgr *This,
        GUID groupID,
        IBackgroundCopyGroup **ppGroup);

    HRESULT (STDMETHODCALLTYPE *EnumGroups)(
        IBackgroundCopyQMgr *This,
        DWORD dwFlags,
        IEnumBackgroundCopyGroups **ppEnumGroups);

    END_INTERFACE
} IBackgroundCopyQMgrVtbl;

interface IBackgroundCopyQMgr {
    CONST_VTBL IBackgroundCopyQMgrVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IBackgroundCopyQMgr_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IBackgroundCopyQMgr_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IBackgroundCopyQMgr_Release(This) (This)->lpVtbl->Release(This)
/*** IBackgroundCopyQMgr methods ***/
#define IBackgroundCopyQMgr_CreateGroup(This,guidGroupID,ppGroup) (This)->lpVtbl->CreateGroup(This,guidGroupID,ppGroup)
#define IBackgroundCopyQMgr_GetGroup(This,groupID,ppGroup) (This)->lpVtbl->GetGroup(This,groupID,ppGroup)
#define IBackgroundCopyQMgr_EnumGroups(This,dwFlags,ppEnumGroups) (This)->lpVtbl->EnumGroups(This,dwFlags,ppEnumGroups)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IBackgroundCopyQMgr_QueryInterface(IBackgroundCopyQMgr* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IBackgroundCopyQMgr_AddRef(IBackgroundCopyQMgr* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IBackgroundCopyQMgr_Release(IBackgroundCopyQMgr* This) {
    return This->lpVtbl->Release(This);
}
/*** IBackgroundCopyQMgr methods ***/
static FORCEINLINE HRESULT IBackgroundCopyQMgr_CreateGroup(IBackgroundCopyQMgr* This,GUID guidGroupID,IBackgroundCopyGroup **ppGroup) {
    return This->lpVtbl->CreateGroup(This,guidGroupID,ppGroup);
}
static FORCEINLINE HRESULT IBackgroundCopyQMgr_GetGroup(IBackgroundCopyQMgr* This,GUID groupID,IBackgroundCopyGroup **ppGroup) {
    return This->lpVtbl->GetGroup(This,groupID,ppGroup);
}
static FORCEINLINE HRESULT IBackgroundCopyQMgr_EnumGroups(IBackgroundCopyQMgr* This,DWORD dwFlags,IEnumBackgroundCopyGroups **ppEnumGroups) {
    return This->lpVtbl->EnumGroups(This,dwFlags,ppEnumGroups);
}
#endif
#endif

#endif


#endif  /* __IBackgroundCopyQMgr_INTERFACE_DEFINED__ */


DEFINE_GUID(LIBID_BackgroundCopyQMgr, 0xf5b26dcb, 0xb37e, 0x4d7c, 0xae,0x7a, 0x1c,0xb3,0xfb,0xeb,0x18,0x3e);

/*****************************************************************************
 * BackgroundCopyQMgr coclass
 */

DEFINE_GUID(CLSID_BackgroundCopyQMgr, 0x69ad4aee, 0x51be, 0x439b, 0xa9,0x2c, 0x86,0xae,0x49,0x0e,0x8b,0x30);

#ifdef __cplusplus
class DECLSPEC_UUID("69ad4aee-51be-439b-a92c-86ae490e8b30") BackgroundCopyQMgr;
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(BackgroundCopyQMgr, 0x69ad4aee, 0x51be, 0x439b, 0xa9,0x2c, 0x86,0xae,0x49,0x0e,0x8b,0x30)
#endif
#endif

#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) */
/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);
ULONG           __RPC_USER VARIANT_UserSize     (ULONG *, ULONG, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserMarshal  (ULONG *, unsigned char *, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserUnmarshal(ULONG *, unsigned char *, VARIANT *);
void            __RPC_USER VARIANT_UserFree     (ULONG *, VARIANT *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __qmgr_h__ */
