/*** Autogenerated by WIDL 5.0 from ./audiomediatype.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __audiomediatype_h__
#define __audiomediatype_h__

/* Forward declarations */

#ifndef __IAudioMediaType_FWD_DEFINED__
#define __IAudioMediaType_FWD_DEFINED__
typedef interface IAudioMediaType IAudioMediaType;
#ifdef __cplusplus
interface IAudioMediaType;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <oaidl.h>
#include <ocidl.h>
#include <mmreg.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <winapifamily.h>
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
#if !defined( _UNCOMPRESSEDAUDIOFORMAT_ )
#define _UNCOMPRESSEDAUDIOFORMAT_
typedef struct _UNCOMPRESSEDAUDIOFORMAT {
    GUID guidFormatType;
    DWORD dwSamplesPerFrame;
    DWORD dwBytesPerSampleContainer;
    DWORD dwValidBitsPerSample;
    FLOAT fFramesPerSecond;
    DWORD dwChannelMask;
} UNCOMPRESSEDAUDIOFORMAT;
#endif

/*****************************************************************************
 * IAudioMediaType interface
 */
#ifndef __IAudioMediaType_INTERFACE_DEFINED__
#define __IAudioMediaType_INTERFACE_DEFINED__

DEFINE_GUID(IID_IAudioMediaType, 0x4e997f73, 0xb71f, 0x4798, 0x87,0x3b, 0xed,0x7d,0xfc,0xf1,0x5b,0x4d);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("4e997f73-b71f-4798-873b-ed7dfcf15b4d")
IAudioMediaType : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE IsCompressedFormat(
        BOOL *pfCompressed) = 0;

    virtual HRESULT STDMETHODCALLTYPE IsEqual(
        IAudioMediaType *pIAudioType,
        DWORD *pdwFlags) = 0;

    virtual const WAVEFORMATEX * STDMETHODCALLTYPE GetAudioFormat(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetUncompressedAudioFormat(
        UNCOMPRESSEDAUDIOFORMAT *pUncompressedAudioFormat) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IAudioMediaType, 0x4e997f73, 0xb71f, 0x4798, 0x87,0x3b, 0xed,0x7d,0xfc,0xf1,0x5b,0x4d)
#endif
#else
typedef struct IAudioMediaTypeVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IAudioMediaType *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IAudioMediaType *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IAudioMediaType *This);

    /*** IAudioMediaType methods ***/
    HRESULT (STDMETHODCALLTYPE *IsCompressedFormat)(
        IAudioMediaType *This,
        BOOL *pfCompressed);

    HRESULT (STDMETHODCALLTYPE *IsEqual)(
        IAudioMediaType *This,
        IAudioMediaType *pIAudioType,
        DWORD *pdwFlags);

    const WAVEFORMATEX * (STDMETHODCALLTYPE *GetAudioFormat)(
        IAudioMediaType *This);

    HRESULT (STDMETHODCALLTYPE *GetUncompressedAudioFormat)(
        IAudioMediaType *This,
        UNCOMPRESSEDAUDIOFORMAT *pUncompressedAudioFormat);

    END_INTERFACE
} IAudioMediaTypeVtbl;

interface IAudioMediaType {
    CONST_VTBL IAudioMediaTypeVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IAudioMediaType_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAudioMediaType_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAudioMediaType_Release(This) (This)->lpVtbl->Release(This)
/*** IAudioMediaType methods ***/
#define IAudioMediaType_IsCompressedFormat(This,pfCompressed) (This)->lpVtbl->IsCompressedFormat(This,pfCompressed)
#define IAudioMediaType_IsEqual(This,pIAudioType,pdwFlags) (This)->lpVtbl->IsEqual(This,pIAudioType,pdwFlags)
#define IAudioMediaType_GetAudioFormat(This) (This)->lpVtbl->GetAudioFormat(This)
#define IAudioMediaType_GetUncompressedAudioFormat(This,pUncompressedAudioFormat) (This)->lpVtbl->GetUncompressedAudioFormat(This,pUncompressedAudioFormat)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IAudioMediaType_QueryInterface(IAudioMediaType* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IAudioMediaType_AddRef(IAudioMediaType* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IAudioMediaType_Release(IAudioMediaType* This) {
    return This->lpVtbl->Release(This);
}
/*** IAudioMediaType methods ***/
static FORCEINLINE HRESULT IAudioMediaType_IsCompressedFormat(IAudioMediaType* This,BOOL *pfCompressed) {
    return This->lpVtbl->IsCompressedFormat(This,pfCompressed);
}
static FORCEINLINE HRESULT IAudioMediaType_IsEqual(IAudioMediaType* This,IAudioMediaType *pIAudioType,DWORD *pdwFlags) {
    return This->lpVtbl->IsEqual(This,pIAudioType,pdwFlags);
}
static FORCEINLINE const WAVEFORMATEX * IAudioMediaType_GetAudioFormat(IAudioMediaType* This) {
    return This->lpVtbl->GetAudioFormat(This);
}
static FORCEINLINE HRESULT IAudioMediaType_GetUncompressedAudioFormat(IAudioMediaType* This,UNCOMPRESSEDAUDIOFORMAT *pUncompressedAudioFormat) {
    return This->lpVtbl->GetUncompressedAudioFormat(This,pUncompressedAudioFormat);
}
#endif
#endif

#endif


#endif  /* __IAudioMediaType_INTERFACE_DEFINED__ */

//
// CreateAudioMediaType
//
STDAPI CreateAudioMediaType(
    const WAVEFORMATEX* pAudioFormat,
    UINT32 cbAudioFormatSize,
    IAudioMediaType** ppIAudioMediaType
    );
//
// CreateAudioMediaTypeFromUncompressedAudioFormat
//
STDAPI CreateAudioMediaTypeFromUncompressedAudioFormat(
    const UNCOMPRESSEDAUDIOFORMAT* pUncompressedAudioFormat,
    IAudioMediaType** ppIAudioMediaType
    );
#define AUDIOMEDIATYPE_EQUAL_FORMAT_TYPES 0x00000002
#define AUDIOMEDIATYPE_EQUAL_FORMAT_DATA  0x00000004
#define AUDIOMEDIATYPE_EQUAL_FORMAT_USER_DATA  0x00000008

#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) */
/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __audiomediatype_h__ */
