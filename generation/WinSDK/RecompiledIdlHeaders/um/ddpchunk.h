/*** Autogenerated by WIDL 5.0 from ./ddpchunk.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __ddpchunk_h__
#define __ddpchunk_h__

/* Forward declarations */

#ifndef __IDedupChunkLibrary_FWD_DEFINED__
#define __IDedupChunkLibrary_FWD_DEFINED__
typedef interface IDedupChunkLibrary IDedupChunkLibrary;
#ifdef __cplusplus
interface IDedupChunkLibrary;
#endif /* __cplusplus */
#endif

#ifndef __IDedupIterateChunksHash32_FWD_DEFINED__
#define __IDedupIterateChunksHash32_FWD_DEFINED__
typedef interface IDedupIterateChunksHash32 IDedupIterateChunksHash32;
#ifdef __cplusplus
interface IDedupIterateChunksHash32;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <oaidl.h>
#include <ocidl.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <winapifamily.h>
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
#ifndef __IDedupIterateChunksHash32_FWD_DEFINED__
#define __IDedupIterateChunksHash32_FWD_DEFINED__
typedef interface IDedupIterateChunksHash32 IDedupIterateChunksHash32;
#ifdef __cplusplus
interface IDedupIterateChunksHash32;
#endif /* __cplusplus */
#endif

enum _DEDUP_SET_PARAM_TYPE {
    DEDUP_PT_MinChunkSizeBytes = 1,
    DEDUP_PT_MaxChunkSizeBytes = 2,
    DEDUP_PT_AvgChunkSizeBytes = 3,
    DEDUP_PT_InvariantChunking = 4,
    DEDUP_PT_DisableStrongHashComputation = 5
};
#define DEDUP_CHUNKLIB_MAX_CHUNKS_ENUM (1024)

typedef struct _DEDUP_CHUNK_INFO_HASH32 {
    DWORD ChunkFlags;
    ULONGLONG ChunkOffsetInStream;
    ULONGLONG ChunkSize;
    BYTE HashVal[32];
} DEDUP_CHUNK_INFO_HASH32;
/*****************************************************************************
 * IDedupChunkLibrary interface
 */
#ifndef __IDedupChunkLibrary_INTERFACE_DEFINED__
#define __IDedupChunkLibrary_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDedupChunkLibrary, 0xbb5144d7, 0x2720, 0x4dcc, 0x87,0x77, 0x78,0x59,0x74,0x16,0xec,0x23);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("bb5144d7-2720-4dcc-8777-78597416ec23")
IDedupChunkLibrary : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE InitializeForPushBuffers(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Uninitialize(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetParameter(
        DWORD dwParamType,
        VARIANT vParamValue) = 0;

    virtual HRESULT STDMETHODCALLTYPE StartChunking(
        IID iidIteratorInterfaceID,
        IUnknown **ppChunksEnum) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDedupChunkLibrary, 0xbb5144d7, 0x2720, 0x4dcc, 0x87,0x77, 0x78,0x59,0x74,0x16,0xec,0x23)
#endif
#else
typedef struct IDedupChunkLibraryVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDedupChunkLibrary *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDedupChunkLibrary *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDedupChunkLibrary *This);

    /*** IDedupChunkLibrary methods ***/
    HRESULT (STDMETHODCALLTYPE *InitializeForPushBuffers)(
        IDedupChunkLibrary *This);

    HRESULT (STDMETHODCALLTYPE *Uninitialize)(
        IDedupChunkLibrary *This);

    HRESULT (STDMETHODCALLTYPE *SetParameter)(
        IDedupChunkLibrary *This,
        DWORD dwParamType,
        VARIANT vParamValue);

    HRESULT (STDMETHODCALLTYPE *StartChunking)(
        IDedupChunkLibrary *This,
        IID iidIteratorInterfaceID,
        IUnknown **ppChunksEnum);

    END_INTERFACE
} IDedupChunkLibraryVtbl;

interface IDedupChunkLibrary {
    CONST_VTBL IDedupChunkLibraryVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDedupChunkLibrary_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDedupChunkLibrary_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDedupChunkLibrary_Release(This) (This)->lpVtbl->Release(This)
/*** IDedupChunkLibrary methods ***/
#define IDedupChunkLibrary_InitializeForPushBuffers(This) (This)->lpVtbl->InitializeForPushBuffers(This)
#define IDedupChunkLibrary_Uninitialize(This) (This)->lpVtbl->Uninitialize(This)
#define IDedupChunkLibrary_SetParameter(This,dwParamType,vParamValue) (This)->lpVtbl->SetParameter(This,dwParamType,vParamValue)
#define IDedupChunkLibrary_StartChunking(This,iidIteratorInterfaceID,ppChunksEnum) (This)->lpVtbl->StartChunking(This,iidIteratorInterfaceID,ppChunksEnum)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDedupChunkLibrary_QueryInterface(IDedupChunkLibrary* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDedupChunkLibrary_AddRef(IDedupChunkLibrary* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDedupChunkLibrary_Release(IDedupChunkLibrary* This) {
    return This->lpVtbl->Release(This);
}
/*** IDedupChunkLibrary methods ***/
static FORCEINLINE HRESULT IDedupChunkLibrary_InitializeForPushBuffers(IDedupChunkLibrary* This) {
    return This->lpVtbl->InitializeForPushBuffers(This);
}
static FORCEINLINE HRESULT IDedupChunkLibrary_Uninitialize(IDedupChunkLibrary* This) {
    return This->lpVtbl->Uninitialize(This);
}
static FORCEINLINE HRESULT IDedupChunkLibrary_SetParameter(IDedupChunkLibrary* This,DWORD dwParamType,VARIANT vParamValue) {
    return This->lpVtbl->SetParameter(This,dwParamType,vParamValue);
}
static FORCEINLINE HRESULT IDedupChunkLibrary_StartChunking(IDedupChunkLibrary* This,IID iidIteratorInterfaceID,IUnknown **ppChunksEnum) {
    return This->lpVtbl->StartChunking(This,iidIteratorInterfaceID,ppChunksEnum);
}
#endif
#endif

#endif


#endif  /* __IDedupChunkLibrary_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDedupIterateChunksHash32 interface
 */
#ifndef __IDedupIterateChunksHash32_INTERFACE_DEFINED__
#define __IDedupIterateChunksHash32_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDedupIterateChunksHash32, 0x90b584d3, 0x72aa, 0x400f, 0x97,0x67, 0xca,0xd8,0x66,0xa5,0xa2,0xd8);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("90b584d3-72aa-400f-9767-cad866a5a2d8")
IDedupIterateChunksHash32 : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE PushBuffer(
        BYTE *pBuffer,
        ULONG ulBufferLength) = 0;

    virtual HRESULT STDMETHODCALLTYPE Next(
        ULONG ulMaxChunks,
        DEDUP_CHUNK_INFO_HASH32 *pArrChunks,
        ULONG *pulFetched) = 0;

    virtual HRESULT STDMETHODCALLTYPE Drain(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE Reset(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDedupIterateChunksHash32, 0x90b584d3, 0x72aa, 0x400f, 0x97,0x67, 0xca,0xd8,0x66,0xa5,0xa2,0xd8)
#endif
#else
typedef struct IDedupIterateChunksHash32Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDedupIterateChunksHash32 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDedupIterateChunksHash32 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDedupIterateChunksHash32 *This);

    /*** IDedupIterateChunksHash32 methods ***/
    HRESULT (STDMETHODCALLTYPE *PushBuffer)(
        IDedupIterateChunksHash32 *This,
        BYTE *pBuffer,
        ULONG ulBufferLength);

    HRESULT (STDMETHODCALLTYPE *Next)(
        IDedupIterateChunksHash32 *This,
        ULONG ulMaxChunks,
        DEDUP_CHUNK_INFO_HASH32 *pArrChunks,
        ULONG *pulFetched);

    HRESULT (STDMETHODCALLTYPE *Drain)(
        IDedupIterateChunksHash32 *This);

    HRESULT (STDMETHODCALLTYPE *Reset)(
        IDedupIterateChunksHash32 *This);

    END_INTERFACE
} IDedupIterateChunksHash32Vtbl;

interface IDedupIterateChunksHash32 {
    CONST_VTBL IDedupIterateChunksHash32Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDedupIterateChunksHash32_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDedupIterateChunksHash32_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDedupIterateChunksHash32_Release(This) (This)->lpVtbl->Release(This)
/*** IDedupIterateChunksHash32 methods ***/
#define IDedupIterateChunksHash32_PushBuffer(This,pBuffer,ulBufferLength) (This)->lpVtbl->PushBuffer(This,pBuffer,ulBufferLength)
#define IDedupIterateChunksHash32_Next(This,ulMaxChunks,pArrChunks,pulFetched) (This)->lpVtbl->Next(This,ulMaxChunks,pArrChunks,pulFetched)
#define IDedupIterateChunksHash32_Drain(This) (This)->lpVtbl->Drain(This)
#define IDedupIterateChunksHash32_Reset(This) (This)->lpVtbl->Reset(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDedupIterateChunksHash32_QueryInterface(IDedupIterateChunksHash32* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDedupIterateChunksHash32_AddRef(IDedupIterateChunksHash32* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDedupIterateChunksHash32_Release(IDedupIterateChunksHash32* This) {
    return This->lpVtbl->Release(This);
}
/*** IDedupIterateChunksHash32 methods ***/
static FORCEINLINE HRESULT IDedupIterateChunksHash32_PushBuffer(IDedupIterateChunksHash32* This,BYTE *pBuffer,ULONG ulBufferLength) {
    return This->lpVtbl->PushBuffer(This,pBuffer,ulBufferLength);
}
static FORCEINLINE HRESULT IDedupIterateChunksHash32_Next(IDedupIterateChunksHash32* This,ULONG ulMaxChunks,DEDUP_CHUNK_INFO_HASH32 *pArrChunks,ULONG *pulFetched) {
    return This->lpVtbl->Next(This,ulMaxChunks,pArrChunks,pulFetched);
}
static FORCEINLINE HRESULT IDedupIterateChunksHash32_Drain(IDedupIterateChunksHash32* This) {
    return This->lpVtbl->Drain(This);
}
static FORCEINLINE HRESULT IDedupIterateChunksHash32_Reset(IDedupIterateChunksHash32* This) {
    return This->lpVtbl->Reset(This);
}
#endif
#endif

#endif


#endif  /* __IDedupIterateChunksHash32_INTERFACE_DEFINED__ */

#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) */
/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER VARIANT_UserSize     (ULONG *, ULONG, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserMarshal  (ULONG *, unsigned char *, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserUnmarshal(ULONG *, unsigned char *, VARIANT *);
void            __RPC_USER VARIANT_UserFree     (ULONG *, VARIANT *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __ddpchunk_h__ */
