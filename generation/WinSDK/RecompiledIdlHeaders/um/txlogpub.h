/*** Autogenerated by WIDL 7.0-rc1 from ./txlogpub.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __txlogpub_h__
#define __txlogpub_h__

/* Forward declarations */

#ifndef __ILog_FWD_DEFINED__
#define __ILog_FWD_DEFINED__
typedef interface ILog ILog;
#ifdef __cplusplus
interface ILog;
#endif /* __cplusplus */
#endif

#ifndef __IFileBasedLogInit_FWD_DEFINED__
#define __IFileBasedLogInit_FWD_DEFINED__
typedef interface IFileBasedLogInit IFileBasedLogInit;
#ifdef __cplusplus
interface IFileBasedLogInit;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <unknwn.h>

#ifdef __cplusplus
extern "C" {
#endif

//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
//--------------------------------------------------------------------------
#include <winapifamily.h>
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
#ifndef __ILog_FWD_DEFINED__
#define __ILog_FWD_DEFINED__
typedef interface ILog ILog;
#ifdef __cplusplus
interface ILog;
#endif /* __cplusplus */
#endif

#ifndef __IFileBasedLogInit_FWD_DEFINED__
#define __IFileBasedLogInit_FWD_DEFINED__
typedef interface IFileBasedLogInit IFileBasedLogInit;
#ifdef __cplusplus
interface IFileBasedLogInit;
#endif /* __cplusplus */
#endif

// LSN
// LSN is the fundamental cookie returned from the log as the name of a
// newly-written  log record. LSNs from successively written records to a
// given log are always monotonically increasing. LSNs are directly
// comparable: lsn2 is later in the log than lsn1 if and only if as integers
// lsn2 > lsn1.
//
// Neither the value zero nor the value MAXLSN are ever used as the value of
// an actual LSN.

typedef LARGE_INTEGER LSN;
#define MAXLSN (0x7FFFFFFFFFFFFFFF)


// RECORD_READING_POLICY
// The RECORD_READING_POLICY enumeration values specify a hint about the
// order in which records will be read from a log.  It is used by
// ILog::SetAccessPolicyHint.

typedef enum RECORD_READING_POLICY {
    RECORD_READING_POLICY_FORWARD = 1,
    RECORD_READING_POLICY_BACKWARD = 2,
    RECORD_READING_POLICY_RANDOM = 3
} RECORD_READING_POLICY;


// ILog
// An interface to the lowest level of a log implementation. This level
// takes care of writing the records to disk in a stable manner. Recovery
// protocols, transaction awareness, and the like are provided by a higher
// semantic level.
/*****************************************************************************
 * ILog interface
 */
#ifndef __ILog_INTERFACE_DEFINED__
#define __ILog_INTERFACE_DEFINED__

DEFINE_GUID(IID_ILog, 0xff222117, 0x0c6c, 0x11d2, 0xb8,0x9a, 0x00,0xc0,0x4f,0xb9,0x61,0x8a);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ff222117-0c6c-11d2-b89a-00c04fb9618a")
ILog : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE Force(
        LSN lsnMinToForce) = 0;

    virtual HRESULT STDMETHODCALLTYPE AppendRecord(
        BLOB *rgBlob,
        ULONG cBlob,
        BOOL fForceNow,
        LSN *plsn) = 0;

    virtual HRESULT STDMETHODCALLTYPE ReadRecord(
        LSN lsnToRead,
        LSN *plsnPrev,
        LSN *plsnNext,
        BYTE **ppbData,
        ULONG *pcbData) = 0;

    virtual HRESULT STDMETHODCALLTYPE ReadRecordPrefix(
        LSN lsnToRead,
        LSN *plsnPrev,
        LSN *plsnNext,
        BYTE *pbData,
        ULONG *pcbData,
        ULONG *pcbRecord) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetLogLimits(
        LSN *plsnFirst,
        LSN *plsnLast) = 0;

    virtual HRESULT STDMETHODCALLTYPE TruncatePrefix(
        LSN lsnFirstToKeep) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetAccessPolicyHint(
        RECORD_READING_POLICY policy) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ILog, 0xff222117, 0x0c6c, 0x11d2, 0xb8,0x9a, 0x00,0xc0,0x4f,0xb9,0x61,0x8a)
#endif
#else
typedef struct ILogVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ILog *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ILog *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ILog *This);

    /*** ILog methods ***/
    HRESULT (STDMETHODCALLTYPE *Force)(
        ILog *This,
        LSN lsnMinToForce);

    HRESULT (STDMETHODCALLTYPE *AppendRecord)(
        ILog *This,
        BLOB *rgBlob,
        ULONG cBlob,
        BOOL fForceNow,
        LSN *plsn);

    HRESULT (STDMETHODCALLTYPE *ReadRecord)(
        ILog *This,
        LSN lsnToRead,
        LSN *plsnPrev,
        LSN *plsnNext,
        BYTE **ppbData,
        ULONG *pcbData);

    HRESULT (STDMETHODCALLTYPE *ReadRecordPrefix)(
        ILog *This,
        LSN lsnToRead,
        LSN *plsnPrev,
        LSN *plsnNext,
        BYTE *pbData,
        ULONG *pcbData,
        ULONG *pcbRecord);

    HRESULT (STDMETHODCALLTYPE *GetLogLimits)(
        ILog *This,
        LSN *plsnFirst,
        LSN *plsnLast);

    HRESULT (STDMETHODCALLTYPE *TruncatePrefix)(
        ILog *This,
        LSN lsnFirstToKeep);

    HRESULT (STDMETHODCALLTYPE *SetAccessPolicyHint)(
        ILog *This,
        RECORD_READING_POLICY policy);

    END_INTERFACE
} ILogVtbl;

interface ILog {
    CONST_VTBL ILogVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ILog_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ILog_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ILog_Release(This) (This)->lpVtbl->Release(This)
/*** ILog methods ***/
#define ILog_Force(This,lsnMinToForce) (This)->lpVtbl->Force(This,lsnMinToForce)
#define ILog_AppendRecord(This,rgBlob,cBlob,fForceNow,plsn) (This)->lpVtbl->AppendRecord(This,rgBlob,cBlob,fForceNow,plsn)
#define ILog_ReadRecord(This,lsnToRead,plsnPrev,plsnNext,ppbData,pcbData) (This)->lpVtbl->ReadRecord(This,lsnToRead,plsnPrev,plsnNext,ppbData,pcbData)
#define ILog_ReadRecordPrefix(This,lsnToRead,plsnPrev,plsnNext,pbData,pcbData,pcbRecord) (This)->lpVtbl->ReadRecordPrefix(This,lsnToRead,plsnPrev,plsnNext,pbData,pcbData,pcbRecord)
#define ILog_GetLogLimits(This,plsnFirst,plsnLast) (This)->lpVtbl->GetLogLimits(This,plsnFirst,plsnLast)
#define ILog_TruncatePrefix(This,lsnFirstToKeep) (This)->lpVtbl->TruncatePrefix(This,lsnFirstToKeep)
#define ILog_SetAccessPolicyHint(This,policy) (This)->lpVtbl->SetAccessPolicyHint(This,policy)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT ILog_QueryInterface(ILog* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG ILog_AddRef(ILog* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG ILog_Release(ILog* This) {
    return This->lpVtbl->Release(This);
}
/*** ILog methods ***/
static FORCEINLINE HRESULT ILog_Force(ILog* This,LSN lsnMinToForce) {
    return This->lpVtbl->Force(This,lsnMinToForce);
}
static FORCEINLINE HRESULT ILog_AppendRecord(ILog* This,BLOB *rgBlob,ULONG cBlob,BOOL fForceNow,LSN *plsn) {
    return This->lpVtbl->AppendRecord(This,rgBlob,cBlob,fForceNow,plsn);
}
static FORCEINLINE HRESULT ILog_ReadRecord(ILog* This,LSN lsnToRead,LSN *plsnPrev,LSN *plsnNext,BYTE **ppbData,ULONG *pcbData) {
    return This->lpVtbl->ReadRecord(This,lsnToRead,plsnPrev,plsnNext,ppbData,pcbData);
}
static FORCEINLINE HRESULT ILog_ReadRecordPrefix(ILog* This,LSN lsnToRead,LSN *plsnPrev,LSN *plsnNext,BYTE *pbData,ULONG *pcbData,ULONG *pcbRecord) {
    return This->lpVtbl->ReadRecordPrefix(This,lsnToRead,plsnPrev,plsnNext,pbData,pcbData,pcbRecord);
}
static FORCEINLINE HRESULT ILog_GetLogLimits(ILog* This,LSN *plsnFirst,LSN *plsnLast) {
    return This->lpVtbl->GetLogLimits(This,plsnFirst,plsnLast);
}
static FORCEINLINE HRESULT ILog_TruncatePrefix(ILog* This,LSN lsnFirstToKeep) {
    return This->lpVtbl->TruncatePrefix(This,lsnFirstToKeep);
}
static FORCEINLINE HRESULT ILog_SetAccessPolicyHint(ILog* This,RECORD_READING_POLICY policy) {
    return This->lpVtbl->SetAccessPolicyHint(This,policy);
}
#endif
#endif

#endif


#endif  /* __ILog_INTERFACE_DEFINED__ */



// IFileBasedLogInit
// An interface used to initialize an instance of a file based implementation of
// ILog.  This interface defines the single method InitNew, which is used to
// create a log on a new log file.  Objects that implement IFileBasedLogInit
// should also implement IPersistFile, to allow existing log files to be opened.
/*****************************************************************************
 * IFileBasedLogInit interface
 */
#ifndef __IFileBasedLogInit_INTERFACE_DEFINED__
#define __IFileBasedLogInit_INTERFACE_DEFINED__

DEFINE_GUID(IID_IFileBasedLogInit, 0x00951e8c, 0x1294, 0x11d1, 0x97,0xe4, 0x00,0xc0,0x4f,0xb9,0x61,0x8a);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("00951e8c-1294-11d1-97e4-00c04fb9618a")
IFileBasedLogInit : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE InitNew(
        LPCWSTR filename,
        ULONG cbCapacityHint) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IFileBasedLogInit, 0x00951e8c, 0x1294, 0x11d1, 0x97,0xe4, 0x00,0xc0,0x4f,0xb9,0x61,0x8a)
#endif
#else
typedef struct IFileBasedLogInitVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IFileBasedLogInit *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IFileBasedLogInit *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IFileBasedLogInit *This);

    /*** IFileBasedLogInit methods ***/
    HRESULT (STDMETHODCALLTYPE *InitNew)(
        IFileBasedLogInit *This,
        LPCWSTR filename,
        ULONG cbCapacityHint);

    END_INTERFACE
} IFileBasedLogInitVtbl;

interface IFileBasedLogInit {
    CONST_VTBL IFileBasedLogInitVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IFileBasedLogInit_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IFileBasedLogInit_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IFileBasedLogInit_Release(This) (This)->lpVtbl->Release(This)
/*** IFileBasedLogInit methods ***/
#define IFileBasedLogInit_InitNew(This,filename,cbCapacityHint) (This)->lpVtbl->InitNew(This,filename,cbCapacityHint)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IFileBasedLogInit_QueryInterface(IFileBasedLogInit* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IFileBasedLogInit_AddRef(IFileBasedLogInit* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IFileBasedLogInit_Release(IFileBasedLogInit* This) {
    return This->lpVtbl->Release(This);
}
/*** IFileBasedLogInit methods ***/
static FORCEINLINE HRESULT IFileBasedLogInit_InitNew(IFileBasedLogInit* This,LPCWSTR filename,ULONG cbCapacityHint) {
    return This->lpVtbl->InitNew(This,filename,cbCapacityHint);
}
#endif
#endif

#endif


#endif  /* __IFileBasedLogInit_INTERFACE_DEFINED__ */



EXTERN_C const CLSID CLSID_SimpleFileBasedLog;
#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) */
/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __txlogpub_h__ */
