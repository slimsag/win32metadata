/*** Autogenerated by WIDL 5.0 from ./tsgpolicyengine.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __tsgpolicyengine_h__
#define __tsgpolicyengine_h__

/* Forward declarations */

#ifndef __ITSGAuthorizeConnectionSink_FWD_DEFINED__
#define __ITSGAuthorizeConnectionSink_FWD_DEFINED__
typedef interface ITSGAuthorizeConnectionSink ITSGAuthorizeConnectionSink;
#ifdef __cplusplus
interface ITSGAuthorizeConnectionSink;
#endif /* __cplusplus */
#endif

#ifndef __ITSGAuthorizeResourceSink_FWD_DEFINED__
#define __ITSGAuthorizeResourceSink_FWD_DEFINED__
typedef interface ITSGAuthorizeResourceSink ITSGAuthorizeResourceSink;
#ifdef __cplusplus
interface ITSGAuthorizeResourceSink;
#endif /* __cplusplus */
#endif

#ifndef __ITSGPolicyEngine_FWD_DEFINED__
#define __ITSGPolicyEngine_FWD_DEFINED__
typedef interface ITSGPolicyEngine ITSGPolicyEngine;
#ifdef __cplusplus
interface ITSGPolicyEngine;
#endif /* __cplusplus */
#endif

#ifndef __ITSGAccountingEngine_FWD_DEFINED__
#define __ITSGAccountingEngine_FWD_DEFINED__
typedef interface ITSGAccountingEngine ITSGAccountingEngine;
#ifdef __cplusplus
interface ITSGAccountingEngine;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <oaidl.h>
#include <ocidl.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <winapifamily.h>
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
typedef enum __WIDL_tsgpolicyengine_generated_name_00000020 {
    AA_AUTH_MIN = 0,
    AA_AUTH_BASIC = 1,
    AA_AUTH_NTLM = 2,
    AA_AUTH_SC = 3,
    AA_AUTH_LOGGEDONCREDENTIALS = 4,
    AA_AUTH_NEGOTIATE = 5,
    AA_AUTH_ANY = 6,
    AA_AUTH_COOKIE = 7,
    AA_AUTH_DIGEST = 8,
    AA_AUTH_ORGID = 9,
    AA_AUTH_CONID = 10,
    AA_AUTH_SSPI_NTLM = 11,
    AA_AUTH_MAX = 12
} AAAuthSchemes;
typedef enum __WIDL_tsgpolicyengine_generated_name_00000021 {
    AA_MAIN_SESSION_CREATION = 0,
    AA_SUB_SESSION_CREATION = 1,
    AA_SUB_SESSION_CLOSED = 2,
    AA_MAIN_SESSION_CLOSED = 3
} AAAccountingDataType;
typedef struct __WIDL_tsgpolicyengine_generated_name_00000022 {
    BSTR userName;
    BSTR clientName;
    AAAuthSchemes authType;
    BSTR resourceName;
    int portNumber;
    BSTR protocolName;
    int numberOfBytesReceived;
    int numberOfBytesTransfered;
    BSTR reasonForDisconnect;
    GUID mainSessionId;
    int subSessionId;
} AAAccountingData;
typedef enum __WIDL_tsgpolicyengine_generated_name_00000023 {
    SESSION_TIMEOUT_ACTION_DISCONNECT = 0,
    SESSION_TIMEOUT_ACTION_SILENT_REAUTH = 1
} SESSION_TIMEOUT_ACTION_TYPE;
typedef enum __WIDL_tsgpolicyengine_generated_name_00000024 {
    EnableAllRedirections = 0,
    DisableAllRedirections = 1,
    DriveRedirectionDisabled = 2,
    PrinterRedirectionDisabled = 3,
    PortRedirectionDisabled = 4,
    ClipboardRedirectionDisabled = 5,
    PnpRedirectionDisabled = 6,
    AllowOnlySDRServers = 7
} PolicyAttributeType;
#define MAX_POLICY_ATTRIBUTES 20
typedef DWORD PolicyAttributes[20];
typedef enum __WIDL_tsgpolicyengine_generated_name_00000025 {
    AA_UNTRUSTED = 0,
    AA_TRUSTEDUSER_UNTRUSTEDCLIENT = 1,
    AA_TRUSTEDUSER_TRUSTEDCLIENT = 2
} AATrustClassID;
/*****************************************************************************
 * ITSGAuthorizeConnectionSink interface
 */
#ifndef __ITSGAuthorizeConnectionSink_INTERFACE_DEFINED__
#define __ITSGAuthorizeConnectionSink_INTERFACE_DEFINED__

DEFINE_GUID(IID_ITSGAuthorizeConnectionSink, 0xc27ece33, 0x7781, 0x4318, 0x98,0xef, 0x1c,0xf2,0xda,0x7b,0x70,0x05);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c27ece33-7781-4318-98ef-1cf2da7b7005")
ITSGAuthorizeConnectionSink : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE OnConnectionAuthorized(
        HRESULT hrIn,
        GUID mainSessionId,
        ULONG cbSoHResponse,
        BYTE *pbSoHResponse,
        ULONG idleTimeout,
        ULONG sessionTimeout,
        SESSION_TIMEOUT_ACTION_TYPE sessionTimeoutAction,
        AATrustClassID trustClass,
        PolicyAttributes policyAttributes) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ITSGAuthorizeConnectionSink, 0xc27ece33, 0x7781, 0x4318, 0x98,0xef, 0x1c,0xf2,0xda,0x7b,0x70,0x05)
#endif
#else
typedef struct ITSGAuthorizeConnectionSinkVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ITSGAuthorizeConnectionSink *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ITSGAuthorizeConnectionSink *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ITSGAuthorizeConnectionSink *This);

    /*** ITSGAuthorizeConnectionSink methods ***/
    HRESULT (STDMETHODCALLTYPE *OnConnectionAuthorized)(
        ITSGAuthorizeConnectionSink *This,
        HRESULT hrIn,
        GUID mainSessionId,
        ULONG cbSoHResponse,
        BYTE *pbSoHResponse,
        ULONG idleTimeout,
        ULONG sessionTimeout,
        SESSION_TIMEOUT_ACTION_TYPE sessionTimeoutAction,
        AATrustClassID trustClass,
        PolicyAttributes policyAttributes);

    END_INTERFACE
} ITSGAuthorizeConnectionSinkVtbl;

interface ITSGAuthorizeConnectionSink {
    CONST_VTBL ITSGAuthorizeConnectionSinkVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ITSGAuthorizeConnectionSink_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITSGAuthorizeConnectionSink_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITSGAuthorizeConnectionSink_Release(This) (This)->lpVtbl->Release(This)
/*** ITSGAuthorizeConnectionSink methods ***/
#define ITSGAuthorizeConnectionSink_OnConnectionAuthorized(This,hrIn,mainSessionId,cbSoHResponse,pbSoHResponse,idleTimeout,sessionTimeout,sessionTimeoutAction,trustClass,policyAttributes) (This)->lpVtbl->OnConnectionAuthorized(This,hrIn,mainSessionId,cbSoHResponse,pbSoHResponse,idleTimeout,sessionTimeout,sessionTimeoutAction,trustClass,policyAttributes)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT ITSGAuthorizeConnectionSink_QueryInterface(ITSGAuthorizeConnectionSink* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG ITSGAuthorizeConnectionSink_AddRef(ITSGAuthorizeConnectionSink* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG ITSGAuthorizeConnectionSink_Release(ITSGAuthorizeConnectionSink* This) {
    return This->lpVtbl->Release(This);
}
/*** ITSGAuthorizeConnectionSink methods ***/
static FORCEINLINE HRESULT ITSGAuthorizeConnectionSink_OnConnectionAuthorized(ITSGAuthorizeConnectionSink* This,HRESULT hrIn,GUID mainSessionId,ULONG cbSoHResponse,BYTE *pbSoHResponse,ULONG idleTimeout,ULONG sessionTimeout,SESSION_TIMEOUT_ACTION_TYPE sessionTimeoutAction,AATrustClassID trustClass,PolicyAttributes policyAttributes) {
    return This->lpVtbl->OnConnectionAuthorized(This,hrIn,mainSessionId,cbSoHResponse,pbSoHResponse,idleTimeout,sessionTimeout,sessionTimeoutAction,trustClass,policyAttributes);
}
#endif
#endif

#endif


#endif  /* __ITSGAuthorizeConnectionSink_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ITSGAuthorizeResourceSink interface
 */
#ifndef __ITSGAuthorizeResourceSink_INTERFACE_DEFINED__
#define __ITSGAuthorizeResourceSink_INTERFACE_DEFINED__

DEFINE_GUID(IID_ITSGAuthorizeResourceSink, 0xfeddfcd4, 0xfa12, 0x4435, 0xae,0x55, 0x7a,0xd1,0xa9,0x77,0x9a,0xf7);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("feddfcd4-fa12-4435-ae55-7ad1a9779af7")
ITSGAuthorizeResourceSink : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE OnChannelAuthorized(
        HRESULT hrIn,
        GUID mainSessionId,
        int subSessionId,
        BSTR *allowedResourceNames,
        ULONG numAllowedResourceNames,
        BSTR *failedResourceNames,
        ULONG numFailedResourceNames) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ITSGAuthorizeResourceSink, 0xfeddfcd4, 0xfa12, 0x4435, 0xae,0x55, 0x7a,0xd1,0xa9,0x77,0x9a,0xf7)
#endif
#else
typedef struct ITSGAuthorizeResourceSinkVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ITSGAuthorizeResourceSink *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ITSGAuthorizeResourceSink *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ITSGAuthorizeResourceSink *This);

    /*** ITSGAuthorizeResourceSink methods ***/
    HRESULT (STDMETHODCALLTYPE *OnChannelAuthorized)(
        ITSGAuthorizeResourceSink *This,
        HRESULT hrIn,
        GUID mainSessionId,
        int subSessionId,
        BSTR *allowedResourceNames,
        ULONG numAllowedResourceNames,
        BSTR *failedResourceNames,
        ULONG numFailedResourceNames);

    END_INTERFACE
} ITSGAuthorizeResourceSinkVtbl;

interface ITSGAuthorizeResourceSink {
    CONST_VTBL ITSGAuthorizeResourceSinkVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ITSGAuthorizeResourceSink_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITSGAuthorizeResourceSink_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITSGAuthorizeResourceSink_Release(This) (This)->lpVtbl->Release(This)
/*** ITSGAuthorizeResourceSink methods ***/
#define ITSGAuthorizeResourceSink_OnChannelAuthorized(This,hrIn,mainSessionId,subSessionId,allowedResourceNames,numAllowedResourceNames,failedResourceNames,numFailedResourceNames) (This)->lpVtbl->OnChannelAuthorized(This,hrIn,mainSessionId,subSessionId,allowedResourceNames,numAllowedResourceNames,failedResourceNames,numFailedResourceNames)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT ITSGAuthorizeResourceSink_QueryInterface(ITSGAuthorizeResourceSink* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG ITSGAuthorizeResourceSink_AddRef(ITSGAuthorizeResourceSink* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG ITSGAuthorizeResourceSink_Release(ITSGAuthorizeResourceSink* This) {
    return This->lpVtbl->Release(This);
}
/*** ITSGAuthorizeResourceSink methods ***/
static FORCEINLINE HRESULT ITSGAuthorizeResourceSink_OnChannelAuthorized(ITSGAuthorizeResourceSink* This,HRESULT hrIn,GUID mainSessionId,int subSessionId,BSTR *allowedResourceNames,ULONG numAllowedResourceNames,BSTR *failedResourceNames,ULONG numFailedResourceNames) {
    return This->lpVtbl->OnChannelAuthorized(This,hrIn,mainSessionId,subSessionId,allowedResourceNames,numAllowedResourceNames,failedResourceNames,numFailedResourceNames);
}
#endif
#endif

#endif


#endif  /* __ITSGAuthorizeResourceSink_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ITSGPolicyEngine interface
 */
#ifndef __ITSGPolicyEngine_INTERFACE_DEFINED__
#define __ITSGPolicyEngine_INTERFACE_DEFINED__

DEFINE_GUID(IID_ITSGPolicyEngine, 0x8bc24f08, 0x6223, 0x42f4, 0xa5,0xb4, 0x8e,0x37,0xcd,0x13,0x5b,0xbd);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("8bc24f08-6223-42f4-a5b4-8e37cd135bbd")
ITSGPolicyEngine : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE AuthorizeConnection(
        GUID mainSessionId,
        BSTR username,
        AAAuthSchemes authType,
        BSTR clientMachineIP,
        BSTR clientMachineName,
        BYTE *sohData,
        ULONG numSOHBytes,
        BYTE *cookieData,
        ULONG numCookieBytes,
        HANDLE_PTR userToken,
        ITSGAuthorizeConnectionSink *pSink) = 0;

    virtual HRESULT STDMETHODCALLTYPE AuthorizeResource(
        GUID mainSessionId,
        int subSessionId,
        BSTR username,
        BSTR *resourceNames,
        ULONG numResources,
        BSTR *alternateResourceNames,
        ULONG numAlternateResourceName,
        ULONG portNumber,
        BSTR operation,
        BYTE *cookie,
        ULONG numBytesInCookie,
        ITSGAuthorizeResourceSink *pSink) = 0;

    virtual HRESULT STDMETHODCALLTYPE Refresh(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE IsQuarantineEnabled(
        BOOL *quarantineEnabled) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ITSGPolicyEngine, 0x8bc24f08, 0x6223, 0x42f4, 0xa5,0xb4, 0x8e,0x37,0xcd,0x13,0x5b,0xbd)
#endif
#else
typedef struct ITSGPolicyEngineVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ITSGPolicyEngine *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ITSGPolicyEngine *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ITSGPolicyEngine *This);

    /*** ITSGPolicyEngine methods ***/
    HRESULT (STDMETHODCALLTYPE *AuthorizeConnection)(
        ITSGPolicyEngine *This,
        GUID mainSessionId,
        BSTR username,
        AAAuthSchemes authType,
        BSTR clientMachineIP,
        BSTR clientMachineName,
        BYTE *sohData,
        ULONG numSOHBytes,
        BYTE *cookieData,
        ULONG numCookieBytes,
        HANDLE_PTR userToken,
        ITSGAuthorizeConnectionSink *pSink);

    HRESULT (STDMETHODCALLTYPE *AuthorizeResource)(
        ITSGPolicyEngine *This,
        GUID mainSessionId,
        int subSessionId,
        BSTR username,
        BSTR *resourceNames,
        ULONG numResources,
        BSTR *alternateResourceNames,
        ULONG numAlternateResourceName,
        ULONG portNumber,
        BSTR operation,
        BYTE *cookie,
        ULONG numBytesInCookie,
        ITSGAuthorizeResourceSink *pSink);

    HRESULT (STDMETHODCALLTYPE *Refresh)(
        ITSGPolicyEngine *This);

    HRESULT (STDMETHODCALLTYPE *IsQuarantineEnabled)(
        ITSGPolicyEngine *This,
        BOOL *quarantineEnabled);

    END_INTERFACE
} ITSGPolicyEngineVtbl;

interface ITSGPolicyEngine {
    CONST_VTBL ITSGPolicyEngineVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ITSGPolicyEngine_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITSGPolicyEngine_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITSGPolicyEngine_Release(This) (This)->lpVtbl->Release(This)
/*** ITSGPolicyEngine methods ***/
#define ITSGPolicyEngine_AuthorizeConnection(This,mainSessionId,username,authType,clientMachineIP,clientMachineName,sohData,numSOHBytes,cookieData,numCookieBytes,userToken,pSink) (This)->lpVtbl->AuthorizeConnection(This,mainSessionId,username,authType,clientMachineIP,clientMachineName,sohData,numSOHBytes,cookieData,numCookieBytes,userToken,pSink)
#define ITSGPolicyEngine_AuthorizeResource(This,mainSessionId,subSessionId,username,resourceNames,numResources,alternateResourceNames,numAlternateResourceName,portNumber,operation,cookie,numBytesInCookie,pSink) (This)->lpVtbl->AuthorizeResource(This,mainSessionId,subSessionId,username,resourceNames,numResources,alternateResourceNames,numAlternateResourceName,portNumber,operation,cookie,numBytesInCookie,pSink)
#define ITSGPolicyEngine_Refresh(This) (This)->lpVtbl->Refresh(This)
#define ITSGPolicyEngine_IsQuarantineEnabled(This,quarantineEnabled) (This)->lpVtbl->IsQuarantineEnabled(This,quarantineEnabled)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT ITSGPolicyEngine_QueryInterface(ITSGPolicyEngine* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG ITSGPolicyEngine_AddRef(ITSGPolicyEngine* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG ITSGPolicyEngine_Release(ITSGPolicyEngine* This) {
    return This->lpVtbl->Release(This);
}
/*** ITSGPolicyEngine methods ***/
static FORCEINLINE HRESULT ITSGPolicyEngine_AuthorizeConnection(ITSGPolicyEngine* This,GUID mainSessionId,BSTR username,AAAuthSchemes authType,BSTR clientMachineIP,BSTR clientMachineName,BYTE *sohData,ULONG numSOHBytes,BYTE *cookieData,ULONG numCookieBytes,HANDLE_PTR userToken,ITSGAuthorizeConnectionSink *pSink) {
    return This->lpVtbl->AuthorizeConnection(This,mainSessionId,username,authType,clientMachineIP,clientMachineName,sohData,numSOHBytes,cookieData,numCookieBytes,userToken,pSink);
}
static FORCEINLINE HRESULT ITSGPolicyEngine_AuthorizeResource(ITSGPolicyEngine* This,GUID mainSessionId,int subSessionId,BSTR username,BSTR *resourceNames,ULONG numResources,BSTR *alternateResourceNames,ULONG numAlternateResourceName,ULONG portNumber,BSTR operation,BYTE *cookie,ULONG numBytesInCookie,ITSGAuthorizeResourceSink *pSink) {
    return This->lpVtbl->AuthorizeResource(This,mainSessionId,subSessionId,username,resourceNames,numResources,alternateResourceNames,numAlternateResourceName,portNumber,operation,cookie,numBytesInCookie,pSink);
}
static FORCEINLINE HRESULT ITSGPolicyEngine_Refresh(ITSGPolicyEngine* This) {
    return This->lpVtbl->Refresh(This);
}
static FORCEINLINE HRESULT ITSGPolicyEngine_IsQuarantineEnabled(ITSGPolicyEngine* This,BOOL *quarantineEnabled) {
    return This->lpVtbl->IsQuarantineEnabled(This,quarantineEnabled);
}
#endif
#endif

#endif


#endif  /* __ITSGPolicyEngine_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ITSGAccountingEngine interface
 */
#ifndef __ITSGAccountingEngine_INTERFACE_DEFINED__
#define __ITSGAccountingEngine_INTERFACE_DEFINED__

DEFINE_GUID(IID_ITSGAccountingEngine, 0x4ce2a0c9, 0xe874, 0x4f1a, 0x86,0xf4, 0x06,0xbb,0xb9,0x11,0x53,0x38);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("4ce2a0c9-e874-4f1a-86f4-06bbb9115338")
ITSGAccountingEngine : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE DoAccounting(
        AAAccountingDataType accountingDataType,
        AAAccountingData accountingData) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ITSGAccountingEngine, 0x4ce2a0c9, 0xe874, 0x4f1a, 0x86,0xf4, 0x06,0xbb,0xb9,0x11,0x53,0x38)
#endif
#else
typedef struct ITSGAccountingEngineVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ITSGAccountingEngine *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ITSGAccountingEngine *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ITSGAccountingEngine *This);

    /*** ITSGAccountingEngine methods ***/
    HRESULT (STDMETHODCALLTYPE *DoAccounting)(
        ITSGAccountingEngine *This,
        AAAccountingDataType accountingDataType,
        AAAccountingData accountingData);

    END_INTERFACE
} ITSGAccountingEngineVtbl;

interface ITSGAccountingEngine {
    CONST_VTBL ITSGAccountingEngineVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ITSGAccountingEngine_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITSGAccountingEngine_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITSGAccountingEngine_Release(This) (This)->lpVtbl->Release(This)
/*** ITSGAccountingEngine methods ***/
#define ITSGAccountingEngine_DoAccounting(This,accountingDataType,accountingData) (This)->lpVtbl->DoAccounting(This,accountingDataType,accountingData)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT ITSGAccountingEngine_QueryInterface(ITSGAccountingEngine* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG ITSGAccountingEngine_AddRef(ITSGAccountingEngine* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG ITSGAccountingEngine_Release(ITSGAccountingEngine* This) {
    return This->lpVtbl->Release(This);
}
/*** ITSGAccountingEngine methods ***/
static FORCEINLINE HRESULT ITSGAccountingEngine_DoAccounting(ITSGAccountingEngine* This,AAAccountingDataType accountingDataType,AAAccountingData accountingData) {
    return This->lpVtbl->DoAccounting(This,accountingDataType,accountingData);
}
#endif
#endif

#endif


#endif  /* __ITSGAccountingEngine_INTERFACE_DEFINED__ */

#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) */
/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __tsgpolicyengine_h__ */
