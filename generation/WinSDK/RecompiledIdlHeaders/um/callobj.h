/*** Autogenerated by WIDL 7.0-rc1 from ./callobj.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __callobj_h__
#define __callobj_h__

/* Forward declarations */

#ifndef __ICallFrame_FWD_DEFINED__
#define __ICallFrame_FWD_DEFINED__
typedef interface ICallFrame ICallFrame;
#ifdef __cplusplus
interface ICallFrame;
#endif /* __cplusplus */
#endif

#ifndef __ICallIndirect_FWD_DEFINED__
#define __ICallIndirect_FWD_DEFINED__
typedef interface ICallIndirect ICallIndirect;
#ifdef __cplusplus
interface ICallIndirect;
#endif /* __cplusplus */
#endif

#ifndef __ICallInterceptor_FWD_DEFINED__
#define __ICallInterceptor_FWD_DEFINED__
typedef interface ICallInterceptor ICallInterceptor;
#ifdef __cplusplus
interface ICallInterceptor;
#endif /* __cplusplus */
#endif

#ifndef __ICallFrameEvents_FWD_DEFINED__
#define __ICallFrameEvents_FWD_DEFINED__
typedef interface ICallFrameEvents ICallFrameEvents;
#ifdef __cplusplus
interface ICallFrameEvents;
#endif /* __cplusplus */
#endif

#ifndef __ICallUnmarshal_FWD_DEFINED__
#define __ICallUnmarshal_FWD_DEFINED__
typedef interface ICallUnmarshal ICallUnmarshal;
#ifdef __cplusplus
interface ICallUnmarshal;
#endif /* __cplusplus */
#endif

#ifndef __ICallFrameWalker_FWD_DEFINED__
#define __ICallFrameWalker_FWD_DEFINED__
typedef interface ICallFrameWalker ICallFrameWalker;
#ifdef __cplusplus
interface ICallFrameWalker;
#endif /* __cplusplus */
#endif

#ifndef __IInterfaceRelated_FWD_DEFINED__
#define __IInterfaceRelated_FWD_DEFINED__
typedef interface IInterfaceRelated IInterfaceRelated;
#ifdef __cplusplus
interface IInterfaceRelated;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <oaidl.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <winapifamily.h>
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
#ifndef __ICallInterceptor_FWD_DEFINED__
#define __ICallInterceptor_FWD_DEFINED__
typedef interface ICallInterceptor ICallInterceptor;
#ifdef __cplusplus
interface ICallInterceptor;
#endif /* __cplusplus */
#endif

#ifndef __ICallUnmarshal_FWD_DEFINED__
#define __ICallUnmarshal_FWD_DEFINED__
typedef interface ICallUnmarshal ICallUnmarshal;
#ifdef __cplusplus
interface ICallUnmarshal;
#endif /* __cplusplus */
#endif

#ifndef __ICallFrame_FWD_DEFINED__
#define __ICallFrame_FWD_DEFINED__
typedef interface ICallFrame ICallFrame;
#ifdef __cplusplus
interface ICallFrame;
#endif /* __cplusplus */
#endif

#ifndef __ICallFrameEvents_FWD_DEFINED__
#define __ICallFrameEvents_FWD_DEFINED__
typedef interface ICallFrameEvents ICallFrameEvents;
#ifdef __cplusplus
interface ICallFrameEvents;
#endif /* __cplusplus */
#endif

#ifndef __ICallFrameWalker_FWD_DEFINED__
#define __ICallFrameWalker_FWD_DEFINED__
typedef interface ICallFrameWalker ICallFrameWalker;
#ifdef __cplusplus
interface ICallFrameWalker;
#endif /* __cplusplus */
#endif

#ifndef __IInterfaceRelated_FWD_DEFINED__
#define __IInterfaceRelated_FWD_DEFINED__
typedef interface IInterfaceRelated IInterfaceRelated;
#ifdef __cplusplus
interface IInterfaceRelated;
#endif /* __cplusplus */
#endif

/*****************************************************************************
 * ICallFrame interface
 */
#ifndef __ICallFrame_INTERFACE_DEFINED__
#define __ICallFrame_INTERFACE_DEFINED__

typedef struct __WIDL_callobj_generated_name_0000000F {
    ULONG iMethod;
    BOOL fHasInValues;
    BOOL fHasInOutValues;
    BOOL fHasOutValues;
    BOOL fDerivesFromIDispatch;
    LONG cInInterfacesMax;
    LONG cInOutInterfacesMax;
    LONG cOutInterfacesMax;
    LONG cTopLevelInInterfaces;
    IID iid;
    ULONG cMethod;
    ULONG cParams;
} CALLFRAMEINFO;
typedef struct __WIDL_callobj_generated_name_00000010 {
    BOOLEAN fIn;
    BOOLEAN fOut;
    ULONG stackOffset;
    ULONG cbParam;
} CALLFRAMEPARAMINFO;
typedef enum __WIDL_callobj_generated_name_00000011 {
    CALLFRAME_COPY_NESTED = 1,
    CALLFRAME_COPY_INDEPENDENT = 2
} CALLFRAME_COPY;
enum CALLFRAME_FREE {
    CALLFRAME_FREE_NONE = 0,
    CALLFRAME_FREE_IN = 1,
    CALLFRAME_FREE_INOUT = 2,
    CALLFRAME_FREE_OUT = 4,
    CALLFRAME_FREE_TOP_INOUT = 8,
    CALLFRAME_FREE_TOP_OUT = 16,
    CALLFRAME_FREE_ALL = 31
};
enum CALLFRAME_NULL {
    CALLFRAME_NULL_NONE = 0,
    CALLFRAME_NULL_INOUT = 2,
    CALLFRAME_NULL_OUT = 4,
    CALLFRAME_NULL_ALL = 6
};
enum CALLFRAME_WALK {
    CALLFRAME_WALK_IN = 1,
    CALLFRAME_WALK_INOUT = 2,
    CALLFRAME_WALK_OUT = 4
};
typedef struct __WIDL_callobj_generated_name_00000012 {
    BOOLEAN fIn;
    DWORD dwDestContext;
    LPVOID pvDestContext;
    IUnknown *punkReserved;
    GUID guidTransferSyntax;
} CALLFRAME_MARSHALCONTEXT;
DEFINE_GUID(IID_ICallFrame, 0xd573b4b0, 0x894e, 0x11d2, 0xb8,0xb6, 0x00,0xc0,0x4f,0xb9,0x61,0x8a);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d573b4b0-894e-11d2-b8b6-00c04fb9618a")
ICallFrame : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetInfo(
        CALLFRAMEINFO *pInfo) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetIIDAndMethod(
        IID *pIID,
        ULONG *piMethod) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetNames(
        LPWSTR *pwszInterface,
        LPWSTR *pwszMethod) = 0;

    virtual PVOID STDMETHODCALLTYPE GetStackLocation(
        ) = 0;

    virtual void STDMETHODCALLTYPE SetStackLocation(
        PVOID pvStack) = 0;

    virtual void STDMETHODCALLTYPE SetReturnValue(
        HRESULT hr) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetReturnValue(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetParamInfo(
        ULONG iparam,
        CALLFRAMEPARAMINFO *pInfo) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetParam(
        ULONG iparam,
        VARIANT *pvar) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetParam(
        ULONG iparam,
        VARIANT *pvar) = 0;

    virtual HRESULT STDMETHODCALLTYPE Copy(
        CALLFRAME_COPY copyControl,
        ICallFrameWalker *pWalker,
        ICallFrame **ppFrame) = 0;

    virtual HRESULT STDMETHODCALLTYPE Free(
        ICallFrame *pframeArgsDest,
        ICallFrameWalker *pWalkerDestFree,
        ICallFrameWalker *pWalkerCopy,
        DWORD freeFlags,
        ICallFrameWalker *pWalkerFree,
        DWORD nullFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE FreeParam(
        ULONG iparam,
        DWORD freeFlags,
        ICallFrameWalker *pWalkerFree,
        DWORD nullFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE WalkFrame(
        DWORD walkWhat,
        ICallFrameWalker *pWalker) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetMarshalSizeMax(
        CALLFRAME_MARSHALCONTEXT *pmshlContext,
        MSHLFLAGS mshlflags,
        ULONG *pcbBufferNeeded) = 0;

    virtual HRESULT STDMETHODCALLTYPE Marshal(
        CALLFRAME_MARSHALCONTEXT *pmshlContext,
        MSHLFLAGS mshlflags,
        PVOID pBuffer,
        ULONG cbBuffer,
        ULONG *pcbBufferUsed,
        RPCOLEDATAREP *pdataRep,
        ULONG *prpcFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE Unmarshal(
        PVOID pBuffer,
        ULONG cbBuffer,
        RPCOLEDATAREP dataRep,
        CALLFRAME_MARSHALCONTEXT *pcontext,
        ULONG *pcbUnmarshalled) = 0;

    virtual HRESULT STDMETHODCALLTYPE ReleaseMarshalData(
        PVOID pBuffer,
        ULONG cbBuffer,
        ULONG ibFirstRelease,
        RPCOLEDATAREP dataRep,
        CALLFRAME_MARSHALCONTEXT *pcontext) = 0;

    virtual HRESULT STDMETHODCALLTYPE Invoke(
        void *pvReceiver,
         ...) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ICallFrame, 0xd573b4b0, 0x894e, 0x11d2, 0xb8,0xb6, 0x00,0xc0,0x4f,0xb9,0x61,0x8a)
#endif
#else
typedef struct ICallFrameVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ICallFrame *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ICallFrame *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ICallFrame *This);

    /*** ICallFrame methods ***/
    HRESULT (STDMETHODCALLTYPE *GetInfo)(
        ICallFrame *This,
        CALLFRAMEINFO *pInfo);

    HRESULT (STDMETHODCALLTYPE *GetIIDAndMethod)(
        ICallFrame *This,
        IID *pIID,
        ULONG *piMethod);

    HRESULT (STDMETHODCALLTYPE *GetNames)(
        ICallFrame *This,
        LPWSTR *pwszInterface,
        LPWSTR *pwszMethod);

    PVOID (STDMETHODCALLTYPE *GetStackLocation)(
        ICallFrame *This);

    void (STDMETHODCALLTYPE *SetStackLocation)(
        ICallFrame *This,
        PVOID pvStack);

    void (STDMETHODCALLTYPE *SetReturnValue)(
        ICallFrame *This,
        HRESULT hr);

    HRESULT (STDMETHODCALLTYPE *GetReturnValue)(
        ICallFrame *This);

    HRESULT (STDMETHODCALLTYPE *GetParamInfo)(
        ICallFrame *This,
        ULONG iparam,
        CALLFRAMEPARAMINFO *pInfo);

    HRESULT (STDMETHODCALLTYPE *SetParam)(
        ICallFrame *This,
        ULONG iparam,
        VARIANT *pvar);

    HRESULT (STDMETHODCALLTYPE *GetParam)(
        ICallFrame *This,
        ULONG iparam,
        VARIANT *pvar);

    HRESULT (STDMETHODCALLTYPE *Copy)(
        ICallFrame *This,
        CALLFRAME_COPY copyControl,
        ICallFrameWalker *pWalker,
        ICallFrame **ppFrame);

    HRESULT (STDMETHODCALLTYPE *Free)(
        ICallFrame *This,
        ICallFrame *pframeArgsDest,
        ICallFrameWalker *pWalkerDestFree,
        ICallFrameWalker *pWalkerCopy,
        DWORD freeFlags,
        ICallFrameWalker *pWalkerFree,
        DWORD nullFlags);

    HRESULT (STDMETHODCALLTYPE *FreeParam)(
        ICallFrame *This,
        ULONG iparam,
        DWORD freeFlags,
        ICallFrameWalker *pWalkerFree,
        DWORD nullFlags);

    HRESULT (STDMETHODCALLTYPE *WalkFrame)(
        ICallFrame *This,
        DWORD walkWhat,
        ICallFrameWalker *pWalker);

    HRESULT (STDMETHODCALLTYPE *GetMarshalSizeMax)(
        ICallFrame *This,
        CALLFRAME_MARSHALCONTEXT *pmshlContext,
        MSHLFLAGS mshlflags,
        ULONG *pcbBufferNeeded);

    HRESULT (STDMETHODCALLTYPE *Marshal)(
        ICallFrame *This,
        CALLFRAME_MARSHALCONTEXT *pmshlContext,
        MSHLFLAGS mshlflags,
        PVOID pBuffer,
        ULONG cbBuffer,
        ULONG *pcbBufferUsed,
        RPCOLEDATAREP *pdataRep,
        ULONG *prpcFlags);

    HRESULT (STDMETHODCALLTYPE *Unmarshal)(
        ICallFrame *This,
        PVOID pBuffer,
        ULONG cbBuffer,
        RPCOLEDATAREP dataRep,
        CALLFRAME_MARSHALCONTEXT *pcontext,
        ULONG *pcbUnmarshalled);

    HRESULT (STDMETHODCALLTYPE *ReleaseMarshalData)(
        ICallFrame *This,
        PVOID pBuffer,
        ULONG cbBuffer,
        ULONG ibFirstRelease,
        RPCOLEDATAREP dataRep,
        CALLFRAME_MARSHALCONTEXT *pcontext);

    HRESULT (STDMETHODCALLTYPE *Invoke)(
        ICallFrame *This,
        void *pvReceiver,
         ...);

    END_INTERFACE
} ICallFrameVtbl;

interface ICallFrame {
    CONST_VTBL ICallFrameVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ICallFrame_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ICallFrame_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ICallFrame_Release(This) (This)->lpVtbl->Release(This)
/*** ICallFrame methods ***/
#define ICallFrame_GetInfo(This,pInfo) (This)->lpVtbl->GetInfo(This,pInfo)
#define ICallFrame_GetIIDAndMethod(This,pIID,piMethod) (This)->lpVtbl->GetIIDAndMethod(This,pIID,piMethod)
#define ICallFrame_GetNames(This,pwszInterface,pwszMethod) (This)->lpVtbl->GetNames(This,pwszInterface,pwszMethod)
#define ICallFrame_GetStackLocation(This) (This)->lpVtbl->GetStackLocation(This)
#define ICallFrame_SetStackLocation(This,pvStack) (This)->lpVtbl->SetStackLocation(This,pvStack)
#define ICallFrame_SetReturnValue(This,hr) (This)->lpVtbl->SetReturnValue(This,hr)
#define ICallFrame_GetReturnValue(This) (This)->lpVtbl->GetReturnValue(This)
#define ICallFrame_GetParamInfo(This,iparam,pInfo) (This)->lpVtbl->GetParamInfo(This,iparam,pInfo)
#define ICallFrame_SetParam(This,iparam,pvar) (This)->lpVtbl->SetParam(This,iparam,pvar)
#define ICallFrame_GetParam(This,iparam,pvar) (This)->lpVtbl->GetParam(This,iparam,pvar)
#define ICallFrame_Copy(This,copyControl,pWalker,ppFrame) (This)->lpVtbl->Copy(This,copyControl,pWalker,ppFrame)
#define ICallFrame_Free(This,pframeArgsDest,pWalkerDestFree,pWalkerCopy,freeFlags,pWalkerFree,nullFlags) (This)->lpVtbl->Free(This,pframeArgsDest,pWalkerDestFree,pWalkerCopy,freeFlags,pWalkerFree,nullFlags)
#define ICallFrame_FreeParam(This,iparam,freeFlags,pWalkerFree,nullFlags) (This)->lpVtbl->FreeParam(This,iparam,freeFlags,pWalkerFree,nullFlags)
#define ICallFrame_WalkFrame(This,walkWhat,pWalker) (This)->lpVtbl->WalkFrame(This,walkWhat,pWalker)
#define ICallFrame_GetMarshalSizeMax(This,pmshlContext,mshlflags,pcbBufferNeeded) (This)->lpVtbl->GetMarshalSizeMax(This,pmshlContext,mshlflags,pcbBufferNeeded)
#define ICallFrame_Marshal(This,pmshlContext,mshlflags,pBuffer,cbBuffer,pcbBufferUsed,pdataRep,prpcFlags) (This)->lpVtbl->Marshal(This,pmshlContext,mshlflags,pBuffer,cbBuffer,pcbBufferUsed,pdataRep,prpcFlags)
#define ICallFrame_Unmarshal(This,pBuffer,cbBuffer,dataRep,pcontext,pcbUnmarshalled) (This)->lpVtbl->Unmarshal(This,pBuffer,cbBuffer,dataRep,pcontext,pcbUnmarshalled)
#define ICallFrame_ReleaseMarshalData(This,pBuffer,cbBuffer,ibFirstRelease,dataRep,pcontext) (This)->lpVtbl->ReleaseMarshalData(This,pBuffer,cbBuffer,ibFirstRelease,dataRep,pcontext)
#define ICallFrame_Invoke(This,pvReceiver,...) (This)->lpVtbl->Invoke(This,pvReceiver,...)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT ICallFrame_QueryInterface(ICallFrame* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG ICallFrame_AddRef(ICallFrame* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG ICallFrame_Release(ICallFrame* This) {
    return This->lpVtbl->Release(This);
}
/*** ICallFrame methods ***/
static FORCEINLINE HRESULT ICallFrame_GetInfo(ICallFrame* This,CALLFRAMEINFO *pInfo) {
    return This->lpVtbl->GetInfo(This,pInfo);
}
static FORCEINLINE HRESULT ICallFrame_GetIIDAndMethod(ICallFrame* This,IID *pIID,ULONG *piMethod) {
    return This->lpVtbl->GetIIDAndMethod(This,pIID,piMethod);
}
static FORCEINLINE HRESULT ICallFrame_GetNames(ICallFrame* This,LPWSTR *pwszInterface,LPWSTR *pwszMethod) {
    return This->lpVtbl->GetNames(This,pwszInterface,pwszMethod);
}
static FORCEINLINE PVOID ICallFrame_GetStackLocation(ICallFrame* This) {
    return This->lpVtbl->GetStackLocation(This);
}
static FORCEINLINE void ICallFrame_SetStackLocation(ICallFrame* This,PVOID pvStack) {
    This->lpVtbl->SetStackLocation(This,pvStack);
}
static FORCEINLINE void ICallFrame_SetReturnValue(ICallFrame* This,HRESULT hr) {
    This->lpVtbl->SetReturnValue(This,hr);
}
static FORCEINLINE HRESULT ICallFrame_GetReturnValue(ICallFrame* This) {
    return This->lpVtbl->GetReturnValue(This);
}
static FORCEINLINE HRESULT ICallFrame_GetParamInfo(ICallFrame* This,ULONG iparam,CALLFRAMEPARAMINFO *pInfo) {
    return This->lpVtbl->GetParamInfo(This,iparam,pInfo);
}
static FORCEINLINE HRESULT ICallFrame_SetParam(ICallFrame* This,ULONG iparam,VARIANT *pvar) {
    return This->lpVtbl->SetParam(This,iparam,pvar);
}
static FORCEINLINE HRESULT ICallFrame_GetParam(ICallFrame* This,ULONG iparam,VARIANT *pvar) {
    return This->lpVtbl->GetParam(This,iparam,pvar);
}
static FORCEINLINE HRESULT ICallFrame_Copy(ICallFrame* This,CALLFRAME_COPY copyControl,ICallFrameWalker *pWalker,ICallFrame **ppFrame) {
    return This->lpVtbl->Copy(This,copyControl,pWalker,ppFrame);
}
static FORCEINLINE HRESULT ICallFrame_Free(ICallFrame* This,ICallFrame *pframeArgsDest,ICallFrameWalker *pWalkerDestFree,ICallFrameWalker *pWalkerCopy,DWORD freeFlags,ICallFrameWalker *pWalkerFree,DWORD nullFlags) {
    return This->lpVtbl->Free(This,pframeArgsDest,pWalkerDestFree,pWalkerCopy,freeFlags,pWalkerFree,nullFlags);
}
static FORCEINLINE HRESULT ICallFrame_FreeParam(ICallFrame* This,ULONG iparam,DWORD freeFlags,ICallFrameWalker *pWalkerFree,DWORD nullFlags) {
    return This->lpVtbl->FreeParam(This,iparam,freeFlags,pWalkerFree,nullFlags);
}
static FORCEINLINE HRESULT ICallFrame_WalkFrame(ICallFrame* This,DWORD walkWhat,ICallFrameWalker *pWalker) {
    return This->lpVtbl->WalkFrame(This,walkWhat,pWalker);
}
static FORCEINLINE HRESULT ICallFrame_GetMarshalSizeMax(ICallFrame* This,CALLFRAME_MARSHALCONTEXT *pmshlContext,MSHLFLAGS mshlflags,ULONG *pcbBufferNeeded) {
    return This->lpVtbl->GetMarshalSizeMax(This,pmshlContext,mshlflags,pcbBufferNeeded);
}
static FORCEINLINE HRESULT ICallFrame_Marshal(ICallFrame* This,CALLFRAME_MARSHALCONTEXT *pmshlContext,MSHLFLAGS mshlflags,PVOID pBuffer,ULONG cbBuffer,ULONG *pcbBufferUsed,RPCOLEDATAREP *pdataRep,ULONG *prpcFlags) {
    return This->lpVtbl->Marshal(This,pmshlContext,mshlflags,pBuffer,cbBuffer,pcbBufferUsed,pdataRep,prpcFlags);
}
static FORCEINLINE HRESULT ICallFrame_Unmarshal(ICallFrame* This,PVOID pBuffer,ULONG cbBuffer,RPCOLEDATAREP dataRep,CALLFRAME_MARSHALCONTEXT *pcontext,ULONG *pcbUnmarshalled) {
    return This->lpVtbl->Unmarshal(This,pBuffer,cbBuffer,dataRep,pcontext,pcbUnmarshalled);
}
static FORCEINLINE HRESULT ICallFrame_ReleaseMarshalData(ICallFrame* This,PVOID pBuffer,ULONG cbBuffer,ULONG ibFirstRelease,RPCOLEDATAREP dataRep,CALLFRAME_MARSHALCONTEXT *pcontext) {
    return This->lpVtbl->ReleaseMarshalData(This,pBuffer,cbBuffer,ibFirstRelease,dataRep,pcontext);
}
static FORCEINLINE HRESULT ICallFrame_Invoke(ICallFrame* This,void *pvReceiver, ...) {
    return This->lpVtbl->Invoke(This,pvReceiver,...);
}
#endif
#endif

#endif


#endif  /* __ICallFrame_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ICallIndirect interface
 */
#ifndef __ICallIndirect_INTERFACE_DEFINED__
#define __ICallIndirect_INTERFACE_DEFINED__

DEFINE_GUID(IID_ICallIndirect, 0xd573b4b1, 0x894e, 0x11d2, 0xb8,0xb6, 0x00,0xc0,0x4f,0xb9,0x61,0x8a);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d573b4b1-894e-11d2-b8b6-00c04fb9618a")
ICallIndirect : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE CallIndirect(
        HRESULT *phrReturn,
        ULONG iMethod,
        void *pvArgs,
        ULONG *cbArgs) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetMethodInfo(
        ULONG iMethod,
        CALLFRAMEINFO *pInfo,
        LPWSTR *pwszMethod) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetStackSize(
        ULONG iMethod,
        ULONG *cbArgs) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetIID(
        IID *piid,
        BOOL *pfDerivesFromIDispatch,
        ULONG *pcMethod,
        LPWSTR *pwszInterface) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ICallIndirect, 0xd573b4b1, 0x894e, 0x11d2, 0xb8,0xb6, 0x00,0xc0,0x4f,0xb9,0x61,0x8a)
#endif
#else
typedef struct ICallIndirectVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ICallIndirect *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ICallIndirect *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ICallIndirect *This);

    /*** ICallIndirect methods ***/
    HRESULT (STDMETHODCALLTYPE *CallIndirect)(
        ICallIndirect *This,
        HRESULT *phrReturn,
        ULONG iMethod,
        void *pvArgs,
        ULONG *cbArgs);

    HRESULT (STDMETHODCALLTYPE *GetMethodInfo)(
        ICallIndirect *This,
        ULONG iMethod,
        CALLFRAMEINFO *pInfo,
        LPWSTR *pwszMethod);

    HRESULT (STDMETHODCALLTYPE *GetStackSize)(
        ICallIndirect *This,
        ULONG iMethod,
        ULONG *cbArgs);

    HRESULT (STDMETHODCALLTYPE *GetIID)(
        ICallIndirect *This,
        IID *piid,
        BOOL *pfDerivesFromIDispatch,
        ULONG *pcMethod,
        LPWSTR *pwszInterface);

    END_INTERFACE
} ICallIndirectVtbl;

interface ICallIndirect {
    CONST_VTBL ICallIndirectVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ICallIndirect_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ICallIndirect_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ICallIndirect_Release(This) (This)->lpVtbl->Release(This)
/*** ICallIndirect methods ***/
#define ICallIndirect_CallIndirect(This,phrReturn,iMethod,pvArgs,cbArgs) (This)->lpVtbl->CallIndirect(This,phrReturn,iMethod,pvArgs,cbArgs)
#define ICallIndirect_GetMethodInfo(This,iMethod,pInfo,pwszMethod) (This)->lpVtbl->GetMethodInfo(This,iMethod,pInfo,pwszMethod)
#define ICallIndirect_GetStackSize(This,iMethod,cbArgs) (This)->lpVtbl->GetStackSize(This,iMethod,cbArgs)
#define ICallIndirect_GetIID(This,piid,pfDerivesFromIDispatch,pcMethod,pwszInterface) (This)->lpVtbl->GetIID(This,piid,pfDerivesFromIDispatch,pcMethod,pwszInterface)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT ICallIndirect_QueryInterface(ICallIndirect* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG ICallIndirect_AddRef(ICallIndirect* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG ICallIndirect_Release(ICallIndirect* This) {
    return This->lpVtbl->Release(This);
}
/*** ICallIndirect methods ***/
static FORCEINLINE HRESULT ICallIndirect_CallIndirect(ICallIndirect* This,HRESULT *phrReturn,ULONG iMethod,void *pvArgs,ULONG *cbArgs) {
    return This->lpVtbl->CallIndirect(This,phrReturn,iMethod,pvArgs,cbArgs);
}
static FORCEINLINE HRESULT ICallIndirect_GetMethodInfo(ICallIndirect* This,ULONG iMethod,CALLFRAMEINFO *pInfo,LPWSTR *pwszMethod) {
    return This->lpVtbl->GetMethodInfo(This,iMethod,pInfo,pwszMethod);
}
static FORCEINLINE HRESULT ICallIndirect_GetStackSize(ICallIndirect* This,ULONG iMethod,ULONG *cbArgs) {
    return This->lpVtbl->GetStackSize(This,iMethod,cbArgs);
}
static FORCEINLINE HRESULT ICallIndirect_GetIID(ICallIndirect* This,IID *piid,BOOL *pfDerivesFromIDispatch,ULONG *pcMethod,LPWSTR *pwszInterface) {
    return This->lpVtbl->GetIID(This,piid,pfDerivesFromIDispatch,pcMethod,pwszInterface);
}
#endif
#endif

#endif


#endif  /* __ICallIndirect_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ICallInterceptor interface
 */
#ifndef __ICallInterceptor_INTERFACE_DEFINED__
#define __ICallInterceptor_INTERFACE_DEFINED__

DEFINE_GUID(IID_ICallInterceptor, 0x60c7ca75, 0x896d, 0x11d2, 0xb8,0xb6, 0x00,0xc0,0x4f,0xb9,0x61,0x8a);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("60c7ca75-896d-11d2-b8b6-00c04fb9618a")
ICallInterceptor : public ICallIndirect
{
    virtual HRESULT STDMETHODCALLTYPE RegisterSink(
        ICallFrameEvents *psink) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetRegisteredSink(
        ICallFrameEvents **ppsink) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ICallInterceptor, 0x60c7ca75, 0x896d, 0x11d2, 0xb8,0xb6, 0x00,0xc0,0x4f,0xb9,0x61,0x8a)
#endif
#else
typedef struct ICallInterceptorVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ICallInterceptor *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ICallInterceptor *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ICallInterceptor *This);

    /*** ICallIndirect methods ***/
    HRESULT (STDMETHODCALLTYPE *CallIndirect)(
        ICallInterceptor *This,
        HRESULT *phrReturn,
        ULONG iMethod,
        void *pvArgs,
        ULONG *cbArgs);

    HRESULT (STDMETHODCALLTYPE *GetMethodInfo)(
        ICallInterceptor *This,
        ULONG iMethod,
        CALLFRAMEINFO *pInfo,
        LPWSTR *pwszMethod);

    HRESULT (STDMETHODCALLTYPE *GetStackSize)(
        ICallInterceptor *This,
        ULONG iMethod,
        ULONG *cbArgs);

    HRESULT (STDMETHODCALLTYPE *GetIID)(
        ICallInterceptor *This,
        IID *piid,
        BOOL *pfDerivesFromIDispatch,
        ULONG *pcMethod,
        LPWSTR *pwszInterface);

    /*** ICallInterceptor methods ***/
    HRESULT (STDMETHODCALLTYPE *RegisterSink)(
        ICallInterceptor *This,
        ICallFrameEvents *psink);

    HRESULT (STDMETHODCALLTYPE *GetRegisteredSink)(
        ICallInterceptor *This,
        ICallFrameEvents **ppsink);

    END_INTERFACE
} ICallInterceptorVtbl;

interface ICallInterceptor {
    CONST_VTBL ICallInterceptorVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ICallInterceptor_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ICallInterceptor_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ICallInterceptor_Release(This) (This)->lpVtbl->Release(This)
/*** ICallIndirect methods ***/
#define ICallInterceptor_CallIndirect(This,phrReturn,iMethod,pvArgs,cbArgs) (This)->lpVtbl->CallIndirect(This,phrReturn,iMethod,pvArgs,cbArgs)
#define ICallInterceptor_GetMethodInfo(This,iMethod,pInfo,pwszMethod) (This)->lpVtbl->GetMethodInfo(This,iMethod,pInfo,pwszMethod)
#define ICallInterceptor_GetStackSize(This,iMethod,cbArgs) (This)->lpVtbl->GetStackSize(This,iMethod,cbArgs)
#define ICallInterceptor_GetIID(This,piid,pfDerivesFromIDispatch,pcMethod,pwszInterface) (This)->lpVtbl->GetIID(This,piid,pfDerivesFromIDispatch,pcMethod,pwszInterface)
/*** ICallInterceptor methods ***/
#define ICallInterceptor_RegisterSink(This,psink) (This)->lpVtbl->RegisterSink(This,psink)
#define ICallInterceptor_GetRegisteredSink(This,ppsink) (This)->lpVtbl->GetRegisteredSink(This,ppsink)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT ICallInterceptor_QueryInterface(ICallInterceptor* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG ICallInterceptor_AddRef(ICallInterceptor* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG ICallInterceptor_Release(ICallInterceptor* This) {
    return This->lpVtbl->Release(This);
}
/*** ICallIndirect methods ***/
static FORCEINLINE HRESULT ICallInterceptor_CallIndirect(ICallInterceptor* This,HRESULT *phrReturn,ULONG iMethod,void *pvArgs,ULONG *cbArgs) {
    return This->lpVtbl->CallIndirect(This,phrReturn,iMethod,pvArgs,cbArgs);
}
static FORCEINLINE HRESULT ICallInterceptor_GetMethodInfo(ICallInterceptor* This,ULONG iMethod,CALLFRAMEINFO *pInfo,LPWSTR *pwszMethod) {
    return This->lpVtbl->GetMethodInfo(This,iMethod,pInfo,pwszMethod);
}
static FORCEINLINE HRESULT ICallInterceptor_GetStackSize(ICallInterceptor* This,ULONG iMethod,ULONG *cbArgs) {
    return This->lpVtbl->GetStackSize(This,iMethod,cbArgs);
}
static FORCEINLINE HRESULT ICallInterceptor_GetIID(ICallInterceptor* This,IID *piid,BOOL *pfDerivesFromIDispatch,ULONG *pcMethod,LPWSTR *pwszInterface) {
    return This->lpVtbl->GetIID(This,piid,pfDerivesFromIDispatch,pcMethod,pwszInterface);
}
/*** ICallInterceptor methods ***/
static FORCEINLINE HRESULT ICallInterceptor_RegisterSink(ICallInterceptor* This,ICallFrameEvents *psink) {
    return This->lpVtbl->RegisterSink(This,psink);
}
static FORCEINLINE HRESULT ICallInterceptor_GetRegisteredSink(ICallInterceptor* This,ICallFrameEvents **ppsink) {
    return This->lpVtbl->GetRegisteredSink(This,ppsink);
}
#endif
#endif

#endif


#endif  /* __ICallInterceptor_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ICallFrameEvents interface
 */
#ifndef __ICallFrameEvents_INTERFACE_DEFINED__
#define __ICallFrameEvents_INTERFACE_DEFINED__

DEFINE_GUID(IID_ICallFrameEvents, 0xfd5e0843, 0xfc91, 0x11d0, 0x97,0xd7, 0x00,0xc0,0x4f,0xb9,0x61,0x8a);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("fd5e0843-fc91-11d0-97d7-00c04fb9618a")
ICallFrameEvents : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE OnCall(
        ICallFrame *pFrame) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ICallFrameEvents, 0xfd5e0843, 0xfc91, 0x11d0, 0x97,0xd7, 0x00,0xc0,0x4f,0xb9,0x61,0x8a)
#endif
#else
typedef struct ICallFrameEventsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ICallFrameEvents *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ICallFrameEvents *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ICallFrameEvents *This);

    /*** ICallFrameEvents methods ***/
    HRESULT (STDMETHODCALLTYPE *OnCall)(
        ICallFrameEvents *This,
        ICallFrame *pFrame);

    END_INTERFACE
} ICallFrameEventsVtbl;

interface ICallFrameEvents {
    CONST_VTBL ICallFrameEventsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ICallFrameEvents_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ICallFrameEvents_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ICallFrameEvents_Release(This) (This)->lpVtbl->Release(This)
/*** ICallFrameEvents methods ***/
#define ICallFrameEvents_OnCall(This,pFrame) (This)->lpVtbl->OnCall(This,pFrame)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT ICallFrameEvents_QueryInterface(ICallFrameEvents* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG ICallFrameEvents_AddRef(ICallFrameEvents* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG ICallFrameEvents_Release(ICallFrameEvents* This) {
    return This->lpVtbl->Release(This);
}
/*** ICallFrameEvents methods ***/
static FORCEINLINE HRESULT ICallFrameEvents_OnCall(ICallFrameEvents* This,ICallFrame *pFrame) {
    return This->lpVtbl->OnCall(This,pFrame);
}
#endif
#endif

#endif


#endif  /* __ICallFrameEvents_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ICallUnmarshal interface
 */
#ifndef __ICallUnmarshal_INTERFACE_DEFINED__
#define __ICallUnmarshal_INTERFACE_DEFINED__

DEFINE_GUID(IID_ICallUnmarshal, 0x5333b003, 0x2e42, 0x11d2, 0xb8,0x9d, 0x00,0xc0,0x4f,0xb9,0x61,0x8a);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("5333b003-2e42-11d2-b89d-00c04fb9618a")
ICallUnmarshal : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE Unmarshal(
        ULONG iMethod,
        PVOID pBuffer,
        ULONG cbBuffer,
        BOOL fForceBufferCopy,
        RPCOLEDATAREP dataRep,
        CALLFRAME_MARSHALCONTEXT *pcontext,
        ULONG *pcbUnmarshalled,
        ICallFrame **ppFrame) = 0;

    virtual HRESULT STDMETHODCALLTYPE ReleaseMarshalData(
        ULONG iMethod,
        PVOID pBuffer,
        ULONG cbBuffer,
        ULONG ibFirstRelease,
        RPCOLEDATAREP dataRep,
        CALLFRAME_MARSHALCONTEXT *pcontext) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ICallUnmarshal, 0x5333b003, 0x2e42, 0x11d2, 0xb8,0x9d, 0x00,0xc0,0x4f,0xb9,0x61,0x8a)
#endif
#else
typedef struct ICallUnmarshalVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ICallUnmarshal *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ICallUnmarshal *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ICallUnmarshal *This);

    /*** ICallUnmarshal methods ***/
    HRESULT (STDMETHODCALLTYPE *Unmarshal)(
        ICallUnmarshal *This,
        ULONG iMethod,
        PVOID pBuffer,
        ULONG cbBuffer,
        BOOL fForceBufferCopy,
        RPCOLEDATAREP dataRep,
        CALLFRAME_MARSHALCONTEXT *pcontext,
        ULONG *pcbUnmarshalled,
        ICallFrame **ppFrame);

    HRESULT (STDMETHODCALLTYPE *ReleaseMarshalData)(
        ICallUnmarshal *This,
        ULONG iMethod,
        PVOID pBuffer,
        ULONG cbBuffer,
        ULONG ibFirstRelease,
        RPCOLEDATAREP dataRep,
        CALLFRAME_MARSHALCONTEXT *pcontext);

    END_INTERFACE
} ICallUnmarshalVtbl;

interface ICallUnmarshal {
    CONST_VTBL ICallUnmarshalVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ICallUnmarshal_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ICallUnmarshal_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ICallUnmarshal_Release(This) (This)->lpVtbl->Release(This)
/*** ICallUnmarshal methods ***/
#define ICallUnmarshal_Unmarshal(This,iMethod,pBuffer,cbBuffer,fForceBufferCopy,dataRep,pcontext,pcbUnmarshalled,ppFrame) (This)->lpVtbl->Unmarshal(This,iMethod,pBuffer,cbBuffer,fForceBufferCopy,dataRep,pcontext,pcbUnmarshalled,ppFrame)
#define ICallUnmarshal_ReleaseMarshalData(This,iMethod,pBuffer,cbBuffer,ibFirstRelease,dataRep,pcontext) (This)->lpVtbl->ReleaseMarshalData(This,iMethod,pBuffer,cbBuffer,ibFirstRelease,dataRep,pcontext)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT ICallUnmarshal_QueryInterface(ICallUnmarshal* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG ICallUnmarshal_AddRef(ICallUnmarshal* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG ICallUnmarshal_Release(ICallUnmarshal* This) {
    return This->lpVtbl->Release(This);
}
/*** ICallUnmarshal methods ***/
static FORCEINLINE HRESULT ICallUnmarshal_Unmarshal(ICallUnmarshal* This,ULONG iMethod,PVOID pBuffer,ULONG cbBuffer,BOOL fForceBufferCopy,RPCOLEDATAREP dataRep,CALLFRAME_MARSHALCONTEXT *pcontext,ULONG *pcbUnmarshalled,ICallFrame **ppFrame) {
    return This->lpVtbl->Unmarshal(This,iMethod,pBuffer,cbBuffer,fForceBufferCopy,dataRep,pcontext,pcbUnmarshalled,ppFrame);
}
static FORCEINLINE HRESULT ICallUnmarshal_ReleaseMarshalData(ICallUnmarshal* This,ULONG iMethod,PVOID pBuffer,ULONG cbBuffer,ULONG ibFirstRelease,RPCOLEDATAREP dataRep,CALLFRAME_MARSHALCONTEXT *pcontext) {
    return This->lpVtbl->ReleaseMarshalData(This,iMethod,pBuffer,cbBuffer,ibFirstRelease,dataRep,pcontext);
}
#endif
#endif

#endif


#endif  /* __ICallUnmarshal_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ICallFrameWalker interface
 */
#ifndef __ICallFrameWalker_INTERFACE_DEFINED__
#define __ICallFrameWalker_INTERFACE_DEFINED__

DEFINE_GUID(IID_ICallFrameWalker, 0x08b23919, 0x392d, 0x11d2, 0xb8,0xa4, 0x00,0xc0,0x4f,0xb9,0x61,0x8a);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("08b23919-392d-11d2-b8a4-00c04fb9618a")
ICallFrameWalker : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE OnWalkInterface(
        REFIID iid,
        PVOID *ppvInterface,
        BOOL fIn,
        BOOL fOut) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ICallFrameWalker, 0x08b23919, 0x392d, 0x11d2, 0xb8,0xa4, 0x00,0xc0,0x4f,0xb9,0x61,0x8a)
#endif
#else
typedef struct ICallFrameWalkerVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ICallFrameWalker *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ICallFrameWalker *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ICallFrameWalker *This);

    /*** ICallFrameWalker methods ***/
    HRESULT (STDMETHODCALLTYPE *OnWalkInterface)(
        ICallFrameWalker *This,
        REFIID iid,
        PVOID *ppvInterface,
        BOOL fIn,
        BOOL fOut);

    END_INTERFACE
} ICallFrameWalkerVtbl;

interface ICallFrameWalker {
    CONST_VTBL ICallFrameWalkerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ICallFrameWalker_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ICallFrameWalker_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ICallFrameWalker_Release(This) (This)->lpVtbl->Release(This)
/*** ICallFrameWalker methods ***/
#define ICallFrameWalker_OnWalkInterface(This,iid,ppvInterface,fIn,fOut) (This)->lpVtbl->OnWalkInterface(This,iid,ppvInterface,fIn,fOut)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT ICallFrameWalker_QueryInterface(ICallFrameWalker* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG ICallFrameWalker_AddRef(ICallFrameWalker* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG ICallFrameWalker_Release(ICallFrameWalker* This) {
    return This->lpVtbl->Release(This);
}
/*** ICallFrameWalker methods ***/
static FORCEINLINE HRESULT ICallFrameWalker_OnWalkInterface(ICallFrameWalker* This,REFIID iid,PVOID *ppvInterface,BOOL fIn,BOOL fOut) {
    return This->lpVtbl->OnWalkInterface(This,iid,ppvInterface,fIn,fOut);
}
#endif
#endif

#endif


#endif  /* __ICallFrameWalker_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IInterfaceRelated interface
 */
#ifndef __IInterfaceRelated_INTERFACE_DEFINED__
#define __IInterfaceRelated_INTERFACE_DEFINED__

DEFINE_GUID(IID_IInterfaceRelated, 0xd1fb5a79, 0x7706, 0x11d1, 0xad,0xba, 0x00,0xc0,0x4f,0xc2,0xad,0xc0);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d1fb5a79-7706-11d1-adba-00c04fc2adc0")
IInterfaceRelated : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE SetIID(
        REFIID iid) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetIID(
        IID *piid) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IInterfaceRelated, 0xd1fb5a79, 0x7706, 0x11d1, 0xad,0xba, 0x00,0xc0,0x4f,0xc2,0xad,0xc0)
#endif
#else
typedef struct IInterfaceRelatedVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IInterfaceRelated *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IInterfaceRelated *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IInterfaceRelated *This);

    /*** IInterfaceRelated methods ***/
    HRESULT (STDMETHODCALLTYPE *SetIID)(
        IInterfaceRelated *This,
        REFIID iid);

    HRESULT (STDMETHODCALLTYPE *GetIID)(
        IInterfaceRelated *This,
        IID *piid);

    END_INTERFACE
} IInterfaceRelatedVtbl;

interface IInterfaceRelated {
    CONST_VTBL IInterfaceRelatedVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IInterfaceRelated_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IInterfaceRelated_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IInterfaceRelated_Release(This) (This)->lpVtbl->Release(This)
/*** IInterfaceRelated methods ***/
#define IInterfaceRelated_SetIID(This,iid) (This)->lpVtbl->SetIID(This,iid)
#define IInterfaceRelated_GetIID(This,piid) (This)->lpVtbl->GetIID(This,piid)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IInterfaceRelated_QueryInterface(IInterfaceRelated* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IInterfaceRelated_AddRef(IInterfaceRelated* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IInterfaceRelated_Release(IInterfaceRelated* This) {
    return This->lpVtbl->Release(This);
}
/*** IInterfaceRelated methods ***/
static FORCEINLINE HRESULT IInterfaceRelated_SetIID(IInterfaceRelated* This,REFIID iid) {
    return This->lpVtbl->SetIID(This,iid);
}
static FORCEINLINE HRESULT IInterfaceRelated_GetIID(IInterfaceRelated* This,IID *piid) {
    return This->lpVtbl->GetIID(This,piid);
}
#endif
#endif

#endif


#endif  /* __IInterfaceRelated_INTERFACE_DEFINED__ */

#define CALLFRAME_E_ALREADYINVOKED  _HRESULT_TYPEDEF_(  0x8004d090 )
#define CALLFRAME_E_COULDNTMAKECALL _HRESULT_TYPEDEF_(  0x8004d091 )
/*****************************************************************************
 * ICallFrameAPIs interface (v0.0)
 */
#ifndef __ICallFrameAPIs_INTERFACE_DEFINED__
#define __ICallFrameAPIs_INTERFACE_DEFINED__

extern RPC_IF_HANDLE ICallFrameAPIs_v0_0_c_ifspec;
extern RPC_IF_HANDLE ICallFrameAPIs_v0_0_s_ifspec;
HRESULT __stdcall CoGetInterceptor(
    REFIID iidIntercepted,
    IUnknown *punkOuter,
    REFIID iid,
    void **ppv);

HRESULT __stdcall CoGetInterceptorFromTypeInfo(
    REFIID iidIntercepted,
    IUnknown *punkOuter,
    ITypeInfo *typeInfo,
    REFIID iid,
    void **ppv);


#endif  /* __ICallFrameAPIs_INTERFACE_DEFINED__ */

#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) */
/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __callobj_h__ */
