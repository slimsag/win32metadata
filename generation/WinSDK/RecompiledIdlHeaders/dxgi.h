/*** Autogenerated by WIDL 5.0 from ./shared/dxgi.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __dxgi_h__
#define __dxgi_h__

/* Forward declarations */

#ifndef __IDXGIObject_FWD_DEFINED__
#define __IDXGIObject_FWD_DEFINED__
typedef interface IDXGIObject IDXGIObject;
#ifdef __cplusplus
interface IDXGIObject;
#endif /* __cplusplus */
#endif

#ifndef __IDXGIDeviceSubObject_FWD_DEFINED__
#define __IDXGIDeviceSubObject_FWD_DEFINED__
typedef interface IDXGIDeviceSubObject IDXGIDeviceSubObject;
#ifdef __cplusplus
interface IDXGIDeviceSubObject;
#endif /* __cplusplus */
#endif

#ifndef __IDXGIResource_FWD_DEFINED__
#define __IDXGIResource_FWD_DEFINED__
typedef interface IDXGIResource IDXGIResource;
#ifdef __cplusplus
interface IDXGIResource;
#endif /* __cplusplus */
#endif

#ifndef __IDXGIKeyedMutex_FWD_DEFINED__
#define __IDXGIKeyedMutex_FWD_DEFINED__
typedef interface IDXGIKeyedMutex IDXGIKeyedMutex;
#ifdef __cplusplus
interface IDXGIKeyedMutex;
#endif /* __cplusplus */
#endif

#ifndef __IDXGISurface_FWD_DEFINED__
#define __IDXGISurface_FWD_DEFINED__
typedef interface IDXGISurface IDXGISurface;
#ifdef __cplusplus
interface IDXGISurface;
#endif /* __cplusplus */
#endif

#ifndef __IDXGISurface1_FWD_DEFINED__
#define __IDXGISurface1_FWD_DEFINED__
typedef interface IDXGISurface1 IDXGISurface1;
#ifdef __cplusplus
interface IDXGISurface1;
#endif /* __cplusplus */
#endif

#ifndef __IDXGIAdapter_FWD_DEFINED__
#define __IDXGIAdapter_FWD_DEFINED__
typedef interface IDXGIAdapter IDXGIAdapter;
#ifdef __cplusplus
interface IDXGIAdapter;
#endif /* __cplusplus */
#endif

#ifndef __IDXGIOutput_FWD_DEFINED__
#define __IDXGIOutput_FWD_DEFINED__
typedef interface IDXGIOutput IDXGIOutput;
#ifdef __cplusplus
interface IDXGIOutput;
#endif /* __cplusplus */
#endif

#ifndef __IDXGISwapChain_FWD_DEFINED__
#define __IDXGISwapChain_FWD_DEFINED__
typedef interface IDXGISwapChain IDXGISwapChain;
#ifdef __cplusplus
interface IDXGISwapChain;
#endif /* __cplusplus */
#endif

#ifndef __IDXGIFactory_FWD_DEFINED__
#define __IDXGIFactory_FWD_DEFINED__
typedef interface IDXGIFactory IDXGIFactory;
#ifdef __cplusplus
interface IDXGIFactory;
#endif /* __cplusplus */
#endif

#ifndef __IDXGIDevice_FWD_DEFINED__
#define __IDXGIDevice_FWD_DEFINED__
typedef interface IDXGIDevice IDXGIDevice;
#ifdef __cplusplus
interface IDXGIDevice;
#endif /* __cplusplus */
#endif

#ifndef __IDXGIFactory1_FWD_DEFINED__
#define __IDXGIFactory1_FWD_DEFINED__
typedef interface IDXGIFactory1 IDXGIFactory1;
#ifdef __cplusplus
interface IDXGIFactory1;
#endif /* __cplusplus */
#endif

#ifndef __IDXGIAdapter1_FWD_DEFINED__
#define __IDXGIAdapter1_FWD_DEFINED__
typedef interface IDXGIAdapter1 IDXGIAdapter1;
#ifdef __cplusplus
interface IDXGIAdapter1;
#endif /* __cplusplus */
#endif

#ifndef __IDXGIDevice1_FWD_DEFINED__
#define __IDXGIDevice1_FWD_DEFINED__
typedef interface IDXGIDevice1 IDXGIDevice1;
#ifdef __cplusplus
interface IDXGIDevice1;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <oaidl.h>
#include <ocidl.h>
#include <dxgicommon.h>
#include <dxgitype.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <winapifamily.h>
#define DXGI_CPU_ACCESS_NONE    ( 0 )
#define DXGI_CPU_ACCESS_DYNAMIC    ( 1 )
#define DXGI_CPU_ACCESS_READ_WRITE    ( 2 )
#define DXGI_CPU_ACCESS_SCRATCH    ( 3 )
#define DXGI_CPU_ACCESS_FIELD        15
#define DXGI_USAGE_SHADER_INPUT             0x00000010UL
#define DXGI_USAGE_RENDER_TARGET_OUTPUT     0x00000020UL
#define DXGI_USAGE_BACK_BUFFER              0x00000040UL
#define DXGI_USAGE_SHARED                   0x00000080UL
#define DXGI_USAGE_READ_ONLY                0x00000100UL
#define DXGI_USAGE_DISCARD_ON_PRESENT       0x00000200UL
#define DXGI_USAGE_UNORDERED_ACCESS         0x00000400UL
typedef UINT DXGI_USAGE;
typedef struct DXGI_FRAME_STATISTICS {
    UINT PresentCount;
    UINT PresentRefreshCount;
    UINT SyncRefreshCount;
    LARGE_INTEGER SyncQPCTime;
    LARGE_INTEGER SyncGPUTime;
} DXGI_FRAME_STATISTICS;
typedef struct DXGI_MAPPED_RECT {
    INT Pitch;
    BYTE *pBits;
} DXGI_MAPPED_RECT;
#ifdef __midl
#ifndef LUID_DEFINED
#define LUID_DEFINED 1
typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID;
typedef struct _LUID *PLUID;
#endif
#endif
typedef struct DXGI_ADAPTER_DESC {
    WCHAR Description[128];
    UINT VendorId;
    UINT DeviceId;
    UINT SubSysId;
    UINT Revision;
    SIZE_T DedicatedVideoMemory;
    SIZE_T DedicatedSystemMemory;
    SIZE_T SharedSystemMemory;
    LUID AdapterLuid;
} DXGI_ADAPTER_DESC;
#if !defined(HMONITOR_DECLARED) && !defined(HMONITOR) && (WINVER < 0x0500)
#define HMONITOR_DECLARED
#if 0
typedef HANDLE HMONITOR;
#endif
DECLARE_HANDLE(HMONITOR);
#endif
typedef struct DXGI_OUTPUT_DESC {
    WCHAR DeviceName[32];
    RECT DesktopCoordinates;
    BOOL AttachedToDesktop;
    DXGI_MODE_ROTATION Rotation;
    HMONITOR Monitor;
} DXGI_OUTPUT_DESC;
typedef struct DXGI_SHARED_RESOURCE {
    HANDLE Handle;
} DXGI_SHARED_RESOURCE;
#define DXGI_RESOURCE_PRIORITY_MINIMUM (0x28000000)

#define DXGI_RESOURCE_PRIORITY_LOW (0x50000000)

#define DXGI_RESOURCE_PRIORITY_NORMAL (0x78000000)

#define DXGI_RESOURCE_PRIORITY_HIGH (0xa0000000)

#define DXGI_RESOURCE_PRIORITY_MAXIMUM (0xc8000000)

typedef enum DXGI_RESIDENCY {
    DXGI_RESIDENCY_FULLY_RESIDENT = 1,
    DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY = 2,
    DXGI_RESIDENCY_EVICTED_TO_DISK = 3
} DXGI_RESIDENCY;
typedef struct DXGI_SURFACE_DESC {
    UINT Width;
    UINT Height;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
} DXGI_SURFACE_DESC;
typedef enum DXGI_SWAP_EFFECT {
    DXGI_SWAP_EFFECT_DISCARD = 0,
    DXGI_SWAP_EFFECT_SEQUENTIAL = 1,
    DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL = 3,
    DXGI_SWAP_EFFECT_FLIP_DISCARD = 4
} DXGI_SWAP_EFFECT;
typedef enum DXGI_SWAP_CHAIN_FLAG {
    DXGI_SWAP_CHAIN_FLAG_NONPREROTATED = 1,
    DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH = 2,
    DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE = 4,
    DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT = 8,
    DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER = 16,
    DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY = 32,
    DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT = 64,
    DXGI_SWAP_CHAIN_FLAG_FOREGROUND_LAYER = 128,
    DXGI_SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO = 256,
    DXGI_SWAP_CHAIN_FLAG_YUV_VIDEO = 512,
    DXGI_SWAP_CHAIN_FLAG_HW_PROTECTED = 1024,
    DXGI_SWAP_CHAIN_FLAG_ALLOW_TEARING = 2048,
    DXGI_SWAP_CHAIN_FLAG_RESTRICTED_TO_ALL_HOLOGRAPHIC_DISPLAYS = 4096
} DXGI_SWAP_CHAIN_FLAG;
typedef struct DXGI_SWAP_CHAIN_DESC {
    DXGI_MODE_DESC BufferDesc;
    DXGI_SAMPLE_DESC SampleDesc;
    DXGI_USAGE BufferUsage;
    UINT BufferCount;
    HWND OutputWindow;
    BOOL Windowed;
    DXGI_SWAP_EFFECT SwapEffect;
    UINT Flags;
} DXGI_SWAP_CHAIN_DESC;
/*****************************************************************************
 * IDXGIObject interface
 */
#ifndef __IDXGIObject_INTERFACE_DEFINED__
#define __IDXGIObject_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIObject, 0xaec22fb8, 0x76f3, 0x4639, 0x9b,0xe0, 0x28,0xeb,0x43,0xa6,0x7a,0x2e);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("aec22fb8-76f3-4639-9be0-28eb43a67a2e")
IDXGIObject : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE SetPrivateData(
        REFGUID Name,
        UINT DataSize,
        const void *pData) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetPrivateDataInterface(
        REFGUID Name,
        const IUnknown *pUnknown) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetPrivateData(
        REFGUID Name,
        UINT *pDataSize,
        void *pData) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetParent(
        REFIID riid,
        void **ppParent) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIObject, 0xaec22fb8, 0x76f3, 0x4639, 0x9b,0xe0, 0x28,0xeb,0x43,0xa6,0x7a,0x2e)
#endif
#else
typedef struct IDXGIObjectVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIObject *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIObject *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIObject *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGIObject *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGIObject *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGIObject *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGIObject *This,
        REFIID riid,
        void **ppParent);

    END_INTERFACE
} IDXGIObjectVtbl;

interface IDXGIObject {
    CONST_VTBL IDXGIObjectVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIObject_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIObject_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIObject_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGIObject_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGIObject_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGIObject_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGIObject_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIObject_QueryInterface(IDXGIObject* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIObject_AddRef(IDXGIObject* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIObject_Release(IDXGIObject* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGIObject_SetPrivateData(IDXGIObject* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGIObject_SetPrivateDataInterface(IDXGIObject* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGIObject_GetPrivateData(IDXGIObject* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGIObject_GetParent(IDXGIObject* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
#endif
#endif

#endif


#endif  /* __IDXGIObject_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDXGIDeviceSubObject interface
 */
#ifndef __IDXGIDeviceSubObject_INTERFACE_DEFINED__
#define __IDXGIDeviceSubObject_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIDeviceSubObject, 0x3d3e0379, 0xf9de, 0x4d58, 0xbb,0x6c, 0x18,0xd6,0x29,0x92,0xf1,0xa6);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("3d3e0379-f9de-4d58-bb6c-18d62992f1a6")
IDXGIDeviceSubObject : public IDXGIObject
{
    virtual HRESULT STDMETHODCALLTYPE GetDevice(
        REFIID riid,
        void **ppDevice) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIDeviceSubObject, 0x3d3e0379, 0xf9de, 0x4d58, 0xbb,0x6c, 0x18,0xd6,0x29,0x92,0xf1,0xa6)
#endif
#else
typedef struct IDXGIDeviceSubObjectVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIDeviceSubObject *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIDeviceSubObject *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIDeviceSubObject *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGIDeviceSubObject *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGIDeviceSubObject *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGIDeviceSubObject *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGIDeviceSubObject *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIDeviceSubObject methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDevice)(
        IDXGIDeviceSubObject *This,
        REFIID riid,
        void **ppDevice);

    END_INTERFACE
} IDXGIDeviceSubObjectVtbl;

interface IDXGIDeviceSubObject {
    CONST_VTBL IDXGIDeviceSubObjectVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIDeviceSubObject_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIDeviceSubObject_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIDeviceSubObject_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGIDeviceSubObject_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGIDeviceSubObject_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGIDeviceSubObject_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGIDeviceSubObject_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIDeviceSubObject methods ***/
#define IDXGIDeviceSubObject_GetDevice(This,riid,ppDevice) (This)->lpVtbl->GetDevice(This,riid,ppDevice)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIDeviceSubObject_QueryInterface(IDXGIDeviceSubObject* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIDeviceSubObject_AddRef(IDXGIDeviceSubObject* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIDeviceSubObject_Release(IDXGIDeviceSubObject* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGIDeviceSubObject_SetPrivateData(IDXGIDeviceSubObject* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGIDeviceSubObject_SetPrivateDataInterface(IDXGIDeviceSubObject* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGIDeviceSubObject_GetPrivateData(IDXGIDeviceSubObject* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGIDeviceSubObject_GetParent(IDXGIDeviceSubObject* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIDeviceSubObject methods ***/
static FORCEINLINE HRESULT IDXGIDeviceSubObject_GetDevice(IDXGIDeviceSubObject* This,REFIID riid,void **ppDevice) {
    return This->lpVtbl->GetDevice(This,riid,ppDevice);
}
#endif
#endif

#endif


#endif  /* __IDXGIDeviceSubObject_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDXGIResource interface
 */
#ifndef __IDXGIResource_INTERFACE_DEFINED__
#define __IDXGIResource_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIResource, 0x035f3ab4, 0x482e, 0x4e50, 0xb4,0x1f, 0x8a,0x7f,0x8b,0xd8,0x96,0x0b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("035f3ab4-482e-4e50-b41f-8a7f8bd8960b")
IDXGIResource : public IDXGIDeviceSubObject
{
    virtual HRESULT STDMETHODCALLTYPE GetSharedHandle(
        HANDLE *pSharedHandle) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetUsage(
        DXGI_USAGE *pUsage) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetEvictionPriority(
        UINT EvictionPriority) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetEvictionPriority(
        UINT *pEvictionPriority) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIResource, 0x035f3ab4, 0x482e, 0x4e50, 0xb4,0x1f, 0x8a,0x7f,0x8b,0xd8,0x96,0x0b)
#endif
#else
typedef struct IDXGIResourceVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIResource *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIResource *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIResource *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGIResource *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGIResource *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGIResource *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGIResource *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIDeviceSubObject methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDevice)(
        IDXGIResource *This,
        REFIID riid,
        void **ppDevice);

    /*** IDXGIResource methods ***/
    HRESULT (STDMETHODCALLTYPE *GetSharedHandle)(
        IDXGIResource *This,
        HANDLE *pSharedHandle);

    HRESULT (STDMETHODCALLTYPE *GetUsage)(
        IDXGIResource *This,
        DXGI_USAGE *pUsage);

    HRESULT (STDMETHODCALLTYPE *SetEvictionPriority)(
        IDXGIResource *This,
        UINT EvictionPriority);

    HRESULT (STDMETHODCALLTYPE *GetEvictionPriority)(
        IDXGIResource *This,
        UINT *pEvictionPriority);

    END_INTERFACE
} IDXGIResourceVtbl;

interface IDXGIResource {
    CONST_VTBL IDXGIResourceVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIResource_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIResource_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIResource_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGIResource_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGIResource_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGIResource_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGIResource_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIDeviceSubObject methods ***/
#define IDXGIResource_GetDevice(This,riid,ppDevice) (This)->lpVtbl->GetDevice(This,riid,ppDevice)
/*** IDXGIResource methods ***/
#define IDXGIResource_GetSharedHandle(This,pSharedHandle) (This)->lpVtbl->GetSharedHandle(This,pSharedHandle)
#define IDXGIResource_GetUsage(This,pUsage) (This)->lpVtbl->GetUsage(This,pUsage)
#define IDXGIResource_SetEvictionPriority(This,EvictionPriority) (This)->lpVtbl->SetEvictionPriority(This,EvictionPriority)
#define IDXGIResource_GetEvictionPriority(This,pEvictionPriority) (This)->lpVtbl->GetEvictionPriority(This,pEvictionPriority)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIResource_QueryInterface(IDXGIResource* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIResource_AddRef(IDXGIResource* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIResource_Release(IDXGIResource* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGIResource_SetPrivateData(IDXGIResource* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGIResource_SetPrivateDataInterface(IDXGIResource* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGIResource_GetPrivateData(IDXGIResource* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGIResource_GetParent(IDXGIResource* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIDeviceSubObject methods ***/
static FORCEINLINE HRESULT IDXGIResource_GetDevice(IDXGIResource* This,REFIID riid,void **ppDevice) {
    return This->lpVtbl->GetDevice(This,riid,ppDevice);
}
/*** IDXGIResource methods ***/
static FORCEINLINE HRESULT IDXGIResource_GetSharedHandle(IDXGIResource* This,HANDLE *pSharedHandle) {
    return This->lpVtbl->GetSharedHandle(This,pSharedHandle);
}
static FORCEINLINE HRESULT IDXGIResource_GetUsage(IDXGIResource* This,DXGI_USAGE *pUsage) {
    return This->lpVtbl->GetUsage(This,pUsage);
}
static FORCEINLINE HRESULT IDXGIResource_SetEvictionPriority(IDXGIResource* This,UINT EvictionPriority) {
    return This->lpVtbl->SetEvictionPriority(This,EvictionPriority);
}
static FORCEINLINE HRESULT IDXGIResource_GetEvictionPriority(IDXGIResource* This,UINT *pEvictionPriority) {
    return This->lpVtbl->GetEvictionPriority(This,pEvictionPriority);
}
#endif
#endif

#endif


#endif  /* __IDXGIResource_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDXGIKeyedMutex interface
 */
#ifndef __IDXGIKeyedMutex_INTERFACE_DEFINED__
#define __IDXGIKeyedMutex_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIKeyedMutex, 0x9d8e1289, 0xd7b3, 0x465f, 0x81,0x26, 0x25,0x0e,0x34,0x9a,0xf8,0x5d);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("9d8e1289-d7b3-465f-8126-250e349af85d")
IDXGIKeyedMutex : public IDXGIDeviceSubObject
{
    virtual HRESULT STDMETHODCALLTYPE AcquireSync(
        UINT64 Key,
        DWORD dwMilliseconds) = 0;

    virtual HRESULT STDMETHODCALLTYPE ReleaseSync(
        UINT64 Key) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIKeyedMutex, 0x9d8e1289, 0xd7b3, 0x465f, 0x81,0x26, 0x25,0x0e,0x34,0x9a,0xf8,0x5d)
#endif
#else
typedef struct IDXGIKeyedMutexVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIKeyedMutex *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIKeyedMutex *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIKeyedMutex *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGIKeyedMutex *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGIKeyedMutex *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGIKeyedMutex *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGIKeyedMutex *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIDeviceSubObject methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDevice)(
        IDXGIKeyedMutex *This,
        REFIID riid,
        void **ppDevice);

    /*** IDXGIKeyedMutex methods ***/
    HRESULT (STDMETHODCALLTYPE *AcquireSync)(
        IDXGIKeyedMutex *This,
        UINT64 Key,
        DWORD dwMilliseconds);

    HRESULT (STDMETHODCALLTYPE *ReleaseSync)(
        IDXGIKeyedMutex *This,
        UINT64 Key);

    END_INTERFACE
} IDXGIKeyedMutexVtbl;

interface IDXGIKeyedMutex {
    CONST_VTBL IDXGIKeyedMutexVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIKeyedMutex_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIKeyedMutex_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIKeyedMutex_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGIKeyedMutex_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGIKeyedMutex_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGIKeyedMutex_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGIKeyedMutex_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIDeviceSubObject methods ***/
#define IDXGIKeyedMutex_GetDevice(This,riid,ppDevice) (This)->lpVtbl->GetDevice(This,riid,ppDevice)
/*** IDXGIKeyedMutex methods ***/
#define IDXGIKeyedMutex_AcquireSync(This,Key,dwMilliseconds) (This)->lpVtbl->AcquireSync(This,Key,dwMilliseconds)
#define IDXGIKeyedMutex_ReleaseSync(This,Key) (This)->lpVtbl->ReleaseSync(This,Key)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIKeyedMutex_QueryInterface(IDXGIKeyedMutex* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIKeyedMutex_AddRef(IDXGIKeyedMutex* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIKeyedMutex_Release(IDXGIKeyedMutex* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGIKeyedMutex_SetPrivateData(IDXGIKeyedMutex* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGIKeyedMutex_SetPrivateDataInterface(IDXGIKeyedMutex* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGIKeyedMutex_GetPrivateData(IDXGIKeyedMutex* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGIKeyedMutex_GetParent(IDXGIKeyedMutex* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIDeviceSubObject methods ***/
static FORCEINLINE HRESULT IDXGIKeyedMutex_GetDevice(IDXGIKeyedMutex* This,REFIID riid,void **ppDevice) {
    return This->lpVtbl->GetDevice(This,riid,ppDevice);
}
/*** IDXGIKeyedMutex methods ***/
static FORCEINLINE HRESULT IDXGIKeyedMutex_AcquireSync(IDXGIKeyedMutex* This,UINT64 Key,DWORD dwMilliseconds) {
    return This->lpVtbl->AcquireSync(This,Key,dwMilliseconds);
}
static FORCEINLINE HRESULT IDXGIKeyedMutex_ReleaseSync(IDXGIKeyedMutex* This,UINT64 Key) {
    return This->lpVtbl->ReleaseSync(This,Key);
}
#endif
#endif

#endif


#endif  /* __IDXGIKeyedMutex_INTERFACE_DEFINED__ */

#define DXGI_MAP_READ (1)

#define DXGI_MAP_WRITE (2)

#define DXGI_MAP_DISCARD (4)

/*****************************************************************************
 * IDXGISurface interface
 */
#ifndef __IDXGISurface_INTERFACE_DEFINED__
#define __IDXGISurface_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGISurface, 0xcafcb56c, 0x6ac3, 0x4889, 0xbf,0x47, 0x9e,0x23,0xbb,0xd2,0x60,0xec);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("cafcb56c-6ac3-4889-bf47-9e23bbd260ec")
IDXGISurface : public IDXGIDeviceSubObject
{
    virtual HRESULT STDMETHODCALLTYPE GetDesc(
        DXGI_SURFACE_DESC *pDesc) = 0;

    virtual HRESULT STDMETHODCALLTYPE Map(
        DXGI_MAPPED_RECT *pLockedRect,
        UINT MapFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE Unmap(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGISurface, 0xcafcb56c, 0x6ac3, 0x4889, 0xbf,0x47, 0x9e,0x23,0xbb,0xd2,0x60,0xec)
#endif
#else
typedef struct IDXGISurfaceVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGISurface *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGISurface *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGISurface *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGISurface *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGISurface *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGISurface *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGISurface *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIDeviceSubObject methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDevice)(
        IDXGISurface *This,
        REFIID riid,
        void **ppDevice);

    /*** IDXGISurface methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDesc)(
        IDXGISurface *This,
        DXGI_SURFACE_DESC *pDesc);

    HRESULT (STDMETHODCALLTYPE *Map)(
        IDXGISurface *This,
        DXGI_MAPPED_RECT *pLockedRect,
        UINT MapFlags);

    HRESULT (STDMETHODCALLTYPE *Unmap)(
        IDXGISurface *This);

    END_INTERFACE
} IDXGISurfaceVtbl;

interface IDXGISurface {
    CONST_VTBL IDXGISurfaceVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGISurface_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGISurface_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGISurface_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGISurface_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGISurface_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGISurface_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGISurface_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIDeviceSubObject methods ***/
#define IDXGISurface_GetDevice(This,riid,ppDevice) (This)->lpVtbl->GetDevice(This,riid,ppDevice)
/*** IDXGISurface methods ***/
#define IDXGISurface_GetDesc(This,pDesc) (This)->lpVtbl->GetDesc(This,pDesc)
#define IDXGISurface_Map(This,pLockedRect,MapFlags) (This)->lpVtbl->Map(This,pLockedRect,MapFlags)
#define IDXGISurface_Unmap(This) (This)->lpVtbl->Unmap(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGISurface_QueryInterface(IDXGISurface* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGISurface_AddRef(IDXGISurface* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGISurface_Release(IDXGISurface* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGISurface_SetPrivateData(IDXGISurface* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGISurface_SetPrivateDataInterface(IDXGISurface* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGISurface_GetPrivateData(IDXGISurface* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGISurface_GetParent(IDXGISurface* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIDeviceSubObject methods ***/
static FORCEINLINE HRESULT IDXGISurface_GetDevice(IDXGISurface* This,REFIID riid,void **ppDevice) {
    return This->lpVtbl->GetDevice(This,riid,ppDevice);
}
/*** IDXGISurface methods ***/
static FORCEINLINE HRESULT IDXGISurface_GetDesc(IDXGISurface* This,DXGI_SURFACE_DESC *pDesc) {
    return This->lpVtbl->GetDesc(This,pDesc);
}
static FORCEINLINE HRESULT IDXGISurface_Map(IDXGISurface* This,DXGI_MAPPED_RECT *pLockedRect,UINT MapFlags) {
    return This->lpVtbl->Map(This,pLockedRect,MapFlags);
}
static FORCEINLINE HRESULT IDXGISurface_Unmap(IDXGISurface* This) {
    return This->lpVtbl->Unmap(This);
}
#endif
#endif

#endif


#endif  /* __IDXGISurface_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDXGISurface1 interface
 */
#ifndef __IDXGISurface1_INTERFACE_DEFINED__
#define __IDXGISurface1_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGISurface1, 0x4ae63092, 0x6327, 0x4c1b, 0x80,0xae, 0xbf,0xe1,0x2e,0xa3,0x2b,0x86);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("4ae63092-6327-4c1b-80ae-bfe12ea32b86")
IDXGISurface1 : public IDXGISurface
{
    virtual HRESULT STDMETHODCALLTYPE GetDC(
        BOOL Discard,
        HDC *phdc) = 0;

    virtual HRESULT STDMETHODCALLTYPE ReleaseDC(
        RECT *pDirtyRect) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGISurface1, 0x4ae63092, 0x6327, 0x4c1b, 0x80,0xae, 0xbf,0xe1,0x2e,0xa3,0x2b,0x86)
#endif
#else
typedef struct IDXGISurface1Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGISurface1 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGISurface1 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGISurface1 *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGISurface1 *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGISurface1 *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGISurface1 *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGISurface1 *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIDeviceSubObject methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDevice)(
        IDXGISurface1 *This,
        REFIID riid,
        void **ppDevice);

    /*** IDXGISurface methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDesc)(
        IDXGISurface1 *This,
        DXGI_SURFACE_DESC *pDesc);

    HRESULT (STDMETHODCALLTYPE *Map)(
        IDXGISurface1 *This,
        DXGI_MAPPED_RECT *pLockedRect,
        UINT MapFlags);

    HRESULT (STDMETHODCALLTYPE *Unmap)(
        IDXGISurface1 *This);

    /*** IDXGISurface1 methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDC)(
        IDXGISurface1 *This,
        BOOL Discard,
        HDC *phdc);

    HRESULT (STDMETHODCALLTYPE *ReleaseDC)(
        IDXGISurface1 *This,
        RECT *pDirtyRect);

    END_INTERFACE
} IDXGISurface1Vtbl;

interface IDXGISurface1 {
    CONST_VTBL IDXGISurface1Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGISurface1_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGISurface1_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGISurface1_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGISurface1_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGISurface1_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGISurface1_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGISurface1_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIDeviceSubObject methods ***/
#define IDXGISurface1_GetDevice(This,riid,ppDevice) (This)->lpVtbl->GetDevice(This,riid,ppDevice)
/*** IDXGISurface methods ***/
#define IDXGISurface1_GetDesc(This,pDesc) (This)->lpVtbl->GetDesc(This,pDesc)
#define IDXGISurface1_Map(This,pLockedRect,MapFlags) (This)->lpVtbl->Map(This,pLockedRect,MapFlags)
#define IDXGISurface1_Unmap(This) (This)->lpVtbl->Unmap(This)
/*** IDXGISurface1 methods ***/
#define IDXGISurface1_GetDC(This,Discard,phdc) (This)->lpVtbl->GetDC(This,Discard,phdc)
#define IDXGISurface1_ReleaseDC(This,pDirtyRect) (This)->lpVtbl->ReleaseDC(This,pDirtyRect)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGISurface1_QueryInterface(IDXGISurface1* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGISurface1_AddRef(IDXGISurface1* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGISurface1_Release(IDXGISurface1* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGISurface1_SetPrivateData(IDXGISurface1* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGISurface1_SetPrivateDataInterface(IDXGISurface1* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGISurface1_GetPrivateData(IDXGISurface1* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGISurface1_GetParent(IDXGISurface1* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIDeviceSubObject methods ***/
static FORCEINLINE HRESULT IDXGISurface1_GetDevice(IDXGISurface1* This,REFIID riid,void **ppDevice) {
    return This->lpVtbl->GetDevice(This,riid,ppDevice);
}
/*** IDXGISurface methods ***/
static FORCEINLINE HRESULT IDXGISurface1_GetDesc(IDXGISurface1* This,DXGI_SURFACE_DESC *pDesc) {
    return This->lpVtbl->GetDesc(This,pDesc);
}
static FORCEINLINE HRESULT IDXGISurface1_Map(IDXGISurface1* This,DXGI_MAPPED_RECT *pLockedRect,UINT MapFlags) {
    return This->lpVtbl->Map(This,pLockedRect,MapFlags);
}
static FORCEINLINE HRESULT IDXGISurface1_Unmap(IDXGISurface1* This) {
    return This->lpVtbl->Unmap(This);
}
/*** IDXGISurface1 methods ***/
static FORCEINLINE HRESULT IDXGISurface1_GetDC(IDXGISurface1* This,BOOL Discard,HDC *phdc) {
    return This->lpVtbl->GetDC(This,Discard,phdc);
}
static FORCEINLINE HRESULT IDXGISurface1_ReleaseDC(IDXGISurface1* This,RECT *pDirtyRect) {
    return This->lpVtbl->ReleaseDC(This,pDirtyRect);
}
#endif
#endif

#endif


#endif  /* __IDXGISurface1_INTERFACE_DEFINED__ */

#ifndef __IDXGIOutput_FWD_DEFINED__
#define __IDXGIOutput_FWD_DEFINED__
typedef interface IDXGIOutput IDXGIOutput;
#ifdef __cplusplus
interface IDXGIOutput;
#endif /* __cplusplus */
#endif

/*****************************************************************************
 * IDXGIAdapter interface
 */
#ifndef __IDXGIAdapter_INTERFACE_DEFINED__
#define __IDXGIAdapter_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIAdapter, 0x2411e7e1, 0x12ac, 0x4ccf, 0xbd,0x14, 0x97,0x98,0xe8,0x53,0x4d,0xc0);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("2411e7e1-12ac-4ccf-bd14-9798e8534dc0")
IDXGIAdapter : public IDXGIObject
{
    virtual HRESULT STDMETHODCALLTYPE EnumOutputs(
        UINT Output,
        IDXGIOutput **ppOutput) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetDesc(
        DXGI_ADAPTER_DESC *pDesc) = 0;

    virtual HRESULT STDMETHODCALLTYPE CheckInterfaceSupport(
        REFGUID InterfaceName,
        LARGE_INTEGER *pUMDVersion) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIAdapter, 0x2411e7e1, 0x12ac, 0x4ccf, 0xbd,0x14, 0x97,0x98,0xe8,0x53,0x4d,0xc0)
#endif
#else
typedef struct IDXGIAdapterVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIAdapter *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIAdapter *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIAdapter *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGIAdapter *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGIAdapter *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGIAdapter *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGIAdapter *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIAdapter methods ***/
    HRESULT (STDMETHODCALLTYPE *EnumOutputs)(
        IDXGIAdapter *This,
        UINT Output,
        IDXGIOutput **ppOutput);

    HRESULT (STDMETHODCALLTYPE *GetDesc)(
        IDXGIAdapter *This,
        DXGI_ADAPTER_DESC *pDesc);

    HRESULT (STDMETHODCALLTYPE *CheckInterfaceSupport)(
        IDXGIAdapter *This,
        REFGUID InterfaceName,
        LARGE_INTEGER *pUMDVersion);

    END_INTERFACE
} IDXGIAdapterVtbl;

interface IDXGIAdapter {
    CONST_VTBL IDXGIAdapterVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIAdapter_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIAdapter_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIAdapter_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGIAdapter_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGIAdapter_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGIAdapter_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGIAdapter_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIAdapter methods ***/
#define IDXGIAdapter_EnumOutputs(This,Output,ppOutput) (This)->lpVtbl->EnumOutputs(This,Output,ppOutput)
#define IDXGIAdapter_GetDesc(This,pDesc) (This)->lpVtbl->GetDesc(This,pDesc)
#define IDXGIAdapter_CheckInterfaceSupport(This,InterfaceName,pUMDVersion) (This)->lpVtbl->CheckInterfaceSupport(This,InterfaceName,pUMDVersion)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIAdapter_QueryInterface(IDXGIAdapter* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIAdapter_AddRef(IDXGIAdapter* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIAdapter_Release(IDXGIAdapter* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGIAdapter_SetPrivateData(IDXGIAdapter* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGIAdapter_SetPrivateDataInterface(IDXGIAdapter* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGIAdapter_GetPrivateData(IDXGIAdapter* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGIAdapter_GetParent(IDXGIAdapter* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIAdapter methods ***/
static FORCEINLINE HRESULT IDXGIAdapter_EnumOutputs(IDXGIAdapter* This,UINT Output,IDXGIOutput **ppOutput) {
    return This->lpVtbl->EnumOutputs(This,Output,ppOutput);
}
static FORCEINLINE HRESULT IDXGIAdapter_GetDesc(IDXGIAdapter* This,DXGI_ADAPTER_DESC *pDesc) {
    return This->lpVtbl->GetDesc(This,pDesc);
}
static FORCEINLINE HRESULT IDXGIAdapter_CheckInterfaceSupport(IDXGIAdapter* This,REFGUID InterfaceName,LARGE_INTEGER *pUMDVersion) {
    return This->lpVtbl->CheckInterfaceSupport(This,InterfaceName,pUMDVersion);
}
#endif
#endif

#endif


#endif  /* __IDXGIAdapter_INTERFACE_DEFINED__ */

#define DXGI_ENUM_MODES_INTERLACED (1)

#define DXGI_ENUM_MODES_SCALING (2)

/*****************************************************************************
 * IDXGIOutput interface
 */
#ifndef __IDXGIOutput_INTERFACE_DEFINED__
#define __IDXGIOutput_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIOutput, 0xae02eedb, 0xc735, 0x4690, 0x8d,0x52, 0x5a,0x8d,0xc2,0x02,0x13,0xaa);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ae02eedb-c735-4690-8d52-5a8dc20213aa")
IDXGIOutput : public IDXGIObject
{
    virtual HRESULT STDMETHODCALLTYPE GetDesc(
        DXGI_OUTPUT_DESC *pDesc) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetDisplayModeList(
        DXGI_FORMAT EnumFormat,
        UINT Flags,
        UINT *pNumModes,
        DXGI_MODE_DESC *pDesc) = 0;

    virtual HRESULT STDMETHODCALLTYPE FindClosestMatchingMode(
        const DXGI_MODE_DESC *pModeToMatch,
        DXGI_MODE_DESC *pClosestMatch,
        IUnknown *pConcernedDevice) = 0;

    virtual HRESULT STDMETHODCALLTYPE WaitForVBlank(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE TakeOwnership(
        IUnknown *pDevice,
        BOOL Exclusive) = 0;

    virtual void STDMETHODCALLTYPE ReleaseOwnership(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetGammaControlCapabilities(
        DXGI_GAMMA_CONTROL_CAPABILITIES *pGammaCaps) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetGammaControl(
        const DXGI_GAMMA_CONTROL *pArray) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetGammaControl(
        DXGI_GAMMA_CONTROL *pArray) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetDisplaySurface(
        IDXGISurface *pScanoutSurface) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetDisplaySurfaceData(
        IDXGISurface *pDestination) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFrameStatistics(
        DXGI_FRAME_STATISTICS *pStats) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIOutput, 0xae02eedb, 0xc735, 0x4690, 0x8d,0x52, 0x5a,0x8d,0xc2,0x02,0x13,0xaa)
#endif
#else
typedef struct IDXGIOutputVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIOutput *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIOutput *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIOutput *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGIOutput *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGIOutput *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGIOutput *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGIOutput *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIOutput methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDesc)(
        IDXGIOutput *This,
        DXGI_OUTPUT_DESC *pDesc);

    HRESULT (STDMETHODCALLTYPE *GetDisplayModeList)(
        IDXGIOutput *This,
        DXGI_FORMAT EnumFormat,
        UINT Flags,
        UINT *pNumModes,
        DXGI_MODE_DESC *pDesc);

    HRESULT (STDMETHODCALLTYPE *FindClosestMatchingMode)(
        IDXGIOutput *This,
        const DXGI_MODE_DESC *pModeToMatch,
        DXGI_MODE_DESC *pClosestMatch,
        IUnknown *pConcernedDevice);

    HRESULT (STDMETHODCALLTYPE *WaitForVBlank)(
        IDXGIOutput *This);

    HRESULT (STDMETHODCALLTYPE *TakeOwnership)(
        IDXGIOutput *This,
        IUnknown *pDevice,
        BOOL Exclusive);

    void (STDMETHODCALLTYPE *ReleaseOwnership)(
        IDXGIOutput *This);

    HRESULT (STDMETHODCALLTYPE *GetGammaControlCapabilities)(
        IDXGIOutput *This,
        DXGI_GAMMA_CONTROL_CAPABILITIES *pGammaCaps);

    HRESULT (STDMETHODCALLTYPE *SetGammaControl)(
        IDXGIOutput *This,
        const DXGI_GAMMA_CONTROL *pArray);

    HRESULT (STDMETHODCALLTYPE *GetGammaControl)(
        IDXGIOutput *This,
        DXGI_GAMMA_CONTROL *pArray);

    HRESULT (STDMETHODCALLTYPE *SetDisplaySurface)(
        IDXGIOutput *This,
        IDXGISurface *pScanoutSurface);

    HRESULT (STDMETHODCALLTYPE *GetDisplaySurfaceData)(
        IDXGIOutput *This,
        IDXGISurface *pDestination);

    HRESULT (STDMETHODCALLTYPE *GetFrameStatistics)(
        IDXGIOutput *This,
        DXGI_FRAME_STATISTICS *pStats);

    END_INTERFACE
} IDXGIOutputVtbl;

interface IDXGIOutput {
    CONST_VTBL IDXGIOutputVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIOutput_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIOutput_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIOutput_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGIOutput_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGIOutput_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGIOutput_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGIOutput_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIOutput methods ***/
#define IDXGIOutput_GetDesc(This,pDesc) (This)->lpVtbl->GetDesc(This,pDesc)
#define IDXGIOutput_GetDisplayModeList(This,EnumFormat,Flags,pNumModes,pDesc) (This)->lpVtbl->GetDisplayModeList(This,EnumFormat,Flags,pNumModes,pDesc)
#define IDXGIOutput_FindClosestMatchingMode(This,pModeToMatch,pClosestMatch,pConcernedDevice) (This)->lpVtbl->FindClosestMatchingMode(This,pModeToMatch,pClosestMatch,pConcernedDevice)
#define IDXGIOutput_WaitForVBlank(This) (This)->lpVtbl->WaitForVBlank(This)
#define IDXGIOutput_TakeOwnership(This,pDevice,Exclusive) (This)->lpVtbl->TakeOwnership(This,pDevice,Exclusive)
#define IDXGIOutput_ReleaseOwnership(This) (This)->lpVtbl->ReleaseOwnership(This)
#define IDXGIOutput_GetGammaControlCapabilities(This,pGammaCaps) (This)->lpVtbl->GetGammaControlCapabilities(This,pGammaCaps)
#define IDXGIOutput_SetGammaControl(This,pArray) (This)->lpVtbl->SetGammaControl(This,pArray)
#define IDXGIOutput_GetGammaControl(This,pArray) (This)->lpVtbl->GetGammaControl(This,pArray)
#define IDXGIOutput_SetDisplaySurface(This,pScanoutSurface) (This)->lpVtbl->SetDisplaySurface(This,pScanoutSurface)
#define IDXGIOutput_GetDisplaySurfaceData(This,pDestination) (This)->lpVtbl->GetDisplaySurfaceData(This,pDestination)
#define IDXGIOutput_GetFrameStatistics(This,pStats) (This)->lpVtbl->GetFrameStatistics(This,pStats)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIOutput_QueryInterface(IDXGIOutput* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIOutput_AddRef(IDXGIOutput* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIOutput_Release(IDXGIOutput* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGIOutput_SetPrivateData(IDXGIOutput* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGIOutput_SetPrivateDataInterface(IDXGIOutput* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGIOutput_GetPrivateData(IDXGIOutput* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGIOutput_GetParent(IDXGIOutput* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIOutput methods ***/
static FORCEINLINE HRESULT IDXGIOutput_GetDesc(IDXGIOutput* This,DXGI_OUTPUT_DESC *pDesc) {
    return This->lpVtbl->GetDesc(This,pDesc);
}
static FORCEINLINE HRESULT IDXGIOutput_GetDisplayModeList(IDXGIOutput* This,DXGI_FORMAT EnumFormat,UINT Flags,UINT *pNumModes,DXGI_MODE_DESC *pDesc) {
    return This->lpVtbl->GetDisplayModeList(This,EnumFormat,Flags,pNumModes,pDesc);
}
static FORCEINLINE HRESULT IDXGIOutput_FindClosestMatchingMode(IDXGIOutput* This,const DXGI_MODE_DESC *pModeToMatch,DXGI_MODE_DESC *pClosestMatch,IUnknown *pConcernedDevice) {
    return This->lpVtbl->FindClosestMatchingMode(This,pModeToMatch,pClosestMatch,pConcernedDevice);
}
static FORCEINLINE HRESULT IDXGIOutput_WaitForVBlank(IDXGIOutput* This) {
    return This->lpVtbl->WaitForVBlank(This);
}
static FORCEINLINE HRESULT IDXGIOutput_TakeOwnership(IDXGIOutput* This,IUnknown *pDevice,BOOL Exclusive) {
    return This->lpVtbl->TakeOwnership(This,pDevice,Exclusive);
}
static FORCEINLINE void IDXGIOutput_ReleaseOwnership(IDXGIOutput* This) {
    This->lpVtbl->ReleaseOwnership(This);
}
static FORCEINLINE HRESULT IDXGIOutput_GetGammaControlCapabilities(IDXGIOutput* This,DXGI_GAMMA_CONTROL_CAPABILITIES *pGammaCaps) {
    return This->lpVtbl->GetGammaControlCapabilities(This,pGammaCaps);
}
static FORCEINLINE HRESULT IDXGIOutput_SetGammaControl(IDXGIOutput* This,const DXGI_GAMMA_CONTROL *pArray) {
    return This->lpVtbl->SetGammaControl(This,pArray);
}
static FORCEINLINE HRESULT IDXGIOutput_GetGammaControl(IDXGIOutput* This,DXGI_GAMMA_CONTROL *pArray) {
    return This->lpVtbl->GetGammaControl(This,pArray);
}
static FORCEINLINE HRESULT IDXGIOutput_SetDisplaySurface(IDXGIOutput* This,IDXGISurface *pScanoutSurface) {
    return This->lpVtbl->SetDisplaySurface(This,pScanoutSurface);
}
static FORCEINLINE HRESULT IDXGIOutput_GetDisplaySurfaceData(IDXGIOutput* This,IDXGISurface *pDestination) {
    return This->lpVtbl->GetDisplaySurfaceData(This,pDestination);
}
static FORCEINLINE HRESULT IDXGIOutput_GetFrameStatistics(IDXGIOutput* This,DXGI_FRAME_STATISTICS *pStats) {
    return This->lpVtbl->GetFrameStatistics(This,pStats);
}
#endif
#endif

#endif


#endif  /* __IDXGIOutput_INTERFACE_DEFINED__ */

#define DXGI_MAX_SWAP_CHAIN_BUFFERS        ( 16 )
#define DXGI_PRESENT_TEST                      0x00000001UL
#define DXGI_PRESENT_DO_NOT_SEQUENCE           0x00000002UL
#define DXGI_PRESENT_RESTART                   0x00000004UL
#define DXGI_PRESENT_DO_NOT_WAIT               0x00000008UL
#define DXGI_PRESENT_STEREO_PREFER_RIGHT       0x00000010UL
#define DXGI_PRESENT_STEREO_TEMPORARY_MONO     0x00000020UL
#define DXGI_PRESENT_RESTRICT_TO_OUTPUT        0x00000040UL
#define DXGI_PRESENT_USE_DURATION              0x00000100UL
#define DXGI_PRESENT_ALLOW_TEARING             0x00000200UL
/*****************************************************************************
 * IDXGISwapChain interface
 */
#ifndef __IDXGISwapChain_INTERFACE_DEFINED__
#define __IDXGISwapChain_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGISwapChain, 0x310d36a0, 0xd2e7, 0x4c0a, 0xaa,0x04, 0x6a,0x9d,0x23,0xb8,0x88,0x6a);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("310d36a0-d2e7-4c0a-aa04-6a9d23b8886a")
IDXGISwapChain : public IDXGIDeviceSubObject
{
    virtual HRESULT STDMETHODCALLTYPE Present(
        UINT SyncInterval,
        UINT Flags) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetBuffer(
        UINT Buffer,
        REFIID riid,
        void **ppSurface) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetFullscreenState(
        BOOL Fullscreen,
        IDXGIOutput *pTarget) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFullscreenState(
        BOOL *pFullscreen,
        IDXGIOutput **ppTarget) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetDesc(
        DXGI_SWAP_CHAIN_DESC *pDesc) = 0;

    virtual HRESULT STDMETHODCALLTYPE ResizeBuffers(
        UINT BufferCount,
        UINT Width,
        UINT Height,
        DXGI_FORMAT NewFormat,
        UINT SwapChainFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE ResizeTarget(
        const DXGI_MODE_DESC *pNewTargetParameters) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetContainingOutput(
        IDXGIOutput **ppOutput) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFrameStatistics(
        DXGI_FRAME_STATISTICS *pStats) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetLastPresentCount(
        UINT *pLastPresentCount) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGISwapChain, 0x310d36a0, 0xd2e7, 0x4c0a, 0xaa,0x04, 0x6a,0x9d,0x23,0xb8,0x88,0x6a)
#endif
#else
typedef struct IDXGISwapChainVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGISwapChain *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGISwapChain *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGISwapChain *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGISwapChain *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGISwapChain *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGISwapChain *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGISwapChain *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIDeviceSubObject methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDevice)(
        IDXGISwapChain *This,
        REFIID riid,
        void **ppDevice);

    /*** IDXGISwapChain methods ***/
    HRESULT (STDMETHODCALLTYPE *Present)(
        IDXGISwapChain *This,
        UINT SyncInterval,
        UINT Flags);

    HRESULT (STDMETHODCALLTYPE *GetBuffer)(
        IDXGISwapChain *This,
        UINT Buffer,
        REFIID riid,
        void **ppSurface);

    HRESULT (STDMETHODCALLTYPE *SetFullscreenState)(
        IDXGISwapChain *This,
        BOOL Fullscreen,
        IDXGIOutput *pTarget);

    HRESULT (STDMETHODCALLTYPE *GetFullscreenState)(
        IDXGISwapChain *This,
        BOOL *pFullscreen,
        IDXGIOutput **ppTarget);

    HRESULT (STDMETHODCALLTYPE *GetDesc)(
        IDXGISwapChain *This,
        DXGI_SWAP_CHAIN_DESC *pDesc);

    HRESULT (STDMETHODCALLTYPE *ResizeBuffers)(
        IDXGISwapChain *This,
        UINT BufferCount,
        UINT Width,
        UINT Height,
        DXGI_FORMAT NewFormat,
        UINT SwapChainFlags);

    HRESULT (STDMETHODCALLTYPE *ResizeTarget)(
        IDXGISwapChain *This,
        const DXGI_MODE_DESC *pNewTargetParameters);

    HRESULT (STDMETHODCALLTYPE *GetContainingOutput)(
        IDXGISwapChain *This,
        IDXGIOutput **ppOutput);

    HRESULT (STDMETHODCALLTYPE *GetFrameStatistics)(
        IDXGISwapChain *This,
        DXGI_FRAME_STATISTICS *pStats);

    HRESULT (STDMETHODCALLTYPE *GetLastPresentCount)(
        IDXGISwapChain *This,
        UINT *pLastPresentCount);

    END_INTERFACE
} IDXGISwapChainVtbl;

interface IDXGISwapChain {
    CONST_VTBL IDXGISwapChainVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGISwapChain_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGISwapChain_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGISwapChain_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGISwapChain_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGISwapChain_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGISwapChain_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGISwapChain_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIDeviceSubObject methods ***/
#define IDXGISwapChain_GetDevice(This,riid,ppDevice) (This)->lpVtbl->GetDevice(This,riid,ppDevice)
/*** IDXGISwapChain methods ***/
#define IDXGISwapChain_Present(This,SyncInterval,Flags) (This)->lpVtbl->Present(This,SyncInterval,Flags)
#define IDXGISwapChain_GetBuffer(This,Buffer,riid,ppSurface) (This)->lpVtbl->GetBuffer(This,Buffer,riid,ppSurface)
#define IDXGISwapChain_SetFullscreenState(This,Fullscreen,pTarget) (This)->lpVtbl->SetFullscreenState(This,Fullscreen,pTarget)
#define IDXGISwapChain_GetFullscreenState(This,pFullscreen,ppTarget) (This)->lpVtbl->GetFullscreenState(This,pFullscreen,ppTarget)
#define IDXGISwapChain_GetDesc(This,pDesc) (This)->lpVtbl->GetDesc(This,pDesc)
#define IDXGISwapChain_ResizeBuffers(This,BufferCount,Width,Height,NewFormat,SwapChainFlags) (This)->lpVtbl->ResizeBuffers(This,BufferCount,Width,Height,NewFormat,SwapChainFlags)
#define IDXGISwapChain_ResizeTarget(This,pNewTargetParameters) (This)->lpVtbl->ResizeTarget(This,pNewTargetParameters)
#define IDXGISwapChain_GetContainingOutput(This,ppOutput) (This)->lpVtbl->GetContainingOutput(This,ppOutput)
#define IDXGISwapChain_GetFrameStatistics(This,pStats) (This)->lpVtbl->GetFrameStatistics(This,pStats)
#define IDXGISwapChain_GetLastPresentCount(This,pLastPresentCount) (This)->lpVtbl->GetLastPresentCount(This,pLastPresentCount)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGISwapChain_QueryInterface(IDXGISwapChain* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGISwapChain_AddRef(IDXGISwapChain* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGISwapChain_Release(IDXGISwapChain* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGISwapChain_SetPrivateData(IDXGISwapChain* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGISwapChain_SetPrivateDataInterface(IDXGISwapChain* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGISwapChain_GetPrivateData(IDXGISwapChain* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGISwapChain_GetParent(IDXGISwapChain* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIDeviceSubObject methods ***/
static FORCEINLINE HRESULT IDXGISwapChain_GetDevice(IDXGISwapChain* This,REFIID riid,void **ppDevice) {
    return This->lpVtbl->GetDevice(This,riid,ppDevice);
}
/*** IDXGISwapChain methods ***/
static FORCEINLINE HRESULT IDXGISwapChain_Present(IDXGISwapChain* This,UINT SyncInterval,UINT Flags) {
    return This->lpVtbl->Present(This,SyncInterval,Flags);
}
static FORCEINLINE HRESULT IDXGISwapChain_GetBuffer(IDXGISwapChain* This,UINT Buffer,REFIID riid,void **ppSurface) {
    return This->lpVtbl->GetBuffer(This,Buffer,riid,ppSurface);
}
static FORCEINLINE HRESULT IDXGISwapChain_SetFullscreenState(IDXGISwapChain* This,BOOL Fullscreen,IDXGIOutput *pTarget) {
    return This->lpVtbl->SetFullscreenState(This,Fullscreen,pTarget);
}
static FORCEINLINE HRESULT IDXGISwapChain_GetFullscreenState(IDXGISwapChain* This,BOOL *pFullscreen,IDXGIOutput **ppTarget) {
    return This->lpVtbl->GetFullscreenState(This,pFullscreen,ppTarget);
}
static FORCEINLINE HRESULT IDXGISwapChain_GetDesc(IDXGISwapChain* This,DXGI_SWAP_CHAIN_DESC *pDesc) {
    return This->lpVtbl->GetDesc(This,pDesc);
}
static FORCEINLINE HRESULT IDXGISwapChain_ResizeBuffers(IDXGISwapChain* This,UINT BufferCount,UINT Width,UINT Height,DXGI_FORMAT NewFormat,UINT SwapChainFlags) {
    return This->lpVtbl->ResizeBuffers(This,BufferCount,Width,Height,NewFormat,SwapChainFlags);
}
static FORCEINLINE HRESULT IDXGISwapChain_ResizeTarget(IDXGISwapChain* This,const DXGI_MODE_DESC *pNewTargetParameters) {
    return This->lpVtbl->ResizeTarget(This,pNewTargetParameters);
}
static FORCEINLINE HRESULT IDXGISwapChain_GetContainingOutput(IDXGISwapChain* This,IDXGIOutput **ppOutput) {
    return This->lpVtbl->GetContainingOutput(This,ppOutput);
}
static FORCEINLINE HRESULT IDXGISwapChain_GetFrameStatistics(IDXGISwapChain* This,DXGI_FRAME_STATISTICS *pStats) {
    return This->lpVtbl->GetFrameStatistics(This,pStats);
}
static FORCEINLINE HRESULT IDXGISwapChain_GetLastPresentCount(IDXGISwapChain* This,UINT *pLastPresentCount) {
    return This->lpVtbl->GetLastPresentCount(This,pLastPresentCount);
}
#endif
#endif

#endif


#endif  /* __IDXGISwapChain_INTERFACE_DEFINED__ */

#define DXGI_MWA_NO_WINDOW_CHANGES      ( 1 << 0 )
#define DXGI_MWA_NO_ALT_ENTER           ( 1 << 1 )
#define DXGI_MWA_NO_PRINT_SCREEN        ( 1 << 2 )
#define DXGI_MWA_VALID                  ( 0x7 )
/*****************************************************************************
 * IDXGIFactory interface
 */
#ifndef __IDXGIFactory_INTERFACE_DEFINED__
#define __IDXGIFactory_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIFactory, 0x7b7166ec, 0x21c7, 0x44ae, 0xb2,0x1a, 0xc9,0xae,0x32,0x1a,0xe3,0x69);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("7b7166ec-21c7-44ae-b21a-c9ae321ae369")
IDXGIFactory : public IDXGIObject
{
    virtual HRESULT STDMETHODCALLTYPE EnumAdapters(
        UINT Adapter,
        IDXGIAdapter **ppAdapter) = 0;

    virtual HRESULT STDMETHODCALLTYPE MakeWindowAssociation(
        HWND WindowHandle,
        UINT Flags) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetWindowAssociation(
        HWND *pWindowHandle) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateSwapChain(
        IUnknown *pDevice,
        DXGI_SWAP_CHAIN_DESC *pDesc,
        IDXGISwapChain **ppSwapChain) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateSoftwareAdapter(
        HMODULE Module,
        IDXGIAdapter **ppAdapter) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIFactory, 0x7b7166ec, 0x21c7, 0x44ae, 0xb2,0x1a, 0xc9,0xae,0x32,0x1a,0xe3,0x69)
#endif
#else
typedef struct IDXGIFactoryVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIFactory *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIFactory *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIFactory *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGIFactory *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGIFactory *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGIFactory *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGIFactory *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIFactory methods ***/
    HRESULT (STDMETHODCALLTYPE *EnumAdapters)(
        IDXGIFactory *This,
        UINT Adapter,
        IDXGIAdapter **ppAdapter);

    HRESULT (STDMETHODCALLTYPE *MakeWindowAssociation)(
        IDXGIFactory *This,
        HWND WindowHandle,
        UINT Flags);

    HRESULT (STDMETHODCALLTYPE *GetWindowAssociation)(
        IDXGIFactory *This,
        HWND *pWindowHandle);

    HRESULT (STDMETHODCALLTYPE *CreateSwapChain)(
        IDXGIFactory *This,
        IUnknown *pDevice,
        DXGI_SWAP_CHAIN_DESC *pDesc,
        IDXGISwapChain **ppSwapChain);

    HRESULT (STDMETHODCALLTYPE *CreateSoftwareAdapter)(
        IDXGIFactory *This,
        HMODULE Module,
        IDXGIAdapter **ppAdapter);

    END_INTERFACE
} IDXGIFactoryVtbl;

interface IDXGIFactory {
    CONST_VTBL IDXGIFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIFactory_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIFactory_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIFactory_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGIFactory_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGIFactory_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGIFactory_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGIFactory_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIFactory methods ***/
#define IDXGIFactory_EnumAdapters(This,Adapter,ppAdapter) (This)->lpVtbl->EnumAdapters(This,Adapter,ppAdapter)
#define IDXGIFactory_MakeWindowAssociation(This,WindowHandle,Flags) (This)->lpVtbl->MakeWindowAssociation(This,WindowHandle,Flags)
#define IDXGIFactory_GetWindowAssociation(This,pWindowHandle) (This)->lpVtbl->GetWindowAssociation(This,pWindowHandle)
#define IDXGIFactory_CreateSwapChain(This,pDevice,pDesc,ppSwapChain) (This)->lpVtbl->CreateSwapChain(This,pDevice,pDesc,ppSwapChain)
#define IDXGIFactory_CreateSoftwareAdapter(This,Module,ppAdapter) (This)->lpVtbl->CreateSoftwareAdapter(This,Module,ppAdapter)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIFactory_QueryInterface(IDXGIFactory* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIFactory_AddRef(IDXGIFactory* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIFactory_Release(IDXGIFactory* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGIFactory_SetPrivateData(IDXGIFactory* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGIFactory_SetPrivateDataInterface(IDXGIFactory* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGIFactory_GetPrivateData(IDXGIFactory* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGIFactory_GetParent(IDXGIFactory* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIFactory methods ***/
static FORCEINLINE HRESULT IDXGIFactory_EnumAdapters(IDXGIFactory* This,UINT Adapter,IDXGIAdapter **ppAdapter) {
    return This->lpVtbl->EnumAdapters(This,Adapter,ppAdapter);
}
static FORCEINLINE HRESULT IDXGIFactory_MakeWindowAssociation(IDXGIFactory* This,HWND WindowHandle,UINT Flags) {
    return This->lpVtbl->MakeWindowAssociation(This,WindowHandle,Flags);
}
static FORCEINLINE HRESULT IDXGIFactory_GetWindowAssociation(IDXGIFactory* This,HWND *pWindowHandle) {
    return This->lpVtbl->GetWindowAssociation(This,pWindowHandle);
}
static FORCEINLINE HRESULT IDXGIFactory_CreateSwapChain(IDXGIFactory* This,IUnknown *pDevice,DXGI_SWAP_CHAIN_DESC *pDesc,IDXGISwapChain **ppSwapChain) {
    return This->lpVtbl->CreateSwapChain(This,pDevice,pDesc,ppSwapChain);
}
static FORCEINLINE HRESULT IDXGIFactory_CreateSoftwareAdapter(IDXGIFactory* This,HMODULE Module,IDXGIAdapter **ppAdapter) {
    return This->lpVtbl->CreateSoftwareAdapter(This,Module,ppAdapter);
}
#endif
#endif

#endif


#endif  /* __IDXGIFactory_INTERFACE_DEFINED__ */

#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
HRESULT WINAPI CreateDXGIFactory(REFIID riid, _COM_Outptr_ void **ppFactory);
#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) */
HRESULT WINAPI CreateDXGIFactory1(REFIID riid, _COM_Outptr_ void **ppFactory);
/*****************************************************************************
 * IDXGIDevice interface
 */
#ifndef __IDXGIDevice_INTERFACE_DEFINED__
#define __IDXGIDevice_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIDevice, 0x54ec77fa, 0x1377, 0x44e6, 0x8c,0x32, 0x88,0xfd,0x5f,0x44,0xc8,0x4c);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("54ec77fa-1377-44e6-8c32-88fd5f44c84c")
IDXGIDevice : public IDXGIObject
{
    virtual HRESULT STDMETHODCALLTYPE GetAdapter(
        IDXGIAdapter **pAdapter) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateSurface(
        const DXGI_SURFACE_DESC *pDesc,
        UINT NumSurfaces,
        DXGI_USAGE Usage,
        const DXGI_SHARED_RESOURCE *pSharedResource,
        IDXGISurface **ppSurface) = 0;

    virtual HRESULT STDMETHODCALLTYPE QueryResourceResidency(
        IUnknown *const *ppResources,
        DXGI_RESIDENCY *pResidencyStatus,
        UINT NumResources) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetGPUThreadPriority(
        INT Priority) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetGPUThreadPriority(
        INT *pPriority) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIDevice, 0x54ec77fa, 0x1377, 0x44e6, 0x8c,0x32, 0x88,0xfd,0x5f,0x44,0xc8,0x4c)
#endif
#else
typedef struct IDXGIDeviceVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIDevice *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIDevice *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIDevice *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGIDevice *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGIDevice *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGIDevice *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGIDevice *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIDevice methods ***/
    HRESULT (STDMETHODCALLTYPE *GetAdapter)(
        IDXGIDevice *This,
        IDXGIAdapter **pAdapter);

    HRESULT (STDMETHODCALLTYPE *CreateSurface)(
        IDXGIDevice *This,
        const DXGI_SURFACE_DESC *pDesc,
        UINT NumSurfaces,
        DXGI_USAGE Usage,
        const DXGI_SHARED_RESOURCE *pSharedResource,
        IDXGISurface **ppSurface);

    HRESULT (STDMETHODCALLTYPE *QueryResourceResidency)(
        IDXGIDevice *This,
        IUnknown *const *ppResources,
        DXGI_RESIDENCY *pResidencyStatus,
        UINT NumResources);

    HRESULT (STDMETHODCALLTYPE *SetGPUThreadPriority)(
        IDXGIDevice *This,
        INT Priority);

    HRESULT (STDMETHODCALLTYPE *GetGPUThreadPriority)(
        IDXGIDevice *This,
        INT *pPriority);

    END_INTERFACE
} IDXGIDeviceVtbl;

interface IDXGIDevice {
    CONST_VTBL IDXGIDeviceVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIDevice_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIDevice_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIDevice_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGIDevice_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGIDevice_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGIDevice_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGIDevice_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIDevice methods ***/
#define IDXGIDevice_GetAdapter(This,pAdapter) (This)->lpVtbl->GetAdapter(This,pAdapter)
#define IDXGIDevice_CreateSurface(This,pDesc,NumSurfaces,Usage,pSharedResource,ppSurface) (This)->lpVtbl->CreateSurface(This,pDesc,NumSurfaces,Usage,pSharedResource,ppSurface)
#define IDXGIDevice_QueryResourceResidency(This,ppResources,pResidencyStatus,NumResources) (This)->lpVtbl->QueryResourceResidency(This,ppResources,pResidencyStatus,NumResources)
#define IDXGIDevice_SetGPUThreadPriority(This,Priority) (This)->lpVtbl->SetGPUThreadPriority(This,Priority)
#define IDXGIDevice_GetGPUThreadPriority(This,pPriority) (This)->lpVtbl->GetGPUThreadPriority(This,pPriority)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIDevice_QueryInterface(IDXGIDevice* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIDevice_AddRef(IDXGIDevice* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIDevice_Release(IDXGIDevice* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGIDevice_SetPrivateData(IDXGIDevice* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGIDevice_SetPrivateDataInterface(IDXGIDevice* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGIDevice_GetPrivateData(IDXGIDevice* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGIDevice_GetParent(IDXGIDevice* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIDevice methods ***/
static FORCEINLINE HRESULT IDXGIDevice_GetAdapter(IDXGIDevice* This,IDXGIAdapter **pAdapter) {
    return This->lpVtbl->GetAdapter(This,pAdapter);
}
static FORCEINLINE HRESULT IDXGIDevice_CreateSurface(IDXGIDevice* This,const DXGI_SURFACE_DESC *pDesc,UINT NumSurfaces,DXGI_USAGE Usage,const DXGI_SHARED_RESOURCE *pSharedResource,IDXGISurface **ppSurface) {
    return This->lpVtbl->CreateSurface(This,pDesc,NumSurfaces,Usage,pSharedResource,ppSurface);
}
static FORCEINLINE HRESULT IDXGIDevice_QueryResourceResidency(IDXGIDevice* This,IUnknown *const *ppResources,DXGI_RESIDENCY *pResidencyStatus,UINT NumResources) {
    return This->lpVtbl->QueryResourceResidency(This,ppResources,pResidencyStatus,NumResources);
}
static FORCEINLINE HRESULT IDXGIDevice_SetGPUThreadPriority(IDXGIDevice* This,INT Priority) {
    return This->lpVtbl->SetGPUThreadPriority(This,Priority);
}
static FORCEINLINE HRESULT IDXGIDevice_GetGPUThreadPriority(IDXGIDevice* This,INT *pPriority) {
    return This->lpVtbl->GetGPUThreadPriority(This,pPriority);
}
#endif
#endif

#endif


#endif  /* __IDXGIDevice_INTERFACE_DEFINED__ */

typedef enum DXGI_ADAPTER_FLAG {
    DXGI_ADAPTER_FLAG_NONE = 0,
    DXGI_ADAPTER_FLAG_REMOTE = 1,
    DXGI_ADAPTER_FLAG_SOFTWARE = 2,
    DXGI_ADAPTER_FLAG_FORCE_DWORD = 0xffffffff
} DXGI_ADAPTER_FLAG;
typedef struct DXGI_ADAPTER_DESC1 {
    WCHAR Description[128];
    UINT VendorId;
    UINT DeviceId;
    UINT SubSysId;
    UINT Revision;
    SIZE_T DedicatedVideoMemory;
    SIZE_T DedicatedSystemMemory;
    SIZE_T SharedSystemMemory;
    LUID AdapterLuid;
    UINT Flags;
} DXGI_ADAPTER_DESC1;
typedef struct DXGI_DISPLAY_COLOR_SPACE {
    FLOAT PrimaryCoordinates[8][2];
    FLOAT WhitePoints[16][2];
} DXGI_DISPLAY_COLOR_SPACE;
#ifndef __IDXGIAdapter1_FWD_DEFINED__
#define __IDXGIAdapter1_FWD_DEFINED__
typedef interface IDXGIAdapter1 IDXGIAdapter1;
#ifdef __cplusplus
interface IDXGIAdapter1;
#endif /* __cplusplus */
#endif

/*****************************************************************************
 * IDXGIFactory1 interface
 */
#ifndef __IDXGIFactory1_INTERFACE_DEFINED__
#define __IDXGIFactory1_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIFactory1, 0x770aae78, 0xf26f, 0x4dba, 0xa8,0x29, 0x25,0x3c,0x83,0xd1,0xb3,0x87);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("770aae78-f26f-4dba-a829-253c83d1b387")
IDXGIFactory1 : public IDXGIFactory
{
    virtual HRESULT STDMETHODCALLTYPE EnumAdapters1(
        UINT Adapter,
        IDXGIAdapter1 **ppAdapter) = 0;

    virtual BOOL STDMETHODCALLTYPE IsCurrent(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIFactory1, 0x770aae78, 0xf26f, 0x4dba, 0xa8,0x29, 0x25,0x3c,0x83,0xd1,0xb3,0x87)
#endif
#else
typedef struct IDXGIFactory1Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIFactory1 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIFactory1 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIFactory1 *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGIFactory1 *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGIFactory1 *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGIFactory1 *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGIFactory1 *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIFactory methods ***/
    HRESULT (STDMETHODCALLTYPE *EnumAdapters)(
        IDXGIFactory1 *This,
        UINT Adapter,
        IDXGIAdapter **ppAdapter);

    HRESULT (STDMETHODCALLTYPE *MakeWindowAssociation)(
        IDXGIFactory1 *This,
        HWND WindowHandle,
        UINT Flags);

    HRESULT (STDMETHODCALLTYPE *GetWindowAssociation)(
        IDXGIFactory1 *This,
        HWND *pWindowHandle);

    HRESULT (STDMETHODCALLTYPE *CreateSwapChain)(
        IDXGIFactory1 *This,
        IUnknown *pDevice,
        DXGI_SWAP_CHAIN_DESC *pDesc,
        IDXGISwapChain **ppSwapChain);

    HRESULT (STDMETHODCALLTYPE *CreateSoftwareAdapter)(
        IDXGIFactory1 *This,
        HMODULE Module,
        IDXGIAdapter **ppAdapter);

    /*** IDXGIFactory1 methods ***/
    HRESULT (STDMETHODCALLTYPE *EnumAdapters1)(
        IDXGIFactory1 *This,
        UINT Adapter,
        IDXGIAdapter1 **ppAdapter);

    BOOL (STDMETHODCALLTYPE *IsCurrent)(
        IDXGIFactory1 *This);

    END_INTERFACE
} IDXGIFactory1Vtbl;

interface IDXGIFactory1 {
    CONST_VTBL IDXGIFactory1Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIFactory1_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIFactory1_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIFactory1_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGIFactory1_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGIFactory1_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGIFactory1_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGIFactory1_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIFactory methods ***/
#define IDXGIFactory1_EnumAdapters(This,Adapter,ppAdapter) (This)->lpVtbl->EnumAdapters(This,Adapter,ppAdapter)
#define IDXGIFactory1_MakeWindowAssociation(This,WindowHandle,Flags) (This)->lpVtbl->MakeWindowAssociation(This,WindowHandle,Flags)
#define IDXGIFactory1_GetWindowAssociation(This,pWindowHandle) (This)->lpVtbl->GetWindowAssociation(This,pWindowHandle)
#define IDXGIFactory1_CreateSwapChain(This,pDevice,pDesc,ppSwapChain) (This)->lpVtbl->CreateSwapChain(This,pDevice,pDesc,ppSwapChain)
#define IDXGIFactory1_CreateSoftwareAdapter(This,Module,ppAdapter) (This)->lpVtbl->CreateSoftwareAdapter(This,Module,ppAdapter)
/*** IDXGIFactory1 methods ***/
#define IDXGIFactory1_EnumAdapters1(This,Adapter,ppAdapter) (This)->lpVtbl->EnumAdapters1(This,Adapter,ppAdapter)
#define IDXGIFactory1_IsCurrent(This) (This)->lpVtbl->IsCurrent(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIFactory1_QueryInterface(IDXGIFactory1* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIFactory1_AddRef(IDXGIFactory1* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIFactory1_Release(IDXGIFactory1* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGIFactory1_SetPrivateData(IDXGIFactory1* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGIFactory1_SetPrivateDataInterface(IDXGIFactory1* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGIFactory1_GetPrivateData(IDXGIFactory1* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGIFactory1_GetParent(IDXGIFactory1* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIFactory methods ***/
static FORCEINLINE HRESULT IDXGIFactory1_EnumAdapters(IDXGIFactory1* This,UINT Adapter,IDXGIAdapter **ppAdapter) {
    return This->lpVtbl->EnumAdapters(This,Adapter,ppAdapter);
}
static FORCEINLINE HRESULT IDXGIFactory1_MakeWindowAssociation(IDXGIFactory1* This,HWND WindowHandle,UINT Flags) {
    return This->lpVtbl->MakeWindowAssociation(This,WindowHandle,Flags);
}
static FORCEINLINE HRESULT IDXGIFactory1_GetWindowAssociation(IDXGIFactory1* This,HWND *pWindowHandle) {
    return This->lpVtbl->GetWindowAssociation(This,pWindowHandle);
}
static FORCEINLINE HRESULT IDXGIFactory1_CreateSwapChain(IDXGIFactory1* This,IUnknown *pDevice,DXGI_SWAP_CHAIN_DESC *pDesc,IDXGISwapChain **ppSwapChain) {
    return This->lpVtbl->CreateSwapChain(This,pDevice,pDesc,ppSwapChain);
}
static FORCEINLINE HRESULT IDXGIFactory1_CreateSoftwareAdapter(IDXGIFactory1* This,HMODULE Module,IDXGIAdapter **ppAdapter) {
    return This->lpVtbl->CreateSoftwareAdapter(This,Module,ppAdapter);
}
/*** IDXGIFactory1 methods ***/
static FORCEINLINE HRESULT IDXGIFactory1_EnumAdapters1(IDXGIFactory1* This,UINT Adapter,IDXGIAdapter1 **ppAdapter) {
    return This->lpVtbl->EnumAdapters1(This,Adapter,ppAdapter);
}
static FORCEINLINE BOOL IDXGIFactory1_IsCurrent(IDXGIFactory1* This) {
    return This->lpVtbl->IsCurrent(This);
}
#endif
#endif

#endif


#endif  /* __IDXGIFactory1_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDXGIAdapter1 interface
 */
#ifndef __IDXGIAdapter1_INTERFACE_DEFINED__
#define __IDXGIAdapter1_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIAdapter1, 0x29038f61, 0x3839, 0x4626, 0x91,0xfd, 0x08,0x68,0x79,0x01,0x1a,0x05);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("29038f61-3839-4626-91fd-086879011a05")
IDXGIAdapter1 : public IDXGIAdapter
{
    virtual HRESULT STDMETHODCALLTYPE GetDesc1(
        DXGI_ADAPTER_DESC1 *pDesc) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIAdapter1, 0x29038f61, 0x3839, 0x4626, 0x91,0xfd, 0x08,0x68,0x79,0x01,0x1a,0x05)
#endif
#else
typedef struct IDXGIAdapter1Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIAdapter1 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIAdapter1 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIAdapter1 *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGIAdapter1 *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGIAdapter1 *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGIAdapter1 *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGIAdapter1 *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIAdapter methods ***/
    HRESULT (STDMETHODCALLTYPE *EnumOutputs)(
        IDXGIAdapter1 *This,
        UINT Output,
        IDXGIOutput **ppOutput);

    HRESULT (STDMETHODCALLTYPE *GetDesc)(
        IDXGIAdapter1 *This,
        DXGI_ADAPTER_DESC *pDesc);

    HRESULT (STDMETHODCALLTYPE *CheckInterfaceSupport)(
        IDXGIAdapter1 *This,
        REFGUID InterfaceName,
        LARGE_INTEGER *pUMDVersion);

    /*** IDXGIAdapter1 methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDesc1)(
        IDXGIAdapter1 *This,
        DXGI_ADAPTER_DESC1 *pDesc);

    END_INTERFACE
} IDXGIAdapter1Vtbl;

interface IDXGIAdapter1 {
    CONST_VTBL IDXGIAdapter1Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIAdapter1_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIAdapter1_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIAdapter1_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGIAdapter1_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGIAdapter1_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGIAdapter1_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGIAdapter1_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIAdapter methods ***/
#define IDXGIAdapter1_EnumOutputs(This,Output,ppOutput) (This)->lpVtbl->EnumOutputs(This,Output,ppOutput)
#define IDXGIAdapter1_GetDesc(This,pDesc) (This)->lpVtbl->GetDesc(This,pDesc)
#define IDXGIAdapter1_CheckInterfaceSupport(This,InterfaceName,pUMDVersion) (This)->lpVtbl->CheckInterfaceSupport(This,InterfaceName,pUMDVersion)
/*** IDXGIAdapter1 methods ***/
#define IDXGIAdapter1_GetDesc1(This,pDesc) (This)->lpVtbl->GetDesc1(This,pDesc)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIAdapter1_QueryInterface(IDXGIAdapter1* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIAdapter1_AddRef(IDXGIAdapter1* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIAdapter1_Release(IDXGIAdapter1* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGIAdapter1_SetPrivateData(IDXGIAdapter1* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGIAdapter1_SetPrivateDataInterface(IDXGIAdapter1* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGIAdapter1_GetPrivateData(IDXGIAdapter1* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGIAdapter1_GetParent(IDXGIAdapter1* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIAdapter methods ***/
static FORCEINLINE HRESULT IDXGIAdapter1_EnumOutputs(IDXGIAdapter1* This,UINT Output,IDXGIOutput **ppOutput) {
    return This->lpVtbl->EnumOutputs(This,Output,ppOutput);
}
static FORCEINLINE HRESULT IDXGIAdapter1_GetDesc(IDXGIAdapter1* This,DXGI_ADAPTER_DESC *pDesc) {
    return This->lpVtbl->GetDesc(This,pDesc);
}
static FORCEINLINE HRESULT IDXGIAdapter1_CheckInterfaceSupport(IDXGIAdapter1* This,REFGUID InterfaceName,LARGE_INTEGER *pUMDVersion) {
    return This->lpVtbl->CheckInterfaceSupport(This,InterfaceName,pUMDVersion);
}
/*** IDXGIAdapter1 methods ***/
static FORCEINLINE HRESULT IDXGIAdapter1_GetDesc1(IDXGIAdapter1* This,DXGI_ADAPTER_DESC1 *pDesc) {
    return This->lpVtbl->GetDesc1(This,pDesc);
}
#endif
#endif

#endif


#endif  /* __IDXGIAdapter1_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDXGIDevice1 interface
 */
#ifndef __IDXGIDevice1_INTERFACE_DEFINED__
#define __IDXGIDevice1_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIDevice1, 0x77db970f, 0x6276, 0x48ba, 0xba,0x28, 0x07,0x01,0x43,0xb4,0x39,0x2c);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("77db970f-6276-48ba-ba28-070143b4392c")
IDXGIDevice1 : public IDXGIDevice
{
    virtual HRESULT STDMETHODCALLTYPE SetMaximumFrameLatency(
        UINT MaxLatency) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetMaximumFrameLatency(
        UINT *pMaxLatency) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIDevice1, 0x77db970f, 0x6276, 0x48ba, 0xba,0x28, 0x07,0x01,0x43,0xb4,0x39,0x2c)
#endif
#else
typedef struct IDXGIDevice1Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIDevice1 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIDevice1 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIDevice1 *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGIDevice1 *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGIDevice1 *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGIDevice1 *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGIDevice1 *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIDevice methods ***/
    HRESULT (STDMETHODCALLTYPE *GetAdapter)(
        IDXGIDevice1 *This,
        IDXGIAdapter **pAdapter);

    HRESULT (STDMETHODCALLTYPE *CreateSurface)(
        IDXGIDevice1 *This,
        const DXGI_SURFACE_DESC *pDesc,
        UINT NumSurfaces,
        DXGI_USAGE Usage,
        const DXGI_SHARED_RESOURCE *pSharedResource,
        IDXGISurface **ppSurface);

    HRESULT (STDMETHODCALLTYPE *QueryResourceResidency)(
        IDXGIDevice1 *This,
        IUnknown *const *ppResources,
        DXGI_RESIDENCY *pResidencyStatus,
        UINT NumResources);

    HRESULT (STDMETHODCALLTYPE *SetGPUThreadPriority)(
        IDXGIDevice1 *This,
        INT Priority);

    HRESULT (STDMETHODCALLTYPE *GetGPUThreadPriority)(
        IDXGIDevice1 *This,
        INT *pPriority);

    /*** IDXGIDevice1 methods ***/
    HRESULT (STDMETHODCALLTYPE *SetMaximumFrameLatency)(
        IDXGIDevice1 *This,
        UINT MaxLatency);

    HRESULT (STDMETHODCALLTYPE *GetMaximumFrameLatency)(
        IDXGIDevice1 *This,
        UINT *pMaxLatency);

    END_INTERFACE
} IDXGIDevice1Vtbl;

interface IDXGIDevice1 {
    CONST_VTBL IDXGIDevice1Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIDevice1_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIDevice1_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIDevice1_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGIDevice1_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGIDevice1_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGIDevice1_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGIDevice1_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIDevice methods ***/
#define IDXGIDevice1_GetAdapter(This,pAdapter) (This)->lpVtbl->GetAdapter(This,pAdapter)
#define IDXGIDevice1_CreateSurface(This,pDesc,NumSurfaces,Usage,pSharedResource,ppSurface) (This)->lpVtbl->CreateSurface(This,pDesc,NumSurfaces,Usage,pSharedResource,ppSurface)
#define IDXGIDevice1_QueryResourceResidency(This,ppResources,pResidencyStatus,NumResources) (This)->lpVtbl->QueryResourceResidency(This,ppResources,pResidencyStatus,NumResources)
#define IDXGIDevice1_SetGPUThreadPriority(This,Priority) (This)->lpVtbl->SetGPUThreadPriority(This,Priority)
#define IDXGIDevice1_GetGPUThreadPriority(This,pPriority) (This)->lpVtbl->GetGPUThreadPriority(This,pPriority)
/*** IDXGIDevice1 methods ***/
#define IDXGIDevice1_SetMaximumFrameLatency(This,MaxLatency) (This)->lpVtbl->SetMaximumFrameLatency(This,MaxLatency)
#define IDXGIDevice1_GetMaximumFrameLatency(This,pMaxLatency) (This)->lpVtbl->GetMaximumFrameLatency(This,pMaxLatency)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIDevice1_QueryInterface(IDXGIDevice1* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIDevice1_AddRef(IDXGIDevice1* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIDevice1_Release(IDXGIDevice1* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGIDevice1_SetPrivateData(IDXGIDevice1* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGIDevice1_SetPrivateDataInterface(IDXGIDevice1* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGIDevice1_GetPrivateData(IDXGIDevice1* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGIDevice1_GetParent(IDXGIDevice1* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIDevice methods ***/
static FORCEINLINE HRESULT IDXGIDevice1_GetAdapter(IDXGIDevice1* This,IDXGIAdapter **pAdapter) {
    return This->lpVtbl->GetAdapter(This,pAdapter);
}
static FORCEINLINE HRESULT IDXGIDevice1_CreateSurface(IDXGIDevice1* This,const DXGI_SURFACE_DESC *pDesc,UINT NumSurfaces,DXGI_USAGE Usage,const DXGI_SHARED_RESOURCE *pSharedResource,IDXGISurface **ppSurface) {
    return This->lpVtbl->CreateSurface(This,pDesc,NumSurfaces,Usage,pSharedResource,ppSurface);
}
static FORCEINLINE HRESULT IDXGIDevice1_QueryResourceResidency(IDXGIDevice1* This,IUnknown *const *ppResources,DXGI_RESIDENCY *pResidencyStatus,UINT NumResources) {
    return This->lpVtbl->QueryResourceResidency(This,ppResources,pResidencyStatus,NumResources);
}
static FORCEINLINE HRESULT IDXGIDevice1_SetGPUThreadPriority(IDXGIDevice1* This,INT Priority) {
    return This->lpVtbl->SetGPUThreadPriority(This,Priority);
}
static FORCEINLINE HRESULT IDXGIDevice1_GetGPUThreadPriority(IDXGIDevice1* This,INT *pPriority) {
    return This->lpVtbl->GetGPUThreadPriority(This,pPriority);
}
/*** IDXGIDevice1 methods ***/
static FORCEINLINE HRESULT IDXGIDevice1_SetMaximumFrameLatency(IDXGIDevice1* This,UINT MaxLatency) {
    return This->lpVtbl->SetMaximumFrameLatency(This,MaxLatency);
}
static FORCEINLINE HRESULT IDXGIDevice1_GetMaximumFrameLatency(IDXGIDevice1* This,UINT *pMaxLatency) {
    return This->lpVtbl->GetMaximumFrameLatency(This,pMaxLatency);
}
#endif
#endif

#endif


#endif  /* __IDXGIDevice1_INTERFACE_DEFINED__ */

#ifdef __cplusplus
#endif /*__cplusplus*/
DEFINE_GUID(IID_IDXGIObject,0xaec22fb8,0x76f3,0x4639,0x9b,0xe0,0x28,0xeb,0x43,0xa6,0x7a,0x2e);
DEFINE_GUID(IID_IDXGIDeviceSubObject,0x3d3e0379,0xf9de,0x4d58,0xbb,0x6c,0x18,0xd6,0x29,0x92,0xf1,0xa6);
DEFINE_GUID(IID_IDXGIResource,0x035f3ab4,0x482e,0x4e50,0xb4,0x1f,0x8a,0x7f,0x8b,0xd8,0x96,0x0b);
DEFINE_GUID(IID_IDXGIKeyedMutex,0x9d8e1289,0xd7b3,0x465f,0x81,0x26,0x25,0x0e,0x34,0x9a,0xf8,0x5d);
DEFINE_GUID(IID_IDXGISurface,0xcafcb56c,0x6ac3,0x4889,0xbf,0x47,0x9e,0x23,0xbb,0xd2,0x60,0xec);
DEFINE_GUID(IID_IDXGISurface1,0x4AE63092,0x6327,0x4c1b,0x80,0xAE,0xBF,0xE1,0x2E,0xA3,0x2B,0x86);
DEFINE_GUID(IID_IDXGIAdapter,0x2411e7e1,0x12ac,0x4ccf,0xbd,0x14,0x97,0x98,0xe8,0x53,0x4d,0xc0);
DEFINE_GUID(IID_IDXGIOutput,0xae02eedb,0xc735,0x4690,0x8d,0x52,0x5a,0x8d,0xc2,0x02,0x13,0xaa);
DEFINE_GUID(IID_IDXGISwapChain,0x310d36a0,0xd2e7,0x4c0a,0xaa,0x04,0x6a,0x9d,0x23,0xb8,0x88,0x6a);
DEFINE_GUID(IID_IDXGIFactory,0x7b7166ec,0x21c7,0x44ae,0xb2,0x1a,0xc9,0xae,0x32,0x1a,0xe3,0x69);
DEFINE_GUID(IID_IDXGIDevice,0x54ec77fa,0x1377,0x44e6,0x8c,0x32,0x88,0xfd,0x5f,0x44,0xc8,0x4c);
DEFINE_GUID(IID_IDXGIFactory1,0x770aae78,0xf26f,0x4dba,0xa8,0x29,0x25,0x3c,0x83,0xd1,0xb3,0x87);
DEFINE_GUID(IID_IDXGIAdapter1,0x29038f61,0x3839,0x4626,0x91,0xfd,0x08,0x68,0x79,0x01,0x1a,0x05);
DEFINE_GUID(IID_IDXGIDevice1,0x77db970f,0x6276,0x48ba,0xba,0x28,0x07,0x01,0x43,0xb4,0x39,0x2c);
/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __dxgi_h__ */
