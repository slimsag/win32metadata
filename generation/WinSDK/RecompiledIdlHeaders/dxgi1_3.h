/*** Autogenerated by WIDL 5.0 from ./shared/dxgi1_3.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __dxgi1_3_h__
#define __dxgi1_3_h__

/* Forward declarations */

#ifndef __IDXGIDevice3_FWD_DEFINED__
#define __IDXGIDevice3_FWD_DEFINED__
typedef interface IDXGIDevice3 IDXGIDevice3;
#ifdef __cplusplus
interface IDXGIDevice3;
#endif /* __cplusplus */
#endif

#ifndef __IDXGISwapChain2_FWD_DEFINED__
#define __IDXGISwapChain2_FWD_DEFINED__
typedef interface IDXGISwapChain2 IDXGISwapChain2;
#ifdef __cplusplus
interface IDXGISwapChain2;
#endif /* __cplusplus */
#endif

#ifndef __IDXGIOutput2_FWD_DEFINED__
#define __IDXGIOutput2_FWD_DEFINED__
typedef interface IDXGIOutput2 IDXGIOutput2;
#ifdef __cplusplus
interface IDXGIOutput2;
#endif /* __cplusplus */
#endif

#ifndef __IDXGIFactory3_FWD_DEFINED__
#define __IDXGIFactory3_FWD_DEFINED__
typedef interface IDXGIFactory3 IDXGIFactory3;
#ifdef __cplusplus
interface IDXGIFactory3;
#endif /* __cplusplus */
#endif

#ifndef __IDXGIDecodeSwapChain_FWD_DEFINED__
#define __IDXGIDecodeSwapChain_FWD_DEFINED__
typedef interface IDXGIDecodeSwapChain IDXGIDecodeSwapChain;
#ifdef __cplusplus
interface IDXGIDecodeSwapChain;
#endif /* __cplusplus */
#endif

#ifndef __IDXGIFactoryMedia_FWD_DEFINED__
#define __IDXGIFactoryMedia_FWD_DEFINED__
typedef interface IDXGIFactoryMedia IDXGIFactoryMedia;
#ifdef __cplusplus
interface IDXGIFactoryMedia;
#endif /* __cplusplus */
#endif

#ifndef __IDXGISwapChainMedia_FWD_DEFINED__
#define __IDXGISwapChainMedia_FWD_DEFINED__
typedef interface IDXGISwapChainMedia IDXGISwapChainMedia;
#ifdef __cplusplus
interface IDXGISwapChainMedia;
#endif /* __cplusplus */
#endif

#ifndef __IDXGIOutput3_FWD_DEFINED__
#define __IDXGIOutput3_FWD_DEFINED__
typedef interface IDXGIOutput3 IDXGIOutput3;
#ifdef __cplusplus
interface IDXGIOutput3;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <dxgi1_2.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <winapifamily.h>
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_GAMES)
#define DXGI_CREATE_FACTORY_DEBUG 0x1
HRESULT WINAPI CreateDXGIFactory2(UINT Flags, REFIID riid, _COM_Outptr_ void **ppFactory);
HRESULT WINAPI DXGIGetDebugInterface1(UINT Flags, REFIID riid, _COM_Outptr_ void **pDebug);
/*****************************************************************************
 * IDXGIDevice3 interface
 */
#ifndef __IDXGIDevice3_INTERFACE_DEFINED__
#define __IDXGIDevice3_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIDevice3, 0x6007896c, 0x3244, 0x4afd, 0xbf,0x18, 0xa6,0xd3,0xbe,0xda,0x50,0x23);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("6007896c-3244-4afd-bf18-a6d3beda5023")
IDXGIDevice3 : public IDXGIDevice2
{
    virtual void STDMETHODCALLTYPE Trim(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIDevice3, 0x6007896c, 0x3244, 0x4afd, 0xbf,0x18, 0xa6,0xd3,0xbe,0xda,0x50,0x23)
#endif
#else
typedef struct IDXGIDevice3Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIDevice3 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIDevice3 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIDevice3 *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGIDevice3 *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGIDevice3 *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGIDevice3 *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGIDevice3 *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIDevice methods ***/
    HRESULT (STDMETHODCALLTYPE *GetAdapter)(
        IDXGIDevice3 *This,
        IDXGIAdapter **pAdapter);

    HRESULT (STDMETHODCALLTYPE *CreateSurface)(
        IDXGIDevice3 *This,
        const DXGI_SURFACE_DESC *pDesc,
        UINT NumSurfaces,
        DXGI_USAGE Usage,
        const DXGI_SHARED_RESOURCE *pSharedResource,
        IDXGISurface **ppSurface);

    HRESULT (STDMETHODCALLTYPE *QueryResourceResidency)(
        IDXGIDevice3 *This,
        IUnknown *const *ppResources,
        DXGI_RESIDENCY *pResidencyStatus,
        UINT NumResources);

    HRESULT (STDMETHODCALLTYPE *SetGPUThreadPriority)(
        IDXGIDevice3 *This,
        INT Priority);

    HRESULT (STDMETHODCALLTYPE *GetGPUThreadPriority)(
        IDXGIDevice3 *This,
        INT *pPriority);

    /*** IDXGIDevice1 methods ***/
    HRESULT (STDMETHODCALLTYPE *SetMaximumFrameLatency)(
        IDXGIDevice3 *This,
        UINT MaxLatency);

    HRESULT (STDMETHODCALLTYPE *GetMaximumFrameLatency)(
        IDXGIDevice3 *This,
        UINT *pMaxLatency);

    /*** IDXGIDevice2 methods ***/
    HRESULT (STDMETHODCALLTYPE *OfferResources)(
        IDXGIDevice3 *This,
        UINT NumResources,
        IDXGIResource *const *ppResources,
        DXGI_OFFER_RESOURCE_PRIORITY Priority);

    HRESULT (STDMETHODCALLTYPE *ReclaimResources)(
        IDXGIDevice3 *This,
        UINT NumResources,
        IDXGIResource *const *ppResources,
        BOOL *pDiscarded);

    HRESULT (STDMETHODCALLTYPE *EnqueueSetEvent)(
        IDXGIDevice3 *This,
        HANDLE hEvent);

    /*** IDXGIDevice3 methods ***/
    void (STDMETHODCALLTYPE *Trim)(
        IDXGIDevice3 *This);

    END_INTERFACE
} IDXGIDevice3Vtbl;

interface IDXGIDevice3 {
    CONST_VTBL IDXGIDevice3Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIDevice3_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIDevice3_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIDevice3_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGIDevice3_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGIDevice3_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGIDevice3_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGIDevice3_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIDevice methods ***/
#define IDXGIDevice3_GetAdapter(This,pAdapter) (This)->lpVtbl->GetAdapter(This,pAdapter)
#define IDXGIDevice3_CreateSurface(This,pDesc,NumSurfaces,Usage,pSharedResource,ppSurface) (This)->lpVtbl->CreateSurface(This,pDesc,NumSurfaces,Usage,pSharedResource,ppSurface)
#define IDXGIDevice3_QueryResourceResidency(This,ppResources,pResidencyStatus,NumResources) (This)->lpVtbl->QueryResourceResidency(This,ppResources,pResidencyStatus,NumResources)
#define IDXGIDevice3_SetGPUThreadPriority(This,Priority) (This)->lpVtbl->SetGPUThreadPriority(This,Priority)
#define IDXGIDevice3_GetGPUThreadPriority(This,pPriority) (This)->lpVtbl->GetGPUThreadPriority(This,pPriority)
/*** IDXGIDevice1 methods ***/
#define IDXGIDevice3_SetMaximumFrameLatency(This,MaxLatency) (This)->lpVtbl->SetMaximumFrameLatency(This,MaxLatency)
#define IDXGIDevice3_GetMaximumFrameLatency(This,pMaxLatency) (This)->lpVtbl->GetMaximumFrameLatency(This,pMaxLatency)
/*** IDXGIDevice2 methods ***/
#define IDXGIDevice3_OfferResources(This,NumResources,ppResources,Priority) (This)->lpVtbl->OfferResources(This,NumResources,ppResources,Priority)
#define IDXGIDevice3_ReclaimResources(This,NumResources,ppResources,pDiscarded) (This)->lpVtbl->ReclaimResources(This,NumResources,ppResources,pDiscarded)
#define IDXGIDevice3_EnqueueSetEvent(This,hEvent) (This)->lpVtbl->EnqueueSetEvent(This,hEvent)
/*** IDXGIDevice3 methods ***/
#define IDXGIDevice3_Trim(This) (This)->lpVtbl->Trim(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIDevice3_QueryInterface(IDXGIDevice3* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIDevice3_AddRef(IDXGIDevice3* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIDevice3_Release(IDXGIDevice3* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGIDevice3_SetPrivateData(IDXGIDevice3* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGIDevice3_SetPrivateDataInterface(IDXGIDevice3* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGIDevice3_GetPrivateData(IDXGIDevice3* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGIDevice3_GetParent(IDXGIDevice3* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIDevice methods ***/
static FORCEINLINE HRESULT IDXGIDevice3_GetAdapter(IDXGIDevice3* This,IDXGIAdapter **pAdapter) {
    return This->lpVtbl->GetAdapter(This,pAdapter);
}
static FORCEINLINE HRESULT IDXGIDevice3_CreateSurface(IDXGIDevice3* This,const DXGI_SURFACE_DESC *pDesc,UINT NumSurfaces,DXGI_USAGE Usage,const DXGI_SHARED_RESOURCE *pSharedResource,IDXGISurface **ppSurface) {
    return This->lpVtbl->CreateSurface(This,pDesc,NumSurfaces,Usage,pSharedResource,ppSurface);
}
static FORCEINLINE HRESULT IDXGIDevice3_QueryResourceResidency(IDXGIDevice3* This,IUnknown *const *ppResources,DXGI_RESIDENCY *pResidencyStatus,UINT NumResources) {
    return This->lpVtbl->QueryResourceResidency(This,ppResources,pResidencyStatus,NumResources);
}
static FORCEINLINE HRESULT IDXGIDevice3_SetGPUThreadPriority(IDXGIDevice3* This,INT Priority) {
    return This->lpVtbl->SetGPUThreadPriority(This,Priority);
}
static FORCEINLINE HRESULT IDXGIDevice3_GetGPUThreadPriority(IDXGIDevice3* This,INT *pPriority) {
    return This->lpVtbl->GetGPUThreadPriority(This,pPriority);
}
/*** IDXGIDevice1 methods ***/
static FORCEINLINE HRESULT IDXGIDevice3_SetMaximumFrameLatency(IDXGIDevice3* This,UINT MaxLatency) {
    return This->lpVtbl->SetMaximumFrameLatency(This,MaxLatency);
}
static FORCEINLINE HRESULT IDXGIDevice3_GetMaximumFrameLatency(IDXGIDevice3* This,UINT *pMaxLatency) {
    return This->lpVtbl->GetMaximumFrameLatency(This,pMaxLatency);
}
/*** IDXGIDevice2 methods ***/
static FORCEINLINE HRESULT IDXGIDevice3_OfferResources(IDXGIDevice3* This,UINT NumResources,IDXGIResource *const *ppResources,DXGI_OFFER_RESOURCE_PRIORITY Priority) {
    return This->lpVtbl->OfferResources(This,NumResources,ppResources,Priority);
}
static FORCEINLINE HRESULT IDXGIDevice3_ReclaimResources(IDXGIDevice3* This,UINT NumResources,IDXGIResource *const *ppResources,BOOL *pDiscarded) {
    return This->lpVtbl->ReclaimResources(This,NumResources,ppResources,pDiscarded);
}
static FORCEINLINE HRESULT IDXGIDevice3_EnqueueSetEvent(IDXGIDevice3* This,HANDLE hEvent) {
    return This->lpVtbl->EnqueueSetEvent(This,hEvent);
}
/*** IDXGIDevice3 methods ***/
static FORCEINLINE void IDXGIDevice3_Trim(IDXGIDevice3* This) {
    This->lpVtbl->Trim(This);
}
#endif
#endif

#endif


#endif  /* __IDXGIDevice3_INTERFACE_DEFINED__ */

typedef struct DXGI_MATRIX_3X2_F {
    FLOAT _11;
    FLOAT _12;
    FLOAT _21;
    FLOAT _22;
    FLOAT _31;
    FLOAT _32;
} DXGI_MATRIX_3X2_F;
/*****************************************************************************
 * IDXGISwapChain2 interface
 */
#ifndef __IDXGISwapChain2_INTERFACE_DEFINED__
#define __IDXGISwapChain2_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGISwapChain2, 0xa8be2ac4, 0x199f, 0x4946, 0xb3,0x31, 0x79,0x59,0x9f,0xb9,0x8d,0xe7);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("a8be2ac4-199f-4946-b331-79599fb98de7")
IDXGISwapChain2 : public IDXGISwapChain1
{
    virtual HRESULT STDMETHODCALLTYPE SetSourceSize(
        UINT Width,
        UINT Height) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetSourceSize(
        UINT *pWidth,
        UINT *pHeight) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetMaximumFrameLatency(
        UINT MaxLatency) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetMaximumFrameLatency(
        UINT *pMaxLatency) = 0;

    virtual HANDLE STDMETHODCALLTYPE GetFrameLatencyWaitableObject(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetMatrixTransform(
        const DXGI_MATRIX_3X2_F *pMatrix) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetMatrixTransform(
        DXGI_MATRIX_3X2_F *pMatrix) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGISwapChain2, 0xa8be2ac4, 0x199f, 0x4946, 0xb3,0x31, 0x79,0x59,0x9f,0xb9,0x8d,0xe7)
#endif
#else
typedef struct IDXGISwapChain2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGISwapChain2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGISwapChain2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGISwapChain2 *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGISwapChain2 *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGISwapChain2 *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGISwapChain2 *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGISwapChain2 *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIDeviceSubObject methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDevice)(
        IDXGISwapChain2 *This,
        REFIID riid,
        void **ppDevice);

    /*** IDXGISwapChain methods ***/
    HRESULT (STDMETHODCALLTYPE *Present)(
        IDXGISwapChain2 *This,
        UINT SyncInterval,
        UINT Flags);

    HRESULT (STDMETHODCALLTYPE *GetBuffer)(
        IDXGISwapChain2 *This,
        UINT Buffer,
        REFIID riid,
        void **ppSurface);

    HRESULT (STDMETHODCALLTYPE *SetFullscreenState)(
        IDXGISwapChain2 *This,
        BOOL Fullscreen,
        IDXGIOutput *pTarget);

    HRESULT (STDMETHODCALLTYPE *GetFullscreenState)(
        IDXGISwapChain2 *This,
        BOOL *pFullscreen,
        IDXGIOutput **ppTarget);

    HRESULT (STDMETHODCALLTYPE *GetDesc)(
        IDXGISwapChain2 *This,
        DXGI_SWAP_CHAIN_DESC *pDesc);

    HRESULT (STDMETHODCALLTYPE *ResizeBuffers)(
        IDXGISwapChain2 *This,
        UINT BufferCount,
        UINT Width,
        UINT Height,
        DXGI_FORMAT NewFormat,
        UINT SwapChainFlags);

    HRESULT (STDMETHODCALLTYPE *ResizeTarget)(
        IDXGISwapChain2 *This,
        const DXGI_MODE_DESC *pNewTargetParameters);

    HRESULT (STDMETHODCALLTYPE *GetContainingOutput)(
        IDXGISwapChain2 *This,
        IDXGIOutput **ppOutput);

    HRESULT (STDMETHODCALLTYPE *GetFrameStatistics)(
        IDXGISwapChain2 *This,
        DXGI_FRAME_STATISTICS *pStats);

    HRESULT (STDMETHODCALLTYPE *GetLastPresentCount)(
        IDXGISwapChain2 *This,
        UINT *pLastPresentCount);

    /*** IDXGISwapChain1 methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDesc1)(
        IDXGISwapChain2 *This,
        DXGI_SWAP_CHAIN_DESC1 *pDesc);

    HRESULT (STDMETHODCALLTYPE *GetFullscreenDesc)(
        IDXGISwapChain2 *This,
        DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pDesc);

    HRESULT (STDMETHODCALLTYPE *GetHwnd)(
        IDXGISwapChain2 *This,
        HWND *pHwnd);

    HRESULT (STDMETHODCALLTYPE *GetCoreWindow)(
        IDXGISwapChain2 *This,
        REFIID refiid,
        void **ppUnk);

    HRESULT (STDMETHODCALLTYPE *Present1)(
        IDXGISwapChain2 *This,
        UINT SyncInterval,
        UINT PresentFlags,
        const DXGI_PRESENT_PARAMETERS *pPresentParameters);

    BOOL (STDMETHODCALLTYPE *IsTemporaryMonoSupported)(
        IDXGISwapChain2 *This);

    HRESULT (STDMETHODCALLTYPE *GetRestrictToOutput)(
        IDXGISwapChain2 *This,
        IDXGIOutput **ppRestrictToOutput);

    HRESULT (STDMETHODCALLTYPE *SetBackgroundColor)(
        IDXGISwapChain2 *This,
        const DXGI_RGBA *pColor);

    HRESULT (STDMETHODCALLTYPE *GetBackgroundColor)(
        IDXGISwapChain2 *This,
        DXGI_RGBA *pColor);

    HRESULT (STDMETHODCALLTYPE *SetRotation)(
        IDXGISwapChain2 *This,
        DXGI_MODE_ROTATION Rotation);

    HRESULT (STDMETHODCALLTYPE *GetRotation)(
        IDXGISwapChain2 *This,
        DXGI_MODE_ROTATION *pRotation);

    /*** IDXGISwapChain2 methods ***/
    HRESULT (STDMETHODCALLTYPE *SetSourceSize)(
        IDXGISwapChain2 *This,
        UINT Width,
        UINT Height);

    HRESULT (STDMETHODCALLTYPE *GetSourceSize)(
        IDXGISwapChain2 *This,
        UINT *pWidth,
        UINT *pHeight);

    HRESULT (STDMETHODCALLTYPE *SetMaximumFrameLatency)(
        IDXGISwapChain2 *This,
        UINT MaxLatency);

    HRESULT (STDMETHODCALLTYPE *GetMaximumFrameLatency)(
        IDXGISwapChain2 *This,
        UINT *pMaxLatency);

    HANDLE (STDMETHODCALLTYPE *GetFrameLatencyWaitableObject)(
        IDXGISwapChain2 *This);

    HRESULT (STDMETHODCALLTYPE *SetMatrixTransform)(
        IDXGISwapChain2 *This,
        const DXGI_MATRIX_3X2_F *pMatrix);

    HRESULT (STDMETHODCALLTYPE *GetMatrixTransform)(
        IDXGISwapChain2 *This,
        DXGI_MATRIX_3X2_F *pMatrix);

    END_INTERFACE
} IDXGISwapChain2Vtbl;

interface IDXGISwapChain2 {
    CONST_VTBL IDXGISwapChain2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGISwapChain2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGISwapChain2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGISwapChain2_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGISwapChain2_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGISwapChain2_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGISwapChain2_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGISwapChain2_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIDeviceSubObject methods ***/
#define IDXGISwapChain2_GetDevice(This,riid,ppDevice) (This)->lpVtbl->GetDevice(This,riid,ppDevice)
/*** IDXGISwapChain methods ***/
#define IDXGISwapChain2_Present(This,SyncInterval,Flags) (This)->lpVtbl->Present(This,SyncInterval,Flags)
#define IDXGISwapChain2_GetBuffer(This,Buffer,riid,ppSurface) (This)->lpVtbl->GetBuffer(This,Buffer,riid,ppSurface)
#define IDXGISwapChain2_SetFullscreenState(This,Fullscreen,pTarget) (This)->lpVtbl->SetFullscreenState(This,Fullscreen,pTarget)
#define IDXGISwapChain2_GetFullscreenState(This,pFullscreen,ppTarget) (This)->lpVtbl->GetFullscreenState(This,pFullscreen,ppTarget)
#define IDXGISwapChain2_GetDesc(This,pDesc) (This)->lpVtbl->GetDesc(This,pDesc)
#define IDXGISwapChain2_ResizeBuffers(This,BufferCount,Width,Height,NewFormat,SwapChainFlags) (This)->lpVtbl->ResizeBuffers(This,BufferCount,Width,Height,NewFormat,SwapChainFlags)
#define IDXGISwapChain2_ResizeTarget(This,pNewTargetParameters) (This)->lpVtbl->ResizeTarget(This,pNewTargetParameters)
#define IDXGISwapChain2_GetContainingOutput(This,ppOutput) (This)->lpVtbl->GetContainingOutput(This,ppOutput)
#define IDXGISwapChain2_GetFrameStatistics(This,pStats) (This)->lpVtbl->GetFrameStatistics(This,pStats)
#define IDXGISwapChain2_GetLastPresentCount(This,pLastPresentCount) (This)->lpVtbl->GetLastPresentCount(This,pLastPresentCount)
/*** IDXGISwapChain1 methods ***/
#define IDXGISwapChain2_GetDesc1(This,pDesc) (This)->lpVtbl->GetDesc1(This,pDesc)
#define IDXGISwapChain2_GetFullscreenDesc(This,pDesc) (This)->lpVtbl->GetFullscreenDesc(This,pDesc)
#define IDXGISwapChain2_GetHwnd(This,pHwnd) (This)->lpVtbl->GetHwnd(This,pHwnd)
#define IDXGISwapChain2_GetCoreWindow(This,refiid,ppUnk) (This)->lpVtbl->GetCoreWindow(This,refiid,ppUnk)
#define IDXGISwapChain2_Present1(This,SyncInterval,PresentFlags,pPresentParameters) (This)->lpVtbl->Present1(This,SyncInterval,PresentFlags,pPresentParameters)
#define IDXGISwapChain2_IsTemporaryMonoSupported(This) (This)->lpVtbl->IsTemporaryMonoSupported(This)
#define IDXGISwapChain2_GetRestrictToOutput(This,ppRestrictToOutput) (This)->lpVtbl->GetRestrictToOutput(This,ppRestrictToOutput)
#define IDXGISwapChain2_SetBackgroundColor(This,pColor) (This)->lpVtbl->SetBackgroundColor(This,pColor)
#define IDXGISwapChain2_GetBackgroundColor(This,pColor) (This)->lpVtbl->GetBackgroundColor(This,pColor)
#define IDXGISwapChain2_SetRotation(This,Rotation) (This)->lpVtbl->SetRotation(This,Rotation)
#define IDXGISwapChain2_GetRotation(This,pRotation) (This)->lpVtbl->GetRotation(This,pRotation)
/*** IDXGISwapChain2 methods ***/
#define IDXGISwapChain2_SetSourceSize(This,Width,Height) (This)->lpVtbl->SetSourceSize(This,Width,Height)
#define IDXGISwapChain2_GetSourceSize(This,pWidth,pHeight) (This)->lpVtbl->GetSourceSize(This,pWidth,pHeight)
#define IDXGISwapChain2_SetMaximumFrameLatency(This,MaxLatency) (This)->lpVtbl->SetMaximumFrameLatency(This,MaxLatency)
#define IDXGISwapChain2_GetMaximumFrameLatency(This,pMaxLatency) (This)->lpVtbl->GetMaximumFrameLatency(This,pMaxLatency)
#define IDXGISwapChain2_GetFrameLatencyWaitableObject(This) (This)->lpVtbl->GetFrameLatencyWaitableObject(This)
#define IDXGISwapChain2_SetMatrixTransform(This,pMatrix) (This)->lpVtbl->SetMatrixTransform(This,pMatrix)
#define IDXGISwapChain2_GetMatrixTransform(This,pMatrix) (This)->lpVtbl->GetMatrixTransform(This,pMatrix)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGISwapChain2_QueryInterface(IDXGISwapChain2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGISwapChain2_AddRef(IDXGISwapChain2* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGISwapChain2_Release(IDXGISwapChain2* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGISwapChain2_SetPrivateData(IDXGISwapChain2* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGISwapChain2_SetPrivateDataInterface(IDXGISwapChain2* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGISwapChain2_GetPrivateData(IDXGISwapChain2* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGISwapChain2_GetParent(IDXGISwapChain2* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIDeviceSubObject methods ***/
static FORCEINLINE HRESULT IDXGISwapChain2_GetDevice(IDXGISwapChain2* This,REFIID riid,void **ppDevice) {
    return This->lpVtbl->GetDevice(This,riid,ppDevice);
}
/*** IDXGISwapChain methods ***/
static FORCEINLINE HRESULT IDXGISwapChain2_Present(IDXGISwapChain2* This,UINT SyncInterval,UINT Flags) {
    return This->lpVtbl->Present(This,SyncInterval,Flags);
}
static FORCEINLINE HRESULT IDXGISwapChain2_GetBuffer(IDXGISwapChain2* This,UINT Buffer,REFIID riid,void **ppSurface) {
    return This->lpVtbl->GetBuffer(This,Buffer,riid,ppSurface);
}
static FORCEINLINE HRESULT IDXGISwapChain2_SetFullscreenState(IDXGISwapChain2* This,BOOL Fullscreen,IDXGIOutput *pTarget) {
    return This->lpVtbl->SetFullscreenState(This,Fullscreen,pTarget);
}
static FORCEINLINE HRESULT IDXGISwapChain2_GetFullscreenState(IDXGISwapChain2* This,BOOL *pFullscreen,IDXGIOutput **ppTarget) {
    return This->lpVtbl->GetFullscreenState(This,pFullscreen,ppTarget);
}
static FORCEINLINE HRESULT IDXGISwapChain2_GetDesc(IDXGISwapChain2* This,DXGI_SWAP_CHAIN_DESC *pDesc) {
    return This->lpVtbl->GetDesc(This,pDesc);
}
static FORCEINLINE HRESULT IDXGISwapChain2_ResizeBuffers(IDXGISwapChain2* This,UINT BufferCount,UINT Width,UINT Height,DXGI_FORMAT NewFormat,UINT SwapChainFlags) {
    return This->lpVtbl->ResizeBuffers(This,BufferCount,Width,Height,NewFormat,SwapChainFlags);
}
static FORCEINLINE HRESULT IDXGISwapChain2_ResizeTarget(IDXGISwapChain2* This,const DXGI_MODE_DESC *pNewTargetParameters) {
    return This->lpVtbl->ResizeTarget(This,pNewTargetParameters);
}
static FORCEINLINE HRESULT IDXGISwapChain2_GetContainingOutput(IDXGISwapChain2* This,IDXGIOutput **ppOutput) {
    return This->lpVtbl->GetContainingOutput(This,ppOutput);
}
static FORCEINLINE HRESULT IDXGISwapChain2_GetFrameStatistics(IDXGISwapChain2* This,DXGI_FRAME_STATISTICS *pStats) {
    return This->lpVtbl->GetFrameStatistics(This,pStats);
}
static FORCEINLINE HRESULT IDXGISwapChain2_GetLastPresentCount(IDXGISwapChain2* This,UINT *pLastPresentCount) {
    return This->lpVtbl->GetLastPresentCount(This,pLastPresentCount);
}
/*** IDXGISwapChain1 methods ***/
static FORCEINLINE HRESULT IDXGISwapChain2_GetDesc1(IDXGISwapChain2* This,DXGI_SWAP_CHAIN_DESC1 *pDesc) {
    return This->lpVtbl->GetDesc1(This,pDesc);
}
static FORCEINLINE HRESULT IDXGISwapChain2_GetFullscreenDesc(IDXGISwapChain2* This,DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pDesc) {
    return This->lpVtbl->GetFullscreenDesc(This,pDesc);
}
static FORCEINLINE HRESULT IDXGISwapChain2_GetHwnd(IDXGISwapChain2* This,HWND *pHwnd) {
    return This->lpVtbl->GetHwnd(This,pHwnd);
}
static FORCEINLINE HRESULT IDXGISwapChain2_GetCoreWindow(IDXGISwapChain2* This,REFIID refiid,void **ppUnk) {
    return This->lpVtbl->GetCoreWindow(This,refiid,ppUnk);
}
static FORCEINLINE HRESULT IDXGISwapChain2_Present1(IDXGISwapChain2* This,UINT SyncInterval,UINT PresentFlags,const DXGI_PRESENT_PARAMETERS *pPresentParameters) {
    return This->lpVtbl->Present1(This,SyncInterval,PresentFlags,pPresentParameters);
}
static FORCEINLINE BOOL IDXGISwapChain2_IsTemporaryMonoSupported(IDXGISwapChain2* This) {
    return This->lpVtbl->IsTemporaryMonoSupported(This);
}
static FORCEINLINE HRESULT IDXGISwapChain2_GetRestrictToOutput(IDXGISwapChain2* This,IDXGIOutput **ppRestrictToOutput) {
    return This->lpVtbl->GetRestrictToOutput(This,ppRestrictToOutput);
}
static FORCEINLINE HRESULT IDXGISwapChain2_SetBackgroundColor(IDXGISwapChain2* This,const DXGI_RGBA *pColor) {
    return This->lpVtbl->SetBackgroundColor(This,pColor);
}
static FORCEINLINE HRESULT IDXGISwapChain2_GetBackgroundColor(IDXGISwapChain2* This,DXGI_RGBA *pColor) {
    return This->lpVtbl->GetBackgroundColor(This,pColor);
}
static FORCEINLINE HRESULT IDXGISwapChain2_SetRotation(IDXGISwapChain2* This,DXGI_MODE_ROTATION Rotation) {
    return This->lpVtbl->SetRotation(This,Rotation);
}
static FORCEINLINE HRESULT IDXGISwapChain2_GetRotation(IDXGISwapChain2* This,DXGI_MODE_ROTATION *pRotation) {
    return This->lpVtbl->GetRotation(This,pRotation);
}
/*** IDXGISwapChain2 methods ***/
static FORCEINLINE HRESULT IDXGISwapChain2_SetSourceSize(IDXGISwapChain2* This,UINT Width,UINT Height) {
    return This->lpVtbl->SetSourceSize(This,Width,Height);
}
static FORCEINLINE HRESULT IDXGISwapChain2_GetSourceSize(IDXGISwapChain2* This,UINT *pWidth,UINT *pHeight) {
    return This->lpVtbl->GetSourceSize(This,pWidth,pHeight);
}
static FORCEINLINE HRESULT IDXGISwapChain2_SetMaximumFrameLatency(IDXGISwapChain2* This,UINT MaxLatency) {
    return This->lpVtbl->SetMaximumFrameLatency(This,MaxLatency);
}
static FORCEINLINE HRESULT IDXGISwapChain2_GetMaximumFrameLatency(IDXGISwapChain2* This,UINT *pMaxLatency) {
    return This->lpVtbl->GetMaximumFrameLatency(This,pMaxLatency);
}
static FORCEINLINE HANDLE IDXGISwapChain2_GetFrameLatencyWaitableObject(IDXGISwapChain2* This) {
    return This->lpVtbl->GetFrameLatencyWaitableObject(This);
}
static FORCEINLINE HRESULT IDXGISwapChain2_SetMatrixTransform(IDXGISwapChain2* This,const DXGI_MATRIX_3X2_F *pMatrix) {
    return This->lpVtbl->SetMatrixTransform(This,pMatrix);
}
static FORCEINLINE HRESULT IDXGISwapChain2_GetMatrixTransform(IDXGISwapChain2* This,DXGI_MATRIX_3X2_F *pMatrix) {
    return This->lpVtbl->GetMatrixTransform(This,pMatrix);
}
#endif
#endif

#endif


#endif  /* __IDXGISwapChain2_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDXGIOutput2 interface
 */
#ifndef __IDXGIOutput2_INTERFACE_DEFINED__
#define __IDXGIOutput2_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIOutput2, 0x595e39d1, 0x2724, 0x4663, 0x99,0xb1, 0xda,0x96,0x9d,0xe2,0x83,0x64);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("595e39d1-2724-4663-99b1-da969de28364")
IDXGIOutput2 : public IDXGIOutput1
{
    virtual BOOL STDMETHODCALLTYPE SupportsOverlays(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIOutput2, 0x595e39d1, 0x2724, 0x4663, 0x99,0xb1, 0xda,0x96,0x9d,0xe2,0x83,0x64)
#endif
#else
typedef struct IDXGIOutput2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIOutput2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIOutput2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIOutput2 *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGIOutput2 *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGIOutput2 *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGIOutput2 *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGIOutput2 *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIOutput methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDesc)(
        IDXGIOutput2 *This,
        DXGI_OUTPUT_DESC *pDesc);

    HRESULT (STDMETHODCALLTYPE *GetDisplayModeList)(
        IDXGIOutput2 *This,
        DXGI_FORMAT EnumFormat,
        UINT Flags,
        UINT *pNumModes,
        DXGI_MODE_DESC *pDesc);

    HRESULT (STDMETHODCALLTYPE *FindClosestMatchingMode)(
        IDXGIOutput2 *This,
        const DXGI_MODE_DESC *pModeToMatch,
        DXGI_MODE_DESC *pClosestMatch,
        IUnknown *pConcernedDevice);

    HRESULT (STDMETHODCALLTYPE *WaitForVBlank)(
        IDXGIOutput2 *This);

    HRESULT (STDMETHODCALLTYPE *TakeOwnership)(
        IDXGIOutput2 *This,
        IUnknown *pDevice,
        BOOL Exclusive);

    void (STDMETHODCALLTYPE *ReleaseOwnership)(
        IDXGIOutput2 *This);

    HRESULT (STDMETHODCALLTYPE *GetGammaControlCapabilities)(
        IDXGIOutput2 *This,
        DXGI_GAMMA_CONTROL_CAPABILITIES *pGammaCaps);

    HRESULT (STDMETHODCALLTYPE *SetGammaControl)(
        IDXGIOutput2 *This,
        const DXGI_GAMMA_CONTROL *pArray);

    HRESULT (STDMETHODCALLTYPE *GetGammaControl)(
        IDXGIOutput2 *This,
        DXGI_GAMMA_CONTROL *pArray);

    HRESULT (STDMETHODCALLTYPE *SetDisplaySurface)(
        IDXGIOutput2 *This,
        IDXGISurface *pScanoutSurface);

    HRESULT (STDMETHODCALLTYPE *GetDisplaySurfaceData)(
        IDXGIOutput2 *This,
        IDXGISurface *pDestination);

    HRESULT (STDMETHODCALLTYPE *GetFrameStatistics)(
        IDXGIOutput2 *This,
        DXGI_FRAME_STATISTICS *pStats);

    /*** IDXGIOutput1 methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDisplayModeList1)(
        IDXGIOutput2 *This,
        DXGI_FORMAT EnumFormat,
        UINT Flags,
        UINT *pNumModes,
        DXGI_MODE_DESC1 *pDesc);

    HRESULT (STDMETHODCALLTYPE *FindClosestMatchingMode1)(
        IDXGIOutput2 *This,
        const DXGI_MODE_DESC1 *pModeToMatch,
        DXGI_MODE_DESC1 *pClosestMatch,
        IUnknown *pConcernedDevice);

    HRESULT (STDMETHODCALLTYPE *GetDisplaySurfaceData1)(
        IDXGIOutput2 *This,
        IDXGIResource *pDestination);

    HRESULT (STDMETHODCALLTYPE *DuplicateOutput)(
        IDXGIOutput2 *This,
        IUnknown *pDevice,
        IDXGIOutputDuplication **ppOutputDuplication);

    /*** IDXGIOutput2 methods ***/
    BOOL (STDMETHODCALLTYPE *SupportsOverlays)(
        IDXGIOutput2 *This);

    END_INTERFACE
} IDXGIOutput2Vtbl;

interface IDXGIOutput2 {
    CONST_VTBL IDXGIOutput2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIOutput2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIOutput2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIOutput2_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGIOutput2_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGIOutput2_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGIOutput2_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGIOutput2_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIOutput methods ***/
#define IDXGIOutput2_GetDesc(This,pDesc) (This)->lpVtbl->GetDesc(This,pDesc)
#define IDXGIOutput2_GetDisplayModeList(This,EnumFormat,Flags,pNumModes,pDesc) (This)->lpVtbl->GetDisplayModeList(This,EnumFormat,Flags,pNumModes,pDesc)
#define IDXGIOutput2_FindClosestMatchingMode(This,pModeToMatch,pClosestMatch,pConcernedDevice) (This)->lpVtbl->FindClosestMatchingMode(This,pModeToMatch,pClosestMatch,pConcernedDevice)
#define IDXGIOutput2_WaitForVBlank(This) (This)->lpVtbl->WaitForVBlank(This)
#define IDXGIOutput2_TakeOwnership(This,pDevice,Exclusive) (This)->lpVtbl->TakeOwnership(This,pDevice,Exclusive)
#define IDXGIOutput2_ReleaseOwnership(This) (This)->lpVtbl->ReleaseOwnership(This)
#define IDXGIOutput2_GetGammaControlCapabilities(This,pGammaCaps) (This)->lpVtbl->GetGammaControlCapabilities(This,pGammaCaps)
#define IDXGIOutput2_SetGammaControl(This,pArray) (This)->lpVtbl->SetGammaControl(This,pArray)
#define IDXGIOutput2_GetGammaControl(This,pArray) (This)->lpVtbl->GetGammaControl(This,pArray)
#define IDXGIOutput2_SetDisplaySurface(This,pScanoutSurface) (This)->lpVtbl->SetDisplaySurface(This,pScanoutSurface)
#define IDXGIOutput2_GetDisplaySurfaceData(This,pDestination) (This)->lpVtbl->GetDisplaySurfaceData(This,pDestination)
#define IDXGIOutput2_GetFrameStatistics(This,pStats) (This)->lpVtbl->GetFrameStatistics(This,pStats)
/*** IDXGIOutput1 methods ***/
#define IDXGIOutput2_GetDisplayModeList1(This,EnumFormat,Flags,pNumModes,pDesc) (This)->lpVtbl->GetDisplayModeList1(This,EnumFormat,Flags,pNumModes,pDesc)
#define IDXGIOutput2_FindClosestMatchingMode1(This,pModeToMatch,pClosestMatch,pConcernedDevice) (This)->lpVtbl->FindClosestMatchingMode1(This,pModeToMatch,pClosestMatch,pConcernedDevice)
#define IDXGIOutput2_GetDisplaySurfaceData1(This,pDestination) (This)->lpVtbl->GetDisplaySurfaceData1(This,pDestination)
#define IDXGIOutput2_DuplicateOutput(This,pDevice,ppOutputDuplication) (This)->lpVtbl->DuplicateOutput(This,pDevice,ppOutputDuplication)
/*** IDXGIOutput2 methods ***/
#define IDXGIOutput2_SupportsOverlays(This) (This)->lpVtbl->SupportsOverlays(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIOutput2_QueryInterface(IDXGIOutput2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIOutput2_AddRef(IDXGIOutput2* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIOutput2_Release(IDXGIOutput2* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGIOutput2_SetPrivateData(IDXGIOutput2* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGIOutput2_SetPrivateDataInterface(IDXGIOutput2* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGIOutput2_GetPrivateData(IDXGIOutput2* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGIOutput2_GetParent(IDXGIOutput2* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIOutput methods ***/
static FORCEINLINE HRESULT IDXGIOutput2_GetDesc(IDXGIOutput2* This,DXGI_OUTPUT_DESC *pDesc) {
    return This->lpVtbl->GetDesc(This,pDesc);
}
static FORCEINLINE HRESULT IDXGIOutput2_GetDisplayModeList(IDXGIOutput2* This,DXGI_FORMAT EnumFormat,UINT Flags,UINT *pNumModes,DXGI_MODE_DESC *pDesc) {
    return This->lpVtbl->GetDisplayModeList(This,EnumFormat,Flags,pNumModes,pDesc);
}
static FORCEINLINE HRESULT IDXGIOutput2_FindClosestMatchingMode(IDXGIOutput2* This,const DXGI_MODE_DESC *pModeToMatch,DXGI_MODE_DESC *pClosestMatch,IUnknown *pConcernedDevice) {
    return This->lpVtbl->FindClosestMatchingMode(This,pModeToMatch,pClosestMatch,pConcernedDevice);
}
static FORCEINLINE HRESULT IDXGIOutput2_WaitForVBlank(IDXGIOutput2* This) {
    return This->lpVtbl->WaitForVBlank(This);
}
static FORCEINLINE HRESULT IDXGIOutput2_TakeOwnership(IDXGIOutput2* This,IUnknown *pDevice,BOOL Exclusive) {
    return This->lpVtbl->TakeOwnership(This,pDevice,Exclusive);
}
static FORCEINLINE void IDXGIOutput2_ReleaseOwnership(IDXGIOutput2* This) {
    This->lpVtbl->ReleaseOwnership(This);
}
static FORCEINLINE HRESULT IDXGIOutput2_GetGammaControlCapabilities(IDXGIOutput2* This,DXGI_GAMMA_CONTROL_CAPABILITIES *pGammaCaps) {
    return This->lpVtbl->GetGammaControlCapabilities(This,pGammaCaps);
}
static FORCEINLINE HRESULT IDXGIOutput2_SetGammaControl(IDXGIOutput2* This,const DXGI_GAMMA_CONTROL *pArray) {
    return This->lpVtbl->SetGammaControl(This,pArray);
}
static FORCEINLINE HRESULT IDXGIOutput2_GetGammaControl(IDXGIOutput2* This,DXGI_GAMMA_CONTROL *pArray) {
    return This->lpVtbl->GetGammaControl(This,pArray);
}
static FORCEINLINE HRESULT IDXGIOutput2_SetDisplaySurface(IDXGIOutput2* This,IDXGISurface *pScanoutSurface) {
    return This->lpVtbl->SetDisplaySurface(This,pScanoutSurface);
}
static FORCEINLINE HRESULT IDXGIOutput2_GetDisplaySurfaceData(IDXGIOutput2* This,IDXGISurface *pDestination) {
    return This->lpVtbl->GetDisplaySurfaceData(This,pDestination);
}
static FORCEINLINE HRESULT IDXGIOutput2_GetFrameStatistics(IDXGIOutput2* This,DXGI_FRAME_STATISTICS *pStats) {
    return This->lpVtbl->GetFrameStatistics(This,pStats);
}
/*** IDXGIOutput1 methods ***/
static FORCEINLINE HRESULT IDXGIOutput2_GetDisplayModeList1(IDXGIOutput2* This,DXGI_FORMAT EnumFormat,UINT Flags,UINT *pNumModes,DXGI_MODE_DESC1 *pDesc) {
    return This->lpVtbl->GetDisplayModeList1(This,EnumFormat,Flags,pNumModes,pDesc);
}
static FORCEINLINE HRESULT IDXGIOutput2_FindClosestMatchingMode1(IDXGIOutput2* This,const DXGI_MODE_DESC1 *pModeToMatch,DXGI_MODE_DESC1 *pClosestMatch,IUnknown *pConcernedDevice) {
    return This->lpVtbl->FindClosestMatchingMode1(This,pModeToMatch,pClosestMatch,pConcernedDevice);
}
static FORCEINLINE HRESULT IDXGIOutput2_GetDisplaySurfaceData1(IDXGIOutput2* This,IDXGIResource *pDestination) {
    return This->lpVtbl->GetDisplaySurfaceData1(This,pDestination);
}
static FORCEINLINE HRESULT IDXGIOutput2_DuplicateOutput(IDXGIOutput2* This,IUnknown *pDevice,IDXGIOutputDuplication **ppOutputDuplication) {
    return This->lpVtbl->DuplicateOutput(This,pDevice,ppOutputDuplication);
}
/*** IDXGIOutput2 methods ***/
static FORCEINLINE BOOL IDXGIOutput2_SupportsOverlays(IDXGIOutput2* This) {
    return This->lpVtbl->SupportsOverlays(This);
}
#endif
#endif

#endif


#endif  /* __IDXGIOutput2_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDXGIFactory3 interface
 */
#ifndef __IDXGIFactory3_INTERFACE_DEFINED__
#define __IDXGIFactory3_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIFactory3, 0x25483823, 0xcd46, 0x4c7d, 0x86,0xca, 0x47,0xaa,0x95,0xb8,0x37,0xbd);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("25483823-cd46-4c7d-86ca-47aa95b837bd")
IDXGIFactory3 : public IDXGIFactory2
{
    virtual UINT STDMETHODCALLTYPE GetCreationFlags(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIFactory3, 0x25483823, 0xcd46, 0x4c7d, 0x86,0xca, 0x47,0xaa,0x95,0xb8,0x37,0xbd)
#endif
#else
typedef struct IDXGIFactory3Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIFactory3 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIFactory3 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIFactory3 *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGIFactory3 *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGIFactory3 *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGIFactory3 *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGIFactory3 *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIFactory methods ***/
    HRESULT (STDMETHODCALLTYPE *EnumAdapters)(
        IDXGIFactory3 *This,
        UINT Adapter,
        IDXGIAdapter **ppAdapter);

    HRESULT (STDMETHODCALLTYPE *MakeWindowAssociation)(
        IDXGIFactory3 *This,
        HWND WindowHandle,
        UINT Flags);

    HRESULT (STDMETHODCALLTYPE *GetWindowAssociation)(
        IDXGIFactory3 *This,
        HWND *pWindowHandle);

    HRESULT (STDMETHODCALLTYPE *CreateSwapChain)(
        IDXGIFactory3 *This,
        IUnknown *pDevice,
        DXGI_SWAP_CHAIN_DESC *pDesc,
        IDXGISwapChain **ppSwapChain);

    HRESULT (STDMETHODCALLTYPE *CreateSoftwareAdapter)(
        IDXGIFactory3 *This,
        HMODULE Module,
        IDXGIAdapter **ppAdapter);

    /*** IDXGIFactory1 methods ***/
    HRESULT (STDMETHODCALLTYPE *EnumAdapters1)(
        IDXGIFactory3 *This,
        UINT Adapter,
        IDXGIAdapter1 **ppAdapter);

    BOOL (STDMETHODCALLTYPE *IsCurrent)(
        IDXGIFactory3 *This);

    /*** IDXGIFactory2 methods ***/
    BOOL (STDMETHODCALLTYPE *IsWindowedStereoEnabled)(
        IDXGIFactory3 *This);

    HRESULT (STDMETHODCALLTYPE *CreateSwapChainForHwnd)(
        IDXGIFactory3 *This,
        IUnknown *pDevice,
        HWND hWnd,
        const DXGI_SWAP_CHAIN_DESC1 *pDesc,
        const DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pFullscreenDesc,
        IDXGIOutput *pRestrictToOutput,
        IDXGISwapChain1 **ppSwapChain);

    HRESULT (STDMETHODCALLTYPE *CreateSwapChainForCoreWindow)(
        IDXGIFactory3 *This,
        IUnknown *pDevice,
        IUnknown *pWindow,
        const DXGI_SWAP_CHAIN_DESC1 *pDesc,
        IDXGIOutput *pRestrictToOutput,
        IDXGISwapChain1 **ppSwapChain);

    HRESULT (STDMETHODCALLTYPE *GetSharedResourceAdapterLuid)(
        IDXGIFactory3 *This,
        HANDLE hResource,
        LUID *pLuid);

    HRESULT (STDMETHODCALLTYPE *RegisterStereoStatusWindow)(
        IDXGIFactory3 *This,
        HWND WindowHandle,
        UINT wMsg,
        DWORD *pdwCookie);

    HRESULT (STDMETHODCALLTYPE *RegisterStereoStatusEvent)(
        IDXGIFactory3 *This,
        HANDLE hEvent,
        DWORD *pdwCookie);

    void (STDMETHODCALLTYPE *UnregisterStereoStatus)(
        IDXGIFactory3 *This,
        DWORD dwCookie);

    HRESULT (STDMETHODCALLTYPE *RegisterOcclusionStatusWindow)(
        IDXGIFactory3 *This,
        HWND WindowHandle,
        UINT wMsg,
        DWORD *pdwCookie);

    HRESULT (STDMETHODCALLTYPE *RegisterOcclusionStatusEvent)(
        IDXGIFactory3 *This,
        HANDLE hEvent,
        DWORD *pdwCookie);

    void (STDMETHODCALLTYPE *UnregisterOcclusionStatus)(
        IDXGIFactory3 *This,
        DWORD dwCookie);

    HRESULT (STDMETHODCALLTYPE *CreateSwapChainForComposition)(
        IDXGIFactory3 *This,
        IUnknown *pDevice,
        const DXGI_SWAP_CHAIN_DESC1 *pDesc,
        IDXGIOutput *pRestrictToOutput,
        IDXGISwapChain1 **ppSwapChain);

    /*** IDXGIFactory3 methods ***/
    UINT (STDMETHODCALLTYPE *GetCreationFlags)(
        IDXGIFactory3 *This);

    END_INTERFACE
} IDXGIFactory3Vtbl;

interface IDXGIFactory3 {
    CONST_VTBL IDXGIFactory3Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIFactory3_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIFactory3_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIFactory3_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGIFactory3_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGIFactory3_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGIFactory3_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGIFactory3_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIFactory methods ***/
#define IDXGIFactory3_EnumAdapters(This,Adapter,ppAdapter) (This)->lpVtbl->EnumAdapters(This,Adapter,ppAdapter)
#define IDXGIFactory3_MakeWindowAssociation(This,WindowHandle,Flags) (This)->lpVtbl->MakeWindowAssociation(This,WindowHandle,Flags)
#define IDXGIFactory3_GetWindowAssociation(This,pWindowHandle) (This)->lpVtbl->GetWindowAssociation(This,pWindowHandle)
#define IDXGIFactory3_CreateSwapChain(This,pDevice,pDesc,ppSwapChain) (This)->lpVtbl->CreateSwapChain(This,pDevice,pDesc,ppSwapChain)
#define IDXGIFactory3_CreateSoftwareAdapter(This,Module,ppAdapter) (This)->lpVtbl->CreateSoftwareAdapter(This,Module,ppAdapter)
/*** IDXGIFactory1 methods ***/
#define IDXGIFactory3_EnumAdapters1(This,Adapter,ppAdapter) (This)->lpVtbl->EnumAdapters1(This,Adapter,ppAdapter)
#define IDXGIFactory3_IsCurrent(This) (This)->lpVtbl->IsCurrent(This)
/*** IDXGIFactory2 methods ***/
#define IDXGIFactory3_IsWindowedStereoEnabled(This) (This)->lpVtbl->IsWindowedStereoEnabled(This)
#define IDXGIFactory3_CreateSwapChainForHwnd(This,pDevice,hWnd,pDesc,pFullscreenDesc,pRestrictToOutput,ppSwapChain) (This)->lpVtbl->CreateSwapChainForHwnd(This,pDevice,hWnd,pDesc,pFullscreenDesc,pRestrictToOutput,ppSwapChain)
#define IDXGIFactory3_CreateSwapChainForCoreWindow(This,pDevice,pWindow,pDesc,pRestrictToOutput,ppSwapChain) (This)->lpVtbl->CreateSwapChainForCoreWindow(This,pDevice,pWindow,pDesc,pRestrictToOutput,ppSwapChain)
#define IDXGIFactory3_GetSharedResourceAdapterLuid(This,hResource,pLuid) (This)->lpVtbl->GetSharedResourceAdapterLuid(This,hResource,pLuid)
#define IDXGIFactory3_RegisterStereoStatusWindow(This,WindowHandle,wMsg,pdwCookie) (This)->lpVtbl->RegisterStereoStatusWindow(This,WindowHandle,wMsg,pdwCookie)
#define IDXGIFactory3_RegisterStereoStatusEvent(This,hEvent,pdwCookie) (This)->lpVtbl->RegisterStereoStatusEvent(This,hEvent,pdwCookie)
#define IDXGIFactory3_UnregisterStereoStatus(This,dwCookie) (This)->lpVtbl->UnregisterStereoStatus(This,dwCookie)
#define IDXGIFactory3_RegisterOcclusionStatusWindow(This,WindowHandle,wMsg,pdwCookie) (This)->lpVtbl->RegisterOcclusionStatusWindow(This,WindowHandle,wMsg,pdwCookie)
#define IDXGIFactory3_RegisterOcclusionStatusEvent(This,hEvent,pdwCookie) (This)->lpVtbl->RegisterOcclusionStatusEvent(This,hEvent,pdwCookie)
#define IDXGIFactory3_UnregisterOcclusionStatus(This,dwCookie) (This)->lpVtbl->UnregisterOcclusionStatus(This,dwCookie)
#define IDXGIFactory3_CreateSwapChainForComposition(This,pDevice,pDesc,pRestrictToOutput,ppSwapChain) (This)->lpVtbl->CreateSwapChainForComposition(This,pDevice,pDesc,pRestrictToOutput,ppSwapChain)
/*** IDXGIFactory3 methods ***/
#define IDXGIFactory3_GetCreationFlags(This) (This)->lpVtbl->GetCreationFlags(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIFactory3_QueryInterface(IDXGIFactory3* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIFactory3_AddRef(IDXGIFactory3* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIFactory3_Release(IDXGIFactory3* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGIFactory3_SetPrivateData(IDXGIFactory3* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGIFactory3_SetPrivateDataInterface(IDXGIFactory3* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGIFactory3_GetPrivateData(IDXGIFactory3* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGIFactory3_GetParent(IDXGIFactory3* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIFactory methods ***/
static FORCEINLINE HRESULT IDXGIFactory3_EnumAdapters(IDXGIFactory3* This,UINT Adapter,IDXGIAdapter **ppAdapter) {
    return This->lpVtbl->EnumAdapters(This,Adapter,ppAdapter);
}
static FORCEINLINE HRESULT IDXGIFactory3_MakeWindowAssociation(IDXGIFactory3* This,HWND WindowHandle,UINT Flags) {
    return This->lpVtbl->MakeWindowAssociation(This,WindowHandle,Flags);
}
static FORCEINLINE HRESULT IDXGIFactory3_GetWindowAssociation(IDXGIFactory3* This,HWND *pWindowHandle) {
    return This->lpVtbl->GetWindowAssociation(This,pWindowHandle);
}
static FORCEINLINE HRESULT IDXGIFactory3_CreateSwapChain(IDXGIFactory3* This,IUnknown *pDevice,DXGI_SWAP_CHAIN_DESC *pDesc,IDXGISwapChain **ppSwapChain) {
    return This->lpVtbl->CreateSwapChain(This,pDevice,pDesc,ppSwapChain);
}
static FORCEINLINE HRESULT IDXGIFactory3_CreateSoftwareAdapter(IDXGIFactory3* This,HMODULE Module,IDXGIAdapter **ppAdapter) {
    return This->lpVtbl->CreateSoftwareAdapter(This,Module,ppAdapter);
}
/*** IDXGIFactory1 methods ***/
static FORCEINLINE HRESULT IDXGIFactory3_EnumAdapters1(IDXGIFactory3* This,UINT Adapter,IDXGIAdapter1 **ppAdapter) {
    return This->lpVtbl->EnumAdapters1(This,Adapter,ppAdapter);
}
static FORCEINLINE BOOL IDXGIFactory3_IsCurrent(IDXGIFactory3* This) {
    return This->lpVtbl->IsCurrent(This);
}
/*** IDXGIFactory2 methods ***/
static FORCEINLINE BOOL IDXGIFactory3_IsWindowedStereoEnabled(IDXGIFactory3* This) {
    return This->lpVtbl->IsWindowedStereoEnabled(This);
}
static FORCEINLINE HRESULT IDXGIFactory3_CreateSwapChainForHwnd(IDXGIFactory3* This,IUnknown *pDevice,HWND hWnd,const DXGI_SWAP_CHAIN_DESC1 *pDesc,const DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pFullscreenDesc,IDXGIOutput *pRestrictToOutput,IDXGISwapChain1 **ppSwapChain) {
    return This->lpVtbl->CreateSwapChainForHwnd(This,pDevice,hWnd,pDesc,pFullscreenDesc,pRestrictToOutput,ppSwapChain);
}
static FORCEINLINE HRESULT IDXGIFactory3_CreateSwapChainForCoreWindow(IDXGIFactory3* This,IUnknown *pDevice,IUnknown *pWindow,const DXGI_SWAP_CHAIN_DESC1 *pDesc,IDXGIOutput *pRestrictToOutput,IDXGISwapChain1 **ppSwapChain) {
    return This->lpVtbl->CreateSwapChainForCoreWindow(This,pDevice,pWindow,pDesc,pRestrictToOutput,ppSwapChain);
}
static FORCEINLINE HRESULT IDXGIFactory3_GetSharedResourceAdapterLuid(IDXGIFactory3* This,HANDLE hResource,LUID *pLuid) {
    return This->lpVtbl->GetSharedResourceAdapterLuid(This,hResource,pLuid);
}
static FORCEINLINE HRESULT IDXGIFactory3_RegisterStereoStatusWindow(IDXGIFactory3* This,HWND WindowHandle,UINT wMsg,DWORD *pdwCookie) {
    return This->lpVtbl->RegisterStereoStatusWindow(This,WindowHandle,wMsg,pdwCookie);
}
static FORCEINLINE HRESULT IDXGIFactory3_RegisterStereoStatusEvent(IDXGIFactory3* This,HANDLE hEvent,DWORD *pdwCookie) {
    return This->lpVtbl->RegisterStereoStatusEvent(This,hEvent,pdwCookie);
}
static FORCEINLINE void IDXGIFactory3_UnregisterStereoStatus(IDXGIFactory3* This,DWORD dwCookie) {
    This->lpVtbl->UnregisterStereoStatus(This,dwCookie);
}
static FORCEINLINE HRESULT IDXGIFactory3_RegisterOcclusionStatusWindow(IDXGIFactory3* This,HWND WindowHandle,UINT wMsg,DWORD *pdwCookie) {
    return This->lpVtbl->RegisterOcclusionStatusWindow(This,WindowHandle,wMsg,pdwCookie);
}
static FORCEINLINE HRESULT IDXGIFactory3_RegisterOcclusionStatusEvent(IDXGIFactory3* This,HANDLE hEvent,DWORD *pdwCookie) {
    return This->lpVtbl->RegisterOcclusionStatusEvent(This,hEvent,pdwCookie);
}
static FORCEINLINE void IDXGIFactory3_UnregisterOcclusionStatus(IDXGIFactory3* This,DWORD dwCookie) {
    This->lpVtbl->UnregisterOcclusionStatus(This,dwCookie);
}
static FORCEINLINE HRESULT IDXGIFactory3_CreateSwapChainForComposition(IDXGIFactory3* This,IUnknown *pDevice,const DXGI_SWAP_CHAIN_DESC1 *pDesc,IDXGIOutput *pRestrictToOutput,IDXGISwapChain1 **ppSwapChain) {
    return This->lpVtbl->CreateSwapChainForComposition(This,pDevice,pDesc,pRestrictToOutput,ppSwapChain);
}
/*** IDXGIFactory3 methods ***/
static FORCEINLINE UINT IDXGIFactory3_GetCreationFlags(IDXGIFactory3* This) {
    return This->lpVtbl->GetCreationFlags(This);
}
#endif
#endif

#endif


#endif  /* __IDXGIFactory3_INTERFACE_DEFINED__ */

#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_GAMES) */
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
typedef struct DXGI_DECODE_SWAP_CHAIN_DESC {
    UINT Flags;
} DXGI_DECODE_SWAP_CHAIN_DESC;
typedef enum DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS {
    DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_NOMINAL_RANGE = 0x1,
    DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_BT709 = 0x2,
    DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_xvYCC = 0x4
} DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS;
/*****************************************************************************
 * IDXGIDecodeSwapChain interface
 */
#ifndef __IDXGIDecodeSwapChain_INTERFACE_DEFINED__
#define __IDXGIDecodeSwapChain_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIDecodeSwapChain, 0x2633066b, 0x4514, 0x4c7a, 0x8f,0xd8, 0x12,0xea,0x98,0x05,0x9d,0x18);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("2633066b-4514-4c7a-8fd8-12ea98059d18")
IDXGIDecodeSwapChain : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE PresentBuffer(
        UINT BufferToPresent,
        UINT SyncInterval,
        UINT Flags) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetSourceRect(
        const RECT *pRect) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetTargetRect(
        const RECT *pRect) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetDestSize(
        UINT Width,
        UINT Height) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetSourceRect(
        RECT *pRect) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetTargetRect(
        RECT *pRect) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetDestSize(
        UINT *pWidth,
        UINT *pHeight) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetColorSpace(
        DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS ColorSpace) = 0;

    virtual DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS STDMETHODCALLTYPE GetColorSpace(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIDecodeSwapChain, 0x2633066b, 0x4514, 0x4c7a, 0x8f,0xd8, 0x12,0xea,0x98,0x05,0x9d,0x18)
#endif
#else
typedef struct IDXGIDecodeSwapChainVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIDecodeSwapChain *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIDecodeSwapChain *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIDecodeSwapChain *This);

    /*** IDXGIDecodeSwapChain methods ***/
    HRESULT (STDMETHODCALLTYPE *PresentBuffer)(
        IDXGIDecodeSwapChain *This,
        UINT BufferToPresent,
        UINT SyncInterval,
        UINT Flags);

    HRESULT (STDMETHODCALLTYPE *SetSourceRect)(
        IDXGIDecodeSwapChain *This,
        const RECT *pRect);

    HRESULT (STDMETHODCALLTYPE *SetTargetRect)(
        IDXGIDecodeSwapChain *This,
        const RECT *pRect);

    HRESULT (STDMETHODCALLTYPE *SetDestSize)(
        IDXGIDecodeSwapChain *This,
        UINT Width,
        UINT Height);

    HRESULT (STDMETHODCALLTYPE *GetSourceRect)(
        IDXGIDecodeSwapChain *This,
        RECT *pRect);

    HRESULT (STDMETHODCALLTYPE *GetTargetRect)(
        IDXGIDecodeSwapChain *This,
        RECT *pRect);

    HRESULT (STDMETHODCALLTYPE *GetDestSize)(
        IDXGIDecodeSwapChain *This,
        UINT *pWidth,
        UINT *pHeight);

    HRESULT (STDMETHODCALLTYPE *SetColorSpace)(
        IDXGIDecodeSwapChain *This,
        DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS ColorSpace);

    DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS (STDMETHODCALLTYPE *GetColorSpace)(
        IDXGIDecodeSwapChain *This);

    END_INTERFACE
} IDXGIDecodeSwapChainVtbl;

interface IDXGIDecodeSwapChain {
    CONST_VTBL IDXGIDecodeSwapChainVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIDecodeSwapChain_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIDecodeSwapChain_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIDecodeSwapChain_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIDecodeSwapChain methods ***/
#define IDXGIDecodeSwapChain_PresentBuffer(This,BufferToPresent,SyncInterval,Flags) (This)->lpVtbl->PresentBuffer(This,BufferToPresent,SyncInterval,Flags)
#define IDXGIDecodeSwapChain_SetSourceRect(This,pRect) (This)->lpVtbl->SetSourceRect(This,pRect)
#define IDXGIDecodeSwapChain_SetTargetRect(This,pRect) (This)->lpVtbl->SetTargetRect(This,pRect)
#define IDXGIDecodeSwapChain_SetDestSize(This,Width,Height) (This)->lpVtbl->SetDestSize(This,Width,Height)
#define IDXGIDecodeSwapChain_GetSourceRect(This,pRect) (This)->lpVtbl->GetSourceRect(This,pRect)
#define IDXGIDecodeSwapChain_GetTargetRect(This,pRect) (This)->lpVtbl->GetTargetRect(This,pRect)
#define IDXGIDecodeSwapChain_GetDestSize(This,pWidth,pHeight) (This)->lpVtbl->GetDestSize(This,pWidth,pHeight)
#define IDXGIDecodeSwapChain_SetColorSpace(This,ColorSpace) (This)->lpVtbl->SetColorSpace(This,ColorSpace)
#define IDXGIDecodeSwapChain_GetColorSpace(This) (This)->lpVtbl->GetColorSpace(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIDecodeSwapChain_QueryInterface(IDXGIDecodeSwapChain* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIDecodeSwapChain_AddRef(IDXGIDecodeSwapChain* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIDecodeSwapChain_Release(IDXGIDecodeSwapChain* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIDecodeSwapChain methods ***/
static FORCEINLINE HRESULT IDXGIDecodeSwapChain_PresentBuffer(IDXGIDecodeSwapChain* This,UINT BufferToPresent,UINT SyncInterval,UINT Flags) {
    return This->lpVtbl->PresentBuffer(This,BufferToPresent,SyncInterval,Flags);
}
static FORCEINLINE HRESULT IDXGIDecodeSwapChain_SetSourceRect(IDXGIDecodeSwapChain* This,const RECT *pRect) {
    return This->lpVtbl->SetSourceRect(This,pRect);
}
static FORCEINLINE HRESULT IDXGIDecodeSwapChain_SetTargetRect(IDXGIDecodeSwapChain* This,const RECT *pRect) {
    return This->lpVtbl->SetTargetRect(This,pRect);
}
static FORCEINLINE HRESULT IDXGIDecodeSwapChain_SetDestSize(IDXGIDecodeSwapChain* This,UINT Width,UINT Height) {
    return This->lpVtbl->SetDestSize(This,Width,Height);
}
static FORCEINLINE HRESULT IDXGIDecodeSwapChain_GetSourceRect(IDXGIDecodeSwapChain* This,RECT *pRect) {
    return This->lpVtbl->GetSourceRect(This,pRect);
}
static FORCEINLINE HRESULT IDXGIDecodeSwapChain_GetTargetRect(IDXGIDecodeSwapChain* This,RECT *pRect) {
    return This->lpVtbl->GetTargetRect(This,pRect);
}
static FORCEINLINE HRESULT IDXGIDecodeSwapChain_GetDestSize(IDXGIDecodeSwapChain* This,UINT *pWidth,UINT *pHeight) {
    return This->lpVtbl->GetDestSize(This,pWidth,pHeight);
}
static FORCEINLINE HRESULT IDXGIDecodeSwapChain_SetColorSpace(IDXGIDecodeSwapChain* This,DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS ColorSpace) {
    return This->lpVtbl->SetColorSpace(This,ColorSpace);
}
static FORCEINLINE DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS IDXGIDecodeSwapChain_GetColorSpace(IDXGIDecodeSwapChain* This) {
    return This->lpVtbl->GetColorSpace(This);
}
#endif
#endif

#endif


#endif  /* __IDXGIDecodeSwapChain_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IDXGIFactoryMedia interface
 */
#ifndef __IDXGIFactoryMedia_INTERFACE_DEFINED__
#define __IDXGIFactoryMedia_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIFactoryMedia, 0x41e7d1f2, 0xa591, 0x4f7b, 0xa2,0xe5, 0xfa,0x9c,0x84,0x3e,0x1c,0x12);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("41e7d1f2-a591-4f7b-a2e5-fa9c843e1c12")
IDXGIFactoryMedia : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE CreateSwapChainForCompositionSurfaceHandle(
        IUnknown *pDevice,
        HANDLE hSurface,
        const DXGI_SWAP_CHAIN_DESC1 *pDesc,
        IDXGIOutput *pRestrictToOutput,
        IDXGISwapChain1 **ppSwapChain) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateDecodeSwapChainForCompositionSurfaceHandle(
        IUnknown *pDevice,
        HANDLE hSurface,
        DXGI_DECODE_SWAP_CHAIN_DESC *pDesc,
        IDXGIResource *pYuvDecodeBuffers,
        IDXGIOutput *pRestrictToOutput,
        IDXGIDecodeSwapChain **ppSwapChain) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIFactoryMedia, 0x41e7d1f2, 0xa591, 0x4f7b, 0xa2,0xe5, 0xfa,0x9c,0x84,0x3e,0x1c,0x12)
#endif
#else
typedef struct IDXGIFactoryMediaVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIFactoryMedia *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIFactoryMedia *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIFactoryMedia *This);

    /*** IDXGIFactoryMedia methods ***/
    HRESULT (STDMETHODCALLTYPE *CreateSwapChainForCompositionSurfaceHandle)(
        IDXGIFactoryMedia *This,
        IUnknown *pDevice,
        HANDLE hSurface,
        const DXGI_SWAP_CHAIN_DESC1 *pDesc,
        IDXGIOutput *pRestrictToOutput,
        IDXGISwapChain1 **ppSwapChain);

    HRESULT (STDMETHODCALLTYPE *CreateDecodeSwapChainForCompositionSurfaceHandle)(
        IDXGIFactoryMedia *This,
        IUnknown *pDevice,
        HANDLE hSurface,
        DXGI_DECODE_SWAP_CHAIN_DESC *pDesc,
        IDXGIResource *pYuvDecodeBuffers,
        IDXGIOutput *pRestrictToOutput,
        IDXGIDecodeSwapChain **ppSwapChain);

    END_INTERFACE
} IDXGIFactoryMediaVtbl;

interface IDXGIFactoryMedia {
    CONST_VTBL IDXGIFactoryMediaVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIFactoryMedia_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIFactoryMedia_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIFactoryMedia_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIFactoryMedia methods ***/
#define IDXGIFactoryMedia_CreateSwapChainForCompositionSurfaceHandle(This,pDevice,hSurface,pDesc,pRestrictToOutput,ppSwapChain) (This)->lpVtbl->CreateSwapChainForCompositionSurfaceHandle(This,pDevice,hSurface,pDesc,pRestrictToOutput,ppSwapChain)
#define IDXGIFactoryMedia_CreateDecodeSwapChainForCompositionSurfaceHandle(This,pDevice,hSurface,pDesc,pYuvDecodeBuffers,pRestrictToOutput,ppSwapChain) (This)->lpVtbl->CreateDecodeSwapChainForCompositionSurfaceHandle(This,pDevice,hSurface,pDesc,pYuvDecodeBuffers,pRestrictToOutput,ppSwapChain)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIFactoryMedia_QueryInterface(IDXGIFactoryMedia* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIFactoryMedia_AddRef(IDXGIFactoryMedia* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIFactoryMedia_Release(IDXGIFactoryMedia* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIFactoryMedia methods ***/
static FORCEINLINE HRESULT IDXGIFactoryMedia_CreateSwapChainForCompositionSurfaceHandle(IDXGIFactoryMedia* This,IUnknown *pDevice,HANDLE hSurface,const DXGI_SWAP_CHAIN_DESC1 *pDesc,IDXGIOutput *pRestrictToOutput,IDXGISwapChain1 **ppSwapChain) {
    return This->lpVtbl->CreateSwapChainForCompositionSurfaceHandle(This,pDevice,hSurface,pDesc,pRestrictToOutput,ppSwapChain);
}
static FORCEINLINE HRESULT IDXGIFactoryMedia_CreateDecodeSwapChainForCompositionSurfaceHandle(IDXGIFactoryMedia* This,IUnknown *pDevice,HANDLE hSurface,DXGI_DECODE_SWAP_CHAIN_DESC *pDesc,IDXGIResource *pYuvDecodeBuffers,IDXGIOutput *pRestrictToOutput,IDXGIDecodeSwapChain **ppSwapChain) {
    return This->lpVtbl->CreateDecodeSwapChainForCompositionSurfaceHandle(This,pDevice,hSurface,pDesc,pYuvDecodeBuffers,pRestrictToOutput,ppSwapChain);
}
#endif
#endif

#endif


#endif  /* __IDXGIFactoryMedia_INTERFACE_DEFINED__ */

typedef enum DXGI_FRAME_PRESENTATION_MODE {
    DXGI_FRAME_PRESENTATION_MODE_COMPOSED = 0,
    DXGI_FRAME_PRESENTATION_MODE_OVERLAY = 1,
    DXGI_FRAME_PRESENTATION_MODE_NONE = 2,
    DXGI_FRAME_PRESENTATION_MODE_COMPOSITION_FAILURE = 3
} DXGI_FRAME_PRESENTATION_MODE;
typedef struct DXGI_FRAME_STATISTICS_MEDIA {
    UINT PresentCount;
    UINT PresentRefreshCount;
    UINT SyncRefreshCount;
    LARGE_INTEGER SyncQPCTime;
    LARGE_INTEGER SyncGPUTime;
    DXGI_FRAME_PRESENTATION_MODE CompositionMode;
    UINT ApprovedPresentDuration;
} DXGI_FRAME_STATISTICS_MEDIA;
/*****************************************************************************
 * IDXGISwapChainMedia interface
 */
#ifndef __IDXGISwapChainMedia_INTERFACE_DEFINED__
#define __IDXGISwapChainMedia_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGISwapChainMedia, 0xdd95b90b, 0xf05f, 0x4f6a, 0xbd,0x65, 0x25,0xbf,0xb2,0x64,0xbd,0x84);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("dd95b90b-f05f-4f6a-bd65-25bfb264bd84")
IDXGISwapChainMedia : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetFrameStatisticsMedia(
        DXGI_FRAME_STATISTICS_MEDIA *pStats) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetPresentDuration(
        UINT Duration) = 0;

    virtual HRESULT STDMETHODCALLTYPE CheckPresentDurationSupport(
        UINT DesiredPresentDuration,
        UINT *pClosestSmallerPresentDuration,
        UINT *pClosestLargerPresentDuration) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGISwapChainMedia, 0xdd95b90b, 0xf05f, 0x4f6a, 0xbd,0x65, 0x25,0xbf,0xb2,0x64,0xbd,0x84)
#endif
#else
typedef struct IDXGISwapChainMediaVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGISwapChainMedia *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGISwapChainMedia *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGISwapChainMedia *This);

    /*** IDXGISwapChainMedia methods ***/
    HRESULT (STDMETHODCALLTYPE *GetFrameStatisticsMedia)(
        IDXGISwapChainMedia *This,
        DXGI_FRAME_STATISTICS_MEDIA *pStats);

    HRESULT (STDMETHODCALLTYPE *SetPresentDuration)(
        IDXGISwapChainMedia *This,
        UINT Duration);

    HRESULT (STDMETHODCALLTYPE *CheckPresentDurationSupport)(
        IDXGISwapChainMedia *This,
        UINT DesiredPresentDuration,
        UINT *pClosestSmallerPresentDuration,
        UINT *pClosestLargerPresentDuration);

    END_INTERFACE
} IDXGISwapChainMediaVtbl;

interface IDXGISwapChainMedia {
    CONST_VTBL IDXGISwapChainMediaVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGISwapChainMedia_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGISwapChainMedia_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGISwapChainMedia_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGISwapChainMedia methods ***/
#define IDXGISwapChainMedia_GetFrameStatisticsMedia(This,pStats) (This)->lpVtbl->GetFrameStatisticsMedia(This,pStats)
#define IDXGISwapChainMedia_SetPresentDuration(This,Duration) (This)->lpVtbl->SetPresentDuration(This,Duration)
#define IDXGISwapChainMedia_CheckPresentDurationSupport(This,DesiredPresentDuration,pClosestSmallerPresentDuration,pClosestLargerPresentDuration) (This)->lpVtbl->CheckPresentDurationSupport(This,DesiredPresentDuration,pClosestSmallerPresentDuration,pClosestLargerPresentDuration)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGISwapChainMedia_QueryInterface(IDXGISwapChainMedia* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGISwapChainMedia_AddRef(IDXGISwapChainMedia* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGISwapChainMedia_Release(IDXGISwapChainMedia* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGISwapChainMedia methods ***/
static FORCEINLINE HRESULT IDXGISwapChainMedia_GetFrameStatisticsMedia(IDXGISwapChainMedia* This,DXGI_FRAME_STATISTICS_MEDIA *pStats) {
    return This->lpVtbl->GetFrameStatisticsMedia(This,pStats);
}
static FORCEINLINE HRESULT IDXGISwapChainMedia_SetPresentDuration(IDXGISwapChainMedia* This,UINT Duration) {
    return This->lpVtbl->SetPresentDuration(This,Duration);
}
static FORCEINLINE HRESULT IDXGISwapChainMedia_CheckPresentDurationSupport(IDXGISwapChainMedia* This,UINT DesiredPresentDuration,UINT *pClosestSmallerPresentDuration,UINT *pClosestLargerPresentDuration) {
    return This->lpVtbl->CheckPresentDurationSupport(This,DesiredPresentDuration,pClosestSmallerPresentDuration,pClosestLargerPresentDuration);
}
#endif
#endif

#endif


#endif  /* __IDXGISwapChainMedia_INTERFACE_DEFINED__ */

typedef enum DXGI_OVERLAY_SUPPORT_FLAG {
    DXGI_OVERLAY_SUPPORT_FLAG_DIRECT = 0x1,
    DXGI_OVERLAY_SUPPORT_FLAG_SCALING = 0x2
} DXGI_OVERLAY_SUPPORT_FLAG;
#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) */
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_GAMES)
/*****************************************************************************
 * IDXGIOutput3 interface
 */
#ifndef __IDXGIOutput3_INTERFACE_DEFINED__
#define __IDXGIOutput3_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIOutput3, 0x8a6bb301, 0x7e7e, 0x41f4, 0xa8,0xe0, 0x5b,0x32,0xf7,0xf9,0x9b,0x18);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("8a6bb301-7e7e-41f4-a8e0-5b32f7f99b18")
IDXGIOutput3 : public IDXGIOutput2
{
    virtual HRESULT STDMETHODCALLTYPE CheckOverlaySupport(
        DXGI_FORMAT EnumFormat,
        IUnknown *pConcernedDevice,
        UINT *pFlags) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIOutput3, 0x8a6bb301, 0x7e7e, 0x41f4, 0xa8,0xe0, 0x5b,0x32,0xf7,0xf9,0x9b,0x18)
#endif
#else
typedef struct IDXGIOutput3Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIOutput3 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIOutput3 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIOutput3 *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGIOutput3 *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGIOutput3 *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGIOutput3 *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGIOutput3 *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIOutput methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDesc)(
        IDXGIOutput3 *This,
        DXGI_OUTPUT_DESC *pDesc);

    HRESULT (STDMETHODCALLTYPE *GetDisplayModeList)(
        IDXGIOutput3 *This,
        DXGI_FORMAT EnumFormat,
        UINT Flags,
        UINT *pNumModes,
        DXGI_MODE_DESC *pDesc);

    HRESULT (STDMETHODCALLTYPE *FindClosestMatchingMode)(
        IDXGIOutput3 *This,
        const DXGI_MODE_DESC *pModeToMatch,
        DXGI_MODE_DESC *pClosestMatch,
        IUnknown *pConcernedDevice);

    HRESULT (STDMETHODCALLTYPE *WaitForVBlank)(
        IDXGIOutput3 *This);

    HRESULT (STDMETHODCALLTYPE *TakeOwnership)(
        IDXGIOutput3 *This,
        IUnknown *pDevice,
        BOOL Exclusive);

    void (STDMETHODCALLTYPE *ReleaseOwnership)(
        IDXGIOutput3 *This);

    HRESULT (STDMETHODCALLTYPE *GetGammaControlCapabilities)(
        IDXGIOutput3 *This,
        DXGI_GAMMA_CONTROL_CAPABILITIES *pGammaCaps);

    HRESULT (STDMETHODCALLTYPE *SetGammaControl)(
        IDXGIOutput3 *This,
        const DXGI_GAMMA_CONTROL *pArray);

    HRESULT (STDMETHODCALLTYPE *GetGammaControl)(
        IDXGIOutput3 *This,
        DXGI_GAMMA_CONTROL *pArray);

    HRESULT (STDMETHODCALLTYPE *SetDisplaySurface)(
        IDXGIOutput3 *This,
        IDXGISurface *pScanoutSurface);

    HRESULT (STDMETHODCALLTYPE *GetDisplaySurfaceData)(
        IDXGIOutput3 *This,
        IDXGISurface *pDestination);

    HRESULT (STDMETHODCALLTYPE *GetFrameStatistics)(
        IDXGIOutput3 *This,
        DXGI_FRAME_STATISTICS *pStats);

    /*** IDXGIOutput1 methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDisplayModeList1)(
        IDXGIOutput3 *This,
        DXGI_FORMAT EnumFormat,
        UINT Flags,
        UINT *pNumModes,
        DXGI_MODE_DESC1 *pDesc);

    HRESULT (STDMETHODCALLTYPE *FindClosestMatchingMode1)(
        IDXGIOutput3 *This,
        const DXGI_MODE_DESC1 *pModeToMatch,
        DXGI_MODE_DESC1 *pClosestMatch,
        IUnknown *pConcernedDevice);

    HRESULT (STDMETHODCALLTYPE *GetDisplaySurfaceData1)(
        IDXGIOutput3 *This,
        IDXGIResource *pDestination);

    HRESULT (STDMETHODCALLTYPE *DuplicateOutput)(
        IDXGIOutput3 *This,
        IUnknown *pDevice,
        IDXGIOutputDuplication **ppOutputDuplication);

    /*** IDXGIOutput2 methods ***/
    BOOL (STDMETHODCALLTYPE *SupportsOverlays)(
        IDXGIOutput3 *This);

    /*** IDXGIOutput3 methods ***/
    HRESULT (STDMETHODCALLTYPE *CheckOverlaySupport)(
        IDXGIOutput3 *This,
        DXGI_FORMAT EnumFormat,
        IUnknown *pConcernedDevice,
        UINT *pFlags);

    END_INTERFACE
} IDXGIOutput3Vtbl;

interface IDXGIOutput3 {
    CONST_VTBL IDXGIOutput3Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIOutput3_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIOutput3_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIOutput3_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGIOutput3_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGIOutput3_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGIOutput3_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGIOutput3_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIOutput methods ***/
#define IDXGIOutput3_GetDesc(This,pDesc) (This)->lpVtbl->GetDesc(This,pDesc)
#define IDXGIOutput3_GetDisplayModeList(This,EnumFormat,Flags,pNumModes,pDesc) (This)->lpVtbl->GetDisplayModeList(This,EnumFormat,Flags,pNumModes,pDesc)
#define IDXGIOutput3_FindClosestMatchingMode(This,pModeToMatch,pClosestMatch,pConcernedDevice) (This)->lpVtbl->FindClosestMatchingMode(This,pModeToMatch,pClosestMatch,pConcernedDevice)
#define IDXGIOutput3_WaitForVBlank(This) (This)->lpVtbl->WaitForVBlank(This)
#define IDXGIOutput3_TakeOwnership(This,pDevice,Exclusive) (This)->lpVtbl->TakeOwnership(This,pDevice,Exclusive)
#define IDXGIOutput3_ReleaseOwnership(This) (This)->lpVtbl->ReleaseOwnership(This)
#define IDXGIOutput3_GetGammaControlCapabilities(This,pGammaCaps) (This)->lpVtbl->GetGammaControlCapabilities(This,pGammaCaps)
#define IDXGIOutput3_SetGammaControl(This,pArray) (This)->lpVtbl->SetGammaControl(This,pArray)
#define IDXGIOutput3_GetGammaControl(This,pArray) (This)->lpVtbl->GetGammaControl(This,pArray)
#define IDXGIOutput3_SetDisplaySurface(This,pScanoutSurface) (This)->lpVtbl->SetDisplaySurface(This,pScanoutSurface)
#define IDXGIOutput3_GetDisplaySurfaceData(This,pDestination) (This)->lpVtbl->GetDisplaySurfaceData(This,pDestination)
#define IDXGIOutput3_GetFrameStatistics(This,pStats) (This)->lpVtbl->GetFrameStatistics(This,pStats)
/*** IDXGIOutput1 methods ***/
#define IDXGIOutput3_GetDisplayModeList1(This,EnumFormat,Flags,pNumModes,pDesc) (This)->lpVtbl->GetDisplayModeList1(This,EnumFormat,Flags,pNumModes,pDesc)
#define IDXGIOutput3_FindClosestMatchingMode1(This,pModeToMatch,pClosestMatch,pConcernedDevice) (This)->lpVtbl->FindClosestMatchingMode1(This,pModeToMatch,pClosestMatch,pConcernedDevice)
#define IDXGIOutput3_GetDisplaySurfaceData1(This,pDestination) (This)->lpVtbl->GetDisplaySurfaceData1(This,pDestination)
#define IDXGIOutput3_DuplicateOutput(This,pDevice,ppOutputDuplication) (This)->lpVtbl->DuplicateOutput(This,pDevice,ppOutputDuplication)
/*** IDXGIOutput2 methods ***/
#define IDXGIOutput3_SupportsOverlays(This) (This)->lpVtbl->SupportsOverlays(This)
/*** IDXGIOutput3 methods ***/
#define IDXGIOutput3_CheckOverlaySupport(This,EnumFormat,pConcernedDevice,pFlags) (This)->lpVtbl->CheckOverlaySupport(This,EnumFormat,pConcernedDevice,pFlags)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIOutput3_QueryInterface(IDXGIOutput3* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIOutput3_AddRef(IDXGIOutput3* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIOutput3_Release(IDXGIOutput3* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGIOutput3_SetPrivateData(IDXGIOutput3* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGIOutput3_SetPrivateDataInterface(IDXGIOutput3* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGIOutput3_GetPrivateData(IDXGIOutput3* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGIOutput3_GetParent(IDXGIOutput3* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIOutput methods ***/
static FORCEINLINE HRESULT IDXGIOutput3_GetDesc(IDXGIOutput3* This,DXGI_OUTPUT_DESC *pDesc) {
    return This->lpVtbl->GetDesc(This,pDesc);
}
static FORCEINLINE HRESULT IDXGIOutput3_GetDisplayModeList(IDXGIOutput3* This,DXGI_FORMAT EnumFormat,UINT Flags,UINT *pNumModes,DXGI_MODE_DESC *pDesc) {
    return This->lpVtbl->GetDisplayModeList(This,EnumFormat,Flags,pNumModes,pDesc);
}
static FORCEINLINE HRESULT IDXGIOutput3_FindClosestMatchingMode(IDXGIOutput3* This,const DXGI_MODE_DESC *pModeToMatch,DXGI_MODE_DESC *pClosestMatch,IUnknown *pConcernedDevice) {
    return This->lpVtbl->FindClosestMatchingMode(This,pModeToMatch,pClosestMatch,pConcernedDevice);
}
static FORCEINLINE HRESULT IDXGIOutput3_WaitForVBlank(IDXGIOutput3* This) {
    return This->lpVtbl->WaitForVBlank(This);
}
static FORCEINLINE HRESULT IDXGIOutput3_TakeOwnership(IDXGIOutput3* This,IUnknown *pDevice,BOOL Exclusive) {
    return This->lpVtbl->TakeOwnership(This,pDevice,Exclusive);
}
static FORCEINLINE void IDXGIOutput3_ReleaseOwnership(IDXGIOutput3* This) {
    This->lpVtbl->ReleaseOwnership(This);
}
static FORCEINLINE HRESULT IDXGIOutput3_GetGammaControlCapabilities(IDXGIOutput3* This,DXGI_GAMMA_CONTROL_CAPABILITIES *pGammaCaps) {
    return This->lpVtbl->GetGammaControlCapabilities(This,pGammaCaps);
}
static FORCEINLINE HRESULT IDXGIOutput3_SetGammaControl(IDXGIOutput3* This,const DXGI_GAMMA_CONTROL *pArray) {
    return This->lpVtbl->SetGammaControl(This,pArray);
}
static FORCEINLINE HRESULT IDXGIOutput3_GetGammaControl(IDXGIOutput3* This,DXGI_GAMMA_CONTROL *pArray) {
    return This->lpVtbl->GetGammaControl(This,pArray);
}
static FORCEINLINE HRESULT IDXGIOutput3_SetDisplaySurface(IDXGIOutput3* This,IDXGISurface *pScanoutSurface) {
    return This->lpVtbl->SetDisplaySurface(This,pScanoutSurface);
}
static FORCEINLINE HRESULT IDXGIOutput3_GetDisplaySurfaceData(IDXGIOutput3* This,IDXGISurface *pDestination) {
    return This->lpVtbl->GetDisplaySurfaceData(This,pDestination);
}
static FORCEINLINE HRESULT IDXGIOutput3_GetFrameStatistics(IDXGIOutput3* This,DXGI_FRAME_STATISTICS *pStats) {
    return This->lpVtbl->GetFrameStatistics(This,pStats);
}
/*** IDXGIOutput1 methods ***/
static FORCEINLINE HRESULT IDXGIOutput3_GetDisplayModeList1(IDXGIOutput3* This,DXGI_FORMAT EnumFormat,UINT Flags,UINT *pNumModes,DXGI_MODE_DESC1 *pDesc) {
    return This->lpVtbl->GetDisplayModeList1(This,EnumFormat,Flags,pNumModes,pDesc);
}
static FORCEINLINE HRESULT IDXGIOutput3_FindClosestMatchingMode1(IDXGIOutput3* This,const DXGI_MODE_DESC1 *pModeToMatch,DXGI_MODE_DESC1 *pClosestMatch,IUnknown *pConcernedDevice) {
    return This->lpVtbl->FindClosestMatchingMode1(This,pModeToMatch,pClosestMatch,pConcernedDevice);
}
static FORCEINLINE HRESULT IDXGIOutput3_GetDisplaySurfaceData1(IDXGIOutput3* This,IDXGIResource *pDestination) {
    return This->lpVtbl->GetDisplaySurfaceData1(This,pDestination);
}
static FORCEINLINE HRESULT IDXGIOutput3_DuplicateOutput(IDXGIOutput3* This,IUnknown *pDevice,IDXGIOutputDuplication **ppOutputDuplication) {
    return This->lpVtbl->DuplicateOutput(This,pDevice,ppOutputDuplication);
}
/*** IDXGIOutput2 methods ***/
static FORCEINLINE BOOL IDXGIOutput3_SupportsOverlays(IDXGIOutput3* This) {
    return This->lpVtbl->SupportsOverlays(This);
}
/*** IDXGIOutput3 methods ***/
static FORCEINLINE HRESULT IDXGIOutput3_CheckOverlaySupport(IDXGIOutput3* This,DXGI_FORMAT EnumFormat,IUnknown *pConcernedDevice,UINT *pFlags) {
    return This->lpVtbl->CheckOverlaySupport(This,EnumFormat,pConcernedDevice,pFlags);
}
#endif
#endif

#endif


#endif  /* __IDXGIOutput3_INTERFACE_DEFINED__ */

#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_GAMES) */
DEFINE_GUID(IID_IDXGIDevice3,0x6007896c,0x3244,0x4afd,0xbf,0x18,0xa6,0xd3,0xbe,0xda,0x50,0x23);
DEFINE_GUID(IID_IDXGISwapChain2,0xa8be2ac4,0x199f,0x4946,0xb3,0x31,0x79,0x59,0x9f,0xb9,0x8d,0xe7);
DEFINE_GUID(IID_IDXGIOutput2,0x595e39d1,0x2724,0x4663,0x99,0xb1,0xda,0x96,0x9d,0xe2,0x83,0x64);
DEFINE_GUID(IID_IDXGIFactory3,0x25483823,0xcd46,0x4c7d,0x86,0xca,0x47,0xaa,0x95,0xb8,0x37,0xbd);
DEFINE_GUID(IID_IDXGIDecodeSwapChain,0x2633066b,0x4514,0x4c7a,0x8f,0xd8,0x12,0xea,0x98,0x05,0x9d,0x18);
DEFINE_GUID(IID_IDXGIFactoryMedia,0x41e7d1f2,0xa591,0x4f7b,0xa2,0xe5,0xfa,0x9c,0x84,0x3e,0x1c,0x12);
DEFINE_GUID(IID_IDXGISwapChainMedia,0xdd95b90b,0xf05f,0x4f6a,0xbd,0x65,0x25,0xbf,0xb2,0x64,0xbd,0x84);
DEFINE_GUID(IID_IDXGIOutput3,0x8a6bb301,0x7e7e,0x41F4,0xa8,0xe0,0x5b,0x32,0xf7,0xf9,0x9b,0x18);
/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __dxgi1_3_h__ */
