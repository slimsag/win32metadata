/*** Autogenerated by WIDL 5.0 from ./shared/dxgi1_5.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __dxgi1_5_h__
#define __dxgi1_5_h__

/* Forward declarations */

#ifndef __IDXGIOutput5_FWD_DEFINED__
#define __IDXGIOutput5_FWD_DEFINED__
typedef interface IDXGIOutput5 IDXGIOutput5;
#ifdef __cplusplus
interface IDXGIOutput5;
#endif /* __cplusplus */
#endif

#ifndef __IDXGISwapChain4_FWD_DEFINED__
#define __IDXGISwapChain4_FWD_DEFINED__
typedef interface IDXGISwapChain4 IDXGISwapChain4;
#ifdef __cplusplus
interface IDXGISwapChain4;
#endif /* __cplusplus */
#endif

#ifndef __IDXGIDevice4_FWD_DEFINED__
#define __IDXGIDevice4_FWD_DEFINED__
typedef interface IDXGIDevice4 IDXGIDevice4;
#ifdef __cplusplus
interface IDXGIDevice4;
#endif /* __cplusplus */
#endif

#ifndef __IDXGIFactory5_FWD_DEFINED__
#define __IDXGIFactory5_FWD_DEFINED__
typedef interface IDXGIFactory5 IDXGIFactory5;
#ifdef __cplusplus
interface IDXGIFactory5;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <dxgi1_4.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <winapifamily.h>
#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_GAMES)
typedef enum DXGI_OUTDUPL_FLAG {
    DXGI_OUTDUPL_COMPOSITED_UI_CAPTURE_ONLY = 1
} DXGI_OUTDUPL_FLAG;
/*****************************************************************************
 * IDXGIOutput5 interface
 */
#ifndef __IDXGIOutput5_INTERFACE_DEFINED__
#define __IDXGIOutput5_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIOutput5, 0x80a07424, 0xab52, 0x42eb, 0x83,0x3c, 0x0c,0x42,0xfd,0x28,0x2d,0x98);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("80a07424-ab52-42eb-833c-0c42fd282d98")
IDXGIOutput5 : public IDXGIOutput4
{
    virtual HRESULT STDMETHODCALLTYPE DuplicateOutput1(
        IUnknown *pDevice,
        UINT Flags,
        UINT SupportedFormatsCount,
        const DXGI_FORMAT *pSupportedFormats,
        IDXGIOutputDuplication **ppOutputDuplication) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIOutput5, 0x80a07424, 0xab52, 0x42eb, 0x83,0x3c, 0x0c,0x42,0xfd,0x28,0x2d,0x98)
#endif
#else
typedef struct IDXGIOutput5Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIOutput5 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIOutput5 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIOutput5 *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGIOutput5 *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGIOutput5 *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGIOutput5 *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGIOutput5 *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIOutput methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDesc)(
        IDXGIOutput5 *This,
        DXGI_OUTPUT_DESC *pDesc);

    HRESULT (STDMETHODCALLTYPE *GetDisplayModeList)(
        IDXGIOutput5 *This,
        DXGI_FORMAT EnumFormat,
        UINT Flags,
        UINT *pNumModes,
        DXGI_MODE_DESC *pDesc);

    HRESULT (STDMETHODCALLTYPE *FindClosestMatchingMode)(
        IDXGIOutput5 *This,
        const DXGI_MODE_DESC *pModeToMatch,
        DXGI_MODE_DESC *pClosestMatch,
        IUnknown *pConcernedDevice);

    HRESULT (STDMETHODCALLTYPE *WaitForVBlank)(
        IDXGIOutput5 *This);

    HRESULT (STDMETHODCALLTYPE *TakeOwnership)(
        IDXGIOutput5 *This,
        IUnknown *pDevice,
        BOOL Exclusive);

    void (STDMETHODCALLTYPE *ReleaseOwnership)(
        IDXGIOutput5 *This);

    HRESULT (STDMETHODCALLTYPE *GetGammaControlCapabilities)(
        IDXGIOutput5 *This,
        DXGI_GAMMA_CONTROL_CAPABILITIES *pGammaCaps);

    HRESULT (STDMETHODCALLTYPE *SetGammaControl)(
        IDXGIOutput5 *This,
        const DXGI_GAMMA_CONTROL *pArray);

    HRESULT (STDMETHODCALLTYPE *GetGammaControl)(
        IDXGIOutput5 *This,
        DXGI_GAMMA_CONTROL *pArray);

    HRESULT (STDMETHODCALLTYPE *SetDisplaySurface)(
        IDXGIOutput5 *This,
        IDXGISurface *pScanoutSurface);

    HRESULT (STDMETHODCALLTYPE *GetDisplaySurfaceData)(
        IDXGIOutput5 *This,
        IDXGISurface *pDestination);

    HRESULT (STDMETHODCALLTYPE *GetFrameStatistics)(
        IDXGIOutput5 *This,
        DXGI_FRAME_STATISTICS *pStats);

    /*** IDXGIOutput1 methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDisplayModeList1)(
        IDXGIOutput5 *This,
        DXGI_FORMAT EnumFormat,
        UINT Flags,
        UINT *pNumModes,
        DXGI_MODE_DESC1 *pDesc);

    HRESULT (STDMETHODCALLTYPE *FindClosestMatchingMode1)(
        IDXGIOutput5 *This,
        const DXGI_MODE_DESC1 *pModeToMatch,
        DXGI_MODE_DESC1 *pClosestMatch,
        IUnknown *pConcernedDevice);

    HRESULT (STDMETHODCALLTYPE *GetDisplaySurfaceData1)(
        IDXGIOutput5 *This,
        IDXGIResource *pDestination);

    HRESULT (STDMETHODCALLTYPE *DuplicateOutput)(
        IDXGIOutput5 *This,
        IUnknown *pDevice,
        IDXGIOutputDuplication **ppOutputDuplication);

    /*** IDXGIOutput2 methods ***/
    BOOL (STDMETHODCALLTYPE *SupportsOverlays)(
        IDXGIOutput5 *This);

    /*** IDXGIOutput3 methods ***/
    HRESULT (STDMETHODCALLTYPE *CheckOverlaySupport)(
        IDXGIOutput5 *This,
        DXGI_FORMAT EnumFormat,
        IUnknown *pConcernedDevice,
        UINT *pFlags);

    /*** IDXGIOutput4 methods ***/
    HRESULT (STDMETHODCALLTYPE *CheckOverlayColorSpaceSupport)(
        IDXGIOutput5 *This,
        DXGI_FORMAT Format,
        DXGI_COLOR_SPACE_TYPE ColorSpace,
        IUnknown *pConcernedDevice,
        UINT *pFlags);

    /*** IDXGIOutput5 methods ***/
    HRESULT (STDMETHODCALLTYPE *DuplicateOutput1)(
        IDXGIOutput5 *This,
        IUnknown *pDevice,
        UINT Flags,
        UINT SupportedFormatsCount,
        const DXGI_FORMAT *pSupportedFormats,
        IDXGIOutputDuplication **ppOutputDuplication);

    END_INTERFACE
} IDXGIOutput5Vtbl;

interface IDXGIOutput5 {
    CONST_VTBL IDXGIOutput5Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIOutput5_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIOutput5_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIOutput5_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGIOutput5_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGIOutput5_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGIOutput5_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGIOutput5_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIOutput methods ***/
#define IDXGIOutput5_GetDesc(This,pDesc) (This)->lpVtbl->GetDesc(This,pDesc)
#define IDXGIOutput5_GetDisplayModeList(This,EnumFormat,Flags,pNumModes,pDesc) (This)->lpVtbl->GetDisplayModeList(This,EnumFormat,Flags,pNumModes,pDesc)
#define IDXGIOutput5_FindClosestMatchingMode(This,pModeToMatch,pClosestMatch,pConcernedDevice) (This)->lpVtbl->FindClosestMatchingMode(This,pModeToMatch,pClosestMatch,pConcernedDevice)
#define IDXGIOutput5_WaitForVBlank(This) (This)->lpVtbl->WaitForVBlank(This)
#define IDXGIOutput5_TakeOwnership(This,pDevice,Exclusive) (This)->lpVtbl->TakeOwnership(This,pDevice,Exclusive)
#define IDXGIOutput5_ReleaseOwnership(This) (This)->lpVtbl->ReleaseOwnership(This)
#define IDXGIOutput5_GetGammaControlCapabilities(This,pGammaCaps) (This)->lpVtbl->GetGammaControlCapabilities(This,pGammaCaps)
#define IDXGIOutput5_SetGammaControl(This,pArray) (This)->lpVtbl->SetGammaControl(This,pArray)
#define IDXGIOutput5_GetGammaControl(This,pArray) (This)->lpVtbl->GetGammaControl(This,pArray)
#define IDXGIOutput5_SetDisplaySurface(This,pScanoutSurface) (This)->lpVtbl->SetDisplaySurface(This,pScanoutSurface)
#define IDXGIOutput5_GetDisplaySurfaceData(This,pDestination) (This)->lpVtbl->GetDisplaySurfaceData(This,pDestination)
#define IDXGIOutput5_GetFrameStatistics(This,pStats) (This)->lpVtbl->GetFrameStatistics(This,pStats)
/*** IDXGIOutput1 methods ***/
#define IDXGIOutput5_GetDisplayModeList1(This,EnumFormat,Flags,pNumModes,pDesc) (This)->lpVtbl->GetDisplayModeList1(This,EnumFormat,Flags,pNumModes,pDesc)
#define IDXGIOutput5_FindClosestMatchingMode1(This,pModeToMatch,pClosestMatch,pConcernedDevice) (This)->lpVtbl->FindClosestMatchingMode1(This,pModeToMatch,pClosestMatch,pConcernedDevice)
#define IDXGIOutput5_GetDisplaySurfaceData1(This,pDestination) (This)->lpVtbl->GetDisplaySurfaceData1(This,pDestination)
#define IDXGIOutput5_DuplicateOutput(This,pDevice,ppOutputDuplication) (This)->lpVtbl->DuplicateOutput(This,pDevice,ppOutputDuplication)
/*** IDXGIOutput2 methods ***/
#define IDXGIOutput5_SupportsOverlays(This) (This)->lpVtbl->SupportsOverlays(This)
/*** IDXGIOutput3 methods ***/
#define IDXGIOutput5_CheckOverlaySupport(This,EnumFormat,pConcernedDevice,pFlags) (This)->lpVtbl->CheckOverlaySupport(This,EnumFormat,pConcernedDevice,pFlags)
/*** IDXGIOutput4 methods ***/
#define IDXGIOutput5_CheckOverlayColorSpaceSupport(This,Format,ColorSpace,pConcernedDevice,pFlags) (This)->lpVtbl->CheckOverlayColorSpaceSupport(This,Format,ColorSpace,pConcernedDevice,pFlags)
/*** IDXGIOutput5 methods ***/
#define IDXGIOutput5_DuplicateOutput1(This,pDevice,Flags,SupportedFormatsCount,pSupportedFormats,ppOutputDuplication) (This)->lpVtbl->DuplicateOutput1(This,pDevice,Flags,SupportedFormatsCount,pSupportedFormats,ppOutputDuplication)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIOutput5_QueryInterface(IDXGIOutput5* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIOutput5_AddRef(IDXGIOutput5* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIOutput5_Release(IDXGIOutput5* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGIOutput5_SetPrivateData(IDXGIOutput5* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGIOutput5_SetPrivateDataInterface(IDXGIOutput5* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGIOutput5_GetPrivateData(IDXGIOutput5* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGIOutput5_GetParent(IDXGIOutput5* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIOutput methods ***/
static FORCEINLINE HRESULT IDXGIOutput5_GetDesc(IDXGIOutput5* This,DXGI_OUTPUT_DESC *pDesc) {
    return This->lpVtbl->GetDesc(This,pDesc);
}
static FORCEINLINE HRESULT IDXGIOutput5_GetDisplayModeList(IDXGIOutput5* This,DXGI_FORMAT EnumFormat,UINT Flags,UINT *pNumModes,DXGI_MODE_DESC *pDesc) {
    return This->lpVtbl->GetDisplayModeList(This,EnumFormat,Flags,pNumModes,pDesc);
}
static FORCEINLINE HRESULT IDXGIOutput5_FindClosestMatchingMode(IDXGIOutput5* This,const DXGI_MODE_DESC *pModeToMatch,DXGI_MODE_DESC *pClosestMatch,IUnknown *pConcernedDevice) {
    return This->lpVtbl->FindClosestMatchingMode(This,pModeToMatch,pClosestMatch,pConcernedDevice);
}
static FORCEINLINE HRESULT IDXGIOutput5_WaitForVBlank(IDXGIOutput5* This) {
    return This->lpVtbl->WaitForVBlank(This);
}
static FORCEINLINE HRESULT IDXGIOutput5_TakeOwnership(IDXGIOutput5* This,IUnknown *pDevice,BOOL Exclusive) {
    return This->lpVtbl->TakeOwnership(This,pDevice,Exclusive);
}
static FORCEINLINE void IDXGIOutput5_ReleaseOwnership(IDXGIOutput5* This) {
    This->lpVtbl->ReleaseOwnership(This);
}
static FORCEINLINE HRESULT IDXGIOutput5_GetGammaControlCapabilities(IDXGIOutput5* This,DXGI_GAMMA_CONTROL_CAPABILITIES *pGammaCaps) {
    return This->lpVtbl->GetGammaControlCapabilities(This,pGammaCaps);
}
static FORCEINLINE HRESULT IDXGIOutput5_SetGammaControl(IDXGIOutput5* This,const DXGI_GAMMA_CONTROL *pArray) {
    return This->lpVtbl->SetGammaControl(This,pArray);
}
static FORCEINLINE HRESULT IDXGIOutput5_GetGammaControl(IDXGIOutput5* This,DXGI_GAMMA_CONTROL *pArray) {
    return This->lpVtbl->GetGammaControl(This,pArray);
}
static FORCEINLINE HRESULT IDXGIOutput5_SetDisplaySurface(IDXGIOutput5* This,IDXGISurface *pScanoutSurface) {
    return This->lpVtbl->SetDisplaySurface(This,pScanoutSurface);
}
static FORCEINLINE HRESULT IDXGIOutput5_GetDisplaySurfaceData(IDXGIOutput5* This,IDXGISurface *pDestination) {
    return This->lpVtbl->GetDisplaySurfaceData(This,pDestination);
}
static FORCEINLINE HRESULT IDXGIOutput5_GetFrameStatistics(IDXGIOutput5* This,DXGI_FRAME_STATISTICS *pStats) {
    return This->lpVtbl->GetFrameStatistics(This,pStats);
}
/*** IDXGIOutput1 methods ***/
static FORCEINLINE HRESULT IDXGIOutput5_GetDisplayModeList1(IDXGIOutput5* This,DXGI_FORMAT EnumFormat,UINT Flags,UINT *pNumModes,DXGI_MODE_DESC1 *pDesc) {
    return This->lpVtbl->GetDisplayModeList1(This,EnumFormat,Flags,pNumModes,pDesc);
}
static FORCEINLINE HRESULT IDXGIOutput5_FindClosestMatchingMode1(IDXGIOutput5* This,const DXGI_MODE_DESC1 *pModeToMatch,DXGI_MODE_DESC1 *pClosestMatch,IUnknown *pConcernedDevice) {
    return This->lpVtbl->FindClosestMatchingMode1(This,pModeToMatch,pClosestMatch,pConcernedDevice);
}
static FORCEINLINE HRESULT IDXGIOutput5_GetDisplaySurfaceData1(IDXGIOutput5* This,IDXGIResource *pDestination) {
    return This->lpVtbl->GetDisplaySurfaceData1(This,pDestination);
}
static FORCEINLINE HRESULT IDXGIOutput5_DuplicateOutput(IDXGIOutput5* This,IUnknown *pDevice,IDXGIOutputDuplication **ppOutputDuplication) {
    return This->lpVtbl->DuplicateOutput(This,pDevice,ppOutputDuplication);
}
/*** IDXGIOutput2 methods ***/
static FORCEINLINE BOOL IDXGIOutput5_SupportsOverlays(IDXGIOutput5* This) {
    return This->lpVtbl->SupportsOverlays(This);
}
/*** IDXGIOutput3 methods ***/
static FORCEINLINE HRESULT IDXGIOutput5_CheckOverlaySupport(IDXGIOutput5* This,DXGI_FORMAT EnumFormat,IUnknown *pConcernedDevice,UINT *pFlags) {
    return This->lpVtbl->CheckOverlaySupport(This,EnumFormat,pConcernedDevice,pFlags);
}
/*** IDXGIOutput4 methods ***/
static FORCEINLINE HRESULT IDXGIOutput5_CheckOverlayColorSpaceSupport(IDXGIOutput5* This,DXGI_FORMAT Format,DXGI_COLOR_SPACE_TYPE ColorSpace,IUnknown *pConcernedDevice,UINT *pFlags) {
    return This->lpVtbl->CheckOverlayColorSpaceSupport(This,Format,ColorSpace,pConcernedDevice,pFlags);
}
/*** IDXGIOutput5 methods ***/
static FORCEINLINE HRESULT IDXGIOutput5_DuplicateOutput1(IDXGIOutput5* This,IUnknown *pDevice,UINT Flags,UINT SupportedFormatsCount,const DXGI_FORMAT *pSupportedFormats,IDXGIOutputDuplication **ppOutputDuplication) {
    return This->lpVtbl->DuplicateOutput1(This,pDevice,Flags,SupportedFormatsCount,pSupportedFormats,ppOutputDuplication);
}
#endif
#endif

#endif


#endif  /* __IDXGIOutput5_INTERFACE_DEFINED__ */

typedef enum DXGI_HDR_METADATA_TYPE {
    DXGI_HDR_METADATA_TYPE_NONE = 0,
    DXGI_HDR_METADATA_TYPE_HDR10 = 1,
    DXGI_HDR_METADATA_TYPE_HDR10PLUS = 2
} DXGI_HDR_METADATA_TYPE;
typedef struct DXGI_HDR_METADATA_HDR10 {
    UINT16 RedPrimary[2];
    UINT16 GreenPrimary[2];
    UINT16 BluePrimary[2];
    UINT16 WhitePoint[2];
    UINT MaxMasteringLuminance;
    UINT MinMasteringLuminance;
    UINT16 MaxContentLightLevel;
    UINT16 MaxFrameAverageLightLevel;
} DXGI_HDR_METADATA_HDR10;
typedef struct DXGI_HDR_METADATA_HDR10PLUS {
    BYTE Data[72];
} DXGI_HDR_METADATA_HDR10PLUS;
/*****************************************************************************
 * IDXGISwapChain4 interface
 */
#ifndef __IDXGISwapChain4_INTERFACE_DEFINED__
#define __IDXGISwapChain4_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGISwapChain4, 0x3d585d5a, 0xbd4a, 0x489e, 0xb1,0xf4, 0x3d,0xbc,0xb6,0x45,0x2f,0xfb);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("3d585d5a-bd4a-489e-b1f4-3dbcb6452ffb")
IDXGISwapChain4 : public IDXGISwapChain3
{
    virtual HRESULT STDMETHODCALLTYPE SetHDRMetaData(
        DXGI_HDR_METADATA_TYPE Type,
        UINT Size,
        void *pMetaData) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGISwapChain4, 0x3d585d5a, 0xbd4a, 0x489e, 0xb1,0xf4, 0x3d,0xbc,0xb6,0x45,0x2f,0xfb)
#endif
#else
typedef struct IDXGISwapChain4Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGISwapChain4 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGISwapChain4 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGISwapChain4 *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGISwapChain4 *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGISwapChain4 *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGISwapChain4 *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGISwapChain4 *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIDeviceSubObject methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDevice)(
        IDXGISwapChain4 *This,
        REFIID riid,
        void **ppDevice);

    /*** IDXGISwapChain methods ***/
    HRESULT (STDMETHODCALLTYPE *Present)(
        IDXGISwapChain4 *This,
        UINT SyncInterval,
        UINT Flags);

    HRESULT (STDMETHODCALLTYPE *GetBuffer)(
        IDXGISwapChain4 *This,
        UINT Buffer,
        REFIID riid,
        void **ppSurface);

    HRESULT (STDMETHODCALLTYPE *SetFullscreenState)(
        IDXGISwapChain4 *This,
        BOOL Fullscreen,
        IDXGIOutput *pTarget);

    HRESULT (STDMETHODCALLTYPE *GetFullscreenState)(
        IDXGISwapChain4 *This,
        BOOL *pFullscreen,
        IDXGIOutput **ppTarget);

    HRESULT (STDMETHODCALLTYPE *GetDesc)(
        IDXGISwapChain4 *This,
        DXGI_SWAP_CHAIN_DESC *pDesc);

    HRESULT (STDMETHODCALLTYPE *ResizeBuffers)(
        IDXGISwapChain4 *This,
        UINT BufferCount,
        UINT Width,
        UINT Height,
        DXGI_FORMAT NewFormat,
        UINT SwapChainFlags);

    HRESULT (STDMETHODCALLTYPE *ResizeTarget)(
        IDXGISwapChain4 *This,
        const DXGI_MODE_DESC *pNewTargetParameters);

    HRESULT (STDMETHODCALLTYPE *GetContainingOutput)(
        IDXGISwapChain4 *This,
        IDXGIOutput **ppOutput);

    HRESULT (STDMETHODCALLTYPE *GetFrameStatistics)(
        IDXGISwapChain4 *This,
        DXGI_FRAME_STATISTICS *pStats);

    HRESULT (STDMETHODCALLTYPE *GetLastPresentCount)(
        IDXGISwapChain4 *This,
        UINT *pLastPresentCount);

    /*** IDXGISwapChain1 methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDesc1)(
        IDXGISwapChain4 *This,
        DXGI_SWAP_CHAIN_DESC1 *pDesc);

    HRESULT (STDMETHODCALLTYPE *GetFullscreenDesc)(
        IDXGISwapChain4 *This,
        DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pDesc);

    HRESULT (STDMETHODCALLTYPE *GetHwnd)(
        IDXGISwapChain4 *This,
        HWND *pHwnd);

    HRESULT (STDMETHODCALLTYPE *GetCoreWindow)(
        IDXGISwapChain4 *This,
        REFIID refiid,
        void **ppUnk);

    HRESULT (STDMETHODCALLTYPE *Present1)(
        IDXGISwapChain4 *This,
        UINT SyncInterval,
        UINT PresentFlags,
        const DXGI_PRESENT_PARAMETERS *pPresentParameters);

    BOOL (STDMETHODCALLTYPE *IsTemporaryMonoSupported)(
        IDXGISwapChain4 *This);

    HRESULT (STDMETHODCALLTYPE *GetRestrictToOutput)(
        IDXGISwapChain4 *This,
        IDXGIOutput **ppRestrictToOutput);

    HRESULT (STDMETHODCALLTYPE *SetBackgroundColor)(
        IDXGISwapChain4 *This,
        const DXGI_RGBA *pColor);

    HRESULT (STDMETHODCALLTYPE *GetBackgroundColor)(
        IDXGISwapChain4 *This,
        DXGI_RGBA *pColor);

    HRESULT (STDMETHODCALLTYPE *SetRotation)(
        IDXGISwapChain4 *This,
        DXGI_MODE_ROTATION Rotation);

    HRESULT (STDMETHODCALLTYPE *GetRotation)(
        IDXGISwapChain4 *This,
        DXGI_MODE_ROTATION *pRotation);

    /*** IDXGISwapChain2 methods ***/
    HRESULT (STDMETHODCALLTYPE *SetSourceSize)(
        IDXGISwapChain4 *This,
        UINT Width,
        UINT Height);

    HRESULT (STDMETHODCALLTYPE *GetSourceSize)(
        IDXGISwapChain4 *This,
        UINT *pWidth,
        UINT *pHeight);

    HRESULT (STDMETHODCALLTYPE *SetMaximumFrameLatency)(
        IDXGISwapChain4 *This,
        UINT MaxLatency);

    HRESULT (STDMETHODCALLTYPE *GetMaximumFrameLatency)(
        IDXGISwapChain4 *This,
        UINT *pMaxLatency);

    HANDLE (STDMETHODCALLTYPE *GetFrameLatencyWaitableObject)(
        IDXGISwapChain4 *This);

    HRESULT (STDMETHODCALLTYPE *SetMatrixTransform)(
        IDXGISwapChain4 *This,
        const DXGI_MATRIX_3X2_F *pMatrix);

    HRESULT (STDMETHODCALLTYPE *GetMatrixTransform)(
        IDXGISwapChain4 *This,
        DXGI_MATRIX_3X2_F *pMatrix);

    /*** IDXGISwapChain3 methods ***/
    UINT (STDMETHODCALLTYPE *GetCurrentBackBufferIndex)(
        IDXGISwapChain4 *This);

    HRESULT (STDMETHODCALLTYPE *CheckColorSpaceSupport)(
        IDXGISwapChain4 *This,
        DXGI_COLOR_SPACE_TYPE ColorSpace,
        UINT *pColorSpaceSupport);

    HRESULT (STDMETHODCALLTYPE *SetColorSpace1)(
        IDXGISwapChain4 *This,
        DXGI_COLOR_SPACE_TYPE ColorSpace);

    HRESULT (STDMETHODCALLTYPE *ResizeBuffers1)(
        IDXGISwapChain4 *This,
        UINT BufferCount,
        UINT Width,
        UINT Height,
        DXGI_FORMAT Format,
        UINT SwapChainFlags,
        const UINT *pCreationNodeMask,
        IUnknown *const *ppPresentQueue);

    /*** IDXGISwapChain4 methods ***/
    HRESULT (STDMETHODCALLTYPE *SetHDRMetaData)(
        IDXGISwapChain4 *This,
        DXGI_HDR_METADATA_TYPE Type,
        UINT Size,
        void *pMetaData);

    END_INTERFACE
} IDXGISwapChain4Vtbl;

interface IDXGISwapChain4 {
    CONST_VTBL IDXGISwapChain4Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGISwapChain4_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGISwapChain4_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGISwapChain4_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGISwapChain4_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGISwapChain4_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGISwapChain4_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGISwapChain4_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIDeviceSubObject methods ***/
#define IDXGISwapChain4_GetDevice(This,riid,ppDevice) (This)->lpVtbl->GetDevice(This,riid,ppDevice)
/*** IDXGISwapChain methods ***/
#define IDXGISwapChain4_Present(This,SyncInterval,Flags) (This)->lpVtbl->Present(This,SyncInterval,Flags)
#define IDXGISwapChain4_GetBuffer(This,Buffer,riid,ppSurface) (This)->lpVtbl->GetBuffer(This,Buffer,riid,ppSurface)
#define IDXGISwapChain4_SetFullscreenState(This,Fullscreen,pTarget) (This)->lpVtbl->SetFullscreenState(This,Fullscreen,pTarget)
#define IDXGISwapChain4_GetFullscreenState(This,pFullscreen,ppTarget) (This)->lpVtbl->GetFullscreenState(This,pFullscreen,ppTarget)
#define IDXGISwapChain4_GetDesc(This,pDesc) (This)->lpVtbl->GetDesc(This,pDesc)
#define IDXGISwapChain4_ResizeBuffers(This,BufferCount,Width,Height,NewFormat,SwapChainFlags) (This)->lpVtbl->ResizeBuffers(This,BufferCount,Width,Height,NewFormat,SwapChainFlags)
#define IDXGISwapChain4_ResizeTarget(This,pNewTargetParameters) (This)->lpVtbl->ResizeTarget(This,pNewTargetParameters)
#define IDXGISwapChain4_GetContainingOutput(This,ppOutput) (This)->lpVtbl->GetContainingOutput(This,ppOutput)
#define IDXGISwapChain4_GetFrameStatistics(This,pStats) (This)->lpVtbl->GetFrameStatistics(This,pStats)
#define IDXGISwapChain4_GetLastPresentCount(This,pLastPresentCount) (This)->lpVtbl->GetLastPresentCount(This,pLastPresentCount)
/*** IDXGISwapChain1 methods ***/
#define IDXGISwapChain4_GetDesc1(This,pDesc) (This)->lpVtbl->GetDesc1(This,pDesc)
#define IDXGISwapChain4_GetFullscreenDesc(This,pDesc) (This)->lpVtbl->GetFullscreenDesc(This,pDesc)
#define IDXGISwapChain4_GetHwnd(This,pHwnd) (This)->lpVtbl->GetHwnd(This,pHwnd)
#define IDXGISwapChain4_GetCoreWindow(This,refiid,ppUnk) (This)->lpVtbl->GetCoreWindow(This,refiid,ppUnk)
#define IDXGISwapChain4_Present1(This,SyncInterval,PresentFlags,pPresentParameters) (This)->lpVtbl->Present1(This,SyncInterval,PresentFlags,pPresentParameters)
#define IDXGISwapChain4_IsTemporaryMonoSupported(This) (This)->lpVtbl->IsTemporaryMonoSupported(This)
#define IDXGISwapChain4_GetRestrictToOutput(This,ppRestrictToOutput) (This)->lpVtbl->GetRestrictToOutput(This,ppRestrictToOutput)
#define IDXGISwapChain4_SetBackgroundColor(This,pColor) (This)->lpVtbl->SetBackgroundColor(This,pColor)
#define IDXGISwapChain4_GetBackgroundColor(This,pColor) (This)->lpVtbl->GetBackgroundColor(This,pColor)
#define IDXGISwapChain4_SetRotation(This,Rotation) (This)->lpVtbl->SetRotation(This,Rotation)
#define IDXGISwapChain4_GetRotation(This,pRotation) (This)->lpVtbl->GetRotation(This,pRotation)
/*** IDXGISwapChain2 methods ***/
#define IDXGISwapChain4_SetSourceSize(This,Width,Height) (This)->lpVtbl->SetSourceSize(This,Width,Height)
#define IDXGISwapChain4_GetSourceSize(This,pWidth,pHeight) (This)->lpVtbl->GetSourceSize(This,pWidth,pHeight)
#define IDXGISwapChain4_SetMaximumFrameLatency(This,MaxLatency) (This)->lpVtbl->SetMaximumFrameLatency(This,MaxLatency)
#define IDXGISwapChain4_GetMaximumFrameLatency(This,pMaxLatency) (This)->lpVtbl->GetMaximumFrameLatency(This,pMaxLatency)
#define IDXGISwapChain4_GetFrameLatencyWaitableObject(This) (This)->lpVtbl->GetFrameLatencyWaitableObject(This)
#define IDXGISwapChain4_SetMatrixTransform(This,pMatrix) (This)->lpVtbl->SetMatrixTransform(This,pMatrix)
#define IDXGISwapChain4_GetMatrixTransform(This,pMatrix) (This)->lpVtbl->GetMatrixTransform(This,pMatrix)
/*** IDXGISwapChain3 methods ***/
#define IDXGISwapChain4_GetCurrentBackBufferIndex(This) (This)->lpVtbl->GetCurrentBackBufferIndex(This)
#define IDXGISwapChain4_CheckColorSpaceSupport(This,ColorSpace,pColorSpaceSupport) (This)->lpVtbl->CheckColorSpaceSupport(This,ColorSpace,pColorSpaceSupport)
#define IDXGISwapChain4_SetColorSpace1(This,ColorSpace) (This)->lpVtbl->SetColorSpace1(This,ColorSpace)
#define IDXGISwapChain4_ResizeBuffers1(This,BufferCount,Width,Height,Format,SwapChainFlags,pCreationNodeMask,ppPresentQueue) (This)->lpVtbl->ResizeBuffers1(This,BufferCount,Width,Height,Format,SwapChainFlags,pCreationNodeMask,ppPresentQueue)
/*** IDXGISwapChain4 methods ***/
#define IDXGISwapChain4_SetHDRMetaData(This,Type,Size,pMetaData) (This)->lpVtbl->SetHDRMetaData(This,Type,Size,pMetaData)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGISwapChain4_QueryInterface(IDXGISwapChain4* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGISwapChain4_AddRef(IDXGISwapChain4* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGISwapChain4_Release(IDXGISwapChain4* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGISwapChain4_SetPrivateData(IDXGISwapChain4* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGISwapChain4_SetPrivateDataInterface(IDXGISwapChain4* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGISwapChain4_GetPrivateData(IDXGISwapChain4* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGISwapChain4_GetParent(IDXGISwapChain4* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIDeviceSubObject methods ***/
static FORCEINLINE HRESULT IDXGISwapChain4_GetDevice(IDXGISwapChain4* This,REFIID riid,void **ppDevice) {
    return This->lpVtbl->GetDevice(This,riid,ppDevice);
}
/*** IDXGISwapChain methods ***/
static FORCEINLINE HRESULT IDXGISwapChain4_Present(IDXGISwapChain4* This,UINT SyncInterval,UINT Flags) {
    return This->lpVtbl->Present(This,SyncInterval,Flags);
}
static FORCEINLINE HRESULT IDXGISwapChain4_GetBuffer(IDXGISwapChain4* This,UINT Buffer,REFIID riid,void **ppSurface) {
    return This->lpVtbl->GetBuffer(This,Buffer,riid,ppSurface);
}
static FORCEINLINE HRESULT IDXGISwapChain4_SetFullscreenState(IDXGISwapChain4* This,BOOL Fullscreen,IDXGIOutput *pTarget) {
    return This->lpVtbl->SetFullscreenState(This,Fullscreen,pTarget);
}
static FORCEINLINE HRESULT IDXGISwapChain4_GetFullscreenState(IDXGISwapChain4* This,BOOL *pFullscreen,IDXGIOutput **ppTarget) {
    return This->lpVtbl->GetFullscreenState(This,pFullscreen,ppTarget);
}
static FORCEINLINE HRESULT IDXGISwapChain4_GetDesc(IDXGISwapChain4* This,DXGI_SWAP_CHAIN_DESC *pDesc) {
    return This->lpVtbl->GetDesc(This,pDesc);
}
static FORCEINLINE HRESULT IDXGISwapChain4_ResizeBuffers(IDXGISwapChain4* This,UINT BufferCount,UINT Width,UINT Height,DXGI_FORMAT NewFormat,UINT SwapChainFlags) {
    return This->lpVtbl->ResizeBuffers(This,BufferCount,Width,Height,NewFormat,SwapChainFlags);
}
static FORCEINLINE HRESULT IDXGISwapChain4_ResizeTarget(IDXGISwapChain4* This,const DXGI_MODE_DESC *pNewTargetParameters) {
    return This->lpVtbl->ResizeTarget(This,pNewTargetParameters);
}
static FORCEINLINE HRESULT IDXGISwapChain4_GetContainingOutput(IDXGISwapChain4* This,IDXGIOutput **ppOutput) {
    return This->lpVtbl->GetContainingOutput(This,ppOutput);
}
static FORCEINLINE HRESULT IDXGISwapChain4_GetFrameStatistics(IDXGISwapChain4* This,DXGI_FRAME_STATISTICS *pStats) {
    return This->lpVtbl->GetFrameStatistics(This,pStats);
}
static FORCEINLINE HRESULT IDXGISwapChain4_GetLastPresentCount(IDXGISwapChain4* This,UINT *pLastPresentCount) {
    return This->lpVtbl->GetLastPresentCount(This,pLastPresentCount);
}
/*** IDXGISwapChain1 methods ***/
static FORCEINLINE HRESULT IDXGISwapChain4_GetDesc1(IDXGISwapChain4* This,DXGI_SWAP_CHAIN_DESC1 *pDesc) {
    return This->lpVtbl->GetDesc1(This,pDesc);
}
static FORCEINLINE HRESULT IDXGISwapChain4_GetFullscreenDesc(IDXGISwapChain4* This,DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pDesc) {
    return This->lpVtbl->GetFullscreenDesc(This,pDesc);
}
static FORCEINLINE HRESULT IDXGISwapChain4_GetHwnd(IDXGISwapChain4* This,HWND *pHwnd) {
    return This->lpVtbl->GetHwnd(This,pHwnd);
}
static FORCEINLINE HRESULT IDXGISwapChain4_GetCoreWindow(IDXGISwapChain4* This,REFIID refiid,void **ppUnk) {
    return This->lpVtbl->GetCoreWindow(This,refiid,ppUnk);
}
static FORCEINLINE HRESULT IDXGISwapChain4_Present1(IDXGISwapChain4* This,UINT SyncInterval,UINT PresentFlags,const DXGI_PRESENT_PARAMETERS *pPresentParameters) {
    return This->lpVtbl->Present1(This,SyncInterval,PresentFlags,pPresentParameters);
}
static FORCEINLINE BOOL IDXGISwapChain4_IsTemporaryMonoSupported(IDXGISwapChain4* This) {
    return This->lpVtbl->IsTemporaryMonoSupported(This);
}
static FORCEINLINE HRESULT IDXGISwapChain4_GetRestrictToOutput(IDXGISwapChain4* This,IDXGIOutput **ppRestrictToOutput) {
    return This->lpVtbl->GetRestrictToOutput(This,ppRestrictToOutput);
}
static FORCEINLINE HRESULT IDXGISwapChain4_SetBackgroundColor(IDXGISwapChain4* This,const DXGI_RGBA *pColor) {
    return This->lpVtbl->SetBackgroundColor(This,pColor);
}
static FORCEINLINE HRESULT IDXGISwapChain4_GetBackgroundColor(IDXGISwapChain4* This,DXGI_RGBA *pColor) {
    return This->lpVtbl->GetBackgroundColor(This,pColor);
}
static FORCEINLINE HRESULT IDXGISwapChain4_SetRotation(IDXGISwapChain4* This,DXGI_MODE_ROTATION Rotation) {
    return This->lpVtbl->SetRotation(This,Rotation);
}
static FORCEINLINE HRESULT IDXGISwapChain4_GetRotation(IDXGISwapChain4* This,DXGI_MODE_ROTATION *pRotation) {
    return This->lpVtbl->GetRotation(This,pRotation);
}
/*** IDXGISwapChain2 methods ***/
static FORCEINLINE HRESULT IDXGISwapChain4_SetSourceSize(IDXGISwapChain4* This,UINT Width,UINT Height) {
    return This->lpVtbl->SetSourceSize(This,Width,Height);
}
static FORCEINLINE HRESULT IDXGISwapChain4_GetSourceSize(IDXGISwapChain4* This,UINT *pWidth,UINT *pHeight) {
    return This->lpVtbl->GetSourceSize(This,pWidth,pHeight);
}
static FORCEINLINE HRESULT IDXGISwapChain4_SetMaximumFrameLatency(IDXGISwapChain4* This,UINT MaxLatency) {
    return This->lpVtbl->SetMaximumFrameLatency(This,MaxLatency);
}
static FORCEINLINE HRESULT IDXGISwapChain4_GetMaximumFrameLatency(IDXGISwapChain4* This,UINT *pMaxLatency) {
    return This->lpVtbl->GetMaximumFrameLatency(This,pMaxLatency);
}
static FORCEINLINE HANDLE IDXGISwapChain4_GetFrameLatencyWaitableObject(IDXGISwapChain4* This) {
    return This->lpVtbl->GetFrameLatencyWaitableObject(This);
}
static FORCEINLINE HRESULT IDXGISwapChain4_SetMatrixTransform(IDXGISwapChain4* This,const DXGI_MATRIX_3X2_F *pMatrix) {
    return This->lpVtbl->SetMatrixTransform(This,pMatrix);
}
static FORCEINLINE HRESULT IDXGISwapChain4_GetMatrixTransform(IDXGISwapChain4* This,DXGI_MATRIX_3X2_F *pMatrix) {
    return This->lpVtbl->GetMatrixTransform(This,pMatrix);
}
/*** IDXGISwapChain3 methods ***/
static FORCEINLINE UINT IDXGISwapChain4_GetCurrentBackBufferIndex(IDXGISwapChain4* This) {
    return This->lpVtbl->GetCurrentBackBufferIndex(This);
}
static FORCEINLINE HRESULT IDXGISwapChain4_CheckColorSpaceSupport(IDXGISwapChain4* This,DXGI_COLOR_SPACE_TYPE ColorSpace,UINT *pColorSpaceSupport) {
    return This->lpVtbl->CheckColorSpaceSupport(This,ColorSpace,pColorSpaceSupport);
}
static FORCEINLINE HRESULT IDXGISwapChain4_SetColorSpace1(IDXGISwapChain4* This,DXGI_COLOR_SPACE_TYPE ColorSpace) {
    return This->lpVtbl->SetColorSpace1(This,ColorSpace);
}
static FORCEINLINE HRESULT IDXGISwapChain4_ResizeBuffers1(IDXGISwapChain4* This,UINT BufferCount,UINT Width,UINT Height,DXGI_FORMAT Format,UINT SwapChainFlags,const UINT *pCreationNodeMask,IUnknown *const *ppPresentQueue) {
    return This->lpVtbl->ResizeBuffers1(This,BufferCount,Width,Height,Format,SwapChainFlags,pCreationNodeMask,ppPresentQueue);
}
/*** IDXGISwapChain4 methods ***/
static FORCEINLINE HRESULT IDXGISwapChain4_SetHDRMetaData(IDXGISwapChain4* This,DXGI_HDR_METADATA_TYPE Type,UINT Size,void *pMetaData) {
    return This->lpVtbl->SetHDRMetaData(This,Type,Size,pMetaData);
}
#endif
#endif

#endif


#endif  /* __IDXGISwapChain4_INTERFACE_DEFINED__ */

typedef enum _DXGI_OFFER_RESOURCE_FLAGS {
    DXGI_OFFER_RESOURCE_FLAG_ALLOW_DECOMMIT = 0x1
} DXGI_OFFER_RESOURCE_FLAGS;
typedef enum _DXGI_RECLAIM_RESOURCE_RESULTS {
    DXGI_RECLAIM_RESOURCE_RESULT_OK = 0,
    DXGI_RECLAIM_RESOURCE_RESULT_DISCARDED = 1,
    DXGI_RECLAIM_RESOURCE_RESULT_NOT_COMMITTED = 2
} DXGI_RECLAIM_RESOURCE_RESULTS;
/*****************************************************************************
 * IDXGIDevice4 interface
 */
#ifndef __IDXGIDevice4_INTERFACE_DEFINED__
#define __IDXGIDevice4_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIDevice4, 0x95b4f95f, 0xd8da, 0x4ca4, 0x9e,0xe6, 0x3b,0x76,0xd5,0x96,0x8a,0x10);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("95b4f95f-d8da-4ca4-9ee6-3b76d5968a10")
IDXGIDevice4 : public IDXGIDevice3
{
    virtual HRESULT STDMETHODCALLTYPE OfferResources1(
        UINT NumResources,
        IDXGIResource *const *ppResources,
        DXGI_OFFER_RESOURCE_PRIORITY Priority,
        UINT Flags) = 0;

    virtual HRESULT STDMETHODCALLTYPE ReclaimResources1(
        UINT NumResources,
        IDXGIResource *const *ppResources,
        DXGI_RECLAIM_RESOURCE_RESULTS *pResults) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIDevice4, 0x95b4f95f, 0xd8da, 0x4ca4, 0x9e,0xe6, 0x3b,0x76,0xd5,0x96,0x8a,0x10)
#endif
#else
typedef struct IDXGIDevice4Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIDevice4 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIDevice4 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIDevice4 *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGIDevice4 *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGIDevice4 *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGIDevice4 *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGIDevice4 *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIDevice methods ***/
    HRESULT (STDMETHODCALLTYPE *GetAdapter)(
        IDXGIDevice4 *This,
        IDXGIAdapter **pAdapter);

    HRESULT (STDMETHODCALLTYPE *CreateSurface)(
        IDXGIDevice4 *This,
        const DXGI_SURFACE_DESC *pDesc,
        UINT NumSurfaces,
        DXGI_USAGE Usage,
        const DXGI_SHARED_RESOURCE *pSharedResource,
        IDXGISurface **ppSurface);

    HRESULT (STDMETHODCALLTYPE *QueryResourceResidency)(
        IDXGIDevice4 *This,
        IUnknown *const *ppResources,
        DXGI_RESIDENCY *pResidencyStatus,
        UINT NumResources);

    HRESULT (STDMETHODCALLTYPE *SetGPUThreadPriority)(
        IDXGIDevice4 *This,
        INT Priority);

    HRESULT (STDMETHODCALLTYPE *GetGPUThreadPriority)(
        IDXGIDevice4 *This,
        INT *pPriority);

    /*** IDXGIDevice1 methods ***/
    HRESULT (STDMETHODCALLTYPE *SetMaximumFrameLatency)(
        IDXGIDevice4 *This,
        UINT MaxLatency);

    HRESULT (STDMETHODCALLTYPE *GetMaximumFrameLatency)(
        IDXGIDevice4 *This,
        UINT *pMaxLatency);

    /*** IDXGIDevice2 methods ***/
    HRESULT (STDMETHODCALLTYPE *OfferResources)(
        IDXGIDevice4 *This,
        UINT NumResources,
        IDXGIResource *const *ppResources,
        DXGI_OFFER_RESOURCE_PRIORITY Priority);

    HRESULT (STDMETHODCALLTYPE *ReclaimResources)(
        IDXGIDevice4 *This,
        UINT NumResources,
        IDXGIResource *const *ppResources,
        BOOL *pDiscarded);

    HRESULT (STDMETHODCALLTYPE *EnqueueSetEvent)(
        IDXGIDevice4 *This,
        HANDLE hEvent);

    /*** IDXGIDevice3 methods ***/
    void (STDMETHODCALLTYPE *Trim)(
        IDXGIDevice4 *This);

    /*** IDXGIDevice4 methods ***/
    HRESULT (STDMETHODCALLTYPE *OfferResources1)(
        IDXGIDevice4 *This,
        UINT NumResources,
        IDXGIResource *const *ppResources,
        DXGI_OFFER_RESOURCE_PRIORITY Priority,
        UINT Flags);

    HRESULT (STDMETHODCALLTYPE *ReclaimResources1)(
        IDXGIDevice4 *This,
        UINT NumResources,
        IDXGIResource *const *ppResources,
        DXGI_RECLAIM_RESOURCE_RESULTS *pResults);

    END_INTERFACE
} IDXGIDevice4Vtbl;

interface IDXGIDevice4 {
    CONST_VTBL IDXGIDevice4Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIDevice4_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIDevice4_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIDevice4_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGIDevice4_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGIDevice4_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGIDevice4_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGIDevice4_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIDevice methods ***/
#define IDXGIDevice4_GetAdapter(This,pAdapter) (This)->lpVtbl->GetAdapter(This,pAdapter)
#define IDXGIDevice4_CreateSurface(This,pDesc,NumSurfaces,Usage,pSharedResource,ppSurface) (This)->lpVtbl->CreateSurface(This,pDesc,NumSurfaces,Usage,pSharedResource,ppSurface)
#define IDXGIDevice4_QueryResourceResidency(This,ppResources,pResidencyStatus,NumResources) (This)->lpVtbl->QueryResourceResidency(This,ppResources,pResidencyStatus,NumResources)
#define IDXGIDevice4_SetGPUThreadPriority(This,Priority) (This)->lpVtbl->SetGPUThreadPriority(This,Priority)
#define IDXGIDevice4_GetGPUThreadPriority(This,pPriority) (This)->lpVtbl->GetGPUThreadPriority(This,pPriority)
/*** IDXGIDevice1 methods ***/
#define IDXGIDevice4_SetMaximumFrameLatency(This,MaxLatency) (This)->lpVtbl->SetMaximumFrameLatency(This,MaxLatency)
#define IDXGIDevice4_GetMaximumFrameLatency(This,pMaxLatency) (This)->lpVtbl->GetMaximumFrameLatency(This,pMaxLatency)
/*** IDXGIDevice2 methods ***/
#define IDXGIDevice4_OfferResources(This,NumResources,ppResources,Priority) (This)->lpVtbl->OfferResources(This,NumResources,ppResources,Priority)
#define IDXGIDevice4_ReclaimResources(This,NumResources,ppResources,pDiscarded) (This)->lpVtbl->ReclaimResources(This,NumResources,ppResources,pDiscarded)
#define IDXGIDevice4_EnqueueSetEvent(This,hEvent) (This)->lpVtbl->EnqueueSetEvent(This,hEvent)
/*** IDXGIDevice3 methods ***/
#define IDXGIDevice4_Trim(This) (This)->lpVtbl->Trim(This)
/*** IDXGIDevice4 methods ***/
#define IDXGIDevice4_OfferResources1(This,NumResources,ppResources,Priority,Flags) (This)->lpVtbl->OfferResources1(This,NumResources,ppResources,Priority,Flags)
#define IDXGIDevice4_ReclaimResources1(This,NumResources,ppResources,pResults) (This)->lpVtbl->ReclaimResources1(This,NumResources,ppResources,pResults)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIDevice4_QueryInterface(IDXGIDevice4* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIDevice4_AddRef(IDXGIDevice4* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIDevice4_Release(IDXGIDevice4* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGIDevice4_SetPrivateData(IDXGIDevice4* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGIDevice4_SetPrivateDataInterface(IDXGIDevice4* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGIDevice4_GetPrivateData(IDXGIDevice4* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGIDevice4_GetParent(IDXGIDevice4* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIDevice methods ***/
static FORCEINLINE HRESULT IDXGIDevice4_GetAdapter(IDXGIDevice4* This,IDXGIAdapter **pAdapter) {
    return This->lpVtbl->GetAdapter(This,pAdapter);
}
static FORCEINLINE HRESULT IDXGIDevice4_CreateSurface(IDXGIDevice4* This,const DXGI_SURFACE_DESC *pDesc,UINT NumSurfaces,DXGI_USAGE Usage,const DXGI_SHARED_RESOURCE *pSharedResource,IDXGISurface **ppSurface) {
    return This->lpVtbl->CreateSurface(This,pDesc,NumSurfaces,Usage,pSharedResource,ppSurface);
}
static FORCEINLINE HRESULT IDXGIDevice4_QueryResourceResidency(IDXGIDevice4* This,IUnknown *const *ppResources,DXGI_RESIDENCY *pResidencyStatus,UINT NumResources) {
    return This->lpVtbl->QueryResourceResidency(This,ppResources,pResidencyStatus,NumResources);
}
static FORCEINLINE HRESULT IDXGIDevice4_SetGPUThreadPriority(IDXGIDevice4* This,INT Priority) {
    return This->lpVtbl->SetGPUThreadPriority(This,Priority);
}
static FORCEINLINE HRESULT IDXGIDevice4_GetGPUThreadPriority(IDXGIDevice4* This,INT *pPriority) {
    return This->lpVtbl->GetGPUThreadPriority(This,pPriority);
}
/*** IDXGIDevice1 methods ***/
static FORCEINLINE HRESULT IDXGIDevice4_SetMaximumFrameLatency(IDXGIDevice4* This,UINT MaxLatency) {
    return This->lpVtbl->SetMaximumFrameLatency(This,MaxLatency);
}
static FORCEINLINE HRESULT IDXGIDevice4_GetMaximumFrameLatency(IDXGIDevice4* This,UINT *pMaxLatency) {
    return This->lpVtbl->GetMaximumFrameLatency(This,pMaxLatency);
}
/*** IDXGIDevice2 methods ***/
static FORCEINLINE HRESULT IDXGIDevice4_OfferResources(IDXGIDevice4* This,UINT NumResources,IDXGIResource *const *ppResources,DXGI_OFFER_RESOURCE_PRIORITY Priority) {
    return This->lpVtbl->OfferResources(This,NumResources,ppResources,Priority);
}
static FORCEINLINE HRESULT IDXGIDevice4_ReclaimResources(IDXGIDevice4* This,UINT NumResources,IDXGIResource *const *ppResources,BOOL *pDiscarded) {
    return This->lpVtbl->ReclaimResources(This,NumResources,ppResources,pDiscarded);
}
static FORCEINLINE HRESULT IDXGIDevice4_EnqueueSetEvent(IDXGIDevice4* This,HANDLE hEvent) {
    return This->lpVtbl->EnqueueSetEvent(This,hEvent);
}
/*** IDXGIDevice3 methods ***/
static FORCEINLINE void IDXGIDevice4_Trim(IDXGIDevice4* This) {
    This->lpVtbl->Trim(This);
}
/*** IDXGIDevice4 methods ***/
static FORCEINLINE HRESULT IDXGIDevice4_OfferResources1(IDXGIDevice4* This,UINT NumResources,IDXGIResource *const *ppResources,DXGI_OFFER_RESOURCE_PRIORITY Priority,UINT Flags) {
    return This->lpVtbl->OfferResources1(This,NumResources,ppResources,Priority,Flags);
}
static FORCEINLINE HRESULT IDXGIDevice4_ReclaimResources1(IDXGIDevice4* This,UINT NumResources,IDXGIResource *const *ppResources,DXGI_RECLAIM_RESOURCE_RESULTS *pResults) {
    return This->lpVtbl->ReclaimResources1(This,NumResources,ppResources,pResults);
}
#endif
#endif

#endif


#endif  /* __IDXGIDevice4_INTERFACE_DEFINED__ */

typedef enum DXGI_FEATURE {
    DXGI_FEATURE_PRESENT_ALLOW_TEARING = 0
} DXGI_FEATURE;
/*****************************************************************************
 * IDXGIFactory5 interface
 */
#ifndef __IDXGIFactory5_INTERFACE_DEFINED__
#define __IDXGIFactory5_INTERFACE_DEFINED__

DEFINE_GUID(IID_IDXGIFactory5, 0x7632e1f5, 0xee65, 0x4dca, 0x87,0xfd, 0x84,0xcd,0x75,0xf8,0x83,0x8d);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("7632e1f5-ee65-4dca-87fd-84cd75f8838d")
IDXGIFactory5 : public IDXGIFactory4
{
    virtual HRESULT STDMETHODCALLTYPE CheckFeatureSupport(
        DXGI_FEATURE Feature,
        void *pFeatureSupportData,
        UINT FeatureSupportDataSize) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IDXGIFactory5, 0x7632e1f5, 0xee65, 0x4dca, 0x87,0xfd, 0x84,0xcd,0x75,0xf8,0x83,0x8d)
#endif
#else
typedef struct IDXGIFactory5Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IDXGIFactory5 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IDXGIFactory5 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IDXGIFactory5 *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IDXGIFactory5 *This,
        REFGUID Name,
        UINT DataSize,
        const void *pData);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IDXGIFactory5 *This,
        REFGUID Name,
        const IUnknown *pUnknown);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IDXGIFactory5 *This,
        REFGUID Name,
        UINT *pDataSize,
        void *pData);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IDXGIFactory5 *This,
        REFIID riid,
        void **ppParent);

    /*** IDXGIFactory methods ***/
    HRESULT (STDMETHODCALLTYPE *EnumAdapters)(
        IDXGIFactory5 *This,
        UINT Adapter,
        IDXGIAdapter **ppAdapter);

    HRESULT (STDMETHODCALLTYPE *MakeWindowAssociation)(
        IDXGIFactory5 *This,
        HWND WindowHandle,
        UINT Flags);

    HRESULT (STDMETHODCALLTYPE *GetWindowAssociation)(
        IDXGIFactory5 *This,
        HWND *pWindowHandle);

    HRESULT (STDMETHODCALLTYPE *CreateSwapChain)(
        IDXGIFactory5 *This,
        IUnknown *pDevice,
        DXGI_SWAP_CHAIN_DESC *pDesc,
        IDXGISwapChain **ppSwapChain);

    HRESULT (STDMETHODCALLTYPE *CreateSoftwareAdapter)(
        IDXGIFactory5 *This,
        HMODULE Module,
        IDXGIAdapter **ppAdapter);

    /*** IDXGIFactory1 methods ***/
    HRESULT (STDMETHODCALLTYPE *EnumAdapters1)(
        IDXGIFactory5 *This,
        UINT Adapter,
        IDXGIAdapter1 **ppAdapter);

    BOOL (STDMETHODCALLTYPE *IsCurrent)(
        IDXGIFactory5 *This);

    /*** IDXGIFactory2 methods ***/
    BOOL (STDMETHODCALLTYPE *IsWindowedStereoEnabled)(
        IDXGIFactory5 *This);

    HRESULT (STDMETHODCALLTYPE *CreateSwapChainForHwnd)(
        IDXGIFactory5 *This,
        IUnknown *pDevice,
        HWND hWnd,
        const DXGI_SWAP_CHAIN_DESC1 *pDesc,
        const DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pFullscreenDesc,
        IDXGIOutput *pRestrictToOutput,
        IDXGISwapChain1 **ppSwapChain);

    HRESULT (STDMETHODCALLTYPE *CreateSwapChainForCoreWindow)(
        IDXGIFactory5 *This,
        IUnknown *pDevice,
        IUnknown *pWindow,
        const DXGI_SWAP_CHAIN_DESC1 *pDesc,
        IDXGIOutput *pRestrictToOutput,
        IDXGISwapChain1 **ppSwapChain);

    HRESULT (STDMETHODCALLTYPE *GetSharedResourceAdapterLuid)(
        IDXGIFactory5 *This,
        HANDLE hResource,
        LUID *pLuid);

    HRESULT (STDMETHODCALLTYPE *RegisterStereoStatusWindow)(
        IDXGIFactory5 *This,
        HWND WindowHandle,
        UINT wMsg,
        DWORD *pdwCookie);

    HRESULT (STDMETHODCALLTYPE *RegisterStereoStatusEvent)(
        IDXGIFactory5 *This,
        HANDLE hEvent,
        DWORD *pdwCookie);

    void (STDMETHODCALLTYPE *UnregisterStereoStatus)(
        IDXGIFactory5 *This,
        DWORD dwCookie);

    HRESULT (STDMETHODCALLTYPE *RegisterOcclusionStatusWindow)(
        IDXGIFactory5 *This,
        HWND WindowHandle,
        UINT wMsg,
        DWORD *pdwCookie);

    HRESULT (STDMETHODCALLTYPE *RegisterOcclusionStatusEvent)(
        IDXGIFactory5 *This,
        HANDLE hEvent,
        DWORD *pdwCookie);

    void (STDMETHODCALLTYPE *UnregisterOcclusionStatus)(
        IDXGIFactory5 *This,
        DWORD dwCookie);

    HRESULT (STDMETHODCALLTYPE *CreateSwapChainForComposition)(
        IDXGIFactory5 *This,
        IUnknown *pDevice,
        const DXGI_SWAP_CHAIN_DESC1 *pDesc,
        IDXGIOutput *pRestrictToOutput,
        IDXGISwapChain1 **ppSwapChain);

    /*** IDXGIFactory3 methods ***/
    UINT (STDMETHODCALLTYPE *GetCreationFlags)(
        IDXGIFactory5 *This);

    /*** IDXGIFactory4 methods ***/
    HRESULT (STDMETHODCALLTYPE *EnumAdapterByLuid)(
        IDXGIFactory5 *This,
        LUID AdapterLuid,
        REFIID riid,
        void **ppvAdapter);

    HRESULT (STDMETHODCALLTYPE *EnumWarpAdapter)(
        IDXGIFactory5 *This,
        REFIID riid,
        void **ppvAdapter);

    /*** IDXGIFactory5 methods ***/
    HRESULT (STDMETHODCALLTYPE *CheckFeatureSupport)(
        IDXGIFactory5 *This,
        DXGI_FEATURE Feature,
        void *pFeatureSupportData,
        UINT FeatureSupportDataSize);

    END_INTERFACE
} IDXGIFactory5Vtbl;

interface IDXGIFactory5 {
    CONST_VTBL IDXGIFactory5Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IDXGIFactory5_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDXGIFactory5_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDXGIFactory5_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IDXGIFactory5_SetPrivateData(This,Name,DataSize,pData) (This)->lpVtbl->SetPrivateData(This,Name,DataSize,pData)
#define IDXGIFactory5_SetPrivateDataInterface(This,Name,pUnknown) (This)->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown)
#define IDXGIFactory5_GetPrivateData(This,Name,pDataSize,pData) (This)->lpVtbl->GetPrivateData(This,Name,pDataSize,pData)
#define IDXGIFactory5_GetParent(This,riid,ppParent) (This)->lpVtbl->GetParent(This,riid,ppParent)
/*** IDXGIFactory methods ***/
#define IDXGIFactory5_EnumAdapters(This,Adapter,ppAdapter) (This)->lpVtbl->EnumAdapters(This,Adapter,ppAdapter)
#define IDXGIFactory5_MakeWindowAssociation(This,WindowHandle,Flags) (This)->lpVtbl->MakeWindowAssociation(This,WindowHandle,Flags)
#define IDXGIFactory5_GetWindowAssociation(This,pWindowHandle) (This)->lpVtbl->GetWindowAssociation(This,pWindowHandle)
#define IDXGIFactory5_CreateSwapChain(This,pDevice,pDesc,ppSwapChain) (This)->lpVtbl->CreateSwapChain(This,pDevice,pDesc,ppSwapChain)
#define IDXGIFactory5_CreateSoftwareAdapter(This,Module,ppAdapter) (This)->lpVtbl->CreateSoftwareAdapter(This,Module,ppAdapter)
/*** IDXGIFactory1 methods ***/
#define IDXGIFactory5_EnumAdapters1(This,Adapter,ppAdapter) (This)->lpVtbl->EnumAdapters1(This,Adapter,ppAdapter)
#define IDXGIFactory5_IsCurrent(This) (This)->lpVtbl->IsCurrent(This)
/*** IDXGIFactory2 methods ***/
#define IDXGIFactory5_IsWindowedStereoEnabled(This) (This)->lpVtbl->IsWindowedStereoEnabled(This)
#define IDXGIFactory5_CreateSwapChainForHwnd(This,pDevice,hWnd,pDesc,pFullscreenDesc,pRestrictToOutput,ppSwapChain) (This)->lpVtbl->CreateSwapChainForHwnd(This,pDevice,hWnd,pDesc,pFullscreenDesc,pRestrictToOutput,ppSwapChain)
#define IDXGIFactory5_CreateSwapChainForCoreWindow(This,pDevice,pWindow,pDesc,pRestrictToOutput,ppSwapChain) (This)->lpVtbl->CreateSwapChainForCoreWindow(This,pDevice,pWindow,pDesc,pRestrictToOutput,ppSwapChain)
#define IDXGIFactory5_GetSharedResourceAdapterLuid(This,hResource,pLuid) (This)->lpVtbl->GetSharedResourceAdapterLuid(This,hResource,pLuid)
#define IDXGIFactory5_RegisterStereoStatusWindow(This,WindowHandle,wMsg,pdwCookie) (This)->lpVtbl->RegisterStereoStatusWindow(This,WindowHandle,wMsg,pdwCookie)
#define IDXGIFactory5_RegisterStereoStatusEvent(This,hEvent,pdwCookie) (This)->lpVtbl->RegisterStereoStatusEvent(This,hEvent,pdwCookie)
#define IDXGIFactory5_UnregisterStereoStatus(This,dwCookie) (This)->lpVtbl->UnregisterStereoStatus(This,dwCookie)
#define IDXGIFactory5_RegisterOcclusionStatusWindow(This,WindowHandle,wMsg,pdwCookie) (This)->lpVtbl->RegisterOcclusionStatusWindow(This,WindowHandle,wMsg,pdwCookie)
#define IDXGIFactory5_RegisterOcclusionStatusEvent(This,hEvent,pdwCookie) (This)->lpVtbl->RegisterOcclusionStatusEvent(This,hEvent,pdwCookie)
#define IDXGIFactory5_UnregisterOcclusionStatus(This,dwCookie) (This)->lpVtbl->UnregisterOcclusionStatus(This,dwCookie)
#define IDXGIFactory5_CreateSwapChainForComposition(This,pDevice,pDesc,pRestrictToOutput,ppSwapChain) (This)->lpVtbl->CreateSwapChainForComposition(This,pDevice,pDesc,pRestrictToOutput,ppSwapChain)
/*** IDXGIFactory3 methods ***/
#define IDXGIFactory5_GetCreationFlags(This) (This)->lpVtbl->GetCreationFlags(This)
/*** IDXGIFactory4 methods ***/
#define IDXGIFactory5_EnumAdapterByLuid(This,AdapterLuid,riid,ppvAdapter) (This)->lpVtbl->EnumAdapterByLuid(This,AdapterLuid,riid,ppvAdapter)
#define IDXGIFactory5_EnumWarpAdapter(This,riid,ppvAdapter) (This)->lpVtbl->EnumWarpAdapter(This,riid,ppvAdapter)
/*** IDXGIFactory5 methods ***/
#define IDXGIFactory5_CheckFeatureSupport(This,Feature,pFeatureSupportData,FeatureSupportDataSize) (This)->lpVtbl->CheckFeatureSupport(This,Feature,pFeatureSupportData,FeatureSupportDataSize)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IDXGIFactory5_QueryInterface(IDXGIFactory5* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IDXGIFactory5_AddRef(IDXGIFactory5* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IDXGIFactory5_Release(IDXGIFactory5* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IDXGIFactory5_SetPrivateData(IDXGIFactory5* This,REFGUID Name,UINT DataSize,const void *pData) {
    return This->lpVtbl->SetPrivateData(This,Name,DataSize,pData);
}
static FORCEINLINE HRESULT IDXGIFactory5_SetPrivateDataInterface(IDXGIFactory5* This,REFGUID Name,const IUnknown *pUnknown) {
    return This->lpVtbl->SetPrivateDataInterface(This,Name,pUnknown);
}
static FORCEINLINE HRESULT IDXGIFactory5_GetPrivateData(IDXGIFactory5* This,REFGUID Name,UINT *pDataSize,void *pData) {
    return This->lpVtbl->GetPrivateData(This,Name,pDataSize,pData);
}
static FORCEINLINE HRESULT IDXGIFactory5_GetParent(IDXGIFactory5* This,REFIID riid,void **ppParent) {
    return This->lpVtbl->GetParent(This,riid,ppParent);
}
/*** IDXGIFactory methods ***/
static FORCEINLINE HRESULT IDXGIFactory5_EnumAdapters(IDXGIFactory5* This,UINT Adapter,IDXGIAdapter **ppAdapter) {
    return This->lpVtbl->EnumAdapters(This,Adapter,ppAdapter);
}
static FORCEINLINE HRESULT IDXGIFactory5_MakeWindowAssociation(IDXGIFactory5* This,HWND WindowHandle,UINT Flags) {
    return This->lpVtbl->MakeWindowAssociation(This,WindowHandle,Flags);
}
static FORCEINLINE HRESULT IDXGIFactory5_GetWindowAssociation(IDXGIFactory5* This,HWND *pWindowHandle) {
    return This->lpVtbl->GetWindowAssociation(This,pWindowHandle);
}
static FORCEINLINE HRESULT IDXGIFactory5_CreateSwapChain(IDXGIFactory5* This,IUnknown *pDevice,DXGI_SWAP_CHAIN_DESC *pDesc,IDXGISwapChain **ppSwapChain) {
    return This->lpVtbl->CreateSwapChain(This,pDevice,pDesc,ppSwapChain);
}
static FORCEINLINE HRESULT IDXGIFactory5_CreateSoftwareAdapter(IDXGIFactory5* This,HMODULE Module,IDXGIAdapter **ppAdapter) {
    return This->lpVtbl->CreateSoftwareAdapter(This,Module,ppAdapter);
}
/*** IDXGIFactory1 methods ***/
static FORCEINLINE HRESULT IDXGIFactory5_EnumAdapters1(IDXGIFactory5* This,UINT Adapter,IDXGIAdapter1 **ppAdapter) {
    return This->lpVtbl->EnumAdapters1(This,Adapter,ppAdapter);
}
static FORCEINLINE BOOL IDXGIFactory5_IsCurrent(IDXGIFactory5* This) {
    return This->lpVtbl->IsCurrent(This);
}
/*** IDXGIFactory2 methods ***/
static FORCEINLINE BOOL IDXGIFactory5_IsWindowedStereoEnabled(IDXGIFactory5* This) {
    return This->lpVtbl->IsWindowedStereoEnabled(This);
}
static FORCEINLINE HRESULT IDXGIFactory5_CreateSwapChainForHwnd(IDXGIFactory5* This,IUnknown *pDevice,HWND hWnd,const DXGI_SWAP_CHAIN_DESC1 *pDesc,const DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pFullscreenDesc,IDXGIOutput *pRestrictToOutput,IDXGISwapChain1 **ppSwapChain) {
    return This->lpVtbl->CreateSwapChainForHwnd(This,pDevice,hWnd,pDesc,pFullscreenDesc,pRestrictToOutput,ppSwapChain);
}
static FORCEINLINE HRESULT IDXGIFactory5_CreateSwapChainForCoreWindow(IDXGIFactory5* This,IUnknown *pDevice,IUnknown *pWindow,const DXGI_SWAP_CHAIN_DESC1 *pDesc,IDXGIOutput *pRestrictToOutput,IDXGISwapChain1 **ppSwapChain) {
    return This->lpVtbl->CreateSwapChainForCoreWindow(This,pDevice,pWindow,pDesc,pRestrictToOutput,ppSwapChain);
}
static FORCEINLINE HRESULT IDXGIFactory5_GetSharedResourceAdapterLuid(IDXGIFactory5* This,HANDLE hResource,LUID *pLuid) {
    return This->lpVtbl->GetSharedResourceAdapterLuid(This,hResource,pLuid);
}
static FORCEINLINE HRESULT IDXGIFactory5_RegisterStereoStatusWindow(IDXGIFactory5* This,HWND WindowHandle,UINT wMsg,DWORD *pdwCookie) {
    return This->lpVtbl->RegisterStereoStatusWindow(This,WindowHandle,wMsg,pdwCookie);
}
static FORCEINLINE HRESULT IDXGIFactory5_RegisterStereoStatusEvent(IDXGIFactory5* This,HANDLE hEvent,DWORD *pdwCookie) {
    return This->lpVtbl->RegisterStereoStatusEvent(This,hEvent,pdwCookie);
}
static FORCEINLINE void IDXGIFactory5_UnregisterStereoStatus(IDXGIFactory5* This,DWORD dwCookie) {
    This->lpVtbl->UnregisterStereoStatus(This,dwCookie);
}
static FORCEINLINE HRESULT IDXGIFactory5_RegisterOcclusionStatusWindow(IDXGIFactory5* This,HWND WindowHandle,UINT wMsg,DWORD *pdwCookie) {
    return This->lpVtbl->RegisterOcclusionStatusWindow(This,WindowHandle,wMsg,pdwCookie);
}
static FORCEINLINE HRESULT IDXGIFactory5_RegisterOcclusionStatusEvent(IDXGIFactory5* This,HANDLE hEvent,DWORD *pdwCookie) {
    return This->lpVtbl->RegisterOcclusionStatusEvent(This,hEvent,pdwCookie);
}
static FORCEINLINE void IDXGIFactory5_UnregisterOcclusionStatus(IDXGIFactory5* This,DWORD dwCookie) {
    This->lpVtbl->UnregisterOcclusionStatus(This,dwCookie);
}
static FORCEINLINE HRESULT IDXGIFactory5_CreateSwapChainForComposition(IDXGIFactory5* This,IUnknown *pDevice,const DXGI_SWAP_CHAIN_DESC1 *pDesc,IDXGIOutput *pRestrictToOutput,IDXGISwapChain1 **ppSwapChain) {
    return This->lpVtbl->CreateSwapChainForComposition(This,pDevice,pDesc,pRestrictToOutput,ppSwapChain);
}
/*** IDXGIFactory3 methods ***/
static FORCEINLINE UINT IDXGIFactory5_GetCreationFlags(IDXGIFactory5* This) {
    return This->lpVtbl->GetCreationFlags(This);
}
/*** IDXGIFactory4 methods ***/
static FORCEINLINE HRESULT IDXGIFactory5_EnumAdapterByLuid(IDXGIFactory5* This,LUID AdapterLuid,REFIID riid,void **ppvAdapter) {
    return This->lpVtbl->EnumAdapterByLuid(This,AdapterLuid,riid,ppvAdapter);
}
static FORCEINLINE HRESULT IDXGIFactory5_EnumWarpAdapter(IDXGIFactory5* This,REFIID riid,void **ppvAdapter) {
    return This->lpVtbl->EnumWarpAdapter(This,riid,ppvAdapter);
}
/*** IDXGIFactory5 methods ***/
static FORCEINLINE HRESULT IDXGIFactory5_CheckFeatureSupport(IDXGIFactory5* This,DXGI_FEATURE Feature,void *pFeatureSupportData,UINT FeatureSupportDataSize) {
    return This->lpVtbl->CheckFeatureSupport(This,Feature,pFeatureSupportData,FeatureSupportDataSize);
}
#endif
#endif

#endif


#endif  /* __IDXGIFactory5_INTERFACE_DEFINED__ */

#endif /* WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_GAMES) */
DEFINE_GUID(IID_IDXGIOutput5,0x80A07424,0xAB52,0x42EB,0x83,0x3C,0x0C,0x42,0xFD,0x28,0x2D,0x98);
DEFINE_GUID(IID_IDXGISwapChain4,0x3D585D5A,0xBD4A,0x489E,0xB1,0xF4,0x3D,0xBC,0xB6,0x45,0x2F,0xFB);
DEFINE_GUID(IID_IDXGIDevice4,0x95B4F95F,0xD8DA,0x4CA4,0x9E,0xE6,0x3B,0x76,0xD5,0x96,0x8A,0x10);
DEFINE_GUID(IID_IDXGIFactory5,0x7632e1f5,0xee65,0x4dca,0x87,0xfd,0x84,0xcd,0x75,0xf8,0x83,0x8d);
/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __dxgi1_5_h__ */
