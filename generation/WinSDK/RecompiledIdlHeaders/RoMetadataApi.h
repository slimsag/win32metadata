/*** Autogenerated by WIDL 5.0 from ./winrt/RoMetadataApi.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __rometadataapi_h__
#define __rometadataapi_h__

/* Forward declarations */

#ifndef __IMetaDataDispenser_FWD_DEFINED__
#define __IMetaDataDispenser_FWD_DEFINED__
typedef interface IMetaDataDispenser IMetaDataDispenser;
#ifdef __cplusplus
interface IMetaDataDispenser;
#endif /* __cplusplus */
#endif

#ifndef __IMetaDataDispenserEx_FWD_DEFINED__
#define __IMetaDataDispenserEx_FWD_DEFINED__
typedef interface IMetaDataDispenserEx IMetaDataDispenserEx;
#ifdef __cplusplus
interface IMetaDataDispenserEx;
#endif /* __cplusplus */
#endif

#ifndef __IMetaDataAssemblyImport_FWD_DEFINED__
#define __IMetaDataAssemblyImport_FWD_DEFINED__
typedef interface IMetaDataAssemblyImport IMetaDataAssemblyImport;
#ifdef __cplusplus
interface IMetaDataAssemblyImport;
#endif /* __cplusplus */
#endif

#ifndef __IMetaDataImport_FWD_DEFINED__
#define __IMetaDataImport_FWD_DEFINED__
typedef interface IMetaDataImport IMetaDataImport;
#ifdef __cplusplus
interface IMetaDataImport;
#endif /* __cplusplus */
#endif

#ifndef __IMetaDataImport2_FWD_DEFINED__
#define __IMetaDataImport2_FWD_DEFINED__
typedef interface IMetaDataImport2 IMetaDataImport2;
#ifdef __cplusplus
interface IMetaDataImport2;
#endif /* __cplusplus */
#endif

#ifndef __IMetaDataTables_FWD_DEFINED__
#define __IMetaDataTables_FWD_DEFINED__
typedef interface IMetaDataTables IMetaDataTables;
#ifdef __cplusplus
interface IMetaDataTables;
#endif /* __cplusplus */
#endif

#ifndef __IMetaDataTables2_FWD_DEFINED__
#define __IMetaDataTables2_FWD_DEFINED__
typedef interface IMetaDataTables2 IMetaDataTables2;
#ifdef __cplusplus
interface IMetaDataTables2;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <unknwn.h>
#include <oaidl.h>

#ifdef __cplusplus
extern "C" {
#endif

// Declare type representations for C and IDL only
#if !defined(__cplusplus)
typedef __int3264 HCORENUM;
typedef unsigned char COR_SIGNATURE;
typedef COR_SIGNATURE *PCOR_SIGNATURE;
typedef const COR_SIGNATURE *PCCOR_SIGNATURE;
typedef const char *MDUTF8CSTR;
typedef const char *UVCP_CONSTANT;
typedef ULONG32 mdToken;
typedef mdToken mdModule;
typedef mdToken mdTypeRef;
typedef mdToken mdTypeDef;
typedef mdToken mdFieldDef;
typedef mdToken mdMethodDef;
typedef mdToken mdParamDef;
typedef mdToken mdInterfaceImpl;
typedef mdToken mdMemberRef;
typedef mdToken mdCustomAttribute;
typedef mdToken mdPermission;
typedef mdToken mdSignature;
typedef mdToken mdEvent;
typedef mdToken mdProperty;
typedef mdToken mdModuleRef;
typedef mdToken mdAssembly;
typedef mdToken mdAssemblyRef;
typedef mdToken mdFile;
typedef mdToken mdExportedType;
typedef mdToken mdManifestResource;
typedef mdToken mdTypeSpec;
typedef mdToken mdGenericParam;
typedef mdToken mdMethodSpec;
typedef mdToken mdGenericParamConstraint;
typedef mdToken mdString;
typedef struct COR_FIELD_OFFSET {
    mdFieldDef ridOfField;
    ULONG32 ulOffset;
} COR_FIELD_OFFSET;
typedef struct OSINFO {
    DWORD dwOSPlatformId;
    DWORD dwOSMajorVersion;
    DWORD dwOSMinorVersion;
} OSINFO;
typedef struct ASSEMBLYMETADATA {
    USHORT usMajorVersion;
    USHORT usMinorVersion;
    USHORT usBuildNumber;
    USHORT usRevisionNumber;
    LPWSTR szLocale;
    ULONG cbLocale;
    DWORD *rProcessor;
    ULONG ulProcessor;
    OSINFO *rOS;
    ULONG ulOS;
} ASSEMBLYMETADATA;
/*****************************************************************************
 * IMetaDataDispenser interface
 */
#ifndef __IMetaDataDispenser_INTERFACE_DEFINED__
#define __IMetaDataDispenser_INTERFACE_DEFINED__

DEFINE_GUID(IID_IMetaDataDispenser, 0x809c652e, 0x7396, 0x11d2, 0x97,0x71, 0x00,0xa0,0xc9,0xb4,0xd5,0x0c);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("809c652e-7396-11d2-9771-00a0c9b4d50c")
IMetaDataDispenser : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE DefineScope(
        REFCLSID rclsid,
        DWORD dwCreateFlags,
        REFIID riid,
        IUnknown **ppIUnk) = 0;

    virtual HRESULT STDMETHODCALLTYPE OpenScope(
        LPCWSTR szScope,
        DWORD dwOpenFlags,
        REFIID riid,
        IUnknown **ppIUnk) = 0;

    virtual HRESULT STDMETHODCALLTYPE OpenScopeOnMemory(
        const BYTE *pData,
        ULONG cbData,
        DWORD dwOpenFlags,
        REFIID riid,
        IUnknown **ppIUnk) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IMetaDataDispenser, 0x809c652e, 0x7396, 0x11d2, 0x97,0x71, 0x00,0xa0,0xc9,0xb4,0xd5,0x0c)
#endif
#else
typedef struct IMetaDataDispenserVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IMetaDataDispenser *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IMetaDataDispenser *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IMetaDataDispenser *This);

    /*** IMetaDataDispenser methods ***/
    HRESULT (STDMETHODCALLTYPE *DefineScope)(
        IMetaDataDispenser *This,
        REFCLSID rclsid,
        DWORD dwCreateFlags,
        REFIID riid,
        IUnknown **ppIUnk);

    HRESULT (STDMETHODCALLTYPE *OpenScope)(
        IMetaDataDispenser *This,
        LPCWSTR szScope,
        DWORD dwOpenFlags,
        REFIID riid,
        IUnknown **ppIUnk);

    HRESULT (STDMETHODCALLTYPE *OpenScopeOnMemory)(
        IMetaDataDispenser *This,
        const BYTE *pData,
        ULONG cbData,
        DWORD dwOpenFlags,
        REFIID riid,
        IUnknown **ppIUnk);

    END_INTERFACE
} IMetaDataDispenserVtbl;

interface IMetaDataDispenser {
    CONST_VTBL IMetaDataDispenserVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IMetaDataDispenser_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IMetaDataDispenser_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IMetaDataDispenser_Release(This) (This)->lpVtbl->Release(This)
/*** IMetaDataDispenser methods ***/
#define IMetaDataDispenser_DefineScope(This,rclsid,dwCreateFlags,riid,ppIUnk) (This)->lpVtbl->DefineScope(This,rclsid,dwCreateFlags,riid,ppIUnk)
#define IMetaDataDispenser_OpenScope(This,szScope,dwOpenFlags,riid,ppIUnk) (This)->lpVtbl->OpenScope(This,szScope,dwOpenFlags,riid,ppIUnk)
#define IMetaDataDispenser_OpenScopeOnMemory(This,pData,cbData,dwOpenFlags,riid,ppIUnk) (This)->lpVtbl->OpenScopeOnMemory(This,pData,cbData,dwOpenFlags,riid,ppIUnk)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IMetaDataDispenser_QueryInterface(IMetaDataDispenser* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IMetaDataDispenser_AddRef(IMetaDataDispenser* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IMetaDataDispenser_Release(IMetaDataDispenser* This) {
    return This->lpVtbl->Release(This);
}
/*** IMetaDataDispenser methods ***/
static FORCEINLINE HRESULT IMetaDataDispenser_DefineScope(IMetaDataDispenser* This,REFCLSID rclsid,DWORD dwCreateFlags,REFIID riid,IUnknown **ppIUnk) {
    return This->lpVtbl->DefineScope(This,rclsid,dwCreateFlags,riid,ppIUnk);
}
static FORCEINLINE HRESULT IMetaDataDispenser_OpenScope(IMetaDataDispenser* This,LPCWSTR szScope,DWORD dwOpenFlags,REFIID riid,IUnknown **ppIUnk) {
    return This->lpVtbl->OpenScope(This,szScope,dwOpenFlags,riid,ppIUnk);
}
static FORCEINLINE HRESULT IMetaDataDispenser_OpenScopeOnMemory(IMetaDataDispenser* This,const BYTE *pData,ULONG cbData,DWORD dwOpenFlags,REFIID riid,IUnknown **ppIUnk) {
    return This->lpVtbl->OpenScopeOnMemory(This,pData,cbData,dwOpenFlags,riid,ppIUnk);
}
#endif
#endif

#endif


#endif  /* __IMetaDataDispenser_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IMetaDataDispenserEx interface
 */
#ifndef __IMetaDataDispenserEx_INTERFACE_DEFINED__
#define __IMetaDataDispenserEx_INTERFACE_DEFINED__

DEFINE_GUID(IID_IMetaDataDispenserEx, 0x31bcfce2, 0xdafb, 0x11d2, 0x9f,0x81, 0x00,0xc0,0x4f,0x79,0xa0,0xa3);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("31bcfce2-dafb-11d2-9f81-00c04f79a0a3")
IMetaDataDispenserEx : public IMetaDataDispenser
{
    virtual HRESULT STDMETHODCALLTYPE SetOption(
        REFGUID optionId,
        const VARIANT *pValue) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetOption(
        REFGUID optionId,
        VARIANT *pValue) = 0;

    virtual HRESULT STDMETHODCALLTYPE OpenScopeOnITypeInfo(
        ITypeInfo *pITI,
        DWORD dwOpenFlags,
        REFIID riid,
        IUnknown **ppIUnk) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetCORSystemDirectory(
        LPWSTR szBuffer,
        DWORD cchBuffer,
        DWORD *pchBuffer) = 0;

    virtual HRESULT STDMETHODCALLTYPE FindAssembly(
        LPCWSTR szAppBase,
        LPCWSTR szPrivateBin,
        LPCWSTR szGlobalBin,
        LPCWSTR szAssemblyName,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName) = 0;

    virtual HRESULT STDMETHODCALLTYPE FindAssemblyModule(
        LPCWSTR szAppBase,
        LPCWSTR szPrivateBin,
        LPCWSTR szGlobalBin,
        LPCWSTR szAssemblyName,
        LPCWSTR szModuleName,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pcName) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IMetaDataDispenserEx, 0x31bcfce2, 0xdafb, 0x11d2, 0x9f,0x81, 0x00,0xc0,0x4f,0x79,0xa0,0xa3)
#endif
#else
typedef struct IMetaDataDispenserExVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IMetaDataDispenserEx *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IMetaDataDispenserEx *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IMetaDataDispenserEx *This);

    /*** IMetaDataDispenser methods ***/
    HRESULT (STDMETHODCALLTYPE *DefineScope)(
        IMetaDataDispenserEx *This,
        REFCLSID rclsid,
        DWORD dwCreateFlags,
        REFIID riid,
        IUnknown **ppIUnk);

    HRESULT (STDMETHODCALLTYPE *OpenScope)(
        IMetaDataDispenserEx *This,
        LPCWSTR szScope,
        DWORD dwOpenFlags,
        REFIID riid,
        IUnknown **ppIUnk);

    HRESULT (STDMETHODCALLTYPE *OpenScopeOnMemory)(
        IMetaDataDispenserEx *This,
        const BYTE *pData,
        ULONG cbData,
        DWORD dwOpenFlags,
        REFIID riid,
        IUnknown **ppIUnk);

    /*** IMetaDataDispenserEx methods ***/
    HRESULT (STDMETHODCALLTYPE *SetOption)(
        IMetaDataDispenserEx *This,
        REFGUID optionId,
        const VARIANT *pValue);

    HRESULT (STDMETHODCALLTYPE *GetOption)(
        IMetaDataDispenserEx *This,
        REFGUID optionId,
        VARIANT *pValue);

    HRESULT (STDMETHODCALLTYPE *OpenScopeOnITypeInfo)(
        IMetaDataDispenserEx *This,
        ITypeInfo *pITI,
        DWORD dwOpenFlags,
        REFIID riid,
        IUnknown **ppIUnk);

    HRESULT (STDMETHODCALLTYPE *GetCORSystemDirectory)(
        IMetaDataDispenserEx *This,
        LPWSTR szBuffer,
        DWORD cchBuffer,
        DWORD *pchBuffer);

    HRESULT (STDMETHODCALLTYPE *FindAssembly)(
        IMetaDataDispenserEx *This,
        LPCWSTR szAppBase,
        LPCWSTR szPrivateBin,
        LPCWSTR szGlobalBin,
        LPCWSTR szAssemblyName,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName);

    HRESULT (STDMETHODCALLTYPE *FindAssemblyModule)(
        IMetaDataDispenserEx *This,
        LPCWSTR szAppBase,
        LPCWSTR szPrivateBin,
        LPCWSTR szGlobalBin,
        LPCWSTR szAssemblyName,
        LPCWSTR szModuleName,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pcName);

    END_INTERFACE
} IMetaDataDispenserExVtbl;

interface IMetaDataDispenserEx {
    CONST_VTBL IMetaDataDispenserExVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IMetaDataDispenserEx_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IMetaDataDispenserEx_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IMetaDataDispenserEx_Release(This) (This)->lpVtbl->Release(This)
/*** IMetaDataDispenser methods ***/
#define IMetaDataDispenserEx_DefineScope(This,rclsid,dwCreateFlags,riid,ppIUnk) (This)->lpVtbl->DefineScope(This,rclsid,dwCreateFlags,riid,ppIUnk)
#define IMetaDataDispenserEx_OpenScope(This,szScope,dwOpenFlags,riid,ppIUnk) (This)->lpVtbl->OpenScope(This,szScope,dwOpenFlags,riid,ppIUnk)
#define IMetaDataDispenserEx_OpenScopeOnMemory(This,pData,cbData,dwOpenFlags,riid,ppIUnk) (This)->lpVtbl->OpenScopeOnMemory(This,pData,cbData,dwOpenFlags,riid,ppIUnk)
/*** IMetaDataDispenserEx methods ***/
#define IMetaDataDispenserEx_SetOption(This,optionId,pValue) (This)->lpVtbl->SetOption(This,optionId,pValue)
#define IMetaDataDispenserEx_GetOption(This,optionId,pValue) (This)->lpVtbl->GetOption(This,optionId,pValue)
#define IMetaDataDispenserEx_OpenScopeOnITypeInfo(This,pITI,dwOpenFlags,riid,ppIUnk) (This)->lpVtbl->OpenScopeOnITypeInfo(This,pITI,dwOpenFlags,riid,ppIUnk)
#define IMetaDataDispenserEx_GetCORSystemDirectory(This,szBuffer,cchBuffer,pchBuffer) (This)->lpVtbl->GetCORSystemDirectory(This,szBuffer,cchBuffer,pchBuffer)
#define IMetaDataDispenserEx_FindAssembly(This,szAppBase,szPrivateBin,szGlobalBin,szAssemblyName,szName,cchName,pchName) (This)->lpVtbl->FindAssembly(This,szAppBase,szPrivateBin,szGlobalBin,szAssemblyName,szName,cchName,pchName)
#define IMetaDataDispenserEx_FindAssemblyModule(This,szAppBase,szPrivateBin,szGlobalBin,szAssemblyName,szModuleName,szName,cchName,pcName) (This)->lpVtbl->FindAssemblyModule(This,szAppBase,szPrivateBin,szGlobalBin,szAssemblyName,szModuleName,szName,cchName,pcName)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IMetaDataDispenserEx_QueryInterface(IMetaDataDispenserEx* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IMetaDataDispenserEx_AddRef(IMetaDataDispenserEx* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IMetaDataDispenserEx_Release(IMetaDataDispenserEx* This) {
    return This->lpVtbl->Release(This);
}
/*** IMetaDataDispenser methods ***/
static FORCEINLINE HRESULT IMetaDataDispenserEx_DefineScope(IMetaDataDispenserEx* This,REFCLSID rclsid,DWORD dwCreateFlags,REFIID riid,IUnknown **ppIUnk) {
    return This->lpVtbl->DefineScope(This,rclsid,dwCreateFlags,riid,ppIUnk);
}
static FORCEINLINE HRESULT IMetaDataDispenserEx_OpenScope(IMetaDataDispenserEx* This,LPCWSTR szScope,DWORD dwOpenFlags,REFIID riid,IUnknown **ppIUnk) {
    return This->lpVtbl->OpenScope(This,szScope,dwOpenFlags,riid,ppIUnk);
}
static FORCEINLINE HRESULT IMetaDataDispenserEx_OpenScopeOnMemory(IMetaDataDispenserEx* This,const BYTE *pData,ULONG cbData,DWORD dwOpenFlags,REFIID riid,IUnknown **ppIUnk) {
    return This->lpVtbl->OpenScopeOnMemory(This,pData,cbData,dwOpenFlags,riid,ppIUnk);
}
/*** IMetaDataDispenserEx methods ***/
static FORCEINLINE HRESULT IMetaDataDispenserEx_SetOption(IMetaDataDispenserEx* This,REFGUID optionId,const VARIANT *pValue) {
    return This->lpVtbl->SetOption(This,optionId,pValue);
}
static FORCEINLINE HRESULT IMetaDataDispenserEx_GetOption(IMetaDataDispenserEx* This,REFGUID optionId,VARIANT *pValue) {
    return This->lpVtbl->GetOption(This,optionId,pValue);
}
static FORCEINLINE HRESULT IMetaDataDispenserEx_OpenScopeOnITypeInfo(IMetaDataDispenserEx* This,ITypeInfo *pITI,DWORD dwOpenFlags,REFIID riid,IUnknown **ppIUnk) {
    return This->lpVtbl->OpenScopeOnITypeInfo(This,pITI,dwOpenFlags,riid,ppIUnk);
}
static FORCEINLINE HRESULT IMetaDataDispenserEx_GetCORSystemDirectory(IMetaDataDispenserEx* This,LPWSTR szBuffer,DWORD cchBuffer,DWORD *pchBuffer) {
    return This->lpVtbl->GetCORSystemDirectory(This,szBuffer,cchBuffer,pchBuffer);
}
static FORCEINLINE HRESULT IMetaDataDispenserEx_FindAssembly(IMetaDataDispenserEx* This,LPCWSTR szAppBase,LPCWSTR szPrivateBin,LPCWSTR szGlobalBin,LPCWSTR szAssemblyName,LPWSTR szName,ULONG cchName,ULONG *pchName) {
    return This->lpVtbl->FindAssembly(This,szAppBase,szPrivateBin,szGlobalBin,szAssemblyName,szName,cchName,pchName);
}
static FORCEINLINE HRESULT IMetaDataDispenserEx_FindAssemblyModule(IMetaDataDispenserEx* This,LPCWSTR szAppBase,LPCWSTR szPrivateBin,LPCWSTR szGlobalBin,LPCWSTR szAssemblyName,LPCWSTR szModuleName,LPWSTR szName,ULONG cchName,ULONG *pcName) {
    return This->lpVtbl->FindAssemblyModule(This,szAppBase,szPrivateBin,szGlobalBin,szAssemblyName,szModuleName,szName,cchName,pcName);
}
#endif
#endif

#endif


#endif  /* __IMetaDataDispenserEx_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IMetaDataAssemblyImport interface
 */
#ifndef __IMetaDataAssemblyImport_INTERFACE_DEFINED__
#define __IMetaDataAssemblyImport_INTERFACE_DEFINED__

DEFINE_GUID(IID_IMetaDataAssemblyImport, 0xee62470b, 0xe94b, 0x424e, 0x9b,0x7c, 0x2f,0x00,0xc9,0x24,0x9f,0x93);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ee62470b-e94b-424e-9b7c-2f00c9249f93")
IMetaDataAssemblyImport : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetAssemblyProps(
        mdAssembly mda,
        const BYTE **ppbPublicKey,
        ULONG *pcbPublicKey,
        ULONG *pulHashAlgId,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName,
        ASSEMBLYMETADATA *pMetaData,
        DWORD *pdwAssemblyFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetAssemblyRefProps(
        mdAssemblyRef mdar,
        const BYTE **ppbPublicKeyOrToken,
        ULONG *pcbPublicKeyOrToken,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName,
        ASSEMBLYMETADATA *pMetaData,
        const BYTE **ppbHashValue,
        ULONG *pcbHashValue,
        DWORD *pdwAssemblyRefFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFileProps(
        mdFile mdf,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName,
        const BYTE **ppbHashValue,
        ULONG *pcbHashValue,
        DWORD *pdwFileFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetExportedTypeProps(
        mdExportedType mdct,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName,
        mdToken *ptkImplementation,
        mdTypeDef *ptkTypeDef,
        DWORD *pdwExportedTypeFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetManifestResourceProps(
        mdManifestResource mdmr,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName,
        mdToken *ptkImplementation,
        DWORD *pdwOffset,
        DWORD *pdwResourceFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumAssemblyRefs(
        HCORENUM *phEnum,
        mdAssemblyRef rAssemblyRefs[],
        ULONG cMax,
        ULONG *pcTokens) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumFiles(
        HCORENUM *phEnum,
        mdFile rFiles[],
        ULONG cMax,
        ULONG *pcTokens) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumExportedTypes(
        HCORENUM *phEnum,
        mdExportedType rExportedTypes[],
        ULONG cMax,
        ULONG *pcTokens) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumManifestResources(
        HCORENUM *phEnum,
        mdManifestResource rManifestResources[],
        ULONG cMax,
        ULONG *pcTokens) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetAssemblyFromScope(
        mdAssembly *ptkAssembly) = 0;

    virtual HRESULT STDMETHODCALLTYPE FindExportedTypeByName(
        LPCWSTR szName,
        mdToken mdtExportedType,
        mdExportedType *ptkExportedType) = 0;

    virtual HRESULT STDMETHODCALLTYPE FindManifestResourceByName(
        LPCWSTR szName,
        mdManifestResource *ptkManifestResource) = 0;

    virtual void STDMETHODCALLTYPE CloseEnum(
        HCORENUM hEnum) = 0;

    virtual HRESULT STDMETHODCALLTYPE FindAssembliesByName(
        LPCWSTR szAppBase,
        LPCWSTR szPrivateBin,
        LPCWSTR szAssemblyName,
        IUnknown * ppIUnk[],
        ULONG cMax,
        ULONG *pcAssemblies) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IMetaDataAssemblyImport, 0xee62470b, 0xe94b, 0x424e, 0x9b,0x7c, 0x2f,0x00,0xc9,0x24,0x9f,0x93)
#endif
#else
typedef struct IMetaDataAssemblyImportVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IMetaDataAssemblyImport *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IMetaDataAssemblyImport *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IMetaDataAssemblyImport *This);

    /*** IMetaDataAssemblyImport methods ***/
    HRESULT (STDMETHODCALLTYPE *GetAssemblyProps)(
        IMetaDataAssemblyImport *This,
        mdAssembly mda,
        const BYTE **ppbPublicKey,
        ULONG *pcbPublicKey,
        ULONG *pulHashAlgId,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName,
        ASSEMBLYMETADATA *pMetaData,
        DWORD *pdwAssemblyFlags);

    HRESULT (STDMETHODCALLTYPE *GetAssemblyRefProps)(
        IMetaDataAssemblyImport *This,
        mdAssemblyRef mdar,
        const BYTE **ppbPublicKeyOrToken,
        ULONG *pcbPublicKeyOrToken,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName,
        ASSEMBLYMETADATA *pMetaData,
        const BYTE **ppbHashValue,
        ULONG *pcbHashValue,
        DWORD *pdwAssemblyRefFlags);

    HRESULT (STDMETHODCALLTYPE *GetFileProps)(
        IMetaDataAssemblyImport *This,
        mdFile mdf,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName,
        const BYTE **ppbHashValue,
        ULONG *pcbHashValue,
        DWORD *pdwFileFlags);

    HRESULT (STDMETHODCALLTYPE *GetExportedTypeProps)(
        IMetaDataAssemblyImport *This,
        mdExportedType mdct,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName,
        mdToken *ptkImplementation,
        mdTypeDef *ptkTypeDef,
        DWORD *pdwExportedTypeFlags);

    HRESULT (STDMETHODCALLTYPE *GetManifestResourceProps)(
        IMetaDataAssemblyImport *This,
        mdManifestResource mdmr,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName,
        mdToken *ptkImplementation,
        DWORD *pdwOffset,
        DWORD *pdwResourceFlags);

    HRESULT (STDMETHODCALLTYPE *EnumAssemblyRefs)(
        IMetaDataAssemblyImport *This,
        HCORENUM *phEnum,
        mdAssemblyRef rAssemblyRefs[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *EnumFiles)(
        IMetaDataAssemblyImport *This,
        HCORENUM *phEnum,
        mdFile rFiles[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *EnumExportedTypes)(
        IMetaDataAssemblyImport *This,
        HCORENUM *phEnum,
        mdExportedType rExportedTypes[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *EnumManifestResources)(
        IMetaDataAssemblyImport *This,
        HCORENUM *phEnum,
        mdManifestResource rManifestResources[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *GetAssemblyFromScope)(
        IMetaDataAssemblyImport *This,
        mdAssembly *ptkAssembly);

    HRESULT (STDMETHODCALLTYPE *FindExportedTypeByName)(
        IMetaDataAssemblyImport *This,
        LPCWSTR szName,
        mdToken mdtExportedType,
        mdExportedType *ptkExportedType);

    HRESULT (STDMETHODCALLTYPE *FindManifestResourceByName)(
        IMetaDataAssemblyImport *This,
        LPCWSTR szName,
        mdManifestResource *ptkManifestResource);

    void (STDMETHODCALLTYPE *CloseEnum)(
        IMetaDataAssemblyImport *This,
        HCORENUM hEnum);

    HRESULT (STDMETHODCALLTYPE *FindAssembliesByName)(
        IMetaDataAssemblyImport *This,
        LPCWSTR szAppBase,
        LPCWSTR szPrivateBin,
        LPCWSTR szAssemblyName,
        IUnknown * ppIUnk[],
        ULONG cMax,
        ULONG *pcAssemblies);

    END_INTERFACE
} IMetaDataAssemblyImportVtbl;

interface IMetaDataAssemblyImport {
    CONST_VTBL IMetaDataAssemblyImportVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IMetaDataAssemblyImport_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IMetaDataAssemblyImport_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IMetaDataAssemblyImport_Release(This) (This)->lpVtbl->Release(This)
/*** IMetaDataAssemblyImport methods ***/
#define IMetaDataAssemblyImport_GetAssemblyProps(This,mda,ppbPublicKey,pcbPublicKey,pulHashAlgId,szName,cchName,pchName,pMetaData,pdwAssemblyFlags) (This)->lpVtbl->GetAssemblyProps(This,mda,ppbPublicKey,pcbPublicKey,pulHashAlgId,szName,cchName,pchName,pMetaData,pdwAssemblyFlags)
#define IMetaDataAssemblyImport_GetAssemblyRefProps(This,mdar,ppbPublicKeyOrToken,pcbPublicKeyOrToken,szName,cchName,pchName,pMetaData,ppbHashValue,pcbHashValue,pdwAssemblyRefFlags) (This)->lpVtbl->GetAssemblyRefProps(This,mdar,ppbPublicKeyOrToken,pcbPublicKeyOrToken,szName,cchName,pchName,pMetaData,ppbHashValue,pcbHashValue,pdwAssemblyRefFlags)
#define IMetaDataAssemblyImport_GetFileProps(This,mdf,szName,cchName,pchName,ppbHashValue,pcbHashValue,pdwFileFlags) (This)->lpVtbl->GetFileProps(This,mdf,szName,cchName,pchName,ppbHashValue,pcbHashValue,pdwFileFlags)
#define IMetaDataAssemblyImport_GetExportedTypeProps(This,mdct,szName,cchName,pchName,ptkImplementation,ptkTypeDef,pdwExportedTypeFlags) (This)->lpVtbl->GetExportedTypeProps(This,mdct,szName,cchName,pchName,ptkImplementation,ptkTypeDef,pdwExportedTypeFlags)
#define IMetaDataAssemblyImport_GetManifestResourceProps(This,mdmr,szName,cchName,pchName,ptkImplementation,pdwOffset,pdwResourceFlags) (This)->lpVtbl->GetManifestResourceProps(This,mdmr,szName,cchName,pchName,ptkImplementation,pdwOffset,pdwResourceFlags)
#define IMetaDataAssemblyImport_EnumAssemblyRefs(This,phEnum,rAssemblyRefs,cMax,pcTokens) (This)->lpVtbl->EnumAssemblyRefs(This,phEnum,rAssemblyRefs,cMax,pcTokens)
#define IMetaDataAssemblyImport_EnumFiles(This,phEnum,rFiles,cMax,pcTokens) (This)->lpVtbl->EnumFiles(This,phEnum,rFiles,cMax,pcTokens)
#define IMetaDataAssemblyImport_EnumExportedTypes(This,phEnum,rExportedTypes,cMax,pcTokens) (This)->lpVtbl->EnumExportedTypes(This,phEnum,rExportedTypes,cMax,pcTokens)
#define IMetaDataAssemblyImport_EnumManifestResources(This,phEnum,rManifestResources,cMax,pcTokens) (This)->lpVtbl->EnumManifestResources(This,phEnum,rManifestResources,cMax,pcTokens)
#define IMetaDataAssemblyImport_GetAssemblyFromScope(This,ptkAssembly) (This)->lpVtbl->GetAssemblyFromScope(This,ptkAssembly)
#define IMetaDataAssemblyImport_FindExportedTypeByName(This,szName,mdtExportedType,ptkExportedType) (This)->lpVtbl->FindExportedTypeByName(This,szName,mdtExportedType,ptkExportedType)
#define IMetaDataAssemblyImport_FindManifestResourceByName(This,szName,ptkManifestResource) (This)->lpVtbl->FindManifestResourceByName(This,szName,ptkManifestResource)
#define IMetaDataAssemblyImport_CloseEnum(This,hEnum) (This)->lpVtbl->CloseEnum(This,hEnum)
#define IMetaDataAssemblyImport_FindAssembliesByName(This,szAppBase,szPrivateBin,szAssemblyName,ppIUnk,cMax,pcAssemblies) (This)->lpVtbl->FindAssembliesByName(This,szAppBase,szPrivateBin,szAssemblyName,ppIUnk,cMax,pcAssemblies)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IMetaDataAssemblyImport_QueryInterface(IMetaDataAssemblyImport* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IMetaDataAssemblyImport_AddRef(IMetaDataAssemblyImport* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IMetaDataAssemblyImport_Release(IMetaDataAssemblyImport* This) {
    return This->lpVtbl->Release(This);
}
/*** IMetaDataAssemblyImport methods ***/
static FORCEINLINE HRESULT IMetaDataAssemblyImport_GetAssemblyProps(IMetaDataAssemblyImport* This,mdAssembly mda,const BYTE **ppbPublicKey,ULONG *pcbPublicKey,ULONG *pulHashAlgId,LPWSTR szName,ULONG cchName,ULONG *pchName,ASSEMBLYMETADATA *pMetaData,DWORD *pdwAssemblyFlags) {
    return This->lpVtbl->GetAssemblyProps(This,mda,ppbPublicKey,pcbPublicKey,pulHashAlgId,szName,cchName,pchName,pMetaData,pdwAssemblyFlags);
}
static FORCEINLINE HRESULT IMetaDataAssemblyImport_GetAssemblyRefProps(IMetaDataAssemblyImport* This,mdAssemblyRef mdar,const BYTE **ppbPublicKeyOrToken,ULONG *pcbPublicKeyOrToken,LPWSTR szName,ULONG cchName,ULONG *pchName,ASSEMBLYMETADATA *pMetaData,const BYTE **ppbHashValue,ULONG *pcbHashValue,DWORD *pdwAssemblyRefFlags) {
    return This->lpVtbl->GetAssemblyRefProps(This,mdar,ppbPublicKeyOrToken,pcbPublicKeyOrToken,szName,cchName,pchName,pMetaData,ppbHashValue,pcbHashValue,pdwAssemblyRefFlags);
}
static FORCEINLINE HRESULT IMetaDataAssemblyImport_GetFileProps(IMetaDataAssemblyImport* This,mdFile mdf,LPWSTR szName,ULONG cchName,ULONG *pchName,const BYTE **ppbHashValue,ULONG *pcbHashValue,DWORD *pdwFileFlags) {
    return This->lpVtbl->GetFileProps(This,mdf,szName,cchName,pchName,ppbHashValue,pcbHashValue,pdwFileFlags);
}
static FORCEINLINE HRESULT IMetaDataAssemblyImport_GetExportedTypeProps(IMetaDataAssemblyImport* This,mdExportedType mdct,LPWSTR szName,ULONG cchName,ULONG *pchName,mdToken *ptkImplementation,mdTypeDef *ptkTypeDef,DWORD *pdwExportedTypeFlags) {
    return This->lpVtbl->GetExportedTypeProps(This,mdct,szName,cchName,pchName,ptkImplementation,ptkTypeDef,pdwExportedTypeFlags);
}
static FORCEINLINE HRESULT IMetaDataAssemblyImport_GetManifestResourceProps(IMetaDataAssemblyImport* This,mdManifestResource mdmr,LPWSTR szName,ULONG cchName,ULONG *pchName,mdToken *ptkImplementation,DWORD *pdwOffset,DWORD *pdwResourceFlags) {
    return This->lpVtbl->GetManifestResourceProps(This,mdmr,szName,cchName,pchName,ptkImplementation,pdwOffset,pdwResourceFlags);
}
static FORCEINLINE HRESULT IMetaDataAssemblyImport_EnumAssemblyRefs(IMetaDataAssemblyImport* This,HCORENUM *phEnum,mdAssemblyRef rAssemblyRefs[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumAssemblyRefs(This,phEnum,rAssemblyRefs,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataAssemblyImport_EnumFiles(IMetaDataAssemblyImport* This,HCORENUM *phEnum,mdFile rFiles[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumFiles(This,phEnum,rFiles,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataAssemblyImport_EnumExportedTypes(IMetaDataAssemblyImport* This,HCORENUM *phEnum,mdExportedType rExportedTypes[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumExportedTypes(This,phEnum,rExportedTypes,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataAssemblyImport_EnumManifestResources(IMetaDataAssemblyImport* This,HCORENUM *phEnum,mdManifestResource rManifestResources[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumManifestResources(This,phEnum,rManifestResources,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataAssemblyImport_GetAssemblyFromScope(IMetaDataAssemblyImport* This,mdAssembly *ptkAssembly) {
    return This->lpVtbl->GetAssemblyFromScope(This,ptkAssembly);
}
static FORCEINLINE HRESULT IMetaDataAssemblyImport_FindExportedTypeByName(IMetaDataAssemblyImport* This,LPCWSTR szName,mdToken mdtExportedType,mdExportedType *ptkExportedType) {
    return This->lpVtbl->FindExportedTypeByName(This,szName,mdtExportedType,ptkExportedType);
}
static FORCEINLINE HRESULT IMetaDataAssemblyImport_FindManifestResourceByName(IMetaDataAssemblyImport* This,LPCWSTR szName,mdManifestResource *ptkManifestResource) {
    return This->lpVtbl->FindManifestResourceByName(This,szName,ptkManifestResource);
}
static FORCEINLINE void IMetaDataAssemblyImport_CloseEnum(IMetaDataAssemblyImport* This,HCORENUM hEnum) {
    This->lpVtbl->CloseEnum(This,hEnum);
}
static FORCEINLINE HRESULT IMetaDataAssemblyImport_FindAssembliesByName(IMetaDataAssemblyImport* This,LPCWSTR szAppBase,LPCWSTR szPrivateBin,LPCWSTR szAssemblyName,IUnknown * ppIUnk[],ULONG cMax,ULONG *pcAssemblies) {
    return This->lpVtbl->FindAssembliesByName(This,szAppBase,szPrivateBin,szAssemblyName,ppIUnk,cMax,pcAssemblies);
}
#endif
#endif

#endif


#endif  /* __IMetaDataAssemblyImport_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IMetaDataImport interface
 */
#ifndef __IMetaDataImport_INTERFACE_DEFINED__
#define __IMetaDataImport_INTERFACE_DEFINED__

DEFINE_GUID(IID_IMetaDataImport, 0x7dac8207, 0xd3ae, 0x4c75, 0x9b,0x67, 0x92,0x80,0x1a,0x49,0x7d,0x44);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("7dac8207-d3ae-4c75-9b67-92801a497d44")
IMetaDataImport : public IUnknown
{
    virtual void STDMETHODCALLTYPE CloseEnum(
        HCORENUM hEnum) = 0;

    virtual HRESULT STDMETHODCALLTYPE CountEnum(
        HCORENUM hEnum,
        ULONG *pulCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE ResetEnum(
        HCORENUM hEnum,
        ULONG ulPos) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumTypeDefs(
        HCORENUM *phEnum,
        mdTypeDef rgTypeDefs[],
        ULONG cMax,
        ULONG *pcTypeDefs) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumInterfaceImpls(
        HCORENUM *phEnum,
        mdTypeDef td,
        mdInterfaceImpl rImpls[],
        ULONG cMax,
        ULONG *pcImpls) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumTypeRefs(
        HCORENUM *phEnum,
        mdTypeRef rgTypeRefs[],
        ULONG cMax,
        ULONG *pcTypeRefs) = 0;

    virtual HRESULT STDMETHODCALLTYPE FindTypeDefByName(
        LPCWSTR szTypeDef,
        mdToken tkEnclosingClass,
        mdTypeDef *ptkTypeDef) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetScopeProps(
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName,
        GUID *pmvid) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetModuleFromScope(
        mdModule *ptkModule) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetTypeDefProps(
        mdTypeDef tkTypeDef,
        LPWSTR szTypeDef,
        ULONG cchTypeDef,
        ULONG *pchTypeDef,
        DWORD *pdwTypeDefFlags,
        mdToken *ptkExtends) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetInterfaceImplProps(
        mdInterfaceImpl tkInterfaceImpl,
        mdTypeDef *ptkClass,
        mdToken *ptkIface) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetTypeRefProps(
        mdTypeRef tkTypeRef,
        mdToken *ptkResolutionScope,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName) = 0;

    virtual HRESULT STDMETHODCALLTYPE ResolveTypeRef(
        mdTypeRef tkTypeRef,
        REFIID riid,
        IUnknown **ppIScope,
        mdTypeDef *ptkTypeDef) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumMembers(
        HCORENUM *phEnum,
        mdTypeDef tkTypeDef,
        mdToken rgMembers[],
        ULONG cMax,
        ULONG *pcTokens) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumMembersWithName(
        HCORENUM *phEnum,
        mdTypeDef tkTypeDef,
        LPCWSTR szName,
        mdToken rgMembers[],
        ULONG cMax,
        ULONG *pcTokens) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumMethods(
        HCORENUM *phEnum,
        mdTypeDef tkTypeDef,
        mdMethodDef rgMethods[],
        ULONG cMax,
        ULONG *pcTokens) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumMethodsWithName(
        HCORENUM *phEnum,
        mdTypeDef tkTypeDef,
        LPCWSTR szName,
        mdMethodDef rgMethods[],
        ULONG cMax,
        ULONG *pcTokens) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumFields(
        HCORENUM *phEnum,
        mdTypeDef tkTypeDef,
        mdFieldDef rgFields[],
        ULONG cMax,
        ULONG *pcTokens) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumFieldsWithName(
        HCORENUM *phEnum,
        mdTypeDef tkTypeDef,
        LPCWSTR szName,
        mdFieldDef rFields[],
        ULONG cMax,
        ULONG *pcTokens) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumParams(
        HCORENUM *phEnum,
        mdMethodDef tkMethodDef,
        mdParamDef rParams[],
        ULONG cMax,
        ULONG *pcTokens) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumMemberRefs(
        HCORENUM *phEnum,
        mdToken tkParent,
        mdMemberRef rgMemberRefs[],
        ULONG cMax,
        ULONG *pcTokens) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumMethodImpls(
        HCORENUM *phEnum,
        mdTypeDef tkTypeDef,
        mdToken rMethodBody[],
        mdToken rMethodDecl[],
        ULONG cMax,
        ULONG *pcTokens) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumPermissionSets(
        HCORENUM *phEnum,
        mdToken tk,
        DWORD dwActions,
        mdPermission rPermission[],
        ULONG cMax,
        ULONG *pcTokens) = 0;

    virtual HRESULT STDMETHODCALLTYPE FindMember(
        mdTypeDef tkTypeDef,
        LPCWSTR szName,
        PCCOR_SIGNATURE pvSigBlob,
        ULONG cbSigBlob,
        mdToken *pmb) = 0;

    virtual HRESULT STDMETHODCALLTYPE FindMethod(
        mdTypeDef tkTypeDef,
        LPCWSTR szName,
        PCCOR_SIGNATURE pvSigBlob,
        ULONG cbSigBlob,
        mdMethodDef *ptkMethodDef) = 0;

    virtual HRESULT STDMETHODCALLTYPE FindField(
        mdTypeDef tkTypeDef,
        LPCWSTR szName,
        PCCOR_SIGNATURE pvSigBlob,
        ULONG cbSigBlob,
        mdFieldDef *ptkFieldDef) = 0;

    virtual HRESULT STDMETHODCALLTYPE FindMemberRef(
        mdTypeRef tkTypeRef,
        LPCWSTR szName,
        PCCOR_SIGNATURE pvSigBlob,
        ULONG cbSigBlob,
        mdMemberRef *pMemberRef) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetMethodProps(
        mdMethodDef tkMethodDef,
        mdTypeDef *ptkClass,
        LPWSTR szMethod,
        ULONG cchMethod,
        ULONG *pchMethod,
        DWORD *pdwAttr,
        PCCOR_SIGNATURE *ppvSigBlob,
        ULONG *pcbSigBlob,
        ULONG *pulCodeRVA,
        DWORD *pdwImplFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetMemberRefProps(
        mdMemberRef tkMemberRef,
        mdToken *ptk,
        LPWSTR szMember,
        ULONG cchMember,
        ULONG *pchMember,
        PCCOR_SIGNATURE *ppvSigBlob,
        ULONG *pcbSigBlob) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumProperties(
        HCORENUM *phEnum,
        mdTypeDef tkTypDef,
        mdProperty rgProperties[],
        ULONG cMax,
        ULONG *pcProperties) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumEvents(
        HCORENUM *phEnum,
        mdTypeDef tkTypDef,
        mdEvent rgEvents[],
        ULONG cMax,
        ULONG *pcEvents) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetEventProps(
        mdEvent tkEvent,
        mdTypeDef *ptkClass,
        LPWSTR szEvent,
        ULONG cchEvent,
        ULONG *pchEvent,
        DWORD *pdwEventFlags,
        mdToken *ptkEventType,
        mdMethodDef *ptkAddOn,
        mdMethodDef *ptkRemoveOn,
        mdMethodDef *tkkFire,
        mdMethodDef rgOtherMethod[],
        ULONG cMax,
        ULONG *pcOtherMethod) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumMethodSemantics(
        HCORENUM *phEnum,
        mdMethodDef tkMethodDef,
        mdToken rgEventProp[],
        ULONG cMax,
        ULONG *pcEventProp) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetMethodSemantics(
        mdMethodDef tkMethodDef,
        mdToken tkEventProp,
        DWORD *pdwSemanticsFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetClassLayout(
        mdTypeDef tkTypeDef,
        DWORD *pdwPackSize,
        COR_FIELD_OFFSET rgFieldOffset[],
        ULONG cMax,
        ULONG *pcFieldOffset,
        ULONG *pulClassSize) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFieldMarshal(
        mdToken tk,
        PCCOR_SIGNATURE *ppvNativeType,
        ULONG *pcbNativeType) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetRVA(
        mdToken tk,
        ULONG *pulCodeRVA,
        DWORD *pdwImplFlags) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetPermissionSetProps(
        mdPermission tk,
        DWORD *pdwAction,
        const BYTE **ppvPermission,
        ULONG *pcbPermission) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetSigFromToken(
        mdSignature tkSignature,
        PCCOR_SIGNATURE *ppvSig,
        ULONG *pcbSig) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetModuleRefProps(
        mdModuleRef tkModuleRef,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumModuleRefs(
        HCORENUM *phEnum,
        mdModuleRef rgModuleRefs[],
        ULONG cMax,
        ULONG *pcModuleRefs) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetTypeSpecFromToken(
        mdTypeSpec tkTypeSpec,
        PCCOR_SIGNATURE *ppvSig,
        ULONG *pcbSig) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetNameFromToken(
        mdToken tk,
        MDUTF8CSTR *pszUtf8NamePtr) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumUnresolvedMethods(
        HCORENUM *phEnum,
        mdToken rgMethods[],
        ULONG cMax,
        ULONG *pcTokens) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetUserString(
        mdString tkString,
        LPWSTR szString,
        ULONG cchString,
        ULONG *pchString) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetPinvokeMap(
        mdToken tk,
        DWORD *pdwMappingFlags,
        LPWSTR szImportName,
        ULONG cchImportName,
        ULONG *pchImportName,
        mdModuleRef *ptkImportDLL) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumSignatures(
        HCORENUM *phEnum,
        mdSignature rgSignatures[],
        ULONG cMax,
        ULONG *pcSignatures) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumTypeSpecs(
        HCORENUM *phEnum,
        mdTypeSpec rgTypeSpecs[],
        ULONG cMax,
        ULONG *pcTypeSpecs) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumUserStrings(
        HCORENUM *phEnum,
        mdString rgStrings[],
        ULONG cMax,
        ULONG *pcStrings) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetParamForMethodIndex(
        mdMethodDef tkMethodDef,
        ULONG ulParamSeq,
        mdParamDef *ptkParamDef) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumCustomAttributes(
        HCORENUM *phEnum,
        mdToken tk,
        mdToken tkType,
        mdCustomAttribute rgCustomAttributes[],
        ULONG cMax,
        ULONG *pcCustomAttributes) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetCustomAttributeProps(
        mdCustomAttribute cv,
        mdToken *ptkObj,
        mdToken *ptkType,
        const BYTE **ppBlob,
        ULONG *pcbBlob) = 0;

    virtual HRESULT STDMETHODCALLTYPE FindTypeRef(
        mdToken tkResolutionScope,
        LPCWSTR szName,
        mdTypeRef *tkTypeRef) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetMemberProps(
        mdToken tkMember,
        mdTypeDef *ptkTypeDef,
        LPWSTR szMember,
        ULONG cchMember,
        ULONG *pchMember,
        DWORD *pdwAttr,
        PCCOR_SIGNATURE *ppvSigBlob,
        ULONG *pcbSigBlob,
        ULONG *pulCodeRVA,
        DWORD *pdwImplFlags,
        DWORD *pdwCPlusTypeFlag,
        UVCP_CONSTANT *ppValue,
        ULONG *pcchValue) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetFieldProps(
        mdFieldDef tkFieldDef,
        mdTypeDef *ptkTypeDef,
        LPWSTR szField,
        ULONG cchField,
        ULONG *pchField,
        DWORD *pdwAttr,
        PCCOR_SIGNATURE *ppvSigBlob,
        ULONG *pcbSigBlob,
        DWORD *pdwCPlusTypeFlag,
        UVCP_CONSTANT *ppValue,
        ULONG *pcchValue) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetPropertyProps(
        mdProperty prop,
        mdTypeDef *ptkTypeDef,
        LPWSTR szProperty,
        ULONG cchProperty,
        ULONG *pchProperty,
        DWORD *pdwPropFlags,
        PCCOR_SIGNATURE *ppvSigBlob,
        ULONG *pcbSigBlob,
        DWORD *pdwCPlusTypeFlag,
        UVCP_CONSTANT *ppDefaultValue,
        ULONG *pcchDefaultValue,
        mdMethodDef *ptkSetter,
        mdMethodDef *ptkGetter,
        mdMethodDef rgOtherMethod[],
        ULONG cMax,
        ULONG *pcOtherMethod) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetParamProps(
        mdParamDef tkParamDef,
        mdMethodDef *ptkMethodDef,
        ULONG *pulSequence,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName,
        DWORD *pdwAttr,
        DWORD *pdwCPlusTypeFlag,
        UVCP_CONSTANT *ppValue,
        ULONG *pcchValue) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetCustomAttributeByName(
        mdToken tkObj,
        LPCWSTR szName,
        const BYTE **ppData,
        ULONG *pcbData) = 0;

    virtual BOOL STDMETHODCALLTYPE IsValidToken(
        mdToken tk) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetNestedClassProps(
        mdTypeDef tdNestedClass,
        mdTypeDef *ptdEnclosingClass) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetNativeCallConvFromSig(
        const BYTE *pvSig,
        ULONG cbSig,
        ULONG *pCallConv) = 0;

    virtual HRESULT STDMETHODCALLTYPE IsGlobal(
        mdToken tk,
        int *pbIsGlobal) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IMetaDataImport, 0x7dac8207, 0xd3ae, 0x4c75, 0x9b,0x67, 0x92,0x80,0x1a,0x49,0x7d,0x44)
#endif
#else
typedef struct IMetaDataImportVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IMetaDataImport *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IMetaDataImport *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IMetaDataImport *This);

    /*** IMetaDataImport methods ***/
    void (STDMETHODCALLTYPE *CloseEnum)(
        IMetaDataImport *This,
        HCORENUM hEnum);

    HRESULT (STDMETHODCALLTYPE *CountEnum)(
        IMetaDataImport *This,
        HCORENUM hEnum,
        ULONG *pulCount);

    HRESULT (STDMETHODCALLTYPE *ResetEnum)(
        IMetaDataImport *This,
        HCORENUM hEnum,
        ULONG ulPos);

    HRESULT (STDMETHODCALLTYPE *EnumTypeDefs)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdTypeDef rgTypeDefs[],
        ULONG cMax,
        ULONG *pcTypeDefs);

    HRESULT (STDMETHODCALLTYPE *EnumInterfaceImpls)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdTypeDef td,
        mdInterfaceImpl rImpls[],
        ULONG cMax,
        ULONG *pcImpls);

    HRESULT (STDMETHODCALLTYPE *EnumTypeRefs)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdTypeRef rgTypeRefs[],
        ULONG cMax,
        ULONG *pcTypeRefs);

    HRESULT (STDMETHODCALLTYPE *FindTypeDefByName)(
        IMetaDataImport *This,
        LPCWSTR szTypeDef,
        mdToken tkEnclosingClass,
        mdTypeDef *ptkTypeDef);

    HRESULT (STDMETHODCALLTYPE *GetScopeProps)(
        IMetaDataImport *This,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName,
        GUID *pmvid);

    HRESULT (STDMETHODCALLTYPE *GetModuleFromScope)(
        IMetaDataImport *This,
        mdModule *ptkModule);

    HRESULT (STDMETHODCALLTYPE *GetTypeDefProps)(
        IMetaDataImport *This,
        mdTypeDef tkTypeDef,
        LPWSTR szTypeDef,
        ULONG cchTypeDef,
        ULONG *pchTypeDef,
        DWORD *pdwTypeDefFlags,
        mdToken *ptkExtends);

    HRESULT (STDMETHODCALLTYPE *GetInterfaceImplProps)(
        IMetaDataImport *This,
        mdInterfaceImpl tkInterfaceImpl,
        mdTypeDef *ptkClass,
        mdToken *ptkIface);

    HRESULT (STDMETHODCALLTYPE *GetTypeRefProps)(
        IMetaDataImport *This,
        mdTypeRef tkTypeRef,
        mdToken *ptkResolutionScope,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName);

    HRESULT (STDMETHODCALLTYPE *ResolveTypeRef)(
        IMetaDataImport *This,
        mdTypeRef tkTypeRef,
        REFIID riid,
        IUnknown **ppIScope,
        mdTypeDef *ptkTypeDef);

    HRESULT (STDMETHODCALLTYPE *EnumMembers)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdTypeDef tkTypeDef,
        mdToken rgMembers[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *EnumMembersWithName)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdTypeDef tkTypeDef,
        LPCWSTR szName,
        mdToken rgMembers[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *EnumMethods)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdTypeDef tkTypeDef,
        mdMethodDef rgMethods[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *EnumMethodsWithName)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdTypeDef tkTypeDef,
        LPCWSTR szName,
        mdMethodDef rgMethods[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *EnumFields)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdTypeDef tkTypeDef,
        mdFieldDef rgFields[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *EnumFieldsWithName)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdTypeDef tkTypeDef,
        LPCWSTR szName,
        mdFieldDef rFields[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *EnumParams)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdMethodDef tkMethodDef,
        mdParamDef rParams[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *EnumMemberRefs)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdToken tkParent,
        mdMemberRef rgMemberRefs[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *EnumMethodImpls)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdTypeDef tkTypeDef,
        mdToken rMethodBody[],
        mdToken rMethodDecl[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *EnumPermissionSets)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdToken tk,
        DWORD dwActions,
        mdPermission rPermission[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *FindMember)(
        IMetaDataImport *This,
        mdTypeDef tkTypeDef,
        LPCWSTR szName,
        PCCOR_SIGNATURE pvSigBlob,
        ULONG cbSigBlob,
        mdToken *pmb);

    HRESULT (STDMETHODCALLTYPE *FindMethod)(
        IMetaDataImport *This,
        mdTypeDef tkTypeDef,
        LPCWSTR szName,
        PCCOR_SIGNATURE pvSigBlob,
        ULONG cbSigBlob,
        mdMethodDef *ptkMethodDef);

    HRESULT (STDMETHODCALLTYPE *FindField)(
        IMetaDataImport *This,
        mdTypeDef tkTypeDef,
        LPCWSTR szName,
        PCCOR_SIGNATURE pvSigBlob,
        ULONG cbSigBlob,
        mdFieldDef *ptkFieldDef);

    HRESULT (STDMETHODCALLTYPE *FindMemberRef)(
        IMetaDataImport *This,
        mdTypeRef tkTypeRef,
        LPCWSTR szName,
        PCCOR_SIGNATURE pvSigBlob,
        ULONG cbSigBlob,
        mdMemberRef *pMemberRef);

    HRESULT (STDMETHODCALLTYPE *GetMethodProps)(
        IMetaDataImport *This,
        mdMethodDef tkMethodDef,
        mdTypeDef *ptkClass,
        LPWSTR szMethod,
        ULONG cchMethod,
        ULONG *pchMethod,
        DWORD *pdwAttr,
        PCCOR_SIGNATURE *ppvSigBlob,
        ULONG *pcbSigBlob,
        ULONG *pulCodeRVA,
        DWORD *pdwImplFlags);

    HRESULT (STDMETHODCALLTYPE *GetMemberRefProps)(
        IMetaDataImport *This,
        mdMemberRef tkMemberRef,
        mdToken *ptk,
        LPWSTR szMember,
        ULONG cchMember,
        ULONG *pchMember,
        PCCOR_SIGNATURE *ppvSigBlob,
        ULONG *pcbSigBlob);

    HRESULT (STDMETHODCALLTYPE *EnumProperties)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdTypeDef tkTypDef,
        mdProperty rgProperties[],
        ULONG cMax,
        ULONG *pcProperties);

    HRESULT (STDMETHODCALLTYPE *EnumEvents)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdTypeDef tkTypDef,
        mdEvent rgEvents[],
        ULONG cMax,
        ULONG *pcEvents);

    HRESULT (STDMETHODCALLTYPE *GetEventProps)(
        IMetaDataImport *This,
        mdEvent tkEvent,
        mdTypeDef *ptkClass,
        LPWSTR szEvent,
        ULONG cchEvent,
        ULONG *pchEvent,
        DWORD *pdwEventFlags,
        mdToken *ptkEventType,
        mdMethodDef *ptkAddOn,
        mdMethodDef *ptkRemoveOn,
        mdMethodDef *tkkFire,
        mdMethodDef rgOtherMethod[],
        ULONG cMax,
        ULONG *pcOtherMethod);

    HRESULT (STDMETHODCALLTYPE *EnumMethodSemantics)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdMethodDef tkMethodDef,
        mdToken rgEventProp[],
        ULONG cMax,
        ULONG *pcEventProp);

    HRESULT (STDMETHODCALLTYPE *GetMethodSemantics)(
        IMetaDataImport *This,
        mdMethodDef tkMethodDef,
        mdToken tkEventProp,
        DWORD *pdwSemanticsFlags);

    HRESULT (STDMETHODCALLTYPE *GetClassLayout)(
        IMetaDataImport *This,
        mdTypeDef tkTypeDef,
        DWORD *pdwPackSize,
        COR_FIELD_OFFSET rgFieldOffset[],
        ULONG cMax,
        ULONG *pcFieldOffset,
        ULONG *pulClassSize);

    HRESULT (STDMETHODCALLTYPE *GetFieldMarshal)(
        IMetaDataImport *This,
        mdToken tk,
        PCCOR_SIGNATURE *ppvNativeType,
        ULONG *pcbNativeType);

    HRESULT (STDMETHODCALLTYPE *GetRVA)(
        IMetaDataImport *This,
        mdToken tk,
        ULONG *pulCodeRVA,
        DWORD *pdwImplFlags);

    HRESULT (STDMETHODCALLTYPE *GetPermissionSetProps)(
        IMetaDataImport *This,
        mdPermission tk,
        DWORD *pdwAction,
        const BYTE **ppvPermission,
        ULONG *pcbPermission);

    HRESULT (STDMETHODCALLTYPE *GetSigFromToken)(
        IMetaDataImport *This,
        mdSignature tkSignature,
        PCCOR_SIGNATURE *ppvSig,
        ULONG *pcbSig);

    HRESULT (STDMETHODCALLTYPE *GetModuleRefProps)(
        IMetaDataImport *This,
        mdModuleRef tkModuleRef,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName);

    HRESULT (STDMETHODCALLTYPE *EnumModuleRefs)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdModuleRef rgModuleRefs[],
        ULONG cMax,
        ULONG *pcModuleRefs);

    HRESULT (STDMETHODCALLTYPE *GetTypeSpecFromToken)(
        IMetaDataImport *This,
        mdTypeSpec tkTypeSpec,
        PCCOR_SIGNATURE *ppvSig,
        ULONG *pcbSig);

    HRESULT (STDMETHODCALLTYPE *GetNameFromToken)(
        IMetaDataImport *This,
        mdToken tk,
        MDUTF8CSTR *pszUtf8NamePtr);

    HRESULT (STDMETHODCALLTYPE *EnumUnresolvedMethods)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdToken rgMethods[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *GetUserString)(
        IMetaDataImport *This,
        mdString tkString,
        LPWSTR szString,
        ULONG cchString,
        ULONG *pchString);

    HRESULT (STDMETHODCALLTYPE *GetPinvokeMap)(
        IMetaDataImport *This,
        mdToken tk,
        DWORD *pdwMappingFlags,
        LPWSTR szImportName,
        ULONG cchImportName,
        ULONG *pchImportName,
        mdModuleRef *ptkImportDLL);

    HRESULT (STDMETHODCALLTYPE *EnumSignatures)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdSignature rgSignatures[],
        ULONG cMax,
        ULONG *pcSignatures);

    HRESULT (STDMETHODCALLTYPE *EnumTypeSpecs)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdTypeSpec rgTypeSpecs[],
        ULONG cMax,
        ULONG *pcTypeSpecs);

    HRESULT (STDMETHODCALLTYPE *EnumUserStrings)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdString rgStrings[],
        ULONG cMax,
        ULONG *pcStrings);

    HRESULT (STDMETHODCALLTYPE *GetParamForMethodIndex)(
        IMetaDataImport *This,
        mdMethodDef tkMethodDef,
        ULONG ulParamSeq,
        mdParamDef *ptkParamDef);

    HRESULT (STDMETHODCALLTYPE *EnumCustomAttributes)(
        IMetaDataImport *This,
        HCORENUM *phEnum,
        mdToken tk,
        mdToken tkType,
        mdCustomAttribute rgCustomAttributes[],
        ULONG cMax,
        ULONG *pcCustomAttributes);

    HRESULT (STDMETHODCALLTYPE *GetCustomAttributeProps)(
        IMetaDataImport *This,
        mdCustomAttribute cv,
        mdToken *ptkObj,
        mdToken *ptkType,
        const BYTE **ppBlob,
        ULONG *pcbBlob);

    HRESULT (STDMETHODCALLTYPE *FindTypeRef)(
        IMetaDataImport *This,
        mdToken tkResolutionScope,
        LPCWSTR szName,
        mdTypeRef *tkTypeRef);

    HRESULT (STDMETHODCALLTYPE *GetMemberProps)(
        IMetaDataImport *This,
        mdToken tkMember,
        mdTypeDef *ptkTypeDef,
        LPWSTR szMember,
        ULONG cchMember,
        ULONG *pchMember,
        DWORD *pdwAttr,
        PCCOR_SIGNATURE *ppvSigBlob,
        ULONG *pcbSigBlob,
        ULONG *pulCodeRVA,
        DWORD *pdwImplFlags,
        DWORD *pdwCPlusTypeFlag,
        UVCP_CONSTANT *ppValue,
        ULONG *pcchValue);

    HRESULT (STDMETHODCALLTYPE *GetFieldProps)(
        IMetaDataImport *This,
        mdFieldDef tkFieldDef,
        mdTypeDef *ptkTypeDef,
        LPWSTR szField,
        ULONG cchField,
        ULONG *pchField,
        DWORD *pdwAttr,
        PCCOR_SIGNATURE *ppvSigBlob,
        ULONG *pcbSigBlob,
        DWORD *pdwCPlusTypeFlag,
        UVCP_CONSTANT *ppValue,
        ULONG *pcchValue);

    HRESULT (STDMETHODCALLTYPE *GetPropertyProps)(
        IMetaDataImport *This,
        mdProperty prop,
        mdTypeDef *ptkTypeDef,
        LPWSTR szProperty,
        ULONG cchProperty,
        ULONG *pchProperty,
        DWORD *pdwPropFlags,
        PCCOR_SIGNATURE *ppvSigBlob,
        ULONG *pcbSigBlob,
        DWORD *pdwCPlusTypeFlag,
        UVCP_CONSTANT *ppDefaultValue,
        ULONG *pcchDefaultValue,
        mdMethodDef *ptkSetter,
        mdMethodDef *ptkGetter,
        mdMethodDef rgOtherMethod[],
        ULONG cMax,
        ULONG *pcOtherMethod);

    HRESULT (STDMETHODCALLTYPE *GetParamProps)(
        IMetaDataImport *This,
        mdParamDef tkParamDef,
        mdMethodDef *ptkMethodDef,
        ULONG *pulSequence,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName,
        DWORD *pdwAttr,
        DWORD *pdwCPlusTypeFlag,
        UVCP_CONSTANT *ppValue,
        ULONG *pcchValue);

    HRESULT (STDMETHODCALLTYPE *GetCustomAttributeByName)(
        IMetaDataImport *This,
        mdToken tkObj,
        LPCWSTR szName,
        const BYTE **ppData,
        ULONG *pcbData);

    BOOL (STDMETHODCALLTYPE *IsValidToken)(
        IMetaDataImport *This,
        mdToken tk);

    HRESULT (STDMETHODCALLTYPE *GetNestedClassProps)(
        IMetaDataImport *This,
        mdTypeDef tdNestedClass,
        mdTypeDef *ptdEnclosingClass);

    HRESULT (STDMETHODCALLTYPE *GetNativeCallConvFromSig)(
        IMetaDataImport *This,
        const BYTE *pvSig,
        ULONG cbSig,
        ULONG *pCallConv);

    HRESULT (STDMETHODCALLTYPE *IsGlobal)(
        IMetaDataImport *This,
        mdToken tk,
        int *pbIsGlobal);

    END_INTERFACE
} IMetaDataImportVtbl;

interface IMetaDataImport {
    CONST_VTBL IMetaDataImportVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IMetaDataImport_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IMetaDataImport_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IMetaDataImport_Release(This) (This)->lpVtbl->Release(This)
/*** IMetaDataImport methods ***/
#define IMetaDataImport_CloseEnum(This,hEnum) (This)->lpVtbl->CloseEnum(This,hEnum)
#define IMetaDataImport_CountEnum(This,hEnum,pulCount) (This)->lpVtbl->CountEnum(This,hEnum,pulCount)
#define IMetaDataImport_ResetEnum(This,hEnum,ulPos) (This)->lpVtbl->ResetEnum(This,hEnum,ulPos)
#define IMetaDataImport_EnumTypeDefs(This,phEnum,rgTypeDefs,cMax,pcTypeDefs) (This)->lpVtbl->EnumTypeDefs(This,phEnum,rgTypeDefs,cMax,pcTypeDefs)
#define IMetaDataImport_EnumInterfaceImpls(This,phEnum,td,rImpls,cMax,pcImpls) (This)->lpVtbl->EnumInterfaceImpls(This,phEnum,td,rImpls,cMax,pcImpls)
#define IMetaDataImport_EnumTypeRefs(This,phEnum,rgTypeRefs,cMax,pcTypeRefs) (This)->lpVtbl->EnumTypeRefs(This,phEnum,rgTypeRefs,cMax,pcTypeRefs)
#define IMetaDataImport_FindTypeDefByName(This,szTypeDef,tkEnclosingClass,ptkTypeDef) (This)->lpVtbl->FindTypeDefByName(This,szTypeDef,tkEnclosingClass,ptkTypeDef)
#define IMetaDataImport_GetScopeProps(This,szName,cchName,pchName,pmvid) (This)->lpVtbl->GetScopeProps(This,szName,cchName,pchName,pmvid)
#define IMetaDataImport_GetModuleFromScope(This,ptkModule) (This)->lpVtbl->GetModuleFromScope(This,ptkModule)
#define IMetaDataImport_GetTypeDefProps(This,tkTypeDef,szTypeDef,cchTypeDef,pchTypeDef,pdwTypeDefFlags,ptkExtends) (This)->lpVtbl->GetTypeDefProps(This,tkTypeDef,szTypeDef,cchTypeDef,pchTypeDef,pdwTypeDefFlags,ptkExtends)
#define IMetaDataImport_GetInterfaceImplProps(This,tkInterfaceImpl,ptkClass,ptkIface) (This)->lpVtbl->GetInterfaceImplProps(This,tkInterfaceImpl,ptkClass,ptkIface)
#define IMetaDataImport_GetTypeRefProps(This,tkTypeRef,ptkResolutionScope,szName,cchName,pchName) (This)->lpVtbl->GetTypeRefProps(This,tkTypeRef,ptkResolutionScope,szName,cchName,pchName)
#define IMetaDataImport_ResolveTypeRef(This,tkTypeRef,riid,ppIScope,ptkTypeDef) (This)->lpVtbl->ResolveTypeRef(This,tkTypeRef,riid,ppIScope,ptkTypeDef)
#define IMetaDataImport_EnumMembers(This,phEnum,tkTypeDef,rgMembers,cMax,pcTokens) (This)->lpVtbl->EnumMembers(This,phEnum,tkTypeDef,rgMembers,cMax,pcTokens)
#define IMetaDataImport_EnumMembersWithName(This,phEnum,tkTypeDef,szName,rgMembers,cMax,pcTokens) (This)->lpVtbl->EnumMembersWithName(This,phEnum,tkTypeDef,szName,rgMembers,cMax,pcTokens)
#define IMetaDataImport_EnumMethods(This,phEnum,tkTypeDef,rgMethods,cMax,pcTokens) (This)->lpVtbl->EnumMethods(This,phEnum,tkTypeDef,rgMethods,cMax,pcTokens)
#define IMetaDataImport_EnumMethodsWithName(This,phEnum,tkTypeDef,szName,rgMethods,cMax,pcTokens) (This)->lpVtbl->EnumMethodsWithName(This,phEnum,tkTypeDef,szName,rgMethods,cMax,pcTokens)
#define IMetaDataImport_EnumFields(This,phEnum,tkTypeDef,rgFields,cMax,pcTokens) (This)->lpVtbl->EnumFields(This,phEnum,tkTypeDef,rgFields,cMax,pcTokens)
#define IMetaDataImport_EnumFieldsWithName(This,phEnum,tkTypeDef,szName,rFields,cMax,pcTokens) (This)->lpVtbl->EnumFieldsWithName(This,phEnum,tkTypeDef,szName,rFields,cMax,pcTokens)
#define IMetaDataImport_EnumParams(This,phEnum,tkMethodDef,rParams,cMax,pcTokens) (This)->lpVtbl->EnumParams(This,phEnum,tkMethodDef,rParams,cMax,pcTokens)
#define IMetaDataImport_EnumMemberRefs(This,phEnum,tkParent,rgMemberRefs,cMax,pcTokens) (This)->lpVtbl->EnumMemberRefs(This,phEnum,tkParent,rgMemberRefs,cMax,pcTokens)
#define IMetaDataImport_EnumMethodImpls(This,phEnum,tkTypeDef,rMethodBody,rMethodDecl,cMax,pcTokens) (This)->lpVtbl->EnumMethodImpls(This,phEnum,tkTypeDef,rMethodBody,rMethodDecl,cMax,pcTokens)
#define IMetaDataImport_EnumPermissionSets(This,phEnum,tk,dwActions,rPermission,cMax,pcTokens) (This)->lpVtbl->EnumPermissionSets(This,phEnum,tk,dwActions,rPermission,cMax,pcTokens)
#define IMetaDataImport_FindMember(This,tkTypeDef,szName,pvSigBlob,cbSigBlob,pmb) (This)->lpVtbl->FindMember(This,tkTypeDef,szName,pvSigBlob,cbSigBlob,pmb)
#define IMetaDataImport_FindMethod(This,tkTypeDef,szName,pvSigBlob,cbSigBlob,ptkMethodDef) (This)->lpVtbl->FindMethod(This,tkTypeDef,szName,pvSigBlob,cbSigBlob,ptkMethodDef)
#define IMetaDataImport_FindField(This,tkTypeDef,szName,pvSigBlob,cbSigBlob,ptkFieldDef) (This)->lpVtbl->FindField(This,tkTypeDef,szName,pvSigBlob,cbSigBlob,ptkFieldDef)
#define IMetaDataImport_FindMemberRef(This,tkTypeRef,szName,pvSigBlob,cbSigBlob,pMemberRef) (This)->lpVtbl->FindMemberRef(This,tkTypeRef,szName,pvSigBlob,cbSigBlob,pMemberRef)
#define IMetaDataImport_GetMethodProps(This,tkMethodDef,ptkClass,szMethod,cchMethod,pchMethod,pdwAttr,ppvSigBlob,pcbSigBlob,pulCodeRVA,pdwImplFlags) (This)->lpVtbl->GetMethodProps(This,tkMethodDef,ptkClass,szMethod,cchMethod,pchMethod,pdwAttr,ppvSigBlob,pcbSigBlob,pulCodeRVA,pdwImplFlags)
#define IMetaDataImport_GetMemberRefProps(This,tkMemberRef,ptk,szMember,cchMember,pchMember,ppvSigBlob,pcbSigBlob) (This)->lpVtbl->GetMemberRefProps(This,tkMemberRef,ptk,szMember,cchMember,pchMember,ppvSigBlob,pcbSigBlob)
#define IMetaDataImport_EnumProperties(This,phEnum,tkTypDef,rgProperties,cMax,pcProperties) (This)->lpVtbl->EnumProperties(This,phEnum,tkTypDef,rgProperties,cMax,pcProperties)
#define IMetaDataImport_EnumEvents(This,phEnum,tkTypDef,rgEvents,cMax,pcEvents) (This)->lpVtbl->EnumEvents(This,phEnum,tkTypDef,rgEvents,cMax,pcEvents)
#define IMetaDataImport_GetEventProps(This,tkEvent,ptkClass,szEvent,cchEvent,pchEvent,pdwEventFlags,ptkEventType,ptkAddOn,ptkRemoveOn,tkkFire,rgOtherMethod,cMax,pcOtherMethod) (This)->lpVtbl->GetEventProps(This,tkEvent,ptkClass,szEvent,cchEvent,pchEvent,pdwEventFlags,ptkEventType,ptkAddOn,ptkRemoveOn,tkkFire,rgOtherMethod,cMax,pcOtherMethod)
#define IMetaDataImport_EnumMethodSemantics(This,phEnum,tkMethodDef,rgEventProp,cMax,pcEventProp) (This)->lpVtbl->EnumMethodSemantics(This,phEnum,tkMethodDef,rgEventProp,cMax,pcEventProp)
#define IMetaDataImport_GetMethodSemantics(This,tkMethodDef,tkEventProp,pdwSemanticsFlags) (This)->lpVtbl->GetMethodSemantics(This,tkMethodDef,tkEventProp,pdwSemanticsFlags)
#define IMetaDataImport_GetClassLayout(This,tkTypeDef,pdwPackSize,rgFieldOffset,cMax,pcFieldOffset,pulClassSize) (This)->lpVtbl->GetClassLayout(This,tkTypeDef,pdwPackSize,rgFieldOffset,cMax,pcFieldOffset,pulClassSize)
#define IMetaDataImport_GetFieldMarshal(This,tk,ppvNativeType,pcbNativeType) (This)->lpVtbl->GetFieldMarshal(This,tk,ppvNativeType,pcbNativeType)
#define IMetaDataImport_GetRVA(This,tk,pulCodeRVA,pdwImplFlags) (This)->lpVtbl->GetRVA(This,tk,pulCodeRVA,pdwImplFlags)
#define IMetaDataImport_GetPermissionSetProps(This,tk,pdwAction,ppvPermission,pcbPermission) (This)->lpVtbl->GetPermissionSetProps(This,tk,pdwAction,ppvPermission,pcbPermission)
#define IMetaDataImport_GetSigFromToken(This,tkSignature,ppvSig,pcbSig) (This)->lpVtbl->GetSigFromToken(This,tkSignature,ppvSig,pcbSig)
#define IMetaDataImport_GetModuleRefProps(This,tkModuleRef,szName,cchName,pchName) (This)->lpVtbl->GetModuleRefProps(This,tkModuleRef,szName,cchName,pchName)
#define IMetaDataImport_EnumModuleRefs(This,phEnum,rgModuleRefs,cMax,pcModuleRefs) (This)->lpVtbl->EnumModuleRefs(This,phEnum,rgModuleRefs,cMax,pcModuleRefs)
#define IMetaDataImport_GetTypeSpecFromToken(This,tkTypeSpec,ppvSig,pcbSig) (This)->lpVtbl->GetTypeSpecFromToken(This,tkTypeSpec,ppvSig,pcbSig)
#define IMetaDataImport_GetNameFromToken(This,tk,pszUtf8NamePtr) (This)->lpVtbl->GetNameFromToken(This,tk,pszUtf8NamePtr)
#define IMetaDataImport_EnumUnresolvedMethods(This,phEnum,rgMethods,cMax,pcTokens) (This)->lpVtbl->EnumUnresolvedMethods(This,phEnum,rgMethods,cMax,pcTokens)
#define IMetaDataImport_GetUserString(This,tkString,szString,cchString,pchString) (This)->lpVtbl->GetUserString(This,tkString,szString,cchString,pchString)
#define IMetaDataImport_GetPinvokeMap(This,tk,pdwMappingFlags,szImportName,cchImportName,pchImportName,ptkImportDLL) (This)->lpVtbl->GetPinvokeMap(This,tk,pdwMappingFlags,szImportName,cchImportName,pchImportName,ptkImportDLL)
#define IMetaDataImport_EnumSignatures(This,phEnum,rgSignatures,cMax,pcSignatures) (This)->lpVtbl->EnumSignatures(This,phEnum,rgSignatures,cMax,pcSignatures)
#define IMetaDataImport_EnumTypeSpecs(This,phEnum,rgTypeSpecs,cMax,pcTypeSpecs) (This)->lpVtbl->EnumTypeSpecs(This,phEnum,rgTypeSpecs,cMax,pcTypeSpecs)
#define IMetaDataImport_EnumUserStrings(This,phEnum,rgStrings,cMax,pcStrings) (This)->lpVtbl->EnumUserStrings(This,phEnum,rgStrings,cMax,pcStrings)
#define IMetaDataImport_GetParamForMethodIndex(This,tkMethodDef,ulParamSeq,ptkParamDef) (This)->lpVtbl->GetParamForMethodIndex(This,tkMethodDef,ulParamSeq,ptkParamDef)
#define IMetaDataImport_EnumCustomAttributes(This,phEnum,tk,tkType,rgCustomAttributes,cMax,pcCustomAttributes) (This)->lpVtbl->EnumCustomAttributes(This,phEnum,tk,tkType,rgCustomAttributes,cMax,pcCustomAttributes)
#define IMetaDataImport_GetCustomAttributeProps(This,cv,ptkObj,ptkType,ppBlob,pcbBlob) (This)->lpVtbl->GetCustomAttributeProps(This,cv,ptkObj,ptkType,ppBlob,pcbBlob)
#define IMetaDataImport_FindTypeRef(This,tkResolutionScope,szName,tkTypeRef) (This)->lpVtbl->FindTypeRef(This,tkResolutionScope,szName,tkTypeRef)
#define IMetaDataImport_GetMemberProps(This,tkMember,ptkTypeDef,szMember,cchMember,pchMember,pdwAttr,ppvSigBlob,pcbSigBlob,pulCodeRVA,pdwImplFlags,pdwCPlusTypeFlag,ppValue,pcchValue) (This)->lpVtbl->GetMemberProps(This,tkMember,ptkTypeDef,szMember,cchMember,pchMember,pdwAttr,ppvSigBlob,pcbSigBlob,pulCodeRVA,pdwImplFlags,pdwCPlusTypeFlag,ppValue,pcchValue)
#define IMetaDataImport_GetFieldProps(This,tkFieldDef,ptkTypeDef,szField,cchField,pchField,pdwAttr,ppvSigBlob,pcbSigBlob,pdwCPlusTypeFlag,ppValue,pcchValue) (This)->lpVtbl->GetFieldProps(This,tkFieldDef,ptkTypeDef,szField,cchField,pchField,pdwAttr,ppvSigBlob,pcbSigBlob,pdwCPlusTypeFlag,ppValue,pcchValue)
#define IMetaDataImport_GetPropertyProps(This,prop,ptkTypeDef,szProperty,cchProperty,pchProperty,pdwPropFlags,ppvSigBlob,pcbSigBlob,pdwCPlusTypeFlag,ppDefaultValue,pcchDefaultValue,ptkSetter,ptkGetter,rgOtherMethod,cMax,pcOtherMethod) (This)->lpVtbl->GetPropertyProps(This,prop,ptkTypeDef,szProperty,cchProperty,pchProperty,pdwPropFlags,ppvSigBlob,pcbSigBlob,pdwCPlusTypeFlag,ppDefaultValue,pcchDefaultValue,ptkSetter,ptkGetter,rgOtherMethod,cMax,pcOtherMethod)
#define IMetaDataImport_GetParamProps(This,tkParamDef,ptkMethodDef,pulSequence,szName,cchName,pchName,pdwAttr,pdwCPlusTypeFlag,ppValue,pcchValue) (This)->lpVtbl->GetParamProps(This,tkParamDef,ptkMethodDef,pulSequence,szName,cchName,pchName,pdwAttr,pdwCPlusTypeFlag,ppValue,pcchValue)
#define IMetaDataImport_GetCustomAttributeByName(This,tkObj,szName,ppData,pcbData) (This)->lpVtbl->GetCustomAttributeByName(This,tkObj,szName,ppData,pcbData)
#define IMetaDataImport_IsValidToken(This,tk) (This)->lpVtbl->IsValidToken(This,tk)
#define IMetaDataImport_GetNestedClassProps(This,tdNestedClass,ptdEnclosingClass) (This)->lpVtbl->GetNestedClassProps(This,tdNestedClass,ptdEnclosingClass)
#define IMetaDataImport_GetNativeCallConvFromSig(This,pvSig,cbSig,pCallConv) (This)->lpVtbl->GetNativeCallConvFromSig(This,pvSig,cbSig,pCallConv)
#define IMetaDataImport_IsGlobal(This,tk,pbIsGlobal) (This)->lpVtbl->IsGlobal(This,tk,pbIsGlobal)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IMetaDataImport_QueryInterface(IMetaDataImport* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IMetaDataImport_AddRef(IMetaDataImport* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IMetaDataImport_Release(IMetaDataImport* This) {
    return This->lpVtbl->Release(This);
}
/*** IMetaDataImport methods ***/
static FORCEINLINE void IMetaDataImport_CloseEnum(IMetaDataImport* This,HCORENUM hEnum) {
    This->lpVtbl->CloseEnum(This,hEnum);
}
static FORCEINLINE HRESULT IMetaDataImport_CountEnum(IMetaDataImport* This,HCORENUM hEnum,ULONG *pulCount) {
    return This->lpVtbl->CountEnum(This,hEnum,pulCount);
}
static FORCEINLINE HRESULT IMetaDataImport_ResetEnum(IMetaDataImport* This,HCORENUM hEnum,ULONG ulPos) {
    return This->lpVtbl->ResetEnum(This,hEnum,ulPos);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumTypeDefs(IMetaDataImport* This,HCORENUM *phEnum,mdTypeDef rgTypeDefs[],ULONG cMax,ULONG *pcTypeDefs) {
    return This->lpVtbl->EnumTypeDefs(This,phEnum,rgTypeDefs,cMax,pcTypeDefs);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumInterfaceImpls(IMetaDataImport* This,HCORENUM *phEnum,mdTypeDef td,mdInterfaceImpl rImpls[],ULONG cMax,ULONG *pcImpls) {
    return This->lpVtbl->EnumInterfaceImpls(This,phEnum,td,rImpls,cMax,pcImpls);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumTypeRefs(IMetaDataImport* This,HCORENUM *phEnum,mdTypeRef rgTypeRefs[],ULONG cMax,ULONG *pcTypeRefs) {
    return This->lpVtbl->EnumTypeRefs(This,phEnum,rgTypeRefs,cMax,pcTypeRefs);
}
static FORCEINLINE HRESULT IMetaDataImport_FindTypeDefByName(IMetaDataImport* This,LPCWSTR szTypeDef,mdToken tkEnclosingClass,mdTypeDef *ptkTypeDef) {
    return This->lpVtbl->FindTypeDefByName(This,szTypeDef,tkEnclosingClass,ptkTypeDef);
}
static FORCEINLINE HRESULT IMetaDataImport_GetScopeProps(IMetaDataImport* This,LPWSTR szName,ULONG cchName,ULONG *pchName,GUID *pmvid) {
    return This->lpVtbl->GetScopeProps(This,szName,cchName,pchName,pmvid);
}
static FORCEINLINE HRESULT IMetaDataImport_GetModuleFromScope(IMetaDataImport* This,mdModule *ptkModule) {
    return This->lpVtbl->GetModuleFromScope(This,ptkModule);
}
static FORCEINLINE HRESULT IMetaDataImport_GetTypeDefProps(IMetaDataImport* This,mdTypeDef tkTypeDef,LPWSTR szTypeDef,ULONG cchTypeDef,ULONG *pchTypeDef,DWORD *pdwTypeDefFlags,mdToken *ptkExtends) {
    return This->lpVtbl->GetTypeDefProps(This,tkTypeDef,szTypeDef,cchTypeDef,pchTypeDef,pdwTypeDefFlags,ptkExtends);
}
static FORCEINLINE HRESULT IMetaDataImport_GetInterfaceImplProps(IMetaDataImport* This,mdInterfaceImpl tkInterfaceImpl,mdTypeDef *ptkClass,mdToken *ptkIface) {
    return This->lpVtbl->GetInterfaceImplProps(This,tkInterfaceImpl,ptkClass,ptkIface);
}
static FORCEINLINE HRESULT IMetaDataImport_GetTypeRefProps(IMetaDataImport* This,mdTypeRef tkTypeRef,mdToken *ptkResolutionScope,LPWSTR szName,ULONG cchName,ULONG *pchName) {
    return This->lpVtbl->GetTypeRefProps(This,tkTypeRef,ptkResolutionScope,szName,cchName,pchName);
}
static FORCEINLINE HRESULT IMetaDataImport_ResolveTypeRef(IMetaDataImport* This,mdTypeRef tkTypeRef,REFIID riid,IUnknown **ppIScope,mdTypeDef *ptkTypeDef) {
    return This->lpVtbl->ResolveTypeRef(This,tkTypeRef,riid,ppIScope,ptkTypeDef);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumMembers(IMetaDataImport* This,HCORENUM *phEnum,mdTypeDef tkTypeDef,mdToken rgMembers[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumMembers(This,phEnum,tkTypeDef,rgMembers,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumMembersWithName(IMetaDataImport* This,HCORENUM *phEnum,mdTypeDef tkTypeDef,LPCWSTR szName,mdToken rgMembers[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumMembersWithName(This,phEnum,tkTypeDef,szName,rgMembers,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumMethods(IMetaDataImport* This,HCORENUM *phEnum,mdTypeDef tkTypeDef,mdMethodDef rgMethods[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumMethods(This,phEnum,tkTypeDef,rgMethods,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumMethodsWithName(IMetaDataImport* This,HCORENUM *phEnum,mdTypeDef tkTypeDef,LPCWSTR szName,mdMethodDef rgMethods[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumMethodsWithName(This,phEnum,tkTypeDef,szName,rgMethods,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumFields(IMetaDataImport* This,HCORENUM *phEnum,mdTypeDef tkTypeDef,mdFieldDef rgFields[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumFields(This,phEnum,tkTypeDef,rgFields,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumFieldsWithName(IMetaDataImport* This,HCORENUM *phEnum,mdTypeDef tkTypeDef,LPCWSTR szName,mdFieldDef rFields[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumFieldsWithName(This,phEnum,tkTypeDef,szName,rFields,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumParams(IMetaDataImport* This,HCORENUM *phEnum,mdMethodDef tkMethodDef,mdParamDef rParams[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumParams(This,phEnum,tkMethodDef,rParams,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumMemberRefs(IMetaDataImport* This,HCORENUM *phEnum,mdToken tkParent,mdMemberRef rgMemberRefs[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumMemberRefs(This,phEnum,tkParent,rgMemberRefs,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumMethodImpls(IMetaDataImport* This,HCORENUM *phEnum,mdTypeDef tkTypeDef,mdToken rMethodBody[],mdToken rMethodDecl[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumMethodImpls(This,phEnum,tkTypeDef,rMethodBody,rMethodDecl,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumPermissionSets(IMetaDataImport* This,HCORENUM *phEnum,mdToken tk,DWORD dwActions,mdPermission rPermission[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumPermissionSets(This,phEnum,tk,dwActions,rPermission,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport_FindMember(IMetaDataImport* This,mdTypeDef tkTypeDef,LPCWSTR szName,PCCOR_SIGNATURE pvSigBlob,ULONG cbSigBlob,mdToken *pmb) {
    return This->lpVtbl->FindMember(This,tkTypeDef,szName,pvSigBlob,cbSigBlob,pmb);
}
static FORCEINLINE HRESULT IMetaDataImport_FindMethod(IMetaDataImport* This,mdTypeDef tkTypeDef,LPCWSTR szName,PCCOR_SIGNATURE pvSigBlob,ULONG cbSigBlob,mdMethodDef *ptkMethodDef) {
    return This->lpVtbl->FindMethod(This,tkTypeDef,szName,pvSigBlob,cbSigBlob,ptkMethodDef);
}
static FORCEINLINE HRESULT IMetaDataImport_FindField(IMetaDataImport* This,mdTypeDef tkTypeDef,LPCWSTR szName,PCCOR_SIGNATURE pvSigBlob,ULONG cbSigBlob,mdFieldDef *ptkFieldDef) {
    return This->lpVtbl->FindField(This,tkTypeDef,szName,pvSigBlob,cbSigBlob,ptkFieldDef);
}
static FORCEINLINE HRESULT IMetaDataImport_FindMemberRef(IMetaDataImport* This,mdTypeRef tkTypeRef,LPCWSTR szName,PCCOR_SIGNATURE pvSigBlob,ULONG cbSigBlob,mdMemberRef *pMemberRef) {
    return This->lpVtbl->FindMemberRef(This,tkTypeRef,szName,pvSigBlob,cbSigBlob,pMemberRef);
}
static FORCEINLINE HRESULT IMetaDataImport_GetMethodProps(IMetaDataImport* This,mdMethodDef tkMethodDef,mdTypeDef *ptkClass,LPWSTR szMethod,ULONG cchMethod,ULONG *pchMethod,DWORD *pdwAttr,PCCOR_SIGNATURE *ppvSigBlob,ULONG *pcbSigBlob,ULONG *pulCodeRVA,DWORD *pdwImplFlags) {
    return This->lpVtbl->GetMethodProps(This,tkMethodDef,ptkClass,szMethod,cchMethod,pchMethod,pdwAttr,ppvSigBlob,pcbSigBlob,pulCodeRVA,pdwImplFlags);
}
static FORCEINLINE HRESULT IMetaDataImport_GetMemberRefProps(IMetaDataImport* This,mdMemberRef tkMemberRef,mdToken *ptk,LPWSTR szMember,ULONG cchMember,ULONG *pchMember,PCCOR_SIGNATURE *ppvSigBlob,ULONG *pcbSigBlob) {
    return This->lpVtbl->GetMemberRefProps(This,tkMemberRef,ptk,szMember,cchMember,pchMember,ppvSigBlob,pcbSigBlob);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumProperties(IMetaDataImport* This,HCORENUM *phEnum,mdTypeDef tkTypDef,mdProperty rgProperties[],ULONG cMax,ULONG *pcProperties) {
    return This->lpVtbl->EnumProperties(This,phEnum,tkTypDef,rgProperties,cMax,pcProperties);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumEvents(IMetaDataImport* This,HCORENUM *phEnum,mdTypeDef tkTypDef,mdEvent rgEvents[],ULONG cMax,ULONG *pcEvents) {
    return This->lpVtbl->EnumEvents(This,phEnum,tkTypDef,rgEvents,cMax,pcEvents);
}
static FORCEINLINE HRESULT IMetaDataImport_GetEventProps(IMetaDataImport* This,mdEvent tkEvent,mdTypeDef *ptkClass,LPWSTR szEvent,ULONG cchEvent,ULONG *pchEvent,DWORD *pdwEventFlags,mdToken *ptkEventType,mdMethodDef *ptkAddOn,mdMethodDef *ptkRemoveOn,mdMethodDef *tkkFire,mdMethodDef rgOtherMethod[],ULONG cMax,ULONG *pcOtherMethod) {
    return This->lpVtbl->GetEventProps(This,tkEvent,ptkClass,szEvent,cchEvent,pchEvent,pdwEventFlags,ptkEventType,ptkAddOn,ptkRemoveOn,tkkFire,rgOtherMethod,cMax,pcOtherMethod);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumMethodSemantics(IMetaDataImport* This,HCORENUM *phEnum,mdMethodDef tkMethodDef,mdToken rgEventProp[],ULONG cMax,ULONG *pcEventProp) {
    return This->lpVtbl->EnumMethodSemantics(This,phEnum,tkMethodDef,rgEventProp,cMax,pcEventProp);
}
static FORCEINLINE HRESULT IMetaDataImport_GetMethodSemantics(IMetaDataImport* This,mdMethodDef tkMethodDef,mdToken tkEventProp,DWORD *pdwSemanticsFlags) {
    return This->lpVtbl->GetMethodSemantics(This,tkMethodDef,tkEventProp,pdwSemanticsFlags);
}
static FORCEINLINE HRESULT IMetaDataImport_GetClassLayout(IMetaDataImport* This,mdTypeDef tkTypeDef,DWORD *pdwPackSize,COR_FIELD_OFFSET rgFieldOffset[],ULONG cMax,ULONG *pcFieldOffset,ULONG *pulClassSize) {
    return This->lpVtbl->GetClassLayout(This,tkTypeDef,pdwPackSize,rgFieldOffset,cMax,pcFieldOffset,pulClassSize);
}
static FORCEINLINE HRESULT IMetaDataImport_GetFieldMarshal(IMetaDataImport* This,mdToken tk,PCCOR_SIGNATURE *ppvNativeType,ULONG *pcbNativeType) {
    return This->lpVtbl->GetFieldMarshal(This,tk,ppvNativeType,pcbNativeType);
}
static FORCEINLINE HRESULT IMetaDataImport_GetRVA(IMetaDataImport* This,mdToken tk,ULONG *pulCodeRVA,DWORD *pdwImplFlags) {
    return This->lpVtbl->GetRVA(This,tk,pulCodeRVA,pdwImplFlags);
}
static FORCEINLINE HRESULT IMetaDataImport_GetPermissionSetProps(IMetaDataImport* This,mdPermission tk,DWORD *pdwAction,const BYTE **ppvPermission,ULONG *pcbPermission) {
    return This->lpVtbl->GetPermissionSetProps(This,tk,pdwAction,ppvPermission,pcbPermission);
}
static FORCEINLINE HRESULT IMetaDataImport_GetSigFromToken(IMetaDataImport* This,mdSignature tkSignature,PCCOR_SIGNATURE *ppvSig,ULONG *pcbSig) {
    return This->lpVtbl->GetSigFromToken(This,tkSignature,ppvSig,pcbSig);
}
static FORCEINLINE HRESULT IMetaDataImport_GetModuleRefProps(IMetaDataImport* This,mdModuleRef tkModuleRef,LPWSTR szName,ULONG cchName,ULONG *pchName) {
    return This->lpVtbl->GetModuleRefProps(This,tkModuleRef,szName,cchName,pchName);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumModuleRefs(IMetaDataImport* This,HCORENUM *phEnum,mdModuleRef rgModuleRefs[],ULONG cMax,ULONG *pcModuleRefs) {
    return This->lpVtbl->EnumModuleRefs(This,phEnum,rgModuleRefs,cMax,pcModuleRefs);
}
static FORCEINLINE HRESULT IMetaDataImport_GetTypeSpecFromToken(IMetaDataImport* This,mdTypeSpec tkTypeSpec,PCCOR_SIGNATURE *ppvSig,ULONG *pcbSig) {
    return This->lpVtbl->GetTypeSpecFromToken(This,tkTypeSpec,ppvSig,pcbSig);
}
static FORCEINLINE HRESULT IMetaDataImport_GetNameFromToken(IMetaDataImport* This,mdToken tk,MDUTF8CSTR *pszUtf8NamePtr) {
    return This->lpVtbl->GetNameFromToken(This,tk,pszUtf8NamePtr);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumUnresolvedMethods(IMetaDataImport* This,HCORENUM *phEnum,mdToken rgMethods[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumUnresolvedMethods(This,phEnum,rgMethods,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport_GetUserString(IMetaDataImport* This,mdString tkString,LPWSTR szString,ULONG cchString,ULONG *pchString) {
    return This->lpVtbl->GetUserString(This,tkString,szString,cchString,pchString);
}
static FORCEINLINE HRESULT IMetaDataImport_GetPinvokeMap(IMetaDataImport* This,mdToken tk,DWORD *pdwMappingFlags,LPWSTR szImportName,ULONG cchImportName,ULONG *pchImportName,mdModuleRef *ptkImportDLL) {
    return This->lpVtbl->GetPinvokeMap(This,tk,pdwMappingFlags,szImportName,cchImportName,pchImportName,ptkImportDLL);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumSignatures(IMetaDataImport* This,HCORENUM *phEnum,mdSignature rgSignatures[],ULONG cMax,ULONG *pcSignatures) {
    return This->lpVtbl->EnumSignatures(This,phEnum,rgSignatures,cMax,pcSignatures);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumTypeSpecs(IMetaDataImport* This,HCORENUM *phEnum,mdTypeSpec rgTypeSpecs[],ULONG cMax,ULONG *pcTypeSpecs) {
    return This->lpVtbl->EnumTypeSpecs(This,phEnum,rgTypeSpecs,cMax,pcTypeSpecs);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumUserStrings(IMetaDataImport* This,HCORENUM *phEnum,mdString rgStrings[],ULONG cMax,ULONG *pcStrings) {
    return This->lpVtbl->EnumUserStrings(This,phEnum,rgStrings,cMax,pcStrings);
}
static FORCEINLINE HRESULT IMetaDataImport_GetParamForMethodIndex(IMetaDataImport* This,mdMethodDef tkMethodDef,ULONG ulParamSeq,mdParamDef *ptkParamDef) {
    return This->lpVtbl->GetParamForMethodIndex(This,tkMethodDef,ulParamSeq,ptkParamDef);
}
static FORCEINLINE HRESULT IMetaDataImport_EnumCustomAttributes(IMetaDataImport* This,HCORENUM *phEnum,mdToken tk,mdToken tkType,mdCustomAttribute rgCustomAttributes[],ULONG cMax,ULONG *pcCustomAttributes) {
    return This->lpVtbl->EnumCustomAttributes(This,phEnum,tk,tkType,rgCustomAttributes,cMax,pcCustomAttributes);
}
static FORCEINLINE HRESULT IMetaDataImport_GetCustomAttributeProps(IMetaDataImport* This,mdCustomAttribute cv,mdToken *ptkObj,mdToken *ptkType,const BYTE **ppBlob,ULONG *pcbBlob) {
    return This->lpVtbl->GetCustomAttributeProps(This,cv,ptkObj,ptkType,ppBlob,pcbBlob);
}
static FORCEINLINE HRESULT IMetaDataImport_FindTypeRef(IMetaDataImport* This,mdToken tkResolutionScope,LPCWSTR szName,mdTypeRef *tkTypeRef) {
    return This->lpVtbl->FindTypeRef(This,tkResolutionScope,szName,tkTypeRef);
}
static FORCEINLINE HRESULT IMetaDataImport_GetMemberProps(IMetaDataImport* This,mdToken tkMember,mdTypeDef *ptkTypeDef,LPWSTR szMember,ULONG cchMember,ULONG *pchMember,DWORD *pdwAttr,PCCOR_SIGNATURE *ppvSigBlob,ULONG *pcbSigBlob,ULONG *pulCodeRVA,DWORD *pdwImplFlags,DWORD *pdwCPlusTypeFlag,UVCP_CONSTANT *ppValue,ULONG *pcchValue) {
    return This->lpVtbl->GetMemberProps(This,tkMember,ptkTypeDef,szMember,cchMember,pchMember,pdwAttr,ppvSigBlob,pcbSigBlob,pulCodeRVA,pdwImplFlags,pdwCPlusTypeFlag,ppValue,pcchValue);
}
static FORCEINLINE HRESULT IMetaDataImport_GetFieldProps(IMetaDataImport* This,mdFieldDef tkFieldDef,mdTypeDef *ptkTypeDef,LPWSTR szField,ULONG cchField,ULONG *pchField,DWORD *pdwAttr,PCCOR_SIGNATURE *ppvSigBlob,ULONG *pcbSigBlob,DWORD *pdwCPlusTypeFlag,UVCP_CONSTANT *ppValue,ULONG *pcchValue) {
    return This->lpVtbl->GetFieldProps(This,tkFieldDef,ptkTypeDef,szField,cchField,pchField,pdwAttr,ppvSigBlob,pcbSigBlob,pdwCPlusTypeFlag,ppValue,pcchValue);
}
static FORCEINLINE HRESULT IMetaDataImport_GetPropertyProps(IMetaDataImport* This,mdProperty prop,mdTypeDef *ptkTypeDef,LPWSTR szProperty,ULONG cchProperty,ULONG *pchProperty,DWORD *pdwPropFlags,PCCOR_SIGNATURE *ppvSigBlob,ULONG *pcbSigBlob,DWORD *pdwCPlusTypeFlag,UVCP_CONSTANT *ppDefaultValue,ULONG *pcchDefaultValue,mdMethodDef *ptkSetter,mdMethodDef *ptkGetter,mdMethodDef rgOtherMethod[],ULONG cMax,ULONG *pcOtherMethod) {
    return This->lpVtbl->GetPropertyProps(This,prop,ptkTypeDef,szProperty,cchProperty,pchProperty,pdwPropFlags,ppvSigBlob,pcbSigBlob,pdwCPlusTypeFlag,ppDefaultValue,pcchDefaultValue,ptkSetter,ptkGetter,rgOtherMethod,cMax,pcOtherMethod);
}
static FORCEINLINE HRESULT IMetaDataImport_GetParamProps(IMetaDataImport* This,mdParamDef tkParamDef,mdMethodDef *ptkMethodDef,ULONG *pulSequence,LPWSTR szName,ULONG cchName,ULONG *pchName,DWORD *pdwAttr,DWORD *pdwCPlusTypeFlag,UVCP_CONSTANT *ppValue,ULONG *pcchValue) {
    return This->lpVtbl->GetParamProps(This,tkParamDef,ptkMethodDef,pulSequence,szName,cchName,pchName,pdwAttr,pdwCPlusTypeFlag,ppValue,pcchValue);
}
static FORCEINLINE HRESULT IMetaDataImport_GetCustomAttributeByName(IMetaDataImport* This,mdToken tkObj,LPCWSTR szName,const BYTE **ppData,ULONG *pcbData) {
    return This->lpVtbl->GetCustomAttributeByName(This,tkObj,szName,ppData,pcbData);
}
static FORCEINLINE BOOL IMetaDataImport_IsValidToken(IMetaDataImport* This,mdToken tk) {
    return This->lpVtbl->IsValidToken(This,tk);
}
static FORCEINLINE HRESULT IMetaDataImport_GetNestedClassProps(IMetaDataImport* This,mdTypeDef tdNestedClass,mdTypeDef *ptdEnclosingClass) {
    return This->lpVtbl->GetNestedClassProps(This,tdNestedClass,ptdEnclosingClass);
}
static FORCEINLINE HRESULT IMetaDataImport_GetNativeCallConvFromSig(IMetaDataImport* This,const BYTE *pvSig,ULONG cbSig,ULONG *pCallConv) {
    return This->lpVtbl->GetNativeCallConvFromSig(This,pvSig,cbSig,pCallConv);
}
static FORCEINLINE HRESULT IMetaDataImport_IsGlobal(IMetaDataImport* This,mdToken tk,int *pbIsGlobal) {
    return This->lpVtbl->IsGlobal(This,tk,pbIsGlobal);
}
#endif
#endif

#endif


#endif  /* __IMetaDataImport_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IMetaDataImport2 interface
 */
#ifndef __IMetaDataImport2_INTERFACE_DEFINED__
#define __IMetaDataImport2_INTERFACE_DEFINED__

DEFINE_GUID(IID_IMetaDataImport2, 0xfce5efa0, 0x8bba, 0x4f8e, 0xa0,0x36, 0x8f,0x20,0x22,0xb0,0x84,0x66);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("fce5efa0-8bba-4f8e-a036-8f2022b08466")
IMetaDataImport2 : public IMetaDataImport
{
    virtual HRESULT STDMETHODCALLTYPE EnumGenericParams(
        HCORENUM *phEnum,
        mdToken tk,
        mdGenericParam rGenericParams[],
        ULONG cMax,
        ULONG *pcGenericParams) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetGenericParamProps(
        mdGenericParam gp,
        ULONG *pulParamSeq,
        DWORD *pdwParamFlags,
        mdToken *ptOwner,
        DWORD *reserved,
        LPWSTR wzname,
        ULONG cchName,
        ULONG *pchName) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetMethodSpecProps(
        mdMethodSpec mi,
        mdToken *tkParent,
        PCCOR_SIGNATURE *ppvSigBlob,
        ULONG *pcbSigBlob) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumGenericParamConstraints(
        HCORENUM *phEnum,
        mdGenericParam tk,
        mdGenericParamConstraint rGenericParamConstraints[],
        ULONG cMax,
        ULONG *pcGenericParamConstraints) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetGenericParamConstraintProps(
        mdGenericParamConstraint gpc,
        mdGenericParam *ptGenericParam,
        mdToken *ptkConstraintType) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetPEKind(
        DWORD *pdwPEKind,
        DWORD *pdwMAchine) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetVersionString(
        LPWSTR pwzBuf,
        DWORD ccBufSize,
        DWORD *pccBufSize) = 0;

    virtual HRESULT STDMETHODCALLTYPE EnumMethodSpecs(
        HCORENUM *phEnum,
        mdToken tk,
        mdMethodSpec rMethodSpecs[],
        ULONG cMax,
        ULONG *pcMethodSpecs) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IMetaDataImport2, 0xfce5efa0, 0x8bba, 0x4f8e, 0xa0,0x36, 0x8f,0x20,0x22,0xb0,0x84,0x66)
#endif
#else
typedef struct IMetaDataImport2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IMetaDataImport2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IMetaDataImport2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IMetaDataImport2 *This);

    /*** IMetaDataImport methods ***/
    void (STDMETHODCALLTYPE *CloseEnum)(
        IMetaDataImport2 *This,
        HCORENUM hEnum);

    HRESULT (STDMETHODCALLTYPE *CountEnum)(
        IMetaDataImport2 *This,
        HCORENUM hEnum,
        ULONG *pulCount);

    HRESULT (STDMETHODCALLTYPE *ResetEnum)(
        IMetaDataImport2 *This,
        HCORENUM hEnum,
        ULONG ulPos);

    HRESULT (STDMETHODCALLTYPE *EnumTypeDefs)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdTypeDef rgTypeDefs[],
        ULONG cMax,
        ULONG *pcTypeDefs);

    HRESULT (STDMETHODCALLTYPE *EnumInterfaceImpls)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdTypeDef td,
        mdInterfaceImpl rImpls[],
        ULONG cMax,
        ULONG *pcImpls);

    HRESULT (STDMETHODCALLTYPE *EnumTypeRefs)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdTypeRef rgTypeRefs[],
        ULONG cMax,
        ULONG *pcTypeRefs);

    HRESULT (STDMETHODCALLTYPE *FindTypeDefByName)(
        IMetaDataImport2 *This,
        LPCWSTR szTypeDef,
        mdToken tkEnclosingClass,
        mdTypeDef *ptkTypeDef);

    HRESULT (STDMETHODCALLTYPE *GetScopeProps)(
        IMetaDataImport2 *This,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName,
        GUID *pmvid);

    HRESULT (STDMETHODCALLTYPE *GetModuleFromScope)(
        IMetaDataImport2 *This,
        mdModule *ptkModule);

    HRESULT (STDMETHODCALLTYPE *GetTypeDefProps)(
        IMetaDataImport2 *This,
        mdTypeDef tkTypeDef,
        LPWSTR szTypeDef,
        ULONG cchTypeDef,
        ULONG *pchTypeDef,
        DWORD *pdwTypeDefFlags,
        mdToken *ptkExtends);

    HRESULT (STDMETHODCALLTYPE *GetInterfaceImplProps)(
        IMetaDataImport2 *This,
        mdInterfaceImpl tkInterfaceImpl,
        mdTypeDef *ptkClass,
        mdToken *ptkIface);

    HRESULT (STDMETHODCALLTYPE *GetTypeRefProps)(
        IMetaDataImport2 *This,
        mdTypeRef tkTypeRef,
        mdToken *ptkResolutionScope,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName);

    HRESULT (STDMETHODCALLTYPE *ResolveTypeRef)(
        IMetaDataImport2 *This,
        mdTypeRef tkTypeRef,
        REFIID riid,
        IUnknown **ppIScope,
        mdTypeDef *ptkTypeDef);

    HRESULT (STDMETHODCALLTYPE *EnumMembers)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdTypeDef tkTypeDef,
        mdToken rgMembers[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *EnumMembersWithName)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdTypeDef tkTypeDef,
        LPCWSTR szName,
        mdToken rgMembers[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *EnumMethods)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdTypeDef tkTypeDef,
        mdMethodDef rgMethods[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *EnumMethodsWithName)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdTypeDef tkTypeDef,
        LPCWSTR szName,
        mdMethodDef rgMethods[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *EnumFields)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdTypeDef tkTypeDef,
        mdFieldDef rgFields[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *EnumFieldsWithName)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdTypeDef tkTypeDef,
        LPCWSTR szName,
        mdFieldDef rFields[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *EnumParams)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdMethodDef tkMethodDef,
        mdParamDef rParams[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *EnumMemberRefs)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdToken tkParent,
        mdMemberRef rgMemberRefs[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *EnumMethodImpls)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdTypeDef tkTypeDef,
        mdToken rMethodBody[],
        mdToken rMethodDecl[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *EnumPermissionSets)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdToken tk,
        DWORD dwActions,
        mdPermission rPermission[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *FindMember)(
        IMetaDataImport2 *This,
        mdTypeDef tkTypeDef,
        LPCWSTR szName,
        PCCOR_SIGNATURE pvSigBlob,
        ULONG cbSigBlob,
        mdToken *pmb);

    HRESULT (STDMETHODCALLTYPE *FindMethod)(
        IMetaDataImport2 *This,
        mdTypeDef tkTypeDef,
        LPCWSTR szName,
        PCCOR_SIGNATURE pvSigBlob,
        ULONG cbSigBlob,
        mdMethodDef *ptkMethodDef);

    HRESULT (STDMETHODCALLTYPE *FindField)(
        IMetaDataImport2 *This,
        mdTypeDef tkTypeDef,
        LPCWSTR szName,
        PCCOR_SIGNATURE pvSigBlob,
        ULONG cbSigBlob,
        mdFieldDef *ptkFieldDef);

    HRESULT (STDMETHODCALLTYPE *FindMemberRef)(
        IMetaDataImport2 *This,
        mdTypeRef tkTypeRef,
        LPCWSTR szName,
        PCCOR_SIGNATURE pvSigBlob,
        ULONG cbSigBlob,
        mdMemberRef *pMemberRef);

    HRESULT (STDMETHODCALLTYPE *GetMethodProps)(
        IMetaDataImport2 *This,
        mdMethodDef tkMethodDef,
        mdTypeDef *ptkClass,
        LPWSTR szMethod,
        ULONG cchMethod,
        ULONG *pchMethod,
        DWORD *pdwAttr,
        PCCOR_SIGNATURE *ppvSigBlob,
        ULONG *pcbSigBlob,
        ULONG *pulCodeRVA,
        DWORD *pdwImplFlags);

    HRESULT (STDMETHODCALLTYPE *GetMemberRefProps)(
        IMetaDataImport2 *This,
        mdMemberRef tkMemberRef,
        mdToken *ptk,
        LPWSTR szMember,
        ULONG cchMember,
        ULONG *pchMember,
        PCCOR_SIGNATURE *ppvSigBlob,
        ULONG *pcbSigBlob);

    HRESULT (STDMETHODCALLTYPE *EnumProperties)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdTypeDef tkTypDef,
        mdProperty rgProperties[],
        ULONG cMax,
        ULONG *pcProperties);

    HRESULT (STDMETHODCALLTYPE *EnumEvents)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdTypeDef tkTypDef,
        mdEvent rgEvents[],
        ULONG cMax,
        ULONG *pcEvents);

    HRESULT (STDMETHODCALLTYPE *GetEventProps)(
        IMetaDataImport2 *This,
        mdEvent tkEvent,
        mdTypeDef *ptkClass,
        LPWSTR szEvent,
        ULONG cchEvent,
        ULONG *pchEvent,
        DWORD *pdwEventFlags,
        mdToken *ptkEventType,
        mdMethodDef *ptkAddOn,
        mdMethodDef *ptkRemoveOn,
        mdMethodDef *tkkFire,
        mdMethodDef rgOtherMethod[],
        ULONG cMax,
        ULONG *pcOtherMethod);

    HRESULT (STDMETHODCALLTYPE *EnumMethodSemantics)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdMethodDef tkMethodDef,
        mdToken rgEventProp[],
        ULONG cMax,
        ULONG *pcEventProp);

    HRESULT (STDMETHODCALLTYPE *GetMethodSemantics)(
        IMetaDataImport2 *This,
        mdMethodDef tkMethodDef,
        mdToken tkEventProp,
        DWORD *pdwSemanticsFlags);

    HRESULT (STDMETHODCALLTYPE *GetClassLayout)(
        IMetaDataImport2 *This,
        mdTypeDef tkTypeDef,
        DWORD *pdwPackSize,
        COR_FIELD_OFFSET rgFieldOffset[],
        ULONG cMax,
        ULONG *pcFieldOffset,
        ULONG *pulClassSize);

    HRESULT (STDMETHODCALLTYPE *GetFieldMarshal)(
        IMetaDataImport2 *This,
        mdToken tk,
        PCCOR_SIGNATURE *ppvNativeType,
        ULONG *pcbNativeType);

    HRESULT (STDMETHODCALLTYPE *GetRVA)(
        IMetaDataImport2 *This,
        mdToken tk,
        ULONG *pulCodeRVA,
        DWORD *pdwImplFlags);

    HRESULT (STDMETHODCALLTYPE *GetPermissionSetProps)(
        IMetaDataImport2 *This,
        mdPermission tk,
        DWORD *pdwAction,
        const BYTE **ppvPermission,
        ULONG *pcbPermission);

    HRESULT (STDMETHODCALLTYPE *GetSigFromToken)(
        IMetaDataImport2 *This,
        mdSignature tkSignature,
        PCCOR_SIGNATURE *ppvSig,
        ULONG *pcbSig);

    HRESULT (STDMETHODCALLTYPE *GetModuleRefProps)(
        IMetaDataImport2 *This,
        mdModuleRef tkModuleRef,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName);

    HRESULT (STDMETHODCALLTYPE *EnumModuleRefs)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdModuleRef rgModuleRefs[],
        ULONG cMax,
        ULONG *pcModuleRefs);

    HRESULT (STDMETHODCALLTYPE *GetTypeSpecFromToken)(
        IMetaDataImport2 *This,
        mdTypeSpec tkTypeSpec,
        PCCOR_SIGNATURE *ppvSig,
        ULONG *pcbSig);

    HRESULT (STDMETHODCALLTYPE *GetNameFromToken)(
        IMetaDataImport2 *This,
        mdToken tk,
        MDUTF8CSTR *pszUtf8NamePtr);

    HRESULT (STDMETHODCALLTYPE *EnumUnresolvedMethods)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdToken rgMethods[],
        ULONG cMax,
        ULONG *pcTokens);

    HRESULT (STDMETHODCALLTYPE *GetUserString)(
        IMetaDataImport2 *This,
        mdString tkString,
        LPWSTR szString,
        ULONG cchString,
        ULONG *pchString);

    HRESULT (STDMETHODCALLTYPE *GetPinvokeMap)(
        IMetaDataImport2 *This,
        mdToken tk,
        DWORD *pdwMappingFlags,
        LPWSTR szImportName,
        ULONG cchImportName,
        ULONG *pchImportName,
        mdModuleRef *ptkImportDLL);

    HRESULT (STDMETHODCALLTYPE *EnumSignatures)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdSignature rgSignatures[],
        ULONG cMax,
        ULONG *pcSignatures);

    HRESULT (STDMETHODCALLTYPE *EnumTypeSpecs)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdTypeSpec rgTypeSpecs[],
        ULONG cMax,
        ULONG *pcTypeSpecs);

    HRESULT (STDMETHODCALLTYPE *EnumUserStrings)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdString rgStrings[],
        ULONG cMax,
        ULONG *pcStrings);

    HRESULT (STDMETHODCALLTYPE *GetParamForMethodIndex)(
        IMetaDataImport2 *This,
        mdMethodDef tkMethodDef,
        ULONG ulParamSeq,
        mdParamDef *ptkParamDef);

    HRESULT (STDMETHODCALLTYPE *EnumCustomAttributes)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdToken tk,
        mdToken tkType,
        mdCustomAttribute rgCustomAttributes[],
        ULONG cMax,
        ULONG *pcCustomAttributes);

    HRESULT (STDMETHODCALLTYPE *GetCustomAttributeProps)(
        IMetaDataImport2 *This,
        mdCustomAttribute cv,
        mdToken *ptkObj,
        mdToken *ptkType,
        const BYTE **ppBlob,
        ULONG *pcbBlob);

    HRESULT (STDMETHODCALLTYPE *FindTypeRef)(
        IMetaDataImport2 *This,
        mdToken tkResolutionScope,
        LPCWSTR szName,
        mdTypeRef *tkTypeRef);

    HRESULT (STDMETHODCALLTYPE *GetMemberProps)(
        IMetaDataImport2 *This,
        mdToken tkMember,
        mdTypeDef *ptkTypeDef,
        LPWSTR szMember,
        ULONG cchMember,
        ULONG *pchMember,
        DWORD *pdwAttr,
        PCCOR_SIGNATURE *ppvSigBlob,
        ULONG *pcbSigBlob,
        ULONG *pulCodeRVA,
        DWORD *pdwImplFlags,
        DWORD *pdwCPlusTypeFlag,
        UVCP_CONSTANT *ppValue,
        ULONG *pcchValue);

    HRESULT (STDMETHODCALLTYPE *GetFieldProps)(
        IMetaDataImport2 *This,
        mdFieldDef tkFieldDef,
        mdTypeDef *ptkTypeDef,
        LPWSTR szField,
        ULONG cchField,
        ULONG *pchField,
        DWORD *pdwAttr,
        PCCOR_SIGNATURE *ppvSigBlob,
        ULONG *pcbSigBlob,
        DWORD *pdwCPlusTypeFlag,
        UVCP_CONSTANT *ppValue,
        ULONG *pcchValue);

    HRESULT (STDMETHODCALLTYPE *GetPropertyProps)(
        IMetaDataImport2 *This,
        mdProperty prop,
        mdTypeDef *ptkTypeDef,
        LPWSTR szProperty,
        ULONG cchProperty,
        ULONG *pchProperty,
        DWORD *pdwPropFlags,
        PCCOR_SIGNATURE *ppvSigBlob,
        ULONG *pcbSigBlob,
        DWORD *pdwCPlusTypeFlag,
        UVCP_CONSTANT *ppDefaultValue,
        ULONG *pcchDefaultValue,
        mdMethodDef *ptkSetter,
        mdMethodDef *ptkGetter,
        mdMethodDef rgOtherMethod[],
        ULONG cMax,
        ULONG *pcOtherMethod);

    HRESULT (STDMETHODCALLTYPE *GetParamProps)(
        IMetaDataImport2 *This,
        mdParamDef tkParamDef,
        mdMethodDef *ptkMethodDef,
        ULONG *pulSequence,
        LPWSTR szName,
        ULONG cchName,
        ULONG *pchName,
        DWORD *pdwAttr,
        DWORD *pdwCPlusTypeFlag,
        UVCP_CONSTANT *ppValue,
        ULONG *pcchValue);

    HRESULT (STDMETHODCALLTYPE *GetCustomAttributeByName)(
        IMetaDataImport2 *This,
        mdToken tkObj,
        LPCWSTR szName,
        const BYTE **ppData,
        ULONG *pcbData);

    BOOL (STDMETHODCALLTYPE *IsValidToken)(
        IMetaDataImport2 *This,
        mdToken tk);

    HRESULT (STDMETHODCALLTYPE *GetNestedClassProps)(
        IMetaDataImport2 *This,
        mdTypeDef tdNestedClass,
        mdTypeDef *ptdEnclosingClass);

    HRESULT (STDMETHODCALLTYPE *GetNativeCallConvFromSig)(
        IMetaDataImport2 *This,
        const BYTE *pvSig,
        ULONG cbSig,
        ULONG *pCallConv);

    HRESULT (STDMETHODCALLTYPE *IsGlobal)(
        IMetaDataImport2 *This,
        mdToken tk,
        int *pbIsGlobal);

    /*** IMetaDataImport2 methods ***/
    HRESULT (STDMETHODCALLTYPE *EnumGenericParams)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdToken tk,
        mdGenericParam rGenericParams[],
        ULONG cMax,
        ULONG *pcGenericParams);

    HRESULT (STDMETHODCALLTYPE *GetGenericParamProps)(
        IMetaDataImport2 *This,
        mdGenericParam gp,
        ULONG *pulParamSeq,
        DWORD *pdwParamFlags,
        mdToken *ptOwner,
        DWORD *reserved,
        LPWSTR wzname,
        ULONG cchName,
        ULONG *pchName);

    HRESULT (STDMETHODCALLTYPE *GetMethodSpecProps)(
        IMetaDataImport2 *This,
        mdMethodSpec mi,
        mdToken *tkParent,
        PCCOR_SIGNATURE *ppvSigBlob,
        ULONG *pcbSigBlob);

    HRESULT (STDMETHODCALLTYPE *EnumGenericParamConstraints)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdGenericParam tk,
        mdGenericParamConstraint rGenericParamConstraints[],
        ULONG cMax,
        ULONG *pcGenericParamConstraints);

    HRESULT (STDMETHODCALLTYPE *GetGenericParamConstraintProps)(
        IMetaDataImport2 *This,
        mdGenericParamConstraint gpc,
        mdGenericParam *ptGenericParam,
        mdToken *ptkConstraintType);

    HRESULT (STDMETHODCALLTYPE *GetPEKind)(
        IMetaDataImport2 *This,
        DWORD *pdwPEKind,
        DWORD *pdwMAchine);

    HRESULT (STDMETHODCALLTYPE *GetVersionString)(
        IMetaDataImport2 *This,
        LPWSTR pwzBuf,
        DWORD ccBufSize,
        DWORD *pccBufSize);

    HRESULT (STDMETHODCALLTYPE *EnumMethodSpecs)(
        IMetaDataImport2 *This,
        HCORENUM *phEnum,
        mdToken tk,
        mdMethodSpec rMethodSpecs[],
        ULONG cMax,
        ULONG *pcMethodSpecs);

    END_INTERFACE
} IMetaDataImport2Vtbl;

interface IMetaDataImport2 {
    CONST_VTBL IMetaDataImport2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IMetaDataImport2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IMetaDataImport2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IMetaDataImport2_Release(This) (This)->lpVtbl->Release(This)
/*** IMetaDataImport methods ***/
#define IMetaDataImport2_CloseEnum(This,hEnum) (This)->lpVtbl->CloseEnum(This,hEnum)
#define IMetaDataImport2_CountEnum(This,hEnum,pulCount) (This)->lpVtbl->CountEnum(This,hEnum,pulCount)
#define IMetaDataImport2_ResetEnum(This,hEnum,ulPos) (This)->lpVtbl->ResetEnum(This,hEnum,ulPos)
#define IMetaDataImport2_EnumTypeDefs(This,phEnum,rgTypeDefs,cMax,pcTypeDefs) (This)->lpVtbl->EnumTypeDefs(This,phEnum,rgTypeDefs,cMax,pcTypeDefs)
#define IMetaDataImport2_EnumInterfaceImpls(This,phEnum,td,rImpls,cMax,pcImpls) (This)->lpVtbl->EnumInterfaceImpls(This,phEnum,td,rImpls,cMax,pcImpls)
#define IMetaDataImport2_EnumTypeRefs(This,phEnum,rgTypeRefs,cMax,pcTypeRefs) (This)->lpVtbl->EnumTypeRefs(This,phEnum,rgTypeRefs,cMax,pcTypeRefs)
#define IMetaDataImport2_FindTypeDefByName(This,szTypeDef,tkEnclosingClass,ptkTypeDef) (This)->lpVtbl->FindTypeDefByName(This,szTypeDef,tkEnclosingClass,ptkTypeDef)
#define IMetaDataImport2_GetScopeProps(This,szName,cchName,pchName,pmvid) (This)->lpVtbl->GetScopeProps(This,szName,cchName,pchName,pmvid)
#define IMetaDataImport2_GetModuleFromScope(This,ptkModule) (This)->lpVtbl->GetModuleFromScope(This,ptkModule)
#define IMetaDataImport2_GetTypeDefProps(This,tkTypeDef,szTypeDef,cchTypeDef,pchTypeDef,pdwTypeDefFlags,ptkExtends) (This)->lpVtbl->GetTypeDefProps(This,tkTypeDef,szTypeDef,cchTypeDef,pchTypeDef,pdwTypeDefFlags,ptkExtends)
#define IMetaDataImport2_GetInterfaceImplProps(This,tkInterfaceImpl,ptkClass,ptkIface) (This)->lpVtbl->GetInterfaceImplProps(This,tkInterfaceImpl,ptkClass,ptkIface)
#define IMetaDataImport2_GetTypeRefProps(This,tkTypeRef,ptkResolutionScope,szName,cchName,pchName) (This)->lpVtbl->GetTypeRefProps(This,tkTypeRef,ptkResolutionScope,szName,cchName,pchName)
#define IMetaDataImport2_ResolveTypeRef(This,tkTypeRef,riid,ppIScope,ptkTypeDef) (This)->lpVtbl->ResolveTypeRef(This,tkTypeRef,riid,ppIScope,ptkTypeDef)
#define IMetaDataImport2_EnumMembers(This,phEnum,tkTypeDef,rgMembers,cMax,pcTokens) (This)->lpVtbl->EnumMembers(This,phEnum,tkTypeDef,rgMembers,cMax,pcTokens)
#define IMetaDataImport2_EnumMembersWithName(This,phEnum,tkTypeDef,szName,rgMembers,cMax,pcTokens) (This)->lpVtbl->EnumMembersWithName(This,phEnum,tkTypeDef,szName,rgMembers,cMax,pcTokens)
#define IMetaDataImport2_EnumMethods(This,phEnum,tkTypeDef,rgMethods,cMax,pcTokens) (This)->lpVtbl->EnumMethods(This,phEnum,tkTypeDef,rgMethods,cMax,pcTokens)
#define IMetaDataImport2_EnumMethodsWithName(This,phEnum,tkTypeDef,szName,rgMethods,cMax,pcTokens) (This)->lpVtbl->EnumMethodsWithName(This,phEnum,tkTypeDef,szName,rgMethods,cMax,pcTokens)
#define IMetaDataImport2_EnumFields(This,phEnum,tkTypeDef,rgFields,cMax,pcTokens) (This)->lpVtbl->EnumFields(This,phEnum,tkTypeDef,rgFields,cMax,pcTokens)
#define IMetaDataImport2_EnumFieldsWithName(This,phEnum,tkTypeDef,szName,rFields,cMax,pcTokens) (This)->lpVtbl->EnumFieldsWithName(This,phEnum,tkTypeDef,szName,rFields,cMax,pcTokens)
#define IMetaDataImport2_EnumParams(This,phEnum,tkMethodDef,rParams,cMax,pcTokens) (This)->lpVtbl->EnumParams(This,phEnum,tkMethodDef,rParams,cMax,pcTokens)
#define IMetaDataImport2_EnumMemberRefs(This,phEnum,tkParent,rgMemberRefs,cMax,pcTokens) (This)->lpVtbl->EnumMemberRefs(This,phEnum,tkParent,rgMemberRefs,cMax,pcTokens)
#define IMetaDataImport2_EnumMethodImpls(This,phEnum,tkTypeDef,rMethodBody,rMethodDecl,cMax,pcTokens) (This)->lpVtbl->EnumMethodImpls(This,phEnum,tkTypeDef,rMethodBody,rMethodDecl,cMax,pcTokens)
#define IMetaDataImport2_EnumPermissionSets(This,phEnum,tk,dwActions,rPermission,cMax,pcTokens) (This)->lpVtbl->EnumPermissionSets(This,phEnum,tk,dwActions,rPermission,cMax,pcTokens)
#define IMetaDataImport2_FindMember(This,tkTypeDef,szName,pvSigBlob,cbSigBlob,pmb) (This)->lpVtbl->FindMember(This,tkTypeDef,szName,pvSigBlob,cbSigBlob,pmb)
#define IMetaDataImport2_FindMethod(This,tkTypeDef,szName,pvSigBlob,cbSigBlob,ptkMethodDef) (This)->lpVtbl->FindMethod(This,tkTypeDef,szName,pvSigBlob,cbSigBlob,ptkMethodDef)
#define IMetaDataImport2_FindField(This,tkTypeDef,szName,pvSigBlob,cbSigBlob,ptkFieldDef) (This)->lpVtbl->FindField(This,tkTypeDef,szName,pvSigBlob,cbSigBlob,ptkFieldDef)
#define IMetaDataImport2_FindMemberRef(This,tkTypeRef,szName,pvSigBlob,cbSigBlob,pMemberRef) (This)->lpVtbl->FindMemberRef(This,tkTypeRef,szName,pvSigBlob,cbSigBlob,pMemberRef)
#define IMetaDataImport2_GetMethodProps(This,tkMethodDef,ptkClass,szMethod,cchMethod,pchMethod,pdwAttr,ppvSigBlob,pcbSigBlob,pulCodeRVA,pdwImplFlags) (This)->lpVtbl->GetMethodProps(This,tkMethodDef,ptkClass,szMethod,cchMethod,pchMethod,pdwAttr,ppvSigBlob,pcbSigBlob,pulCodeRVA,pdwImplFlags)
#define IMetaDataImport2_GetMemberRefProps(This,tkMemberRef,ptk,szMember,cchMember,pchMember,ppvSigBlob,pcbSigBlob) (This)->lpVtbl->GetMemberRefProps(This,tkMemberRef,ptk,szMember,cchMember,pchMember,ppvSigBlob,pcbSigBlob)
#define IMetaDataImport2_EnumProperties(This,phEnum,tkTypDef,rgProperties,cMax,pcProperties) (This)->lpVtbl->EnumProperties(This,phEnum,tkTypDef,rgProperties,cMax,pcProperties)
#define IMetaDataImport2_EnumEvents(This,phEnum,tkTypDef,rgEvents,cMax,pcEvents) (This)->lpVtbl->EnumEvents(This,phEnum,tkTypDef,rgEvents,cMax,pcEvents)
#define IMetaDataImport2_GetEventProps(This,tkEvent,ptkClass,szEvent,cchEvent,pchEvent,pdwEventFlags,ptkEventType,ptkAddOn,ptkRemoveOn,tkkFire,rgOtherMethod,cMax,pcOtherMethod) (This)->lpVtbl->GetEventProps(This,tkEvent,ptkClass,szEvent,cchEvent,pchEvent,pdwEventFlags,ptkEventType,ptkAddOn,ptkRemoveOn,tkkFire,rgOtherMethod,cMax,pcOtherMethod)
#define IMetaDataImport2_EnumMethodSemantics(This,phEnum,tkMethodDef,rgEventProp,cMax,pcEventProp) (This)->lpVtbl->EnumMethodSemantics(This,phEnum,tkMethodDef,rgEventProp,cMax,pcEventProp)
#define IMetaDataImport2_GetMethodSemantics(This,tkMethodDef,tkEventProp,pdwSemanticsFlags) (This)->lpVtbl->GetMethodSemantics(This,tkMethodDef,tkEventProp,pdwSemanticsFlags)
#define IMetaDataImport2_GetClassLayout(This,tkTypeDef,pdwPackSize,rgFieldOffset,cMax,pcFieldOffset,pulClassSize) (This)->lpVtbl->GetClassLayout(This,tkTypeDef,pdwPackSize,rgFieldOffset,cMax,pcFieldOffset,pulClassSize)
#define IMetaDataImport2_GetFieldMarshal(This,tk,ppvNativeType,pcbNativeType) (This)->lpVtbl->GetFieldMarshal(This,tk,ppvNativeType,pcbNativeType)
#define IMetaDataImport2_GetRVA(This,tk,pulCodeRVA,pdwImplFlags) (This)->lpVtbl->GetRVA(This,tk,pulCodeRVA,pdwImplFlags)
#define IMetaDataImport2_GetPermissionSetProps(This,tk,pdwAction,ppvPermission,pcbPermission) (This)->lpVtbl->GetPermissionSetProps(This,tk,pdwAction,ppvPermission,pcbPermission)
#define IMetaDataImport2_GetSigFromToken(This,tkSignature,ppvSig,pcbSig) (This)->lpVtbl->GetSigFromToken(This,tkSignature,ppvSig,pcbSig)
#define IMetaDataImport2_GetModuleRefProps(This,tkModuleRef,szName,cchName,pchName) (This)->lpVtbl->GetModuleRefProps(This,tkModuleRef,szName,cchName,pchName)
#define IMetaDataImport2_EnumModuleRefs(This,phEnum,rgModuleRefs,cMax,pcModuleRefs) (This)->lpVtbl->EnumModuleRefs(This,phEnum,rgModuleRefs,cMax,pcModuleRefs)
#define IMetaDataImport2_GetTypeSpecFromToken(This,tkTypeSpec,ppvSig,pcbSig) (This)->lpVtbl->GetTypeSpecFromToken(This,tkTypeSpec,ppvSig,pcbSig)
#define IMetaDataImport2_GetNameFromToken(This,tk,pszUtf8NamePtr) (This)->lpVtbl->GetNameFromToken(This,tk,pszUtf8NamePtr)
#define IMetaDataImport2_EnumUnresolvedMethods(This,phEnum,rgMethods,cMax,pcTokens) (This)->lpVtbl->EnumUnresolvedMethods(This,phEnum,rgMethods,cMax,pcTokens)
#define IMetaDataImport2_GetUserString(This,tkString,szString,cchString,pchString) (This)->lpVtbl->GetUserString(This,tkString,szString,cchString,pchString)
#define IMetaDataImport2_GetPinvokeMap(This,tk,pdwMappingFlags,szImportName,cchImportName,pchImportName,ptkImportDLL) (This)->lpVtbl->GetPinvokeMap(This,tk,pdwMappingFlags,szImportName,cchImportName,pchImportName,ptkImportDLL)
#define IMetaDataImport2_EnumSignatures(This,phEnum,rgSignatures,cMax,pcSignatures) (This)->lpVtbl->EnumSignatures(This,phEnum,rgSignatures,cMax,pcSignatures)
#define IMetaDataImport2_EnumTypeSpecs(This,phEnum,rgTypeSpecs,cMax,pcTypeSpecs) (This)->lpVtbl->EnumTypeSpecs(This,phEnum,rgTypeSpecs,cMax,pcTypeSpecs)
#define IMetaDataImport2_EnumUserStrings(This,phEnum,rgStrings,cMax,pcStrings) (This)->lpVtbl->EnumUserStrings(This,phEnum,rgStrings,cMax,pcStrings)
#define IMetaDataImport2_GetParamForMethodIndex(This,tkMethodDef,ulParamSeq,ptkParamDef) (This)->lpVtbl->GetParamForMethodIndex(This,tkMethodDef,ulParamSeq,ptkParamDef)
#define IMetaDataImport2_EnumCustomAttributes(This,phEnum,tk,tkType,rgCustomAttributes,cMax,pcCustomAttributes) (This)->lpVtbl->EnumCustomAttributes(This,phEnum,tk,tkType,rgCustomAttributes,cMax,pcCustomAttributes)
#define IMetaDataImport2_GetCustomAttributeProps(This,cv,ptkObj,ptkType,ppBlob,pcbBlob) (This)->lpVtbl->GetCustomAttributeProps(This,cv,ptkObj,ptkType,ppBlob,pcbBlob)
#define IMetaDataImport2_FindTypeRef(This,tkResolutionScope,szName,tkTypeRef) (This)->lpVtbl->FindTypeRef(This,tkResolutionScope,szName,tkTypeRef)
#define IMetaDataImport2_GetMemberProps(This,tkMember,ptkTypeDef,szMember,cchMember,pchMember,pdwAttr,ppvSigBlob,pcbSigBlob,pulCodeRVA,pdwImplFlags,pdwCPlusTypeFlag,ppValue,pcchValue) (This)->lpVtbl->GetMemberProps(This,tkMember,ptkTypeDef,szMember,cchMember,pchMember,pdwAttr,ppvSigBlob,pcbSigBlob,pulCodeRVA,pdwImplFlags,pdwCPlusTypeFlag,ppValue,pcchValue)
#define IMetaDataImport2_GetFieldProps(This,tkFieldDef,ptkTypeDef,szField,cchField,pchField,pdwAttr,ppvSigBlob,pcbSigBlob,pdwCPlusTypeFlag,ppValue,pcchValue) (This)->lpVtbl->GetFieldProps(This,tkFieldDef,ptkTypeDef,szField,cchField,pchField,pdwAttr,ppvSigBlob,pcbSigBlob,pdwCPlusTypeFlag,ppValue,pcchValue)
#define IMetaDataImport2_GetPropertyProps(This,prop,ptkTypeDef,szProperty,cchProperty,pchProperty,pdwPropFlags,ppvSigBlob,pcbSigBlob,pdwCPlusTypeFlag,ppDefaultValue,pcchDefaultValue,ptkSetter,ptkGetter,rgOtherMethod,cMax,pcOtherMethod) (This)->lpVtbl->GetPropertyProps(This,prop,ptkTypeDef,szProperty,cchProperty,pchProperty,pdwPropFlags,ppvSigBlob,pcbSigBlob,pdwCPlusTypeFlag,ppDefaultValue,pcchDefaultValue,ptkSetter,ptkGetter,rgOtherMethod,cMax,pcOtherMethod)
#define IMetaDataImport2_GetParamProps(This,tkParamDef,ptkMethodDef,pulSequence,szName,cchName,pchName,pdwAttr,pdwCPlusTypeFlag,ppValue,pcchValue) (This)->lpVtbl->GetParamProps(This,tkParamDef,ptkMethodDef,pulSequence,szName,cchName,pchName,pdwAttr,pdwCPlusTypeFlag,ppValue,pcchValue)
#define IMetaDataImport2_GetCustomAttributeByName(This,tkObj,szName,ppData,pcbData) (This)->lpVtbl->GetCustomAttributeByName(This,tkObj,szName,ppData,pcbData)
#define IMetaDataImport2_IsValidToken(This,tk) (This)->lpVtbl->IsValidToken(This,tk)
#define IMetaDataImport2_GetNestedClassProps(This,tdNestedClass,ptdEnclosingClass) (This)->lpVtbl->GetNestedClassProps(This,tdNestedClass,ptdEnclosingClass)
#define IMetaDataImport2_GetNativeCallConvFromSig(This,pvSig,cbSig,pCallConv) (This)->lpVtbl->GetNativeCallConvFromSig(This,pvSig,cbSig,pCallConv)
#define IMetaDataImport2_IsGlobal(This,tk,pbIsGlobal) (This)->lpVtbl->IsGlobal(This,tk,pbIsGlobal)
/*** IMetaDataImport2 methods ***/
#define IMetaDataImport2_EnumGenericParams(This,phEnum,tk,rGenericParams,cMax,pcGenericParams) (This)->lpVtbl->EnumGenericParams(This,phEnum,tk,rGenericParams,cMax,pcGenericParams)
#define IMetaDataImport2_GetGenericParamProps(This,gp,pulParamSeq,pdwParamFlags,ptOwner,reserved,wzname,cchName,pchName) (This)->lpVtbl->GetGenericParamProps(This,gp,pulParamSeq,pdwParamFlags,ptOwner,reserved,wzname,cchName,pchName)
#define IMetaDataImport2_GetMethodSpecProps(This,mi,tkParent,ppvSigBlob,pcbSigBlob) (This)->lpVtbl->GetMethodSpecProps(This,mi,tkParent,ppvSigBlob,pcbSigBlob)
#define IMetaDataImport2_EnumGenericParamConstraints(This,phEnum,tk,rGenericParamConstraints,cMax,pcGenericParamConstraints) (This)->lpVtbl->EnumGenericParamConstraints(This,phEnum,tk,rGenericParamConstraints,cMax,pcGenericParamConstraints)
#define IMetaDataImport2_GetGenericParamConstraintProps(This,gpc,ptGenericParam,ptkConstraintType) (This)->lpVtbl->GetGenericParamConstraintProps(This,gpc,ptGenericParam,ptkConstraintType)
#define IMetaDataImport2_GetPEKind(This,pdwPEKind,pdwMAchine) (This)->lpVtbl->GetPEKind(This,pdwPEKind,pdwMAchine)
#define IMetaDataImport2_GetVersionString(This,pwzBuf,ccBufSize,pccBufSize) (This)->lpVtbl->GetVersionString(This,pwzBuf,ccBufSize,pccBufSize)
#define IMetaDataImport2_EnumMethodSpecs(This,phEnum,tk,rMethodSpecs,cMax,pcMethodSpecs) (This)->lpVtbl->EnumMethodSpecs(This,phEnum,tk,rMethodSpecs,cMax,pcMethodSpecs)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IMetaDataImport2_QueryInterface(IMetaDataImport2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IMetaDataImport2_AddRef(IMetaDataImport2* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IMetaDataImport2_Release(IMetaDataImport2* This) {
    return This->lpVtbl->Release(This);
}
/*** IMetaDataImport methods ***/
static FORCEINLINE void IMetaDataImport2_CloseEnum(IMetaDataImport2* This,HCORENUM hEnum) {
    This->lpVtbl->CloseEnum(This,hEnum);
}
static FORCEINLINE HRESULT IMetaDataImport2_CountEnum(IMetaDataImport2* This,HCORENUM hEnum,ULONG *pulCount) {
    return This->lpVtbl->CountEnum(This,hEnum,pulCount);
}
static FORCEINLINE HRESULT IMetaDataImport2_ResetEnum(IMetaDataImport2* This,HCORENUM hEnum,ULONG ulPos) {
    return This->lpVtbl->ResetEnum(This,hEnum,ulPos);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumTypeDefs(IMetaDataImport2* This,HCORENUM *phEnum,mdTypeDef rgTypeDefs[],ULONG cMax,ULONG *pcTypeDefs) {
    return This->lpVtbl->EnumTypeDefs(This,phEnum,rgTypeDefs,cMax,pcTypeDefs);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumInterfaceImpls(IMetaDataImport2* This,HCORENUM *phEnum,mdTypeDef td,mdInterfaceImpl rImpls[],ULONG cMax,ULONG *pcImpls) {
    return This->lpVtbl->EnumInterfaceImpls(This,phEnum,td,rImpls,cMax,pcImpls);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumTypeRefs(IMetaDataImport2* This,HCORENUM *phEnum,mdTypeRef rgTypeRefs[],ULONG cMax,ULONG *pcTypeRefs) {
    return This->lpVtbl->EnumTypeRefs(This,phEnum,rgTypeRefs,cMax,pcTypeRefs);
}
static FORCEINLINE HRESULT IMetaDataImport2_FindTypeDefByName(IMetaDataImport2* This,LPCWSTR szTypeDef,mdToken tkEnclosingClass,mdTypeDef *ptkTypeDef) {
    return This->lpVtbl->FindTypeDefByName(This,szTypeDef,tkEnclosingClass,ptkTypeDef);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetScopeProps(IMetaDataImport2* This,LPWSTR szName,ULONG cchName,ULONG *pchName,GUID *pmvid) {
    return This->lpVtbl->GetScopeProps(This,szName,cchName,pchName,pmvid);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetModuleFromScope(IMetaDataImport2* This,mdModule *ptkModule) {
    return This->lpVtbl->GetModuleFromScope(This,ptkModule);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetTypeDefProps(IMetaDataImport2* This,mdTypeDef tkTypeDef,LPWSTR szTypeDef,ULONG cchTypeDef,ULONG *pchTypeDef,DWORD *pdwTypeDefFlags,mdToken *ptkExtends) {
    return This->lpVtbl->GetTypeDefProps(This,tkTypeDef,szTypeDef,cchTypeDef,pchTypeDef,pdwTypeDefFlags,ptkExtends);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetInterfaceImplProps(IMetaDataImport2* This,mdInterfaceImpl tkInterfaceImpl,mdTypeDef *ptkClass,mdToken *ptkIface) {
    return This->lpVtbl->GetInterfaceImplProps(This,tkInterfaceImpl,ptkClass,ptkIface);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetTypeRefProps(IMetaDataImport2* This,mdTypeRef tkTypeRef,mdToken *ptkResolutionScope,LPWSTR szName,ULONG cchName,ULONG *pchName) {
    return This->lpVtbl->GetTypeRefProps(This,tkTypeRef,ptkResolutionScope,szName,cchName,pchName);
}
static FORCEINLINE HRESULT IMetaDataImport2_ResolveTypeRef(IMetaDataImport2* This,mdTypeRef tkTypeRef,REFIID riid,IUnknown **ppIScope,mdTypeDef *ptkTypeDef) {
    return This->lpVtbl->ResolveTypeRef(This,tkTypeRef,riid,ppIScope,ptkTypeDef);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumMembers(IMetaDataImport2* This,HCORENUM *phEnum,mdTypeDef tkTypeDef,mdToken rgMembers[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumMembers(This,phEnum,tkTypeDef,rgMembers,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumMembersWithName(IMetaDataImport2* This,HCORENUM *phEnum,mdTypeDef tkTypeDef,LPCWSTR szName,mdToken rgMembers[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumMembersWithName(This,phEnum,tkTypeDef,szName,rgMembers,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumMethods(IMetaDataImport2* This,HCORENUM *phEnum,mdTypeDef tkTypeDef,mdMethodDef rgMethods[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumMethods(This,phEnum,tkTypeDef,rgMethods,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumMethodsWithName(IMetaDataImport2* This,HCORENUM *phEnum,mdTypeDef tkTypeDef,LPCWSTR szName,mdMethodDef rgMethods[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumMethodsWithName(This,phEnum,tkTypeDef,szName,rgMethods,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumFields(IMetaDataImport2* This,HCORENUM *phEnum,mdTypeDef tkTypeDef,mdFieldDef rgFields[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumFields(This,phEnum,tkTypeDef,rgFields,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumFieldsWithName(IMetaDataImport2* This,HCORENUM *phEnum,mdTypeDef tkTypeDef,LPCWSTR szName,mdFieldDef rFields[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumFieldsWithName(This,phEnum,tkTypeDef,szName,rFields,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumParams(IMetaDataImport2* This,HCORENUM *phEnum,mdMethodDef tkMethodDef,mdParamDef rParams[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumParams(This,phEnum,tkMethodDef,rParams,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumMemberRefs(IMetaDataImport2* This,HCORENUM *phEnum,mdToken tkParent,mdMemberRef rgMemberRefs[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumMemberRefs(This,phEnum,tkParent,rgMemberRefs,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumMethodImpls(IMetaDataImport2* This,HCORENUM *phEnum,mdTypeDef tkTypeDef,mdToken rMethodBody[],mdToken rMethodDecl[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumMethodImpls(This,phEnum,tkTypeDef,rMethodBody,rMethodDecl,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumPermissionSets(IMetaDataImport2* This,HCORENUM *phEnum,mdToken tk,DWORD dwActions,mdPermission rPermission[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumPermissionSets(This,phEnum,tk,dwActions,rPermission,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport2_FindMember(IMetaDataImport2* This,mdTypeDef tkTypeDef,LPCWSTR szName,PCCOR_SIGNATURE pvSigBlob,ULONG cbSigBlob,mdToken *pmb) {
    return This->lpVtbl->FindMember(This,tkTypeDef,szName,pvSigBlob,cbSigBlob,pmb);
}
static FORCEINLINE HRESULT IMetaDataImport2_FindMethod(IMetaDataImport2* This,mdTypeDef tkTypeDef,LPCWSTR szName,PCCOR_SIGNATURE pvSigBlob,ULONG cbSigBlob,mdMethodDef *ptkMethodDef) {
    return This->lpVtbl->FindMethod(This,tkTypeDef,szName,pvSigBlob,cbSigBlob,ptkMethodDef);
}
static FORCEINLINE HRESULT IMetaDataImport2_FindField(IMetaDataImport2* This,mdTypeDef tkTypeDef,LPCWSTR szName,PCCOR_SIGNATURE pvSigBlob,ULONG cbSigBlob,mdFieldDef *ptkFieldDef) {
    return This->lpVtbl->FindField(This,tkTypeDef,szName,pvSigBlob,cbSigBlob,ptkFieldDef);
}
static FORCEINLINE HRESULT IMetaDataImport2_FindMemberRef(IMetaDataImport2* This,mdTypeRef tkTypeRef,LPCWSTR szName,PCCOR_SIGNATURE pvSigBlob,ULONG cbSigBlob,mdMemberRef *pMemberRef) {
    return This->lpVtbl->FindMemberRef(This,tkTypeRef,szName,pvSigBlob,cbSigBlob,pMemberRef);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetMethodProps(IMetaDataImport2* This,mdMethodDef tkMethodDef,mdTypeDef *ptkClass,LPWSTR szMethod,ULONG cchMethod,ULONG *pchMethod,DWORD *pdwAttr,PCCOR_SIGNATURE *ppvSigBlob,ULONG *pcbSigBlob,ULONG *pulCodeRVA,DWORD *pdwImplFlags) {
    return This->lpVtbl->GetMethodProps(This,tkMethodDef,ptkClass,szMethod,cchMethod,pchMethod,pdwAttr,ppvSigBlob,pcbSigBlob,pulCodeRVA,pdwImplFlags);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetMemberRefProps(IMetaDataImport2* This,mdMemberRef tkMemberRef,mdToken *ptk,LPWSTR szMember,ULONG cchMember,ULONG *pchMember,PCCOR_SIGNATURE *ppvSigBlob,ULONG *pcbSigBlob) {
    return This->lpVtbl->GetMemberRefProps(This,tkMemberRef,ptk,szMember,cchMember,pchMember,ppvSigBlob,pcbSigBlob);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumProperties(IMetaDataImport2* This,HCORENUM *phEnum,mdTypeDef tkTypDef,mdProperty rgProperties[],ULONG cMax,ULONG *pcProperties) {
    return This->lpVtbl->EnumProperties(This,phEnum,tkTypDef,rgProperties,cMax,pcProperties);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumEvents(IMetaDataImport2* This,HCORENUM *phEnum,mdTypeDef tkTypDef,mdEvent rgEvents[],ULONG cMax,ULONG *pcEvents) {
    return This->lpVtbl->EnumEvents(This,phEnum,tkTypDef,rgEvents,cMax,pcEvents);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetEventProps(IMetaDataImport2* This,mdEvent tkEvent,mdTypeDef *ptkClass,LPWSTR szEvent,ULONG cchEvent,ULONG *pchEvent,DWORD *pdwEventFlags,mdToken *ptkEventType,mdMethodDef *ptkAddOn,mdMethodDef *ptkRemoveOn,mdMethodDef *tkkFire,mdMethodDef rgOtherMethod[],ULONG cMax,ULONG *pcOtherMethod) {
    return This->lpVtbl->GetEventProps(This,tkEvent,ptkClass,szEvent,cchEvent,pchEvent,pdwEventFlags,ptkEventType,ptkAddOn,ptkRemoveOn,tkkFire,rgOtherMethod,cMax,pcOtherMethod);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumMethodSemantics(IMetaDataImport2* This,HCORENUM *phEnum,mdMethodDef tkMethodDef,mdToken rgEventProp[],ULONG cMax,ULONG *pcEventProp) {
    return This->lpVtbl->EnumMethodSemantics(This,phEnum,tkMethodDef,rgEventProp,cMax,pcEventProp);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetMethodSemantics(IMetaDataImport2* This,mdMethodDef tkMethodDef,mdToken tkEventProp,DWORD *pdwSemanticsFlags) {
    return This->lpVtbl->GetMethodSemantics(This,tkMethodDef,tkEventProp,pdwSemanticsFlags);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetClassLayout(IMetaDataImport2* This,mdTypeDef tkTypeDef,DWORD *pdwPackSize,COR_FIELD_OFFSET rgFieldOffset[],ULONG cMax,ULONG *pcFieldOffset,ULONG *pulClassSize) {
    return This->lpVtbl->GetClassLayout(This,tkTypeDef,pdwPackSize,rgFieldOffset,cMax,pcFieldOffset,pulClassSize);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetFieldMarshal(IMetaDataImport2* This,mdToken tk,PCCOR_SIGNATURE *ppvNativeType,ULONG *pcbNativeType) {
    return This->lpVtbl->GetFieldMarshal(This,tk,ppvNativeType,pcbNativeType);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetRVA(IMetaDataImport2* This,mdToken tk,ULONG *pulCodeRVA,DWORD *pdwImplFlags) {
    return This->lpVtbl->GetRVA(This,tk,pulCodeRVA,pdwImplFlags);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetPermissionSetProps(IMetaDataImport2* This,mdPermission tk,DWORD *pdwAction,const BYTE **ppvPermission,ULONG *pcbPermission) {
    return This->lpVtbl->GetPermissionSetProps(This,tk,pdwAction,ppvPermission,pcbPermission);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetSigFromToken(IMetaDataImport2* This,mdSignature tkSignature,PCCOR_SIGNATURE *ppvSig,ULONG *pcbSig) {
    return This->lpVtbl->GetSigFromToken(This,tkSignature,ppvSig,pcbSig);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetModuleRefProps(IMetaDataImport2* This,mdModuleRef tkModuleRef,LPWSTR szName,ULONG cchName,ULONG *pchName) {
    return This->lpVtbl->GetModuleRefProps(This,tkModuleRef,szName,cchName,pchName);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumModuleRefs(IMetaDataImport2* This,HCORENUM *phEnum,mdModuleRef rgModuleRefs[],ULONG cMax,ULONG *pcModuleRefs) {
    return This->lpVtbl->EnumModuleRefs(This,phEnum,rgModuleRefs,cMax,pcModuleRefs);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetTypeSpecFromToken(IMetaDataImport2* This,mdTypeSpec tkTypeSpec,PCCOR_SIGNATURE *ppvSig,ULONG *pcbSig) {
    return This->lpVtbl->GetTypeSpecFromToken(This,tkTypeSpec,ppvSig,pcbSig);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetNameFromToken(IMetaDataImport2* This,mdToken tk,MDUTF8CSTR *pszUtf8NamePtr) {
    return This->lpVtbl->GetNameFromToken(This,tk,pszUtf8NamePtr);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumUnresolvedMethods(IMetaDataImport2* This,HCORENUM *phEnum,mdToken rgMethods[],ULONG cMax,ULONG *pcTokens) {
    return This->lpVtbl->EnumUnresolvedMethods(This,phEnum,rgMethods,cMax,pcTokens);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetUserString(IMetaDataImport2* This,mdString tkString,LPWSTR szString,ULONG cchString,ULONG *pchString) {
    return This->lpVtbl->GetUserString(This,tkString,szString,cchString,pchString);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetPinvokeMap(IMetaDataImport2* This,mdToken tk,DWORD *pdwMappingFlags,LPWSTR szImportName,ULONG cchImportName,ULONG *pchImportName,mdModuleRef *ptkImportDLL) {
    return This->lpVtbl->GetPinvokeMap(This,tk,pdwMappingFlags,szImportName,cchImportName,pchImportName,ptkImportDLL);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumSignatures(IMetaDataImport2* This,HCORENUM *phEnum,mdSignature rgSignatures[],ULONG cMax,ULONG *pcSignatures) {
    return This->lpVtbl->EnumSignatures(This,phEnum,rgSignatures,cMax,pcSignatures);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumTypeSpecs(IMetaDataImport2* This,HCORENUM *phEnum,mdTypeSpec rgTypeSpecs[],ULONG cMax,ULONG *pcTypeSpecs) {
    return This->lpVtbl->EnumTypeSpecs(This,phEnum,rgTypeSpecs,cMax,pcTypeSpecs);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumUserStrings(IMetaDataImport2* This,HCORENUM *phEnum,mdString rgStrings[],ULONG cMax,ULONG *pcStrings) {
    return This->lpVtbl->EnumUserStrings(This,phEnum,rgStrings,cMax,pcStrings);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetParamForMethodIndex(IMetaDataImport2* This,mdMethodDef tkMethodDef,ULONG ulParamSeq,mdParamDef *ptkParamDef) {
    return This->lpVtbl->GetParamForMethodIndex(This,tkMethodDef,ulParamSeq,ptkParamDef);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumCustomAttributes(IMetaDataImport2* This,HCORENUM *phEnum,mdToken tk,mdToken tkType,mdCustomAttribute rgCustomAttributes[],ULONG cMax,ULONG *pcCustomAttributes) {
    return This->lpVtbl->EnumCustomAttributes(This,phEnum,tk,tkType,rgCustomAttributes,cMax,pcCustomAttributes);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetCustomAttributeProps(IMetaDataImport2* This,mdCustomAttribute cv,mdToken *ptkObj,mdToken *ptkType,const BYTE **ppBlob,ULONG *pcbBlob) {
    return This->lpVtbl->GetCustomAttributeProps(This,cv,ptkObj,ptkType,ppBlob,pcbBlob);
}
static FORCEINLINE HRESULT IMetaDataImport2_FindTypeRef(IMetaDataImport2* This,mdToken tkResolutionScope,LPCWSTR szName,mdTypeRef *tkTypeRef) {
    return This->lpVtbl->FindTypeRef(This,tkResolutionScope,szName,tkTypeRef);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetMemberProps(IMetaDataImport2* This,mdToken tkMember,mdTypeDef *ptkTypeDef,LPWSTR szMember,ULONG cchMember,ULONG *pchMember,DWORD *pdwAttr,PCCOR_SIGNATURE *ppvSigBlob,ULONG *pcbSigBlob,ULONG *pulCodeRVA,DWORD *pdwImplFlags,DWORD *pdwCPlusTypeFlag,UVCP_CONSTANT *ppValue,ULONG *pcchValue) {
    return This->lpVtbl->GetMemberProps(This,tkMember,ptkTypeDef,szMember,cchMember,pchMember,pdwAttr,ppvSigBlob,pcbSigBlob,pulCodeRVA,pdwImplFlags,pdwCPlusTypeFlag,ppValue,pcchValue);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetFieldProps(IMetaDataImport2* This,mdFieldDef tkFieldDef,mdTypeDef *ptkTypeDef,LPWSTR szField,ULONG cchField,ULONG *pchField,DWORD *pdwAttr,PCCOR_SIGNATURE *ppvSigBlob,ULONG *pcbSigBlob,DWORD *pdwCPlusTypeFlag,UVCP_CONSTANT *ppValue,ULONG *pcchValue) {
    return This->lpVtbl->GetFieldProps(This,tkFieldDef,ptkTypeDef,szField,cchField,pchField,pdwAttr,ppvSigBlob,pcbSigBlob,pdwCPlusTypeFlag,ppValue,pcchValue);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetPropertyProps(IMetaDataImport2* This,mdProperty prop,mdTypeDef *ptkTypeDef,LPWSTR szProperty,ULONG cchProperty,ULONG *pchProperty,DWORD *pdwPropFlags,PCCOR_SIGNATURE *ppvSigBlob,ULONG *pcbSigBlob,DWORD *pdwCPlusTypeFlag,UVCP_CONSTANT *ppDefaultValue,ULONG *pcchDefaultValue,mdMethodDef *ptkSetter,mdMethodDef *ptkGetter,mdMethodDef rgOtherMethod[],ULONG cMax,ULONG *pcOtherMethod) {
    return This->lpVtbl->GetPropertyProps(This,prop,ptkTypeDef,szProperty,cchProperty,pchProperty,pdwPropFlags,ppvSigBlob,pcbSigBlob,pdwCPlusTypeFlag,ppDefaultValue,pcchDefaultValue,ptkSetter,ptkGetter,rgOtherMethod,cMax,pcOtherMethod);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetParamProps(IMetaDataImport2* This,mdParamDef tkParamDef,mdMethodDef *ptkMethodDef,ULONG *pulSequence,LPWSTR szName,ULONG cchName,ULONG *pchName,DWORD *pdwAttr,DWORD *pdwCPlusTypeFlag,UVCP_CONSTANT *ppValue,ULONG *pcchValue) {
    return This->lpVtbl->GetParamProps(This,tkParamDef,ptkMethodDef,pulSequence,szName,cchName,pchName,pdwAttr,pdwCPlusTypeFlag,ppValue,pcchValue);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetCustomAttributeByName(IMetaDataImport2* This,mdToken tkObj,LPCWSTR szName,const BYTE **ppData,ULONG *pcbData) {
    return This->lpVtbl->GetCustomAttributeByName(This,tkObj,szName,ppData,pcbData);
}
static FORCEINLINE BOOL IMetaDataImport2_IsValidToken(IMetaDataImport2* This,mdToken tk) {
    return This->lpVtbl->IsValidToken(This,tk);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetNestedClassProps(IMetaDataImport2* This,mdTypeDef tdNestedClass,mdTypeDef *ptdEnclosingClass) {
    return This->lpVtbl->GetNestedClassProps(This,tdNestedClass,ptdEnclosingClass);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetNativeCallConvFromSig(IMetaDataImport2* This,const BYTE *pvSig,ULONG cbSig,ULONG *pCallConv) {
    return This->lpVtbl->GetNativeCallConvFromSig(This,pvSig,cbSig,pCallConv);
}
static FORCEINLINE HRESULT IMetaDataImport2_IsGlobal(IMetaDataImport2* This,mdToken tk,int *pbIsGlobal) {
    return This->lpVtbl->IsGlobal(This,tk,pbIsGlobal);
}
/*** IMetaDataImport2 methods ***/
static FORCEINLINE HRESULT IMetaDataImport2_EnumGenericParams(IMetaDataImport2* This,HCORENUM *phEnum,mdToken tk,mdGenericParam rGenericParams[],ULONG cMax,ULONG *pcGenericParams) {
    return This->lpVtbl->EnumGenericParams(This,phEnum,tk,rGenericParams,cMax,pcGenericParams);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetGenericParamProps(IMetaDataImport2* This,mdGenericParam gp,ULONG *pulParamSeq,DWORD *pdwParamFlags,mdToken *ptOwner,DWORD *reserved,LPWSTR wzname,ULONG cchName,ULONG *pchName) {
    return This->lpVtbl->GetGenericParamProps(This,gp,pulParamSeq,pdwParamFlags,ptOwner,reserved,wzname,cchName,pchName);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetMethodSpecProps(IMetaDataImport2* This,mdMethodSpec mi,mdToken *tkParent,PCCOR_SIGNATURE *ppvSigBlob,ULONG *pcbSigBlob) {
    return This->lpVtbl->GetMethodSpecProps(This,mi,tkParent,ppvSigBlob,pcbSigBlob);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumGenericParamConstraints(IMetaDataImport2* This,HCORENUM *phEnum,mdGenericParam tk,mdGenericParamConstraint rGenericParamConstraints[],ULONG cMax,ULONG *pcGenericParamConstraints) {
    return This->lpVtbl->EnumGenericParamConstraints(This,phEnum,tk,rGenericParamConstraints,cMax,pcGenericParamConstraints);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetGenericParamConstraintProps(IMetaDataImport2* This,mdGenericParamConstraint gpc,mdGenericParam *ptGenericParam,mdToken *ptkConstraintType) {
    return This->lpVtbl->GetGenericParamConstraintProps(This,gpc,ptGenericParam,ptkConstraintType);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetPEKind(IMetaDataImport2* This,DWORD *pdwPEKind,DWORD *pdwMAchine) {
    return This->lpVtbl->GetPEKind(This,pdwPEKind,pdwMAchine);
}
static FORCEINLINE HRESULT IMetaDataImport2_GetVersionString(IMetaDataImport2* This,LPWSTR pwzBuf,DWORD ccBufSize,DWORD *pccBufSize) {
    return This->lpVtbl->GetVersionString(This,pwzBuf,ccBufSize,pccBufSize);
}
static FORCEINLINE HRESULT IMetaDataImport2_EnumMethodSpecs(IMetaDataImport2* This,HCORENUM *phEnum,mdToken tk,mdMethodSpec rMethodSpecs[],ULONG cMax,ULONG *pcMethodSpecs) {
    return This->lpVtbl->EnumMethodSpecs(This,phEnum,tk,rMethodSpecs,cMax,pcMethodSpecs);
}
#endif
#endif

#endif


#endif  /* __IMetaDataImport2_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IMetaDataTables interface
 */
#ifndef __IMetaDataTables_INTERFACE_DEFINED__
#define __IMetaDataTables_INTERFACE_DEFINED__

DEFINE_GUID(IID_IMetaDataTables, 0xd8f579ab, 0x402d, 0x4b8e, 0x82,0xd9, 0x5d,0x63,0xb1,0x06,0x5c,0x68);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d8f579ab-402d-4b8e-82d9-5d63b1065c68")
IMetaDataTables : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetStringHeapSize(
        ULONG *pcbStrings) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetBlobHeapSize(
        ULONG *pcbBlobs) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetGuidHeapSize(
        ULONG *pcbGuids) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetUserStringHeapSize(
        ULONG *pcbUserStrings) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetNumTables(
        ULONG *pcTables) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetTableIndex(
        ULONG token,
        ULONG *pixTbl) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetTableInfo(
        ULONG ixTbl,
        ULONG *pcbRow,
        ULONG *pcRows,
        ULONG *pcCols,
        ULONG *piKey,
        LPCSTR *ppName) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetColumnInfo(
        ULONG ixTbl,
        ULONG ixCol,
        ULONG *poCol,
        ULONG *pcbCol,
        ULONG *pType,
        LPCSTR *ppName) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetCodedTokenInfo(
        ULONG ixCdTkn,
        ULONG *pcTokens,
        const ULONG **ppTokens,
        LPCSTR *ppName) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetRow(
        ULONG ixTbl,
        ULONG rid,
        const BYTE *ppRow) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetColumn(
        ULONG ixTbl,
        ULONG ixCol,
        ULONG rid,
        ULONG *pVal) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetString(
        ULONG ixString,
        LPCSTR *ppString) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetBlob(
        ULONG ixBlob,
        ULONG *pcbData,
        const BYTE **ppData) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetGuid(
        ULONG ixGuid,
        const GUID **ppGUID) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetUserString(
        ULONG ixUserString,
        ULONG *pcbData,
        const BYTE **ppData) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetNextString(
        ULONG ixString,
        ULONG *pNext) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetNextBlob(
        ULONG ixBlob,
        ULONG *pNext) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetNextGuid(
        ULONG ixGuid,
        ULONG *pNext) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetNextUserString(
        ULONG ixUserString,
        ULONG *pNext) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IMetaDataTables, 0xd8f579ab, 0x402d, 0x4b8e, 0x82,0xd9, 0x5d,0x63,0xb1,0x06,0x5c,0x68)
#endif
#else
typedef struct IMetaDataTablesVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IMetaDataTables *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IMetaDataTables *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IMetaDataTables *This);

    /*** IMetaDataTables methods ***/
    HRESULT (STDMETHODCALLTYPE *GetStringHeapSize)(
        IMetaDataTables *This,
        ULONG *pcbStrings);

    HRESULT (STDMETHODCALLTYPE *GetBlobHeapSize)(
        IMetaDataTables *This,
        ULONG *pcbBlobs);

    HRESULT (STDMETHODCALLTYPE *GetGuidHeapSize)(
        IMetaDataTables *This,
        ULONG *pcbGuids);

    HRESULT (STDMETHODCALLTYPE *GetUserStringHeapSize)(
        IMetaDataTables *This,
        ULONG *pcbUserStrings);

    HRESULT (STDMETHODCALLTYPE *GetNumTables)(
        IMetaDataTables *This,
        ULONG *pcTables);

    HRESULT (STDMETHODCALLTYPE *GetTableIndex)(
        IMetaDataTables *This,
        ULONG token,
        ULONG *pixTbl);

    HRESULT (STDMETHODCALLTYPE *GetTableInfo)(
        IMetaDataTables *This,
        ULONG ixTbl,
        ULONG *pcbRow,
        ULONG *pcRows,
        ULONG *pcCols,
        ULONG *piKey,
        LPCSTR *ppName);

    HRESULT (STDMETHODCALLTYPE *GetColumnInfo)(
        IMetaDataTables *This,
        ULONG ixTbl,
        ULONG ixCol,
        ULONG *poCol,
        ULONG *pcbCol,
        ULONG *pType,
        LPCSTR *ppName);

    HRESULT (STDMETHODCALLTYPE *GetCodedTokenInfo)(
        IMetaDataTables *This,
        ULONG ixCdTkn,
        ULONG *pcTokens,
        const ULONG **ppTokens,
        LPCSTR *ppName);

    HRESULT (STDMETHODCALLTYPE *GetRow)(
        IMetaDataTables *This,
        ULONG ixTbl,
        ULONG rid,
        const BYTE *ppRow);

    HRESULT (STDMETHODCALLTYPE *GetColumn)(
        IMetaDataTables *This,
        ULONG ixTbl,
        ULONG ixCol,
        ULONG rid,
        ULONG *pVal);

    HRESULT (STDMETHODCALLTYPE *GetString)(
        IMetaDataTables *This,
        ULONG ixString,
        LPCSTR *ppString);

    HRESULT (STDMETHODCALLTYPE *GetBlob)(
        IMetaDataTables *This,
        ULONG ixBlob,
        ULONG *pcbData,
        const BYTE **ppData);

    HRESULT (STDMETHODCALLTYPE *GetGuid)(
        IMetaDataTables *This,
        ULONG ixGuid,
        const GUID **ppGUID);

    HRESULT (STDMETHODCALLTYPE *GetUserString)(
        IMetaDataTables *This,
        ULONG ixUserString,
        ULONG *pcbData,
        const BYTE **ppData);

    HRESULT (STDMETHODCALLTYPE *GetNextString)(
        IMetaDataTables *This,
        ULONG ixString,
        ULONG *pNext);

    HRESULT (STDMETHODCALLTYPE *GetNextBlob)(
        IMetaDataTables *This,
        ULONG ixBlob,
        ULONG *pNext);

    HRESULT (STDMETHODCALLTYPE *GetNextGuid)(
        IMetaDataTables *This,
        ULONG ixGuid,
        ULONG *pNext);

    HRESULT (STDMETHODCALLTYPE *GetNextUserString)(
        IMetaDataTables *This,
        ULONG ixUserString,
        ULONG *pNext);

    END_INTERFACE
} IMetaDataTablesVtbl;

interface IMetaDataTables {
    CONST_VTBL IMetaDataTablesVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IMetaDataTables_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IMetaDataTables_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IMetaDataTables_Release(This) (This)->lpVtbl->Release(This)
/*** IMetaDataTables methods ***/
#define IMetaDataTables_GetStringHeapSize(This,pcbStrings) (This)->lpVtbl->GetStringHeapSize(This,pcbStrings)
#define IMetaDataTables_GetBlobHeapSize(This,pcbBlobs) (This)->lpVtbl->GetBlobHeapSize(This,pcbBlobs)
#define IMetaDataTables_GetGuidHeapSize(This,pcbGuids) (This)->lpVtbl->GetGuidHeapSize(This,pcbGuids)
#define IMetaDataTables_GetUserStringHeapSize(This,pcbUserStrings) (This)->lpVtbl->GetUserStringHeapSize(This,pcbUserStrings)
#define IMetaDataTables_GetNumTables(This,pcTables) (This)->lpVtbl->GetNumTables(This,pcTables)
#define IMetaDataTables_GetTableIndex(This,token,pixTbl) (This)->lpVtbl->GetTableIndex(This,token,pixTbl)
#define IMetaDataTables_GetTableInfo(This,ixTbl,pcbRow,pcRows,pcCols,piKey,ppName) (This)->lpVtbl->GetTableInfo(This,ixTbl,pcbRow,pcRows,pcCols,piKey,ppName)
#define IMetaDataTables_GetColumnInfo(This,ixTbl,ixCol,poCol,pcbCol,pType,ppName) (This)->lpVtbl->GetColumnInfo(This,ixTbl,ixCol,poCol,pcbCol,pType,ppName)
#define IMetaDataTables_GetCodedTokenInfo(This,ixCdTkn,pcTokens,ppTokens,ppName) (This)->lpVtbl->GetCodedTokenInfo(This,ixCdTkn,pcTokens,ppTokens,ppName)
#define IMetaDataTables_GetRow(This,ixTbl,rid,ppRow) (This)->lpVtbl->GetRow(This,ixTbl,rid,ppRow)
#define IMetaDataTables_GetColumn(This,ixTbl,ixCol,rid,pVal) (This)->lpVtbl->GetColumn(This,ixTbl,ixCol,rid,pVal)
#define IMetaDataTables_GetString(This,ixString,ppString) (This)->lpVtbl->GetString(This,ixString,ppString)
#define IMetaDataTables_GetBlob(This,ixBlob,pcbData,ppData) (This)->lpVtbl->GetBlob(This,ixBlob,pcbData,ppData)
#define IMetaDataTables_GetGuid(This,ixGuid,ppGUID) (This)->lpVtbl->GetGuid(This,ixGuid,ppGUID)
#define IMetaDataTables_GetUserString(This,ixUserString,pcbData,ppData) (This)->lpVtbl->GetUserString(This,ixUserString,pcbData,ppData)
#define IMetaDataTables_GetNextString(This,ixString,pNext) (This)->lpVtbl->GetNextString(This,ixString,pNext)
#define IMetaDataTables_GetNextBlob(This,ixBlob,pNext) (This)->lpVtbl->GetNextBlob(This,ixBlob,pNext)
#define IMetaDataTables_GetNextGuid(This,ixGuid,pNext) (This)->lpVtbl->GetNextGuid(This,ixGuid,pNext)
#define IMetaDataTables_GetNextUserString(This,ixUserString,pNext) (This)->lpVtbl->GetNextUserString(This,ixUserString,pNext)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IMetaDataTables_QueryInterface(IMetaDataTables* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IMetaDataTables_AddRef(IMetaDataTables* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IMetaDataTables_Release(IMetaDataTables* This) {
    return This->lpVtbl->Release(This);
}
/*** IMetaDataTables methods ***/
static FORCEINLINE HRESULT IMetaDataTables_GetStringHeapSize(IMetaDataTables* This,ULONG *pcbStrings) {
    return This->lpVtbl->GetStringHeapSize(This,pcbStrings);
}
static FORCEINLINE HRESULT IMetaDataTables_GetBlobHeapSize(IMetaDataTables* This,ULONG *pcbBlobs) {
    return This->lpVtbl->GetBlobHeapSize(This,pcbBlobs);
}
static FORCEINLINE HRESULT IMetaDataTables_GetGuidHeapSize(IMetaDataTables* This,ULONG *pcbGuids) {
    return This->lpVtbl->GetGuidHeapSize(This,pcbGuids);
}
static FORCEINLINE HRESULT IMetaDataTables_GetUserStringHeapSize(IMetaDataTables* This,ULONG *pcbUserStrings) {
    return This->lpVtbl->GetUserStringHeapSize(This,pcbUserStrings);
}
static FORCEINLINE HRESULT IMetaDataTables_GetNumTables(IMetaDataTables* This,ULONG *pcTables) {
    return This->lpVtbl->GetNumTables(This,pcTables);
}
static FORCEINLINE HRESULT IMetaDataTables_GetTableIndex(IMetaDataTables* This,ULONG token,ULONG *pixTbl) {
    return This->lpVtbl->GetTableIndex(This,token,pixTbl);
}
static FORCEINLINE HRESULT IMetaDataTables_GetTableInfo(IMetaDataTables* This,ULONG ixTbl,ULONG *pcbRow,ULONG *pcRows,ULONG *pcCols,ULONG *piKey,LPCSTR *ppName) {
    return This->lpVtbl->GetTableInfo(This,ixTbl,pcbRow,pcRows,pcCols,piKey,ppName);
}
static FORCEINLINE HRESULT IMetaDataTables_GetColumnInfo(IMetaDataTables* This,ULONG ixTbl,ULONG ixCol,ULONG *poCol,ULONG *pcbCol,ULONG *pType,LPCSTR *ppName) {
    return This->lpVtbl->GetColumnInfo(This,ixTbl,ixCol,poCol,pcbCol,pType,ppName);
}
static FORCEINLINE HRESULT IMetaDataTables_GetCodedTokenInfo(IMetaDataTables* This,ULONG ixCdTkn,ULONG *pcTokens,const ULONG **ppTokens,LPCSTR *ppName) {
    return This->lpVtbl->GetCodedTokenInfo(This,ixCdTkn,pcTokens,ppTokens,ppName);
}
static FORCEINLINE HRESULT IMetaDataTables_GetRow(IMetaDataTables* This,ULONG ixTbl,ULONG rid,const BYTE *ppRow) {
    return This->lpVtbl->GetRow(This,ixTbl,rid,ppRow);
}
static FORCEINLINE HRESULT IMetaDataTables_GetColumn(IMetaDataTables* This,ULONG ixTbl,ULONG ixCol,ULONG rid,ULONG *pVal) {
    return This->lpVtbl->GetColumn(This,ixTbl,ixCol,rid,pVal);
}
static FORCEINLINE HRESULT IMetaDataTables_GetString(IMetaDataTables* This,ULONG ixString,LPCSTR *ppString) {
    return This->lpVtbl->GetString(This,ixString,ppString);
}
static FORCEINLINE HRESULT IMetaDataTables_GetBlob(IMetaDataTables* This,ULONG ixBlob,ULONG *pcbData,const BYTE **ppData) {
    return This->lpVtbl->GetBlob(This,ixBlob,pcbData,ppData);
}
static FORCEINLINE HRESULT IMetaDataTables_GetGuid(IMetaDataTables* This,ULONG ixGuid,const GUID **ppGUID) {
    return This->lpVtbl->GetGuid(This,ixGuid,ppGUID);
}
static FORCEINLINE HRESULT IMetaDataTables_GetUserString(IMetaDataTables* This,ULONG ixUserString,ULONG *pcbData,const BYTE **ppData) {
    return This->lpVtbl->GetUserString(This,ixUserString,pcbData,ppData);
}
static FORCEINLINE HRESULT IMetaDataTables_GetNextString(IMetaDataTables* This,ULONG ixString,ULONG *pNext) {
    return This->lpVtbl->GetNextString(This,ixString,pNext);
}
static FORCEINLINE HRESULT IMetaDataTables_GetNextBlob(IMetaDataTables* This,ULONG ixBlob,ULONG *pNext) {
    return This->lpVtbl->GetNextBlob(This,ixBlob,pNext);
}
static FORCEINLINE HRESULT IMetaDataTables_GetNextGuid(IMetaDataTables* This,ULONG ixGuid,ULONG *pNext) {
    return This->lpVtbl->GetNextGuid(This,ixGuid,pNext);
}
static FORCEINLINE HRESULT IMetaDataTables_GetNextUserString(IMetaDataTables* This,ULONG ixUserString,ULONG *pNext) {
    return This->lpVtbl->GetNextUserString(This,ixUserString,pNext);
}
#endif
#endif

#endif


#endif  /* __IMetaDataTables_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IMetaDataTables2 interface
 */
#ifndef __IMetaDataTables2_INTERFACE_DEFINED__
#define __IMetaDataTables2_INTERFACE_DEFINED__

DEFINE_GUID(IID_IMetaDataTables2, 0xbadb5f70, 0x58da, 0x43a9, 0xa1,0xc6, 0xd7,0x48,0x19,0xf1,0x9b,0x15);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("badb5f70-58da-43a9-a1c6-d74819f19b15")
IMetaDataTables2 : public IMetaDataTables
{
    virtual HRESULT STDMETHODCALLTYPE GetMetaDataStorage(
        const BYTE **ppvMd,
        ULONG *pcbMd) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetMetaDataStreamInfo(
        ULONG ix,
        LPCSTR *ppchName,
        const BYTE **ppv,
        ULONG *pcb) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IMetaDataTables2, 0xbadb5f70, 0x58da, 0x43a9, 0xa1,0xc6, 0xd7,0x48,0x19,0xf1,0x9b,0x15)
#endif
#else
typedef struct IMetaDataTables2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IMetaDataTables2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IMetaDataTables2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IMetaDataTables2 *This);

    /*** IMetaDataTables methods ***/
    HRESULT (STDMETHODCALLTYPE *GetStringHeapSize)(
        IMetaDataTables2 *This,
        ULONG *pcbStrings);

    HRESULT (STDMETHODCALLTYPE *GetBlobHeapSize)(
        IMetaDataTables2 *This,
        ULONG *pcbBlobs);

    HRESULT (STDMETHODCALLTYPE *GetGuidHeapSize)(
        IMetaDataTables2 *This,
        ULONG *pcbGuids);

    HRESULT (STDMETHODCALLTYPE *GetUserStringHeapSize)(
        IMetaDataTables2 *This,
        ULONG *pcbUserStrings);

    HRESULT (STDMETHODCALLTYPE *GetNumTables)(
        IMetaDataTables2 *This,
        ULONG *pcTables);

    HRESULT (STDMETHODCALLTYPE *GetTableIndex)(
        IMetaDataTables2 *This,
        ULONG token,
        ULONG *pixTbl);

    HRESULT (STDMETHODCALLTYPE *GetTableInfo)(
        IMetaDataTables2 *This,
        ULONG ixTbl,
        ULONG *pcbRow,
        ULONG *pcRows,
        ULONG *pcCols,
        ULONG *piKey,
        LPCSTR *ppName);

    HRESULT (STDMETHODCALLTYPE *GetColumnInfo)(
        IMetaDataTables2 *This,
        ULONG ixTbl,
        ULONG ixCol,
        ULONG *poCol,
        ULONG *pcbCol,
        ULONG *pType,
        LPCSTR *ppName);

    HRESULT (STDMETHODCALLTYPE *GetCodedTokenInfo)(
        IMetaDataTables2 *This,
        ULONG ixCdTkn,
        ULONG *pcTokens,
        const ULONG **ppTokens,
        LPCSTR *ppName);

    HRESULT (STDMETHODCALLTYPE *GetRow)(
        IMetaDataTables2 *This,
        ULONG ixTbl,
        ULONG rid,
        const BYTE *ppRow);

    HRESULT (STDMETHODCALLTYPE *GetColumn)(
        IMetaDataTables2 *This,
        ULONG ixTbl,
        ULONG ixCol,
        ULONG rid,
        ULONG *pVal);

    HRESULT (STDMETHODCALLTYPE *GetString)(
        IMetaDataTables2 *This,
        ULONG ixString,
        LPCSTR *ppString);

    HRESULT (STDMETHODCALLTYPE *GetBlob)(
        IMetaDataTables2 *This,
        ULONG ixBlob,
        ULONG *pcbData,
        const BYTE **ppData);

    HRESULT (STDMETHODCALLTYPE *GetGuid)(
        IMetaDataTables2 *This,
        ULONG ixGuid,
        const GUID **ppGUID);

    HRESULT (STDMETHODCALLTYPE *GetUserString)(
        IMetaDataTables2 *This,
        ULONG ixUserString,
        ULONG *pcbData,
        const BYTE **ppData);

    HRESULT (STDMETHODCALLTYPE *GetNextString)(
        IMetaDataTables2 *This,
        ULONG ixString,
        ULONG *pNext);

    HRESULT (STDMETHODCALLTYPE *GetNextBlob)(
        IMetaDataTables2 *This,
        ULONG ixBlob,
        ULONG *pNext);

    HRESULT (STDMETHODCALLTYPE *GetNextGuid)(
        IMetaDataTables2 *This,
        ULONG ixGuid,
        ULONG *pNext);

    HRESULT (STDMETHODCALLTYPE *GetNextUserString)(
        IMetaDataTables2 *This,
        ULONG ixUserString,
        ULONG *pNext);

    /*** IMetaDataTables2 methods ***/
    HRESULT (STDMETHODCALLTYPE *GetMetaDataStorage)(
        IMetaDataTables2 *This,
        const BYTE **ppvMd,
        ULONG *pcbMd);

    HRESULT (STDMETHODCALLTYPE *GetMetaDataStreamInfo)(
        IMetaDataTables2 *This,
        ULONG ix,
        LPCSTR *ppchName,
        const BYTE **ppv,
        ULONG *pcb);

    END_INTERFACE
} IMetaDataTables2Vtbl;

interface IMetaDataTables2 {
    CONST_VTBL IMetaDataTables2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IMetaDataTables2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IMetaDataTables2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IMetaDataTables2_Release(This) (This)->lpVtbl->Release(This)
/*** IMetaDataTables methods ***/
#define IMetaDataTables2_GetStringHeapSize(This,pcbStrings) (This)->lpVtbl->GetStringHeapSize(This,pcbStrings)
#define IMetaDataTables2_GetBlobHeapSize(This,pcbBlobs) (This)->lpVtbl->GetBlobHeapSize(This,pcbBlobs)
#define IMetaDataTables2_GetGuidHeapSize(This,pcbGuids) (This)->lpVtbl->GetGuidHeapSize(This,pcbGuids)
#define IMetaDataTables2_GetUserStringHeapSize(This,pcbUserStrings) (This)->lpVtbl->GetUserStringHeapSize(This,pcbUserStrings)
#define IMetaDataTables2_GetNumTables(This,pcTables) (This)->lpVtbl->GetNumTables(This,pcTables)
#define IMetaDataTables2_GetTableIndex(This,token,pixTbl) (This)->lpVtbl->GetTableIndex(This,token,pixTbl)
#define IMetaDataTables2_GetTableInfo(This,ixTbl,pcbRow,pcRows,pcCols,piKey,ppName) (This)->lpVtbl->GetTableInfo(This,ixTbl,pcbRow,pcRows,pcCols,piKey,ppName)
#define IMetaDataTables2_GetColumnInfo(This,ixTbl,ixCol,poCol,pcbCol,pType,ppName) (This)->lpVtbl->GetColumnInfo(This,ixTbl,ixCol,poCol,pcbCol,pType,ppName)
#define IMetaDataTables2_GetCodedTokenInfo(This,ixCdTkn,pcTokens,ppTokens,ppName) (This)->lpVtbl->GetCodedTokenInfo(This,ixCdTkn,pcTokens,ppTokens,ppName)
#define IMetaDataTables2_GetRow(This,ixTbl,rid,ppRow) (This)->lpVtbl->GetRow(This,ixTbl,rid,ppRow)
#define IMetaDataTables2_GetColumn(This,ixTbl,ixCol,rid,pVal) (This)->lpVtbl->GetColumn(This,ixTbl,ixCol,rid,pVal)
#define IMetaDataTables2_GetString(This,ixString,ppString) (This)->lpVtbl->GetString(This,ixString,ppString)
#define IMetaDataTables2_GetBlob(This,ixBlob,pcbData,ppData) (This)->lpVtbl->GetBlob(This,ixBlob,pcbData,ppData)
#define IMetaDataTables2_GetGuid(This,ixGuid,ppGUID) (This)->lpVtbl->GetGuid(This,ixGuid,ppGUID)
#define IMetaDataTables2_GetUserString(This,ixUserString,pcbData,ppData) (This)->lpVtbl->GetUserString(This,ixUserString,pcbData,ppData)
#define IMetaDataTables2_GetNextString(This,ixString,pNext) (This)->lpVtbl->GetNextString(This,ixString,pNext)
#define IMetaDataTables2_GetNextBlob(This,ixBlob,pNext) (This)->lpVtbl->GetNextBlob(This,ixBlob,pNext)
#define IMetaDataTables2_GetNextGuid(This,ixGuid,pNext) (This)->lpVtbl->GetNextGuid(This,ixGuid,pNext)
#define IMetaDataTables2_GetNextUserString(This,ixUserString,pNext) (This)->lpVtbl->GetNextUserString(This,ixUserString,pNext)
/*** IMetaDataTables2 methods ***/
#define IMetaDataTables2_GetMetaDataStorage(This,ppvMd,pcbMd) (This)->lpVtbl->GetMetaDataStorage(This,ppvMd,pcbMd)
#define IMetaDataTables2_GetMetaDataStreamInfo(This,ix,ppchName,ppv,pcb) (This)->lpVtbl->GetMetaDataStreamInfo(This,ix,ppchName,ppv,pcb)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IMetaDataTables2_QueryInterface(IMetaDataTables2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IMetaDataTables2_AddRef(IMetaDataTables2* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IMetaDataTables2_Release(IMetaDataTables2* This) {
    return This->lpVtbl->Release(This);
}
/*** IMetaDataTables methods ***/
static FORCEINLINE HRESULT IMetaDataTables2_GetStringHeapSize(IMetaDataTables2* This,ULONG *pcbStrings) {
    return This->lpVtbl->GetStringHeapSize(This,pcbStrings);
}
static FORCEINLINE HRESULT IMetaDataTables2_GetBlobHeapSize(IMetaDataTables2* This,ULONG *pcbBlobs) {
    return This->lpVtbl->GetBlobHeapSize(This,pcbBlobs);
}
static FORCEINLINE HRESULT IMetaDataTables2_GetGuidHeapSize(IMetaDataTables2* This,ULONG *pcbGuids) {
    return This->lpVtbl->GetGuidHeapSize(This,pcbGuids);
}
static FORCEINLINE HRESULT IMetaDataTables2_GetUserStringHeapSize(IMetaDataTables2* This,ULONG *pcbUserStrings) {
    return This->lpVtbl->GetUserStringHeapSize(This,pcbUserStrings);
}
static FORCEINLINE HRESULT IMetaDataTables2_GetNumTables(IMetaDataTables2* This,ULONG *pcTables) {
    return This->lpVtbl->GetNumTables(This,pcTables);
}
static FORCEINLINE HRESULT IMetaDataTables2_GetTableIndex(IMetaDataTables2* This,ULONG token,ULONG *pixTbl) {
    return This->lpVtbl->GetTableIndex(This,token,pixTbl);
}
static FORCEINLINE HRESULT IMetaDataTables2_GetTableInfo(IMetaDataTables2* This,ULONG ixTbl,ULONG *pcbRow,ULONG *pcRows,ULONG *pcCols,ULONG *piKey,LPCSTR *ppName) {
    return This->lpVtbl->GetTableInfo(This,ixTbl,pcbRow,pcRows,pcCols,piKey,ppName);
}
static FORCEINLINE HRESULT IMetaDataTables2_GetColumnInfo(IMetaDataTables2* This,ULONG ixTbl,ULONG ixCol,ULONG *poCol,ULONG *pcbCol,ULONG *pType,LPCSTR *ppName) {
    return This->lpVtbl->GetColumnInfo(This,ixTbl,ixCol,poCol,pcbCol,pType,ppName);
}
static FORCEINLINE HRESULT IMetaDataTables2_GetCodedTokenInfo(IMetaDataTables2* This,ULONG ixCdTkn,ULONG *pcTokens,const ULONG **ppTokens,LPCSTR *ppName) {
    return This->lpVtbl->GetCodedTokenInfo(This,ixCdTkn,pcTokens,ppTokens,ppName);
}
static FORCEINLINE HRESULT IMetaDataTables2_GetRow(IMetaDataTables2* This,ULONG ixTbl,ULONG rid,const BYTE *ppRow) {
    return This->lpVtbl->GetRow(This,ixTbl,rid,ppRow);
}
static FORCEINLINE HRESULT IMetaDataTables2_GetColumn(IMetaDataTables2* This,ULONG ixTbl,ULONG ixCol,ULONG rid,ULONG *pVal) {
    return This->lpVtbl->GetColumn(This,ixTbl,ixCol,rid,pVal);
}
static FORCEINLINE HRESULT IMetaDataTables2_GetString(IMetaDataTables2* This,ULONG ixString,LPCSTR *ppString) {
    return This->lpVtbl->GetString(This,ixString,ppString);
}
static FORCEINLINE HRESULT IMetaDataTables2_GetBlob(IMetaDataTables2* This,ULONG ixBlob,ULONG *pcbData,const BYTE **ppData) {
    return This->lpVtbl->GetBlob(This,ixBlob,pcbData,ppData);
}
static FORCEINLINE HRESULT IMetaDataTables2_GetGuid(IMetaDataTables2* This,ULONG ixGuid,const GUID **ppGUID) {
    return This->lpVtbl->GetGuid(This,ixGuid,ppGUID);
}
static FORCEINLINE HRESULT IMetaDataTables2_GetUserString(IMetaDataTables2* This,ULONG ixUserString,ULONG *pcbData,const BYTE **ppData) {
    return This->lpVtbl->GetUserString(This,ixUserString,pcbData,ppData);
}
static FORCEINLINE HRESULT IMetaDataTables2_GetNextString(IMetaDataTables2* This,ULONG ixString,ULONG *pNext) {
    return This->lpVtbl->GetNextString(This,ixString,pNext);
}
static FORCEINLINE HRESULT IMetaDataTables2_GetNextBlob(IMetaDataTables2* This,ULONG ixBlob,ULONG *pNext) {
    return This->lpVtbl->GetNextBlob(This,ixBlob,pNext);
}
static FORCEINLINE HRESULT IMetaDataTables2_GetNextGuid(IMetaDataTables2* This,ULONG ixGuid,ULONG *pNext) {
    return This->lpVtbl->GetNextGuid(This,ixGuid,pNext);
}
static FORCEINLINE HRESULT IMetaDataTables2_GetNextUserString(IMetaDataTables2* This,ULONG ixUserString,ULONG *pNext) {
    return This->lpVtbl->GetNextUserString(This,ixUserString,pNext);
}
/*** IMetaDataTables2 methods ***/
static FORCEINLINE HRESULT IMetaDataTables2_GetMetaDataStorage(IMetaDataTables2* This,const BYTE **ppvMd,ULONG *pcbMd) {
    return This->lpVtbl->GetMetaDataStorage(This,ppvMd,pcbMd);
}
static FORCEINLINE HRESULT IMetaDataTables2_GetMetaDataStreamInfo(IMetaDataTables2* This,ULONG ix,LPCSTR *ppchName,const BYTE **ppv,ULONG *pcb) {
    return This->lpVtbl->GetMetaDataStreamInfo(This,ix,ppchName,ppv,pcb);
}
#endif
#endif

#endif


#endif  /* __IMetaDataTables2_INTERFACE_DEFINED__ */

#else

} /* extern "C" */
/* Include cor.h for C++ uses */
#include <cor.h>
#include <corhdr.h>
extern "C" {
#endif
/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __rometadataapi_h__ */
